/*//--------------------------------[MGMC.PWN]--------------------------------
                MALLU GAMERS MOBILE COMMUNITY ROLEPLAY RELOADED V3.3.0
				              (created by MAD EDITS).

				 Current Developer = Director of SA:MP Development:
	                               Mad Edits
	                               
 * Copyright (c) 2022, by MALLU GAMERS MOBILE COMMUNITY ROLEPLAY RELOADED
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are not permitted in any case.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 * THIS SCRIPT WORKS ON MOBILE AS WELL AS COMPUTER.
_______________________________________________________________________________________________________*/

#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 500
#define MAX_RADIOS  555

#define MAX_SLOTS 100

#pragma disablerecursion
#pragma warning disable 238

//THIS SCRIPT IS NOW BEING DEVELOPED BY MAD EDITS
//THE CREDITS WILL GO TO THEM AS THEY'VE WORKED HARD TO MAKE THIS IMPOSSIBLE
//SCRIPT INTO POSSIBLE ONE.																																	       */

//#define DEBUG
//#define DISCORD
//#define Christmas
//#define Halloween

#include <a_http>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <Pawn.CMD>
#include <mSelection>
#include <callbacks>
#include <SKY> // Alias Custom Damage
#include <selection> // New Selection Dialog
#include <tp> // Anti Teleport
#include <sampvoice>
#include <td-actions>
#include <dini>
#include <weapon-config> // Custom Damage
#include <progress2>
#include <discord-cmd>
#include <discord-connector>
#include <FCNPC>
#include <audio>
#include <textdraw-streamer>
//#include <center> // MsgBox Center
// --- Server Information --- //
#define SERVER_BOT       "MGMC:RP Bot"
#define VERSION          "v3.4"
#define REVISION         "MGMC:RP: "VERSION""
#define SERVER_NAME      "Mallu Gamers Mobile Community"
#define SERVER_DIALOG    "{EC7063}"SERVER_NAME" "WHITE""VERSION""
#define SERVER_URL       ""
#define SERVER_DISCORD   ""

#define SERVER_COLOR  0x0080ffff
#define SVRCLR       "{0080ff}"
#define TEAL		"{00AAAA}"
#define ORANGE       "{ffa500}"
#define SERVER_COLOR2 0xEC7063ff
#define SVRCLR2      "{EC7063}"

/*//test host
#if defined DEBUG
	#define MYSQL_HOSTNAME  "129.154.34.3"
	#define MYSQL_DATABASE  "s767_MADEDITS"
	#define MYSQL_USERNAME  "u767_lpOLg1GCy3"
	#define MYSQL_PASSWORD  "fW2F+Hy8==XCm1EDN8H6nV!0"
#else
	#define MYSQL_HOSTNAME  "129.154.34.3"
	#define MYSQL_DATABASE  "s767_MADEDITS"
	#define MYSQL_USERNAME  "u767_lpOLg1GCy3"
	#define MYSQL_PASSWORD  "fW2F+Hy8==XCm1EDN8H6nV!0"
#endif

*///main host
#if defined DEBUG
	#define MYSQL_HOSTNAME  "35.244.59.164"
	#define MYSQL_DATABASE  "s1_MGMC"
	#define MYSQL_USERNAME  "u1_Rg9LQzYBS6"
	#define MYSQL_PASSWORD  "73n6=VHqzdeL7tz9Y1!vi3Da"
#else
	#define MYSQL_HOSTNAME  "35.244.59.164"
	#define MYSQL_DATABASE  "s1_MGMC"
	#define MYSQL_USERNAME  "u1_Rg9LQzYBS6"
	#define MYSQL_PASSWORD  "73n6=VHqzdeL7tz9Y1!vi3Da"
#endif

//#define CONNECTION_MUSIC				"https://www.mboxdrive.com/INTROMGMC.mp3"
#define CONNECTION_MUSIC				"http://stream.zeno.fm/nkiyykvekgrvv"
#define CALLING_RING                    "https://www.mboxdrive.com/CALLRING.mp3"
#define SERVER_MUSIC_URL ""SERVER_URL"/music"
#define SERVER_FETCH_URL ""SERVER_URL"/music"

//Auto Refund
#define DIALOG_REFUND1 1891
#define DIALOG_REFUND2 1892
#define DIALOG_REFUND3 1893

//whitelist
#define DIALOG_WHITELIST 301
#define DIALOG_REMOVE   302

#define         MAP_RESCALE         2000.0

#define			RADAR_MAP_ZOFFSET			-0.6

static RadarBlipShown[MAX_PLAYERS];
static RadarBlip[MAX_PLAYERS];
static Text3D:Radar3DText[MAX_PLAYERS];

static          Float:MAP_OFF_X    =		0.0;
static          Float:MAP_OFF_Y    =       	0.0;
static          Float:MAP_OFF_Z    =       	0.0;
//discord whitelist
#define DISCORD_CMD_PREFIX '!'
#define DISCORD_ECHANNEL "987369125250760834"
#define isNull(%1) \
                ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))

// DISCORD
#define JOINLOG       "984892259776475136"
#define  CHATLOG       "984892276172029962"

#define TP        "1076524574868516885"
#define COMMANDS  "1076526925134172200"
#define Dccmd     "1077272228053389423"

// --- Function Shortcuts --- //
#define SCM 	SendClientMessage
#define SendInfoMessage(%0,%1)   SendClientMessageEx((%0), COLOR_WHITE, ""%1)
#define SCMA 	SendClientMessageToAll
#define SCMf 	SendClientMessageFormatted // SendClientMessage with string formats
#define SM 		SendMessage // SendClientMessage with string formats
#define SMA 	SendMessageToAll // SendClientMessageToAll with string formats
#define SAM 	SendAdminMessage // with string formats

// Model Selection
//#define MODEL_SELECTION_FURNITURE 2
#define MODEL_SELECTION_LANDOBJECTS 1
#define MODEL_SELECTION_CLOTHING    2
#define MODEL_SELECTION_CLOTHES     3

// Defines //
#define HOUSE_COLOR			0xB2FF8EFF
#define HOUSE				"{B2FF8E}"
#define BIZ_COLOR			0x84a9ffFF
#define BIZ					"{84a9ff}"

#define WHITE				"{FFFFFF}"
#define GREY				"{AFAFAF}"
#define RED					"{FF0000}"
#define GREEN				"{006400}"
#define YELLOW    			"{FFFF00}"
#define TWEET               "{0099ff}"
#define LIGHTRED     		"{FF6347}"

#define AUTO_MESSAGE_TIME 5 // Minutes

#define COLOR_DISPATCH 		0xff4419ff
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_SYNTAX        0xAFAFAFFF
#define COLOR_YELLOW    	0xFFFF00FF
#define COLOR_YELLOW2       0xF5DEB3FF
#define COLOR_LIGHTORANGE   0xF7A763FF
#define COLOR_AQUA        	0xCCFFFFFF
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_GREEN         0x32CD32FF
#define COLOR_GREY          0xAFAFAFFF
#define	COLOR_GREY1    		0xE6E6E6FF
#define COLOR_GREY2 		0xC8C8C8FF
#define COLOR_GREY3 		0xAAAAAAFF
#define COLOR_GREY4 		0x8C8C8CFF
#define COLOR_GREY5 		0x6E6E6EFF
#define COLOR_LIGHTRED      0xFF6347FF
#define COLOR_ORANGE        0xFF9900FF
#define COLOR_RED           0xAA3333FF
#define COLOR_RCRPOOC 		0x003d75FF
#define COLOR_HUNT          0xFF42CFFF
#define COLOR_PURPLE        0xC2A2DAFF
#define COLOR_NEWBIE        0x7DAEFFFF
#define COLOR_BLUE          0x233EFAFF
#define COLOR_ROYALBLUE     0x9999FFFF
#define COLOR_DOCTOR        0xFF8282FF
#define COLOR_DARKGREEN     0x00AA00FF
#define COLOR_VIP           0x6a86b5FF
#define COLOR_WALKIETALKIE  0xB2EBE0FF
#define COLOR_NAVYBLUE 		0x089DCEFF
#define COLOR_GLOBAL 		0xB8FFBCFF
#define COLOR_STATS         0xFFFF91AA
#define COLOR_LIGHTGREEN 	0x24FF0AB9
#define COLOR_ADMINCHAT     0xED6464FF
#define COLOR_FACTIONCHAT   0xBDF38BFF
#define COLOR_SAMP          0xA9C4E4FF
#define COLOR_GENERAL3		0x00D900C8
#define COLOR_TEAL 			0x00AAAAAA
#define COLOR_OFFWHITE 		0xF5DEB3AA
#define COLOR_DARKAQUA 		0x83BFBFAA
#define COLOR_REALRED       0xFF0000FF
#define COLOR_CYAN 			0x00C8FFFF
// ---------------------------------------
#define MAX_SZ 						20
#define MAX_LISTED_NUMBERS          50
#define MAX_LISTED_OBJECTS          100
#define MAX_LISTED_STATIONS         50
#define MAX_SPLIT_LENGTH            70
// ---------------------------------------
#define MAX_ATMS                    50
#define MAX_REPORTS         		50
#define MAX_HOUSES          		1500
#define MAX_CCTVS 					100
#define MAX_CCTVMENUS 				10  // This number should be MAX_CCTVS divided by 10
#define MAX_GARAGES         		1000
#define MAX_BUSINESSES      		200
#define MAX_ENTRANCES       		500
#define MAX_SPEED_CAMERAS           50
#define MAX_SPEEDCAM                50
#define MAX_GATES					200
#define MAX_MAPOBJECTS				1000
#define MAX_PLAYER_CLOTHING     	10
#define MAX_ANTICHEAT_WARNINGS   	5
#define MAX_FACTIONS                20
#define MAX_LOCKERS					100
#define MAX_FACTION_RANKS           20
#define MAX_FACTION_SKINS           15
#define MAX_FACTION_DIVISIONS       5
#define MAX_DEPLOYABLES             50
#define MAX_FIRES                   100
#define MAX_DAMAGES					100
#define MAX_LANDS                   30
#define MAX_GANGS                   20
#define MAX_GANG_SKINS              10
#define MAX_POINTS                  15
#define MAX_TURFS                   150
#define MAX_BANK_ROBBERS            10
#define MAX_JEWELLERY_ROBBERS       6
#define MAX_FLEECA_ROBBERS          6
#define MAX_GRAFFITI_POINTS         200
#define MAX_PGARAGE                 200
#define MAX_VALETDRIVERS            3
#define MAX_VENDORS                 50
#define MAX_DYNAMIC_ACTORS			100
// ---------------------------------------1
// ---------------------------------------
#define THREAD_LOOKUP_BANS          1
#define THREAD_LOOKUP_ACCOUNT    	2
#define THREAD_ACCOUNT_REGISTER     3
#define THREAD_PROCESS_LOGIN        4
#define THREAD_COUNT_FLAGS          5
#define THREAD_TRACE_IP             6
#define THREAD_LIST_CHANGES         8
#define THREAD_LIST_HELPERS         9
#define THREAD_LOAD_HOUSES          10
#define THREAD_LIST_TENANTS         11
#define THREAD_LOAD_FURNITURE       12
#define THREAD_LOAD_GARAGES         13
#define THREAD_LOAD_BUSINESSES      14
#define THREAD_LOAD_ENTRANCES       15
#define THREAD_LOAD_CLOTHING        16
#define THREAD_LOAD_FACTIONS        17
#define THREAD_LOAD_FACTIONRANKS    18
#define THREAD_LOAD_FACTIONSKINS    19
#define THREAD_LOAD_FACTIONPAY      20
#define THREAD_LOAD_DIVISIONS       21
#define THREAD_LOAD_LANDS           22
#define THREAD_LOAD_LANDOBJECTS     23
#define THREAD_LOAD_GANGS           24
#define THREAD_LOAD_GANGRANKS       25
#define THREAD_LOAD_GANGSKINS       26
#define THREAD_LOAD_POINTS          27
#define THREAD_LOAD_TURFS           28
#define THREAD_HOUSE_INFORMATION    29
#define THREAD_COUNT_FURNITURE      30
#define THREAD_SELL_FURNITURE       31
#define THREAD_CLEAR_FURNITURE      32
#define THREAD_COUNT_TEXTS          33
#define THREAD_VIEW_TEXTS           34
#define THREAD_LIST_VEHICLES        35
#define THREAD_FACTION_ROSTER       36
#define THREAD_GANG_ROSTER          37
#define THREAD_VIEW_PHONEBOOK       38
#define THREAD_COUNT_LANDOBJECTS    39
#define THREAD_SELL_LANDOBJECT      40
#define THREAD_DUPLICATE_LANDOBJECT 41
#define THREAD_DUPLICATED_OBJECT    42
#define THREAD_CLEAR_LANDOBJECTS    43
#define THREAD_LIST_LANDOBJECTS     44
#define THREAD_LAND_INFORMATION     45
#define THREAD_LOAD_VEHICLES        46
#define THREAD_GANG_INFORMATION     47
#define THREAD_OFFLINE_IP           48
#define THREAD_CHECK_REFERRAL       49
#define THREAD_REWARD_REFERRER      50
#define THREAD_LIST_FLAGGED         51
#define	THREAD_LOAD_ATMS            52
#define THREAD_LOAD_VENDORS         53
#define THREAD_LOAD_LOCKERS			54
#define THREAD_CAR_STORAGE          55
#define THREAD_LAND_MAINMENU        56
#define THREAD_LIST_ADMINS	        57
#define	THREAD_DMVRELEASE			58
#define THREAD_LOAD_PGARAGE         59
#define THREAD_VALE_STORAGE         60
#define THREAD_LOAD_ACTORS          61

#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
#define strcpy(%0,%1)   strcat(((%0[0] = 0), %0), %1)
#define percent(%0,%1)  floatround((float((%0)) / 100) * (%1))
#define Random(%0,%1)   (random((%1) - (%0)) + (%0))
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave

#define BODY_PART_TORSO         (3)
#define BODY_PART_GROIN         (4)
#define BODY_PART_RIGHT_ARM     (5)
#define BODY_PART_LEFT_ARM      (6)
#define BODY_PART_RIGHT_LEG     (7)
#define BODY_PART_LEFT_LEG      (8)
#define BODY_PART_HEAD          (9)

// Tune System
#define COLOR_LIGHTBLUE 0x91C8FF//Server text messages
#define COLOR_GROUPTALK 0x87CEEBAA  // SKYBLUE
#define COLOR_MENU 0xFFFFFFAA		// WHITE (FFFFFF) menu's (/help)
#define COLOR_SYSTEM_PM 0x66CC00AA	// LIGHT GREEN
#define COLOR_SYSTEM_PW 0xFFFF33AA	// YELLOW

new GiftAllowed;
new statusb;

// NOTICE TEXTDRAW - TIYO
new Text:NoticeTxtdraw[4];

new PowerSpec[MAX_PLAYERS];
new pCount, Switcher;
new DCC_Channel:Discord_EchoC;

new factionVehicle[MAX_VEHICLES];

// ROB JEWELRY
new Robyacht[MAX_PLAYERS];

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new SV_GSTREAM:gstream = SV_NULL;
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };
new SV_GSTREAM:factionstream[MAX_FACTIONS] = SV_NULL;
new SV_GSTREAM:gangstream[MAX_GANGS] = SV_NULL;
new SV_GSTREAM:callstream[MAX_PLAYERS] = SV_NULL;
new SV_GSTREAM:StreamFreq[MAX_RADIOS] = SV_NULL;
new IDStream[MAX_PLAYERS];

new Text:CasCade1;
new Text:CasCade2;
new Text:CasCade3;
new Text:CasCade4;

new PrioText[2500] = "~y~Priority_On_Hold";

//oldcar
new gLastCar[MAX_PLAYERS];

//tweeter
new TwitterTimer[MAX_PLAYERS];
new gTwitter[MAX_PLAYERS];

//facebook
new FacebookTimer[MAX_PLAYERS];
new gFacebook[MAX_PLAYERS];

/*
new Text:Textdraw;
new PlayerText:FPStext[2];
new LastDrunkLevel[MAX_PLAYERS] = 0;
new FPS2[MAX_PLAYERS] = 0;

forward UpdateFPS(playerid);
*/

//CameraInfo
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];  //CCTV LookAt
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS]; //CCTV Radius
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4]; //CCTV CameraPos
new CurrentCCTV[MAX_PLAYERS] = -1;

new Text:CRPTD;
new Text:CasCadeIntro[9];
new PlayerText:ShotsFired[MAX_PLAYERS][5];

//TextDraw
new Text:TD;
/*new Text:CasCadeTD[2];*/
/*Priority
new Text:PriorityTD1;
new Text:PriorityTD2;
new Text:PriorityTD3;
new Text:PriorityTD4;*/
// Selfie System
new takingselfie[MAX_PLAYERS];
new Float:Degree[MAX_PLAYERS];
const Float: Radius = 1.4; //do not edit this
const Float: Speed  = 1.25; //do not edit this
const Float: Height = 1.0; // do not edit this
new Float:TX[MAX_PLAYERS];
new Float:TY[MAX_PLAYERS];
new Float:TZ[MAX_PLAYERS];

//Menus:
new Menu:CCTVMenu[MAX_CCTVMENUS];
new MenuType[MAX_CCTVMENUS];
new TotalMenus;
new PlayerMenu[MAX_PLAYERS];
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior
}
new LastPos[MAX_PLAYERS][LP];
new KeyTimer[MAX_PLAYERS];
new VehicleObject[MAX_VEHICLES] = {-1, ...};
enum RADAROBJECTOFFSETS
{
	RadarMapObject,
	Float:RadarOffX,
	Float:RadarOffY,
	Float:RadarOffZ,
}

static MapPieces[8][RADAROBJECTOFFSETS];
enum pgEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject,
	aPickup,
	aMapIcon
};

new PGInfo[MAX_PGARAGE][pgEnum];

enum actEnum
{
	actor_ID,
	Text3D:actor_Label,
	actorID,
	actorExists,
	actorName[24],
	actorSkin,
	Float:actorX,
	Float:actorY,
	Float:actorZ,
	Float:actorA,
	actorVW
};
new ActorInfo[MAX_DYNAMIC_ACTORS][actEnum];


enum E_VALLET_DRIVER
{
	vDriverID,
	vUsed,
	vPlayerID,
	vVehicleID
};
new ValletDriver[MAX_VALETDRIVERS][E_VALLET_DRIVER];
new NPCDriverID[MAX_PLAYERS] = {-1, ...};

enum STREETVENDOR
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new VenInfo[MAX_VENDORS][STREETVENDOR];

// Discord Enum
enum dcInfo
{
    dcName[DCC_USERNAME_SIZE],
    dcTag[DCC_ID_SIZE],
    dcId[20 + 1],
    // GMX name need to store vars
    dcGMX,
    dcGMXName[32 + 1],
    //  Signcheck vars
    dcCode
};
new DiscordInfo[dcInfo];

//discord whitelist
enum
{
	DIAH_LOPYU //the dialogue
};
/*
new DCC_Channel:puasabro; //new channel dcc/ variable dcc channel nya
*/
main()
{
	DCC_FindChannelById("984892304835899392"); //Here you fill in your channel id, I'll give an example, because the channel I copied doesn't exist, so I'll just change it!
	#define whitelist   "984892304835899392"
}

/*
#if defined Christmas
	#else
		new CarolLyrics[MAX_PLAYERS] = 0;
#endif*/

new tsstring[2048], psstring[2048];
new PayCheckCode[MAX_PLAYERS];
new Sliding[MAX_PLAYERS];
//ANDROID
#define IsPlayerAndroid(%0)                 GetPVarInt(%0, "NotAndroid") == 0
#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define MAX_STATIC_OBJECTS 275
	new StaticObject[MAX_STATIC_OBJECTS];

// Tune system
static pvehicleid[MAX_PLAYERS];
static pmodelid[MAX_PLAYERS];
#define DIALOG_TYPE_MAIN 14400
#define DIALOG_TYPE_EXHAUSTS 14700
#define DIALOG_TYPE_FBUMPS 14800
#define DIALOG_TYPE_RBUMPS 14900
#define DIALOG_TYPE_ROOFS 15000
#define DIALOG_TYPE_SPOILERS 15100
#define DIALOG_TYPE_SIDESKIRTS 15200
#define DIALOG_TYPE_BULLBARS 15300
#define DIALOG_TYPE_WHEELS 15400
#define DIALOG_TYPE_CSTEREO 15500
#define DIALOG_TYPE_HYDRAULICS 15600
#define DIALOG_TYPE_NITRO 15700
#define DIALOG_TYPE_LIGHTS 15800
#define DIALOG_TYPE_HOODS 15900
#define DIALOG_TYPE_VENTS 16000

//BigBank
new BigBankMoney[MAX_PLAYERS];
new BIGBANK[] = {25000, 50000, 75000, 100000};

//RobFleecaBank
new Robfleecabank[MAX_PLAYERS];
new JEWROBMONEY[] = {100000, 110000, 120000, 130000};
new YATCHMONEY[] = {100000, 110000, 120000, 130000};
new AIRPLANEMONEY[] = {100000, 110000, 120000, 130000};
//Casino
new TraphouseMoney[MAX_PLAYERS];
new TRAPHOUSE[] = {100000, 110000, 120000, 130000};

// Fixed /RELOG CMD
new ReconnectIP[MAX_PLAYERS][32];
new bool: Reconnecting[MAX_PLAYERS];
#define MAX_IP_SIZE 32


new airplane;
new gScriptObject[MAX_OBJECTS char];

new zone_paintball[2], area_paintball[2];
new area_greenzone[4], zone_greenzone[4];
new pbNext;

new Border3;
new Border33;
new Border333;
new Border4;
new Border44;
new Border444;
new Border1;
new Border11;
new Border111;
new Border2;
new Border22;
new Border222;
new Border5;
new Border55;
new Border555;
new Border6;
new Border66;
new Border666;
new Border7;
new Border77;
new Border777;
new Border8;
new Border88;
new Border888;
new Border9;
new Border99;
new Border999;
new Border0;
new Border00;
new Border000;

new rope1;

//MEATCHOPPER JOB====================
forward TimerGiveHarvester(playerid);
forward TimerGiveHarvesterEx(playerid);
forward TimerGiveMeat(playerid);
forward TimerGiveMeatEx(playerid);
//===================================
forward TimerWashMoney(playerid);
forward TimerUseRepairkit(playerid);
forward RobFleecabank(playerid);
forward TimerLockpick(playerid);
forward Bandage(playerid);
forward EatingFood(playerid);
forward DrinkWater(playerid);
forward RobTraphouse(playerid);
forward RobBigbank(playerid);
//===================================
new
	startplant[MAX_PLAYERS],
	onplant[MAX_PLAYERS],
	prinesplant[MAX_PLAYERS],
	countplant[MAX_PLAYERS], inharvesterjob[MAX_PLAYERS],
	prinesplantEx[MAX_PLAYERS],
	countplantEx[MAX_PLAYERS],
	ExtraPlants[MAX_PLAYERS],
	harvesterskin[MAX_PLAYERS];
new skladplants;

new
	meatstartjob[MAX_PLAYERS],
	onmeat[MAX_PLAYERS],
	prinesmeat[MAX_PLAYERS],
	countmeat[MAX_PLAYERS],
	meatjob[MAX_PLAYERS],
	prinesmeatEx[MAX_PLAYERS],
	countmeatEx[MAX_PLAYERS],
	ExtraMeatall[MAX_PLAYERS],
	meatskin[MAX_PLAYERS];
new skladmeatall;
//===================================
// Speedo
new PlayerText:ModernPlayerText[MAX_PLAYERS][1];
new PlayerText:_vhudSeatBelt[MAX_PLAYERS];
new PlayerText:_vhudLights[MAX_PLAYERS];
new _vhudVisible[MAX_PLAYERS];

// MADEDITS TEXTDRAWS
new PlayerText:SpeedPlayerTD[MAX_PLAYERS][9];
new PlayerText:IdTD[MAX_PLAYERS][1];
new PlayerText:BlackmoneyTD[MAX_PLAYERS][1];
new PlayerText:PlayerstatTD[MAX_PLAYERS][1];
new PlayerText:AtmTD[MAX_PLAYERS][8];
new PlayerText:VehPanelTD[MAX_PLAYERS][16];
new PlayerText:RegistrationTD[MAX_PLAYERS][7];
new PlayerText:WarningTD[MAX_PLAYERS][6];
new PlayerText:ClotheTD[MAX_PLAYERS][7];
new PlayerText:TurfTD[MAX_PLAYERS][6];
new PlayerText:TurfKnockTD[MAX_PLAYERS][3];
new Text:TurfCountTD[8];
new Text:AnnounceTD[9];
new Text:PrioTD[2];

new CITYHALL;
new PAWNSHOP;
// Actor Job Represent
new ActorJob[14];
new BlackMarketActor;
new JewelryActor;

// Blood Effects
new Text:Blood[9];
new Timer[MAX_PLAYERS];
new bool:pBlood[MAX_PLAYERS] = {false,...};

// Tutorial
new InsideTut[MAX_PLAYERS];

// Login Textdraws
new PlayerText:PublicTD2[MAX_PLAYERS];
new Text:PublicTD[2];

// CallingTD
new Text:CallingTD[13];
new PlayerText:CallingPlayerTD[MAX_PLAYERS][5];
new Text:CloseCallTD;
new Text:PICKUP;
new Text:HANGUP;
// PHONE TEXTDRAWS
//new Text:PhoneTD[62];
new Text:messagetd;
new Text:contactstd;
new Text:banktd;
new Text:musictd;

//new PlayerText:HudHunger[MAX_PLAYERS][16];
new PlayerText:HungerTD[MAX_PLAYERS][16];

//bank//////////////
new PlayerText:BankReceiptTD[MAX_PLAYERS][8];
new PlayerText:BankTD1[MAX_PLAYERS][38];
new PlayerText:BankTD2[MAX_PLAYERS][8];

//NEW PHONE TEXTDRAW
    new Text:PhoneTD[33];
    new Text:PhoneCloseTD;
    new Text:MessageTD;
    new Text:ContactsTD;
    new Text:CallTD;
    new Text:TwitterTD;
    new Text:BankTD;
    new Text:AppTD;
    new Text:GpsTD;
    new Text:SettingTD;
    new Text:CameraTD;
    
//GROOT PHONE
new PlayerText:HOMESCREENTD[MAX_PLAYERS][74];

//GPAY TD PHONE
new PlayerText:playertextdraw_0[MAX_PLAYERS];
new PlayerText:playertextdraw_1[MAX_PLAYERS];
new PlayerText:playertextdraw_2[MAX_PLAYERS];
new PlayerText:playertextdraw_3[MAX_PLAYERS];
new PlayerText:playertextdraw_4[MAX_PLAYERS];
new PlayerText:playertextdraw_5[MAX_PLAYERS];
new PlayerText:playertextdraw_6[MAX_PLAYERS];
new PlayerText:playertextdraw_7[MAX_PLAYERS];
new PlayerText:playertextdraw_8[MAX_PLAYERS];
new PlayerText:playertextdraw_9[MAX_PLAYERS];
new PlayerText:playertextdraw_10[MAX_PLAYERS];
new PlayerText:playertextdraw_11[MAX_PLAYERS];
new PlayerText:playertextdraw_12[MAX_PLAYERS];
new PlayerText:playertextdraw_13[MAX_PLAYERS];
new PlayerText:playertextdraw_14[MAX_PLAYERS];
new PlayerText:playertextdraw_15[MAX_PLAYERS];
new PlayerText:playertextdraw_16[MAX_PLAYERS];
new PlayerText:playertextdraw_17[MAX_PLAYERS];
new PlayerText:playertextdraw_18[MAX_PLAYERS];
new PlayerText:playertextdraw_19[MAX_PLAYERS];
new PlayerText:playertextdraw_20[MAX_PLAYERS];
new PlayerText:playertextdraw_21[MAX_PLAYERS];
new PlayerText:playertextdraw_22[MAX_PLAYERS];
new PlayerText:playertextdraw_23[MAX_PLAYERS];
new PlayerText:playertextdraw_24[MAX_PLAYERS];
new PlayerText:playertextdraw_25[MAX_PLAYERS];
new PlayerText:playertextdraw_26[MAX_PLAYERS];
new PlayerText:playertextdraw_27[MAX_PLAYERS];
new PlayerText:playertextdraw_28[MAX_PLAYERS];
new PlayerText:playertextdraw_29[MAX_PLAYERS];
new PlayerText:playertextdraw_30[MAX_PLAYERS];
new PlayerText:playertextdraw_31[MAX_PLAYERS];
new PlayerText:playertextdraw_32[MAX_PLAYERS];
new PlayerText:playertextdraw_33[MAX_PLAYERS];
new PlayerText:playertextdraw_34[MAX_PLAYERS];
new PlayerText:playertextdraw_35[MAX_PLAYERS];


// Twitter App
new Text:TwitterApp[22];
new Text:addtexttd;

// Callsigns
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Label
new Text3D:PlayerLabel[MAX_PLAYERS];
new Text3D:InjuredLabel[MAX_PLAYERS];

// VIP Callsigns
new Text3D:DonatorCallSign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Car windows
new CarWindows[MAX_VEHICLES] = 0;


// Quiz System
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;
new tweet[128];

// Seatbelt
new ExBJck[MAX_PLAYERS];

// ELM Lights
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new FlashTimer;

// Mask System
new Maskara[MAX_PLAYERS];
new MaskaraID[MAX_PLAYERS] = 0;

// Blindfold
new pBlind[MAX_PLAYERS] = 1; // Jeckyy
new Text:Blind;

// Admin Fly
forward Float:SetPlayerToFacePos(playerid, Float:X, Float:Y);
new bool:flying[MAX_PLAYERS];

forward AdminFly(playerid);

// FirstPersonView
new firstperson[MAX_PLAYERS];

// Graffiti
enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D,
	sMapIcon
};
new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];

enum objectData {
	mobjID,
	mobjExists,
	mobjModel,
	Float:mobjPos[6],
	mobjInterior,
	mobjWorld,
	mobjname,
	Text3D:mobjname2,
	mobjObject
};
new ObjectData[MAX_MAPOBJECTS][objectData];


// Poll System
new PollVoted[MAX_PLAYERS];
new PollY;
new PollOn;
new PollN;

// PBounds
new pointboundaries[9];
new ShowingBounds[MAX_PLAYERS];

forward pollend(playerid);
public pollend(playerid)
{
	new string[128];
    format(string, sizeof(string), "The Poll has ended, "WHITE"%d{FF6347} people voted "WHITE"No{FF6347}, "WHITE"%d{FF6347} people voted "WHITE"Yes{FF6347}.", PollN, PollY);
    SCMA(COLOR_LIGHTRED, string);
    PollOn = 0;
	return 1;
}

// Enums //
ConvertSecond(time)
{
	new mes[9];

	if (time < 60) format(mes, sizeof(mes), "00:%02i", time);
	else if (time == 60) mes = "01:00";
	else if (time > 60 && time < 3600)
	{
		new Float: minutes = time / 60, seconds = time % 60;

		format(mes, sizeof(mes), "%02.0f:%02i", minutes, seconds);
	}
	else if (time == 3600) mes = "01:00:00";
	else if (time > 3600)
	{
		new Float: hours = time / 3600, minutes_int = time % 3600, Float: minutes = minutes_int / 60, seconds = minutes_int % 60;

		format(mes, sizeof(mes), "%02.0f:%02.0f:%02i", hours, minutes, seconds);
	}
	return mes;
}

Formattime(time)
{
    new string[50];

   if(3600 <= time <= 86399 && 1 <= time <= 3599)
   {
       format(string, sizeof(string), "%02d Hour(s) %02d Minute(s) %02d Second(s)", time / 3600, time / 60, time % 60);
   }

   return string;
}


FormatTime(time)
{
    new string[50];
    format(string, sizeof(string), "%02d:%02d",time / 60, time % 60);
    return string;
}

enum
{
	DIALOG_REGISTER = 1,
	DIALOG_CONFIRMPASS,
	DIALOG_CARSTORAGE,
	DIALOG_VALESTORAGE,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_SKIN,
	DIALOG_AGE,
	DIALOG_RENTCAR,
	DIALOG_REFERRAL,
	DIALOG_INTERIORS,
	DIALOG_BUYFURNITURE1,
	LotteryNumber,
	GatePass,
	DIALOG_LSPD,
    DIALOG_MEDIC,
	DIALOG_BLACKHOSPITAL,
	DIALOG_DMVRELEASE,
	DIALOG_BLACKMARKET1,
	DIALOG_BUYFURNITURE2,
	DIALOG_GRAFFITICOLOR,
	DIALOG_GRAFFITITEXT,
	DIALOG_VOICECHAT,
	DIALOG_RADIOCHAT,
	DIALOG_STREETFOOD,
	DIALOG_BUY,
	DIALOG_EDITBUY,
	DIALOG_EDITBUY2,
	DIALOG_BUYCLOTHES,
	DIALOG_PICKLOAD,
	DIALOG_UNREADTEXTS,
	DIALOG_DISCORD,
	DIALOG_ATM,
	DIALOG_WTRADIO,
	DIALOG_ATM_TRANSFER,
	DIALOG_ATM_TRANSFER2,
	DIALOG_ATMDEPOSIT,
	DIALOG_ATMWITHDRAW,
	DIALOG_CHANGEPASS,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_BUYCLOTHING,
	DIALOG_CLOTHING,
    DIALOG_EDITMOBILE,
	DIALOG_CPOSX,
	DIALOG_CPOSY,
	DIALOG_CPOSZ,
	DIALOG_CROTX,
	DIALOG_CROTY,
	DIALOG_CROTZ,
	DIALOG_CSCALEX,
	DIALOG_CSCALEY,
	DIALOG_CSCALEZ,
	DIALOG_KAYOPERIKO,
	DIALOG_CLOTHINGMENU,
	DIALOG_CLOTHINGEDIT,
	DIALOG_CLOTHINGBONE,
	DIALOG_BUYVEHICLE,
	DIALOG_BUYVEHICLE2,
 	DIALOG_BUYBOAT,
	DIALOG_BUYAIRCRAFT,
	DIALOG_SPAWNCAR,
    DIALOG_DESPAWNCAR,
    DIALOG_NONE,
    DIALOG_FINDCAR,
	DIALOG_BIZINTERIOR,
	DIALOG_FACTIONLOCKER,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_FACTIONSKINS,
	DIALOG_HITMANCLOTHES,
	DIALOG_MDC,
	DIALOG_MDCWANTED,
	DIALOG_MDCPLAYER1,
	DIALOG_MDCPLAYER2,
	DIALOG_MDCCHARGES,
	DIALOG_PLAYERLOOKUP,
	DIALOG_VEHICLELOOKUP1,
 	DIALOG_VEHICLELOOKUP2,
 	DIALOG_FACTIONPAY1,
 	DIALOG_FACTIONPAY2,
 	
 		// TURF WAR
	DIALOG_TURF,
	DIALOG_TURFID,
	DIALOG_TURFDFGANG,
	DIALOG_TURFATTGANG,

    DIALOG_PHONE,
	DIALOG_PHONE_CALL,
	DIALOG_PHONE_SMS,
	DIALOG_PHONE_SMS_TEXT,
	DIALOG_CONTACTS,
	DIALOG_CONTACTS_ADD,
	DIALOG_CONTACTS_NUMBER,
	DIALOG_CONTACTS_OPTIONS,

 	DIALOG_PHONEBOOK,
 	DIALOG_CREATEZONE,
 	DIALOG_KIOSK,
 	DIALOG_REFUNDED,
 	DIALOG_PAWNSHOP,
 	DIALOG_CONFIRMZONE,
 	DIALOG_LANDBUILD1,
 	DIALOG_LANDBUILD2,
 	DIALOG_LANDBUILDTYPE,
 	DIALOG_LANDMENU,
 	DIALOG_LANDEDITOBJECT,
 	DIALOG_LANDOBJECTMENU,
 	DIALOG_LANDOBJECTS,
 	DIALOG_LANDSELLALL,
 	DIALOG_LANDPERMS,
 	DIALOG_MP3PLAYER,
 	DIALOG_MP3MUSIC,
 	DIALOG_MP3RADIO,
 	DIALOG_MP3URL,
 	DIALOG_MP3RADIOGENRES,
 	DIALOG_MP3RADIOSUBGENRES,
 	DIALOG_MP3RADIORESULTS,
 	DIALOG_MP3RADIOSEARCH,
 	DIALOG_USECOOKIES,
 	DIALOG_GCLOTHES,
 	DIALOG_GANGSTASH,
 	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHWEAPONS2,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHAMMO1,
	DIALOG_GANGSTASHAMMO2,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
 	DIALOG_GANGDEPOSIT,
 	DIALOG_GANGWITHDRAW,
 	DIALOG_GANGSKINS,
 	DIALOG_GANGFINDCAR,
 	DIALOG_GANGPOINTSHOP,
 	DIALOG_GANGARMSDEALER,
 	DIALOG_GANGARMSWEAPONS,
 	DIALOG_GANGARMSAMMO,
 	DIALOG_GANGAMMOBUY,
 	DIALOG_GANGARMSEDIT,
 	DIALOG_GANGARMSPRICES,
 	DIALOG_GANGARMSPRICE,
 	DIALOG_GANGARMSDEPOSITMATS,
	DIALOG_GANGARMSWITHDRAWMATS,
	DIALOG_GANGAMMODEPOSITS,
	DIALOG_GANGAMMODEPOSIT,
	DIALOG_GANGAMMOWITHDRAWS,
	DIALOG_GANGAMMOWITHDRAW,
	DIALOG_GANGDRUGDEALER,
	DIALOG_GANGDRUGSHOP,
	DIALOG_GANGDRUGEDIT,
	DIALOG_GANGDRUGPRICES,
	DIALOG_GANGDRUGPRICE,
	DIALOG_GANGDRUGBUY,
	DIALOG_GANGDRUGDEPOSITS,
	DIALOG_GANGDRUGDEPOSIT,
	DIALOG_GANGDRUGWITHDRAWS,
	DIALOG_GANGDRUGWITHDRAW,
	DIALOG_REMOVEPVEH,
	DIALOG_FREENAMECHANGE,
    DIALOG_ADMINHELP,
    DIALOG_HELP,
 	DIALOG_BIZMENU,
	DIALOG_BIZNAME,
	DIALOG_BIZFEE,
	DIALOG_BIZSAFE,
	DIALOG_WITHDRAW,
	DIALOG_DEPOSIT,
	DIALOG_MESSAGE,
	DIALOG_BIZLOCK,
	DIALOG_POINTLIST,
	DIALOG_TURFLIST,
	DIALOG_NEWBWELCOME,
	DIALOG_PAYCHECK,
	DIALOG_TOP,
	DIALOG_RULES,
	DIALOG_PAINTBALL,
	DIALOG_LOCATE,
	DIALOG_LOCATELIST1,
	DIALOG_LOCATELIST2,
	DIALOG_LOCATELIST3,
	DIALOG_LOCATELISTC,
	DIALOG_LOCATETURFS,
	DIALOG_LOCATEPOINTS,
	DIALOG_LOCATEWASHMONEY,
	DIALOG_SIDEJOB,
	DIALOG_VIPLOCATION,
	/*#if defined Christmas
	#else
		DIALOG_CAROL,
	#endif*/
	DIALOG_CREATEQUIZ,
	DIALOG_DLOCKER,
	DIALOG_DGUN,
 	DIALOG_HARVEST1,
	DIALOG_HARVEST2,
	DIALOG_JOBINFO,
	DIALOG_TWEET,
	DIALOG_SETTINGS,
	DIALOG_INSTAGRAM,
	DIALOG_PHONEADVERTISE,
	DIALOG_LOCATEHOUSE

}

enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
 	STASH_CAPACITY_HPAMMO,
	STASH_CAPACITY_POISONAMMO,
	STASH_CAPACITY_FMJAMMO,
	STASH_CAPACITY_WEAPONS
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_AMMO,
 	E_OBJECT_FACTION,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z
};

enum
{
	E_OBJECT_FURNITURE,
	E_OBJECT_WEAPON,
	E_OBJECT_LAND
};

enum
{
	EDIT_FURNITURE_PREVIEW = 1,
	EDIT_OBJECT_PREVIEW,
	EDIT_FURNITURE,
	EDIT_CLOTHING_PREVIEW,
	EDIT_CLOTHING,
	EDIT_LAND_OBJECT_PREVIEW,
	EDIT_LAND_OBJECT,
	EDIT_LAND_GATE_MOVE
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE
};

enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_AGENCY,
 	BUSINESS_BARCLUB,
 	BUSINESS_PHARMACY,
};

enum
{
	ILLEGAL_GUNS,
	ILLEGAL_DRUGS,
	ILLEGAL_MATS
};
enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_HITMAN,
	FACTION_FEDERAL,
	FACTION_MECHANIC,
	FACTION_TERRORIST,
	FACTION_ARMY,
	FACTION_CARDEALER,
	FACTION_BURGER
};

enum
{
	JOB_NONE = -1,
	JOB_FOODPANDA,
	JOB_COURIER,
	JOB_FISHERMAN,
	JOB_BODYGUARD,
	JOB_ARMSDEALER,
	JOB_MINER,
	JOB_BUTCHER,
	JOB_TAXIDRIVER,
	JOB_DRUGDEALER,
	JOB_LAWYER,
	JOB_DETECTIVE,
	JOB_CONSTRUCTION,
    JOB_FORKLIFTER,
    JOB_NEWS,
    JOB_PRODUCTION
};

enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_FOODPANDA,
	CHECKPOINT_TEST,
	CHECKPOINT_MINING,
	CHECKPOINT_CONSTRUCTION,
	CHECKPOINT_BUTCHER,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_JEWROB,
	CHECKPOINT_ROBBERYBIZ,
	CHECKPOINT_ROBBERYHOUSE,
	CHECKPOINT_ROBBERYFLEECA,
	CHECKPOINT_ROBBERYAIRPLANE,
	CHECKPOINT_FORKLIFTER,
	CHECKPOINT_NEWS,
	CHECKPOINT_MISC
};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH,
	ITEM_HPAMMO,
	ITEM_BACKPACK,
	ITEM_POISONAMMO,
	ITEM_FMJAMMO
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
 	CAPACITY_HPAMMO,
	CAPACITY_POISONAMMO,
	CAPACITY_FMJAMMO
};

enum
{
	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
	POINT_MATPICKUP1,
	POINT_MATPICKUP2,
	POINT_MATFACTORY1,
	POINT_MATFACTORY2
};

enum
{
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_SAWNOFF,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_M4,
	GANGWEAPON_RIFLE,
	GANGWEAPON_SNIPER,
	GANGWEAPON_MOLOTOV
};

enum
{
	TAG_NORMAL,
	TAG_ADMIN,
	TAG_HELPER
};

enum
{
	AMMO_HP,
	AMMO_POISON,
	AMMO_FMJ
};

enum
{
	AMMOTYPE_NORMAL,
	AMMOTYPE_HP,
	AMMOTYPE_POISON,
	AMMOTYPE_FMJ
};

enum
{
	ZONETYPE_LAND = 1,
	ZONETYPE_TURF
};

enum
{
	HOSPITAL_COUNTY = 1,
	HOSPITAL_ALLSAINTS = 2,
	HOSPITAL_VIP = 3
};

enum pEnum
{
	PlayerText:pText[8],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pDiscordName[16],
	pDiscordTag[8],
	pVoiceChat,
	pFactionRadio,
	pGangRadio,
	pID,
	pLogged,
	pKicked,
	pLoginTries,
	pSetup,
	pGender,
	pAge,
	pSkin,
	pCarrying,
	pCarry,
	pPrRadio,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pCash,
	pConnectTime,
	pInsideRental,
	pBank,
	pOutfit,
	pTempSkin,
	pGTAV,
 	pPaycheck,
	pLevel,
	pJobStage,
	pJobTime,
	pAdvertWarnings,
	pEXP,
	pMinutes,
	pHours,
	pAdmin,
	pInfluenced,
	pJewRobbing,
	pFleecaRobbing,
	pHammer,
	pTool,
	pMarko,
	pJailBreak,
	pMarkoTimer,
	pDyuze,
	pDyuzeTimer,
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditGate,
	pEditmObject,
	pAdminName[MAX_PLAYER_NAME],
	pHelper,
	Float:pHealth,
	Float:pArmor,
	pUpgradePoints,
	pWarnings,
	pComserv,
	pInjured,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pProductChoose,
	pRobbingBiz,
	pRobbingFleeca,
	pHackedCctv,
	pAccent[16],
	pDirtyCash,
	pPhone,
	pJob,
	pSecondJob,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pPot,
	pCrack,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pWeaponClip,
	pBandage,
	pMedkit,
	pCigars,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pCourierSkill,
	pFishingSkill,
	pGuardSkill,
	pWeaponSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDetectiveSkill,
	pLow,
	pNormal,
	pShout,
	pTogLog,
	pToggleTextdraws,
	pToggleAtm,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pToggleWT,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleCam,
	pToggleHUD,
	pCarLicense,
	pWeaponLicense,
	//pWeaponLicenseTime,
	pDonator,
	pVIPPackage,
	pVIPTime,
	pVIPCooldown,
	pWeapons[13],
	pTempWeapons[13],
	pAmmo[13],
	pFaction,
	pFactionRank,
	pGang,
	pGangRank,
	pDivision,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pBleed,
	pBleedTimer,
	pNewbies,
	pHelpRequests,
	pSpeedometer, // (1) KM/H (2) MPH
	pFactionMod,
	pGangMod,
	pBanAppealer,
	pPotPlanted,
	pPotTime,
	pPotGrams,
	Float:pPotX,
	Float:pPotY,
	Float:pPotZ,
	Float:pPotA,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pLaborUpgrade,
	pHPAmmo,
	pPoisonAmmo,
	pFMJAmmo,
	pAmmoType,
	pAmmoWeapon,
	pDMWarnings,
	pWeaponRestricted,
	pReferralUID,
	pWatch,
	pPhoneSMS,
	pCallTimer,
	pCalling,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pClothes,
    pShowLands,
	pShowTurfs,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pCourierCooldown,
 	pPizzaCooldown,
 	pLazadaCooldown,
 	pNewsCooldown,
	pDeathCooldown,
	pPackageTime,
	pPackagingMeat,
	pDetectiveCooldown,
 	pGasCan,
 	pRope,
 	pRepairKit,
 	pBrokenLeg,
 	pCookFood,
 	pFood,
 	pDrink,
 	pReviveBot,
 	pNationalID,
 	pTotalPatients,
	pTotalFires,
 	pBlindfold,
	pLastReport,
	pLastDamage,
	pLastNewbie,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastRefuel,
	pLastRadar,
	pLastDrug,
	pLastDefend,
	pLastSell,
	pLastEnter,
	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastPizza,
	pLastNews,
	pLastLazada,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastClean,
	pSpectating,
 	pAdminDuty,
	pActiveReport,
	pHospitalTime,
	pHospitalType,
	pInsurance,
	pListen,
	pPMListen,
	pJoinedEvent,
	pPaintball,
	pPaintballTeam,
	pDueling,
	pEventTeam,
	pAwaitingClothing,
	pTutorial,
	pTutorialTimer,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pCarOffer,
	pCarOffered,
	pCARPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pFriskOffer,
	pCarryOffer,
	pTicketOffer,
	pTicketPrice,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pLandOffer,
	pLandOffered,
	pLandPrice,
	pSellOffer,
	pAllianceOffer,
	pSellType,
	pSellExtra,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pSendRob,
	pDiceBet,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pFurnitureIndex,
	pFurnitureHouse,
	pObjectLand,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pFactionEdit,
	pPrice,
	pFurniturePerms,
	pLandPerms,
	pPizzas,
	pPizzaTime,
	pNews,
    pNewsTime,
	Float:pDistance,
	pCP,
	pShipment,
	pIllegalCargo,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pMiningTime,
	pMiningRock,
	pConstructionTime,
	pConstruction,
	Text3D:pSpecialTag,
	pTagType,
	pVIPColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pMask,
	pSpeedTime,
	pBackup,
	pTazer,
	pTazedTime,
	pCuffed,
	pTied,
	pDraggedBy,
	pFirstAid,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced, // BOOMBOX
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX, // LAND CREATION
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	Float:plX,
	Float:plY,
	Float:plZ,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation, //
	pLandCost,
	pTurfType,
	pTurfName[32],
	pMenuType,
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pVehicleKeys,
	pCurrentWeapon,
	pCurrentAmmo,
 	pCurrentVehicle,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pACAmmo,
 	pArmorTime,
 	pPotObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro, // Server Intro
	pLottery,
	pLotteryB,
	pHunger,
	pHungerTimer,
	pThirst,
	pThirstTimer,

	Text3D:aMeID,
	aMeStatus,

 	pLoginCamera,
 	pSmuggleTime,
 	pDealerGang,
 	pPoisonTime,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pMechanicCall,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
	pHurt,
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pRemoveFrom,
 	pRefunded,
 	pToggleWhisper,
 	pBL,
	pBackpack,
	bpWearing,
	bpCash,
	bpMaterials,
	bpPot,
	bpCrack,
	bpMeth,
	bpPainkillers,
	bpWeapons[15],
	bpHPAmmo,
	bpPoisonAmmo,
	bpFMJAmmo,
	pPMFrom,
	pTogglePM,
	pAcceptedEMS,
	pDiamonds,
	pEcoin,
    pFormerAdmin,
    pCustomTitle[64],
	pCustomTColor,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pRareTime,
	pVipTimes,
	pEngine,
	pChatAnim, // - newvars
	pToolkit,
	pLockpick,
	pRobbingHouse,

	/*#if defined Christmas
	#else
		pLastCarolTime,
		pLastHouseCarol,
		pCandy,
	#endif*/

	pDeathActor,
	Text3D:pDeathInfo,

	pFlashlight,
	pUsedFlashlight
};

enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};

enum infEnum
{
   iEnabled,
   iGangid,
   iTime,
   iStart,
   iTurf,
   iDefGang,
   iAttGang,
   iDefGangMembers,
   iAttGangMembers
};

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext
};

/*enum jEnum
{
	jRobbing,
	rTime,
	jObjects,
	jRobbers[MAX_JEWELLERY_ROBBERS],
	jRobStarted,
	jPlanning,
	jDoorLock
};
new JewInfo[jEnum];

enum flEnum
{
	fRobbing,
	rTime,
	fObjects,
	fRobbers[MAX_FLEECA_ROBBERS],
	fRobStarted,
	fPlanning,
	fDoorLock
};
new FleecaInfo[flEnum];
*/

enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5],
	jRobbing,
	jObjects,
	jRobbers[MAX_JEWELLERY_ROBBERS],
	jRobStarted,
	jPlanning,
	jDoorLock,
	fObjects,
	fRobbers[MAX_FLEECA_ROBBERS],
	fRobStarted,
	fRobbing,
	fPlanning,
	fDoorLock
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum e_Damages
{
	Float:damageTaken,
	damageWeapon,
	damageBodypart,
	damageArmor,
	damageTime,
	damageBy[90],
}

enum hEnum
{
	hExists,
	hID,
	hMapIcon,
	hOwnerID,
	hOwner[MAX_PLAYER_NAME],
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hPot,
	hCrack,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hHPAmmo,
	hPoisonAmmo,
	hFMJAmmo,
	hLabels,
	hPickup,
	hRobbing,
	hRobbed,
	Text3D:hText
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};
enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bOwner[MAX_PLAYER_NAME],
	bName[56],
	bMessage[128],
	bType,
	bPrice,
	bEntryFee,
	bLocked,
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bPickup,
	bPrices[25],
	bMapIcon,
	bRobbed,
	bRobbing,
	Text3D:bText
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	ePickup,
 	eMapIconID,
 	eMapIcon,
	Text3D:eText,
	eColor
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex
};
enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vTickets,
	vLocked,
	vPlate[32],
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vMods[14],
	vCash,
	vMaterials,
	vPot,
	vCrack,
	vMeth,
	vPainkillers,
	vWeapons[3],
	vHPAmmo,
	vPoisonAmmo,
	vFMJAmmo,
	vGang,
	vFactionType,
	vJob,
	vRespawnDelay,
	vObjects[2],
	vTimer,
	vRegistered,
	vMeal,
	vValet
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	Float:fLockerX,
	Float:fLockerY,
	Float:fLockerZ,
	fLockerInterior,
	fLockerWorld,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum lEnum
{
	lExists,
	lID,
	lOwnerID,
	lOwner[MAX_PLAYER_NAME],
	lPrice,
	Float:lMinX,
	Float:lMinY,
	Float:lMaxX,
	Float:lMaxY,
	Float:lHeight,
	Float:lX,
	Float:lY,
	Float:lZ,
	lGangZone,
	lArea,
	lLabels,
 	Text3D:lText,
	lPickup
};

enum lkEnum
{
	lID,
	lExists,
	lFaction,
	Float:lPosX,
	Float:lPosY,
	Float:lPosZ,
	lInterior,
	lWorld,
	lLabel,
	lIcon,
	locKevlar[2],
    locMedKit[2],
    locNitestick[2],
    locMace[2],
    locDeagle[2],
    locShotgun[2],
    locMP5[2],
    locM4[2],
    locSniper[2],
    locCamera[2],
    locFireExt[2],
    locPainKillers[2],
	Text3D:lText,
	lPickup
};

enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gPot,
	gCrack,
	gMeth,
	gPainkillers,
	gHPAmmo,
	gPoisonAmmo,
	gFMJAmmo,
	gSkins[MAX_GANG_SKINS],
	gWeapons[14],
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugPot,
	gDrugCrack,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	gArmsHPAmmo,
	gArmsPoisonAmmo,
	gArmsFMJAmmo,
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup
};

enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer
};

// ---------------------------------------
new DoubleSalary;
new connectionID;
new radioConnectionID;
new queryBuffer[1024];

/*#if defined Christmas
	#else
	new PlayerText:EventTextdraw[MAX_PLAYERS];
#endif*/

/*new PlayerText:PlayerStatsTD[MAX_PLAYERS];*/
new PlayerText:PortableRadioTD[MAX_PLAYERS][5];

new Text:TimeTD;
//new Text:WebsiteTD;
new Text:ANN[3];
new Text:UnknownTD[4];
new PlayerText:SHOWID[MAX_PLAYERS][14];
// Capture Limit
new MaxCapCount[2] = {  2 , 1 };

new enabledpurge = 0;
new enabledOOC;
new enabledNewbie = 1;
new enabledVip = 1;
new enabledGlobal = 1;
new enabledAdmin = 1;
new enabledReports = 1;
new pizzaVehicles[6];
new forkliftVehicles[6];
new NewsVehicles[6];
new towtruck[3];
new policevehicles[2];
new courierVehicles[10];
new taxiVehicles[4];
new testVehicles[9];
new adminMOTD[128], helperMOTD[128];
new gHour = 0, gWorldTime, gWeather = 13;
new gCharity, gCharityHealth, gCharityArmor;
new gPlayerRecord, gRecordDate[24], gServerMOTD[128], gTax, gVault, gAnticheatBans;
new gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours;
new gDoubleXP, gDisabledVPN = 1;
new gDoubleSalary;
new gLastAd;
new gListedItems[MAX_PLAYERS][100], gTargetName[MAX_PLAYERS][MAX_PLAYER_NAME];
new gGMX;
new gLastSave;
new gLastFix;
new gAnticheat = 1;
new gParachutes[2];
new gSeedsStock = 500, gCrackStock = 500, gEphedrineStock = 500;
new Text3D:gSeedsStockText, Text3D:gCrackText , Text3D:gEphedrineStockText;
new gPrisonCells[24];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];

new EventInfo[eventEnum];
new InfluenceInfo[infEnum];
new RobberyInfo[robberyEnum];
new totalDamages[MAX_PLAYERS];
new DamageData[MAX_PLAYERS][MAX_DAMAGES][e_Damages];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new PlayerInfo[MAX_PLAYERS+1][pEnum];
new ReportInfo[MAX_REPORTS][rEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new LockerInfo[MAX_LOCKERS][lkEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new LandInfo[MAX_LANDS][lEnum];
new GangInfo[MAX_GANGS][gaEnum];
new GangRanks[MAX_FACTIONS][7][32];
new PointInfo[MAX_POINTS][ptEnum];
new TurfInfo[MAX_TURFS][tEnum];

new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new vehicleSiren[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];

// ---------------------------------------
new const g_MaleSkins[184] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new const g_FemaleSkins[77] = {
	9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69, 75, 76, 77, 85, 88,
	89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141, 145, 148, 150, 151, 152, 157, 169, 178,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219,
	224, 225, 226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263, 298
};

new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};

new const clothesShopSkins[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311
};

enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{ // 1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
    {"Apartment",    8000,   1,  244.1997, 305.0676, 999.1484, 270.2194},
	{"Apartment", 	 8000,   2,  1434.0806, -1832.7854, 1313.5573, 270.0000},
	{"Apartment", 	 12000,   10, 2259.7649, -1135.8751, 1050.6328, 270.0000},
	{"Apartment", 	 12000,   8,  2008.8319, -1698.8461, 1165.7001, 90.0000},
	{"Apartment", 	 15000,  5,  2233.6501, -1114.7767, 1050.8828, 0.0000},
	{"Apartment", 	 15000,  1,  2217.9814, -1076.2471, 1050.4844, 90.0000}, //1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
	{"Low Class", 	 800000,  9,  1178.3398, -419.0833, 1234.7045, 180.0000}, //7-9 Low Class
	{"Low Class", 	 820000,  3,  828.6323, -1014.0038, 799.9664, 270.0000},
	{"Low Class", 	 850000,  5,  1320.1091, -167.6174, 1088.0741, 90.0000},
	{"Medium Class", 1200000,  3,  1363.7614, -2145.6965, 1050.5886, 0.0000}, //10-12 Med Class
	{"Medium Class", 1400000,  5,  2654.4524, -1023.7827, 929.9266, 180.0000},
	{"Medium Class", 1600000,  11, 2184.1011, -1130.3905, 1128.7655, 270.0000},
	{"Upper Class",  2100000,  10, 2269.9143, -1210.5028, 1047.5625, 90.0000}, //13-16 Upper
	{"Upper Class",  2300000,  6,  1749.6356, -1822.4457, 1000.3405, 0.0000}, // 17-19
	{"Upper Class",  2500000,  12, 2324.3862, -1148.8784, 1050.7101, 0.0000}, // 20
	{"Upper Class",  2800000,  4,  1282.0646, -1140.2067, 980.0524, 0.0000},
	{"Mansion", 	 10000000,  1,  1834.2408, -1278.7684, 832.1602, 180.0000},
	{"Mansion", 	 12000000, 7,  925.0102, -496.8101, 843.8953, 90.0000},
	{"Mansion",      14000000, 5,  1298.8682, -796.2053, 1084.0078, 0.0000},
	{"Special Class",21000000, 0, 0.0, 0.0, 0.0, 0.0}
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	100000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Medium", 	125000,  2,  1520.6278, -1639.7173, 1374.5045, 180.0000,  1514.9481, -1644.1083, 1374.3365, 180.0000},
	{"Large", 	250000,  3,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriors[][bizInt] =
{
    {"7/11", 		  			10000000, 6, -27.4377, -57.6114, 1003.5469, 0.0000},
	{"Ammunation",    		    12000000, 6,  316.2873, -169.6470, 999.6010, 0.0000},
	{"Clothing Line",    	  	10000000, 14, 204.3860, -168.4586, 1000.5234, 0.0000},
	{"Gym",         		    3000000, 7,  773.7802, -78.2581, 1000.6619, 0.0000},
	{"Resturant",  		  		10000000, 10, 363.3276, -74.6505, 1001.5078, 315.0000},
	{"Advertisement Agency",  	5000000, 3,  834.1517, 7.4096, 1004.1870, 90.0000},
	{"Club/Bar",              	8000000, 11, 501.8694, -68.0046, 998.7578, 179.6117},
	{"Pharmacy", 		  		10000000, 10, 6.0159, -31.0345, 1003.5493, 0.0000}
};

enum furnitureEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};

new const furnitureCategories[][] =
{
	{"Appliances"},
	{"Bathroom"},
	{"Bedroom"},
	{"CARPets"},
	{"Kitchen"},
	{"Tables"},
	{"Chairs"},
	{"Posters/Frames"},
	{"Storage"},
	{"Plants"},
	{"Trash"},
	{"Doors & Gates"},
	{"Walls"},
	{"Decor"},
	{"Weapons"}
};

new const furnitureArray[][furnitureEnum] =
{
	{"Appliances", 		"Blender", 					 19830,  1500},
	{"Appliances", 		"Coffee machine",            11743,  1500},
	{"Appliances", 		"Grill",     				 19831,  1500},
	{"Appliances", 		"Electrical outlet", 		 19813,  150},
	{"Appliances", 		"Light switch",      		 19829,  150},
	{"Appliances", 		"Keyboard",          		 19808,  150},
	{"Appliances", 		"White telephone",   		 19807,  150},
	{"Appliances", 		"Black telephone",   		 11705,  150},
	{"Appliances", 		"Large LCD television",  	 19786,  11000},
    {"Appliances", 		"Small LCD television",  	 19787,  1750},
    {"Appliances", 		"Round gold TV", 			 2224,   11500},
    {"Appliances", 		"TV on wheels",  			 14532,  1250},
    {"Appliances", 		"Flat screen TV",        	 1792,   1400},
    {"Appliances",      "Wide screen TV",        	 1786,   1400},
    {"Appliances",      "Surveillance TV",       	 1749,   1400},
    {"Appliances",      "Regular TV",            	 1518,   1250},
    {"Appliances",      "Grey sided TV",         	 2322,   1200},
    {"Appliances",      "Wood sided TV",         	 1429,   1200},
    {"Appliances",      "Microwave",             	 2149,   1100},
    {"Appliances",      "Pizza rack",            	 2453,   150},
    {"Appliances",      "Wide sprunk fridge",  		 2452,   1100},
    {"Appliances",      "Small sprunk fridge",   	 2533,   150},
    {"Appliances",      "Duality game",        		 2779,   1500},
    {"Appliances",      "Bee Bee Gone game",   		 2778,   1500},
    {"Appliances",      "Space Monkeys game",    	 2681,   1500},
    {"Appliances",      "Sprunk machine",        	 1775,   11000},
    {"Appliances",      "Candy machine",         	 1776,   11000},
    {"Appliances",      "Water machine",         	 1808,   1100},
    {"Appliances",      "Radiator",              	 1738,   150},
    {"Appliances",      "Metal fridge",          	 1780,   1100},
    {"Appliances",      "Pizza cooker",         	 2426,   150},
    {"Appliances",      "Deep fryer",            	 2415,   1100},
    {"Appliances",      "Soda dispenser",        	 2427,   1100},
    {"Appliances",      "Aluminum stove",        	 2417,   1100},
    {"Appliances",      "Lamp",                  	 2105,   150},
    {"Appliances",      "Diagnostic machine",    	 19903,  14000},
    {"Appliances",      "VHS player",            	 1785,   1200},
    {"Appliances",      "Playstation console",   	 2028,   1500},
    {"Appliances",      "Retro gaming console",  	 1718,   1500},
    {"Appliances",      "Hi-Fi speaker",         	 1839,   1250},
    {"Appliances",      "Black subwoofer",       	 2232,   1250},
    {"Appliances",      "Subwoofer",             	 1840,   1250},
    {"Appliances",      "Small black speaker",   	 2229,   1250},
    {"Appliances",      "Speaker on a stand",    	 2233,   1100},
    {"Appliances",      "Speaker & stereo system",   2099,   1500},
	{"Appliances",      "Surveillance camera",   	 1886,   150},
	{"Appliances",      "Security camera",       	 1622,   150},
	{"Appliances",      "Exercise bike",         	 2630,   1500},
	{"Appliances",      "Treadmill",             	 2627,   1500},
	{"Appliances",      "Lift bench",            	 2629,   1250},
    {"Appliances",		"Pull up machine",       	 2628,   1500},
    {"Appliances", 		"White turntable",           1954,   1500},
    {"Appliances",      "Open laptop",               19893,  11000},
    {"Appliances",      "Closed laptop",             19894,  1500},
    {"Appliances",  	"Drum Kit",      			 19609,  11000},
    {"Appliances",  	"Microphone",          		 19610,  1500},
    {"Appliances",  	"Microphone Stand",    	 	 19611,  1250},
    {"Appliances",  	"Guitar amp 1",           	 19612,  1500},
    {"Appliances",  	"Guitar amp 2",         	 19613,  1500},
    {"Appliances",  	"Guitar amp 3",       		 19614,  1500},
    {"Appliances",  	"Guitar amp 4",       		 19615,  1500},
    {"Appliances",  	"Guitar amp 5",       		 19616,  1500},
    {"Bathroom",   		"Toilet",                	 2514,   1250},
    {"Bathroom",   		"Bathtub",               	 2519,   1500},
    {"Bathroom",   		"Toilet paper",          	 19873,  150},
    {"Bathroom",        "Towel rack",                11707,  1100},
    {"Bathroom",   		"Toilet with rug",       	 2528,   1500},
	{"Bathroom",   		"Toilet with rolls",     	 2525,   1500},
	{"Bathroom",   		"Sink top",              	 2515,   1100},
	{"Bathroom",   		"Dual sink top",         	 2150,   1200},
	{"Bathroom",   		"Wood sided bathtub",    	 2526,   1500},
	{"Bathroom",   		"Sprunk bathtub",        	 2097,   11000},
	{"Bathroom",  		"Shower curtains",       	 14481,  1100},
	{"Bathroom",   		"Metal shower cabin",    	 2520,   1500},
	{"Bathroom",   		"Glass shower cabin",    	 2517,   1500},
	{"Bathroom",   		"Shower with curtains",  	 2527,   1500},
	{"Bathroom",   		"Wall sink",             	 2518,   1250},
	{"Bathroom",   		"Plain sink",            	 2739,   1250},
	{"Bathroom",   		"Sink with extra soap",  	 2524,   1250},
	{"Bathroom",   		"Sink with rug",         	 2523,   1250},
	{"Bathroom",   		"Industrial sink",       	 11709,  1500},
	{"Bedroom",    		"Prison bed",            	 1800,   1100},
	{"Bedroom",   		"Folding bed",           	 1812,   1100},
	{"Bedroom",    		"Red double bed",        	 11720,  1500},
	{"Bedroom",    		"Wood double bed",       	 14866,  1500},
	{"Bedroom",   	 	"Double plaid bed",      	 1794,   1500},
	{"Bedroom",    		"Brown bed",        		 2299,   1500},
	{"Bedroom",    		"Blue striped bed", 		 2302,   1500},
	{"Bedroom",    		"Dark blue striped bed", 	 2298,   1500},
	{"Bedroom",    		"White striped bed",     	 2090,   1500},
	{"Bedroom",    		"Bed with cabinet",      	 2300,   1500},
	{"Bedroom",    		"Pink & blue striped bed", 	 2301,   1500},
	{"Bedroom",    		"Zebra print bed",       	 14446,  1500},
	{"Bedroom",    		"Low striped bed",  		 1795,   1500},
	{"Bedroom",    		"Low dark striped bed",      1798,   1500},
	{"Bedroom",    		"Single plaid bed",      	 1796,   1500},
	{"Bedroom",    		"Plain striped mattress",    1793,   1500},
	{"Bedroom",    		"Silk sheeted bed",          1701,   1500},
	{"Bedroom",    		"Framed striped bed",        1801,   1500},
	{"Bedroom",    		"Framed brown bed",          1802,   1500},
	{"Bedroom",    		"Wooden cabinet",            2330,   1250},
	{"Bedroom",    		"Cabinet with TV",           2296,   1500},
	{"Bedroom",    		"Dresser",               	 1416,   1250},
	{"Bedroom",    		"Small dresser",             2095,   1250},
	{"Bedroom",    		"Medium dresser",            1743,   1250},
	{"Bedroom",    		"Wide dresser",              2087,   1250},
	{"Bedroom",    		"Small wardrobe",            2307,   1250},
	{"Bedroom",    		"Huge open wardrobe",        14556,  1500},
	{"Bedroom",    		"Busted cabinet",            913,    1500},
	{"Bedroom",    		"Busted dresser",            911,    1250},
	{"Bedroom",    		"Dresser with no drawers",   912,    1100},
	{"CARPets",    		"Rockstar cARPet",           11737,  1250},
    {"CARPets",    		"Plain red cARPet",          2631,   1250},
    {"CARPets",    		"Plain green cARPet",        2632,   1250},
    {"CARPets",    		"Patterned cARPet",          2842,   1250},
    {"CARPets",    		"Zig-zag patterned cARPet",  2836,   1250},
    {"CARPets",    		"Brown red striped cARPet",  2847,   1250},
    {"CARPets",    		"Old timer's cARPet",        2833,   1250},
    {"CARPets",    		"Red checkered cARPet",      2818,   1250},
    {"CARPets",    		"Green circled cARPet",      2817,   1250},
    {"CARPets",    		"Plain polkadot cARPet",     2834,   1250},
    {"CARPets",    		"Tiger rug",                 1828,   11000},
    {"CARPets",    		"Plain round rug",           2835,   1250},
    {"CARPets",    		"Round green rug",           2841,   1250},
    {"Kitchen",    		"CJ's kitchen",              14384,  13000},
    {"Kitchen",    		"Whole kitchen",             14720,  13000},
    {"Kitchen",    		"White kitchen sink",        2132,   1500},
    {"Kitchen",    		"White kitchen counter",  	 2134,   1500},
    {"Kitchen",    		"White kitchen fridge",      2131,   1500},
    {"Kitchen",    		"White kitchen drawers",     2133,   1500},
    {"Kitchen",    		"White kitchen corner",      2341,   1500},
    {"Kitchen",    		"White kitchen cupboard",    2141,   1500},
    {"Kitchen",    		"Green kitchen sink",        2336,   1500},
    {"Kitchen",    		"Green kitchen counter",     2334,   1500},
    {"Kitchen",    		"Green kitchen fridge",      2147,   1500},
    {"Kitchen",    		"Green kitchen corner",      2338,   1500},
    {"Kitchen",    		"Green kitchen washer",      2337,   1500},
    {"Kitchen",    		"Green kitchen cupboard",    2158,   1500},
    {"Kitchen",    		"Green kitchen stove",       2170,   1500},
    {"Kitchen",    		"Red kitchen sink",          2130,   1500},
    {"Kitchen",    		"Red kitchen fridge",        2127,   1500},
    {"Kitchen",    		"Red kitchen cupboard",      2128,   1500},
    {"Kitchen",    		"Red kitchen corner",        2304,   1500},
    {"Kitchen",    		"Red kitchen counter",       2129,   1500},
    {"Kitchen",    		"Wood kitchen sink",         2136,   1500},
    {"Kitchen",    		"Wood kitchen counter",      2139,   1500},
    {"Kitchen",    		"Wood kitchen cupboard",     2140,   1500},
    {"Kitchen",    		"Wood kitchen washer",       2303,   1500},
    {"Kitchen",    		"Wood kitchen unit",         2138,   1500},
    {"Kitchen",    		"Wood kitchen corner",       2305,   1500},
    {"Kitchen",    		"Wood kitchen stove",        2135,   1500},
    {"Kitchen",    		"Modern stove",              19923,  11000},
    {"Kitchen",    		"Old timer's stove",         19915,  11000},
    {"Kitchen",    		"Fork",                      11715,  150},
    {"Kitchen",    		"Butter knife",              11716,  150},
    {"Kitchen",    		"Steak knife",               19583,  150},
    {"Kitchen",    		"Spatula",                   19586,  150},
    {"Kitchen",    		"Double handled pan",        19585,  1100},
    {"Kitchen",    		"Single handled pan",        19584,  1100},
    {"Kitchen",    		"Frying pan",                19581,  1100},
    {"Kitchen",    		"Tall striped saucepan",     11719,  1100},
    {"Kitchen",    		"Striped saucepan",          11718,  1100},
    {"Kitchen",    		"Cooked steak",              19882,  150},
    {"Kitchen",    		"Raw steak",                 19582,  150},
    {"Kitchen",    		"Green apple",               19576,  150},
    {"Kitchen",    		"Red apple",                 19575,  150},
    {"Kitchen",    		"Orange",                    19574,  150},
    {"Kitchen",    		"Banana",                    19578,  150},
    {"Kitchen",         "Tomato",                    19577,  150},
    {"Tables",     		"Lab table",                 3383,   12000},
    {"Tables",     		"Pool table",                2964,   12000},
    {"Tables",     		"Blackjack table",           2188,   12000},
    {"Tables",     		"Betting table",             1824,   12000},
    {"Tables",     		"Roulette table",            1896,   12000},
    {"Tables",     		"Poker table",               19474,  11000},
    {"Tables",     		"Burger shot table",         2644,   1500},
    {"Tables",     		"Cluckin' bell table",       2763,   1500},
    {"Tables",     		"Wide cluckin' bell table",  2762,   1500},
    {"Tables",     		"Square coffee table",       2370,   1500},
    {"Tables",     		"Donut shop table",          2747,   1500},
    {"Tables",     		"Pizza table",               2764,   1500},
    {"Tables",     		"Wide coffee table",         2319,   1500},
    {"Tables",     		"Rectangular green table",   11691,  1500},
    {"Tables",     		"Squared green table",       11690,  1500},
    {"Tables",     		"Round glass table",         1827,   1500},
    {"Tables",     		"Round wooden table",        2111,   1500},
    {"Tables",     		"Wide dining table",         2357,   1500},
    {"Tables",     		"Plain wooden table",        2115,   1500},
    {"Tables",     		"Plain brown wooden table",  1516,   1500},
    {"Tables",     		"White polkadot table",      1770,   1500},
    {"Tables",     		"Brown dining table",        1737,   1500},
    {"Tables",     		"Round stone table",         2030,   1500},
    {"Tables",     		"Wooden table with rim",     2699,   1500},
    {"Tables",     		"Low coffee table",          1814,   1500},
    {"Tables",     		"Low brown wooden table",    1433,   1500},
    {"Tables",     		"Bedroom table",             2333,   1500},
    {"Tables",     		"Round table with chairs",   1432,   1500},
    {"Tables",     		"Table with benches",        1281,   1500},
    {"Tables",     		"Checkered table & chairs",  1594,   1500},
    {"Tables",     		"Wooden workshop table",     19922,  1500},
    {"Tables",     		"Hexagon shaped table",      2725,   1500},
    {"Tables",     		"Table with VCR",            2313,   1500},
    {"Tables",     		"Low wooden TV stand",       2314,   1500},
    {"Tables",     		"Low brown TV stand",        2315,   1500},
    {"Tables",     		"Plain brown office desk",   2206,   1500},
    {"Tables",     		"Office desk with computer", 2181,   11000},
    {"Tables",     		"Plain wooden office desk",  2185,   11000},
    {"Tables",     		"Computer desk",             2008,   11000},
    {"Chairs",     		"Blue swivel chair",         2356,   1250},
    {"Chairs",     		"Brown dining chair",        1811,   1250},
    {"Chairs",     		"Red folding chair",         2121,   1250},
    {"Chairs",    		"Upholstered chair",         2748,   11000},
    {"Chairs",     		"Folding office chair",      1721,   1250},
    {"Chairs",     		"Round black chair",         2776,   1250},
    {"Chairs",     		"Black stool",               1716,   1250},
    {"Chairs",     		"Brown stool",               2350,   1250},
    {"Chairs",     		"Red stool",                 2125,   1250},
    {"Chairs",     		"Tall wooden dining chair",  2124,   1250},
    {"Chairs",     		"Tall brown dining chair",   1739,   1250},
    {"Chairs",     		"Checkered dining chair",    2807,   1250},
    {"Chairs",     		"Plain office chair",        1671,   1250},
    {"Chairs",     		"Brown folding chair",       19996,  1250},
    {"Chairs",     		"Light brown chair",         19994,  1250},
    {"Chairs",     		"Black lounge chair",        1704,   1500},
    {"Chairs",     		"Beige lounge chair",        1705,   1500},
    {"Chairs",     		"Dark blue reclining chair", 1708,   1500},
    {"Chairs",     		"Brown corner chair",  		 11682,  1500},
    {"Chairs",     		"Old timer's lounge chair",  1711,   1500},
    {"Chairs",     		"Old timer's rocking chair", 1735,   1500},
    {"Chairs",     		"Two chairs and a table",    2571,   1500},
    {"Chairs",     		"Dark brown foot stool",     2293,   1500},
    {"Chairs",     		"Rocking chair",             11734,  1250},
    {"Chairs",     		"Plaid sofa",                1764,   1750},
    {"Chairs",     		"Long black sofa",           1723,   1750},
    {"Chairs",     		"Beige sofa",                1702,   1750},
    {"Chairs",     		"Brown couch",               1757,   1750},
    {"Chairs",     		"Old timer's sofa",          1728,   1750},
    {"Chairs",     		"Brown corner couch piece",  2292,   1500},
    {"Chairs",     		"White & grey couch",        1761,   1750},
    {"Chairs",     		"Patterned couch",           1760,   1750},
    {"Chairs",     		"Plaid couch",               1764,   1750},
    {"Chairs",     		"Dark blue couch",           1768,   1750},
    {"Chairs",     		"Wide brown couch",          2290,   1750},
    {"Chairs",     		"Green couch",               1766,   1750},
    {"Chairs",     		"Patterned armrest couch",   1763,   1750},
    {"Chairs",     		"Red couch",                 11717,  1750},
    {"Chairs",     		"Very wide beige couch",     1710,   11500},
    {"Chairs",     		"Ultra wide beige couch",    1709,   12000},
    {"Chairs",     		"Red and white couch",       1707,   1750},
    {"Posters/Frames",  "Burger shot poster",        2641,   150},
    {"Posters/Frames",  "Cluckin' bell poster",      2766,   150},
    {"Posters/Frames",  "Wash wands poster",         2685,   150},
    {"Posters/Frames",  "For lease poster",          11289,  150},
    {"Posters/Frames",  "Monkey juice poster",       19328,  150},
    {"Posters/Frames",  "Ring donuts poster",        2715,   150},
    {"Posters/Frames",  "Battered ring posterr",     2716,   150},
	{"Posters/Frames",  "Pizza poster",         	 2668,   150},
    {"Posters/Frames",  "T-Shirt poster",            2729,   150},
    {"Posters/Frames",  "Suburban poster",           2658,   150},
    {"Posters/Frames",  "Zip poster",                2736,   150},
    {"Posters/Frames",  "Binco poster",              2722,   150},
    {"Posters/Frames",  "99c binco poster",          2719,   150},
    {"Posters/Frames",  "Binco sale poster",         2721,   150},
    {"Posters/Frames",  "Heat poster",               2661,   150},
    {"Posters/Frames",  "Eris poster",               2655,   150},
    {"Posters/Frames",  "Bobo poster",               2662,   150},
    {"Posters/Frames",  "Base 5 poster",             2691,   150},
    {"Posters/Frames",  "Base 5 cutout #1",        	 2693,   150},
    {"Posters/Frames",  "Base 5 cutout #2",        	 2692,   150},
    {"Posters/Frames",  "Long base 5 poster #1",   	 2695,   150},
    {"Posters/Frames",  "Long base 5 poster #2",   	 2696, 	 150},
    {"Posters/Frames",  "White prolaps poster",   	 2697,   150},
    {"Posters/Frames",  "Black prolaps poster",   	 2656,   150},
    {"Posters/Frames",  "San Fierro frame",       	 19175,  1100},
    {"Posters/Frames",  "Flint County frame",     	 19174,  1100},
    {"Posters/Frames",  "Gant Bridge frame",      	 19173,  1100},
    {"Posters/Frames",  "Los Santos frame",       	 19172,  1100},
    {"Posters/Frames",  "City View frame",    		 2289,   1100},
    {"Posters/Frames",  "Los Angeles frame",      	 2258,   1100},
	{"Posters/Frames",  "Wooden frame",           	 2288,   1100},
	{"Posters/Frames",  "Sail Boat frame",        	 2287,   1100},
	{"Posters/Frames",  "Ship frame",             	 2286,   1100},
	{"Posters/Frames",  "Water frame",            	 2285,   1100},
	{"Posters/Frames",  "Church frame",           	 2284,   1100},
    {"Posters/Frames",  "Rural frame",        		 2282,   1100},
    {"Posters/Frames",  "Sunset frame",				 2281,   1100},
    {"Posters/Frames",  "Coast frame",        		 2280,   1100},
    {"Posters/Frames",  "Mount chiliad frame",    	 2279,   1100},
    {"Posters/Frames",  "Cargo ship frame",       	 2278,   1100},
    {"Posters/Frames",  "Cat frame",          		 2277,   1100},
    {"Posters/Frames",  "Bridge frame",          	 2276,   1100},
    {"Posters/Frames",  "Fruit Bowl frame",       	 2275,   1100},
    {"Posters/Frames",  "Flower frame",          	 2274,   1100},
    {"Posters/Frames",  "Bouquet frame",          	 2273,   1100},
    {"Posters/Frames",  "Landscape frame",        	 2272,   1100},
    {"Posters/Frames",  "Paper frame",         		 2271,   1100},
    {"Posters/Frames",  "Leaves frame",         	 2270,   1100},
    {"Posters/Frames",  "Lake frame",         		 2269,   1100},
    {"Posters/Frames",  "Black cat frame",        	 2268,   1100},
    {"Posters/Frames",  "Cruise ship frame",      	 2267,   1100},
    {"Posters/Frames",  "Night downtown frame",		 2266,   1100},
    {"Posters/Frames",  "Dseert rocks frame",     	 2265,   1100},
    {"Posters/Frames",  "Beach frame",         		 2264,   1100},
    {"Posters/Frames",  "Dock frame",         		 2263,   1100},
    {"Posters/Frames",  "Downtown frame",         	 2262,   1100},
    {"Posters/Frames",  "Golden gate frame",      	 2261,   1100},
    {"Posters/Frames",  "Old Boat frame",         	 2260,   1100},
    {"Posters/Frames",  "Bowling frame",          	 2259,   1100},
    {"Posters/Frames",  "Pattern frame",        	 2283,   1100},
    {"Posters/Frames",  "Squares frame",          	 2257,   1100},
    {"Posters/Frames",  "Palm trees frame",       	 2256,   1100},
    {"Posters/Frames",  "Erotic frame",         	 2255,   1100},
    {"Posters/Frames",  "Yellow car frame",       	 2254,   110},
    {"Storage",     	"Book shelf",                1742,   1500},
	{"Storage",     	"Wardrobe",         	     2307,   1400},
	{"Storage",     	"Wooden crate",            	 1217,   1150},
	{"Storage",     	"Metal crate",               964,    1150},
	{"Storage",     	"Wide office cabinet",       2200,   1150},
	{"Storage",    	 	"Yellow cabinet",         	 1730,   1150},
	{"Storage",     	"Open gym locker",        	 11730,  1250},
	{"Storage",     	"Closed gym locker",      	 11729,  1250},
	{"Storage",     	"Toolbox",          		 19921,  1500},
	{"Storage",     	"Chest",                     19918,  1100},
	{"Storage",     	"Dresser",                   2094,   1250},
	{"Storage",     	"Warehouse rack",         	 3761,   1150},
	{"Storage",     	"Barrel rack",           	 925,    1250},
	{"Storage",     	"Sex toy rack",          	 2581,   1250},
	{"Storage",     	"Sex magazine rack #1",      2578,   1250},
	{"Storage",     	"Sex magazine rack #2",      2579,   1250},
	{"Storage",     	"Rack with no shelves",      2509,   1250},
	{"Storage",     	"Rack with 3 shelves",       2482,   1250},
	{"Storage",     	"Rack with 4 shelves",       2475,   1250},
	{"Storage",     	"Small rack",			 	 2463,   1250},
	{"Storage",     	"Wide rack",              	 2462,   1250},
	{"Storage",     	"Dresser with drawers",      1743,   1250},
	{"Storage",     	"Wide dresser",              2087,   1250},
	{"Storage",     	"Tall dresser",              2088,   1250},
	{"Storage",     	"Brown dresser",             2089,   1250},
	{"Storage",     	"Single dresser",            2095,   1250},
	{"Storage",     	"White filing cabinet",   	 2197,   2150},
	{"Storage",     	"Green filing cabinet",   	 2610,   1250},
	{"Storage",     	"Dual filing cabinets",      2007,   1250},
	{"Storage",     	"Black shelf",          	 2078,   1250},
	{"Storage",     	"Brown shelf",               2204,   1250},
	{"Storage",     	"Tool shelf",                19899,  1250},
	{"Storage",    	 	"Tool cabinet",     		 19900,  1250},
	{"Storage",     	"Wall mounted shelf",        19940,  1250},
	{"Storage",     	"Clothes shelf",          	 2708,   1250},
	{"Storage",     	"Gun rack",         		 2046,   1250},
	{"Storage",     	"Shop shelf",             	 19640,  1250},
	{"Storage",     	"Blue office shelf",         2191,   1250},
	{"Storage",     	"Wooden office shelf",       2199,   1250},
	{"Storage",     	"Office book shelf",         2161,   1250},
	{"Storage",     	"Tall office cabinet",       2167,   1100},
	{"Storage",     	"Wide office cabinet",       2163,   1100},
	{"Plants",   		"Palm plant #1",          	 625,    1100},
    {"Plants",   		"Palm plant #2",          	 626,    1100},
    {"Plants",   		"Palm plant #3",          	 627,    1100},
    {"Plants",   		"Palm plant #4",          	 628,  	 1100},
    {"Plants",   		"Palm plant #5",          	 630,    1100},
    {"Plants",   		"Palm plant #6",          	 631,    1100},
    {"Plants",   		"Palm plant #7",          	 632,    1100},
    {"Plants",   		"Palm plant #8",         	 633,    1100},
    {"Plants",  		"Palm plant #9",         	 646,    1100},
    {"Plants",   		"Palm plant #10",            644,    1100},
    {"Plants",   		"Palm plant #11",         	 2001,   1100},
    {"Plants",   		"Palm plant #12",        	 2010,   1100},
    {"Plants",   		"Palm plant #13",        	 2011,   1150},
    {"Plants",   		"Potted plant #1",           948,    1150},
    {"Plants",   		"Potted plant #2",           949,    1150},
    {"Plants",   		"Potted plant #3",           950,  	 1150},
    {"Plants",   		"Potted plant #4",           2194,   1150},
    {"Plants",   		"Potted plant #5",           2195,   1150},
    {"Plants",   		"Potted plant #6",           2203,   1150},
    {"Plants",   		"Potted plant #7",           2240,   1150},
    {"Plants",   		"Potted plant #8",           2241,   1150},
    {"Plants",   		"Potted plant #9",           2242, 	 1150},
    {"Plants",   		"Potted plant #10",          2244, 	 1150},
    {"Plants",   		"Potted plant #11",          2245,   1150},
    {"Plants",   		"Potted plant #12",          2246,   1150},
    {"Plants",   		"Potted plant #13",          2248,   1150},
    {"Plants",   		"Potted plant #14",          2252,   1150},
    {"Plants",   		"Potted plant #15",          2253,   1150},
    {"Plants",   		"Potted plant #16",          2811,   1150},
    {"Plants",   		"Wide plant",      			 638,    1250},
    {"Plants",   		"Single bush plant",         1361,   1250},
    {"Plants",   		"Wide bush plant",           1360,   1250},
    {"Plants",  		"Bush plant and bench",      1364,   1500},
    {"Plants",   		"Window plant #1",           3802,   200},
    {"Plants",   		"Window plant #2",           3810,   1200},
    {"Trash",           "Wastebin",                  11706,  150},
    {"Trash",           "Blue trashcan on wheels",   1339,   1150},
	{"Trash",           "Blue trashcan",     		 1430,   150},
	{"Trash",           "Trashcan with holes",       1359,   150},
	{"Trash",           "Cluckin' bell trashcan", 	 2770,   150},
	{"Trash",           "Burger shot trashcan",   	 2420,   150},
	{"Trash",           "Round bagged trashcan",     1330,   150},
	{"Trash",           "Round white trashcan",      1329,   150},
	{"Trash",           "Metal trashcan",            1328, 	 150},
	{"Trash",           "Full dumpster",          	 1415,   510},
	{"Trash",           "Closed dumpster",           1227,   510},
	{"Trash",           "Bottle disposal unit",      1336,   510},
	{"Trash",           "Blue dumpster",             1334,   510},
	{"Trash",           "Red dumpster",              1333,   510},
	{"Trash",           "Hippo trashcan",            1371,   510},
	{"Trash",           "Poor trashcan",             1347,   510},
	{"Trash",           "Cement trashcan",           1300,   510},
	{"Trash",           "Trashcan filled with wood", 1442,   501},
	{"Trash",           "Two pallets & trash",       1450,   150},
	{"Trash",           "Single pallet",             1448,   150},
	{"Trash",           "Garbage bag",               1265,   150},
	{"Trash",           "Burger shot bag",           2663,   150},
	{"Trash",           "Pile of boxes",             1440,   150},
    {"Trash",     		"Cardboard box",             1221,   150},
    {"Trash",           "Open pizza box",            2860,   150},
    {"Trash",           "Takeaway trash",         	 2866,   150},
    {"Trash",           "Burger shot trash",      	 2840,   150},
	{"Trash",           "Dirty dishes #1",      	 2812,   150},
    {"Trash",           "Dirty dishes #2",   		 2822,   150},
    {"Trash",           "Dirty dishes #3",      	 2829,   150},
    {"Trash",           "Dirty dishes #4",      	 2830,   150},
    {"Trash",           "Dirty dishes #5",      	 2831,   150},
    {"Trash",           "Dirty dishes #6",      	 2832,   150},
    {"Trash",           "Clean dishes #1",   		 2862,   150},
    {"Trash",           "Clean dishes #2",   		 2863,   150},
    {"Trash",           "Clean dishes #3",   		 2864,   150},
    {"Trash",           "Clean dishes #4",   		 2865,   150},
    {"Trash",           "Assorted trash #1",         2672,   150},
    {"Trash",           "Assorted trash #2",         2677,   150},
    {"Trash",           "Assorted trash #3",         2675,   150},
    {"Trash",           "Assorted trash #4",         2676,   150},
    {"Trash",           "Assorted trash #5",         2674,   150},
    {"Trash",           "Assorted trash #6",         2673,   150},
    {"Trash",           "Assorted trash #7",         2670,   150},
    {"Doors & Gates",   "Door with bars",            2930,   1100},
    {"Doors & Gates",   "Petrol door",       		 2911,   1100},
    {"Doors & Gates",   "Flat door",          		 3061,   100},
    {"Doors & Gates",   "Wardrobe door",         	 1567,   1100},
    {"Doors & Gates",   "Green push door",        	 1492,   11100},
    {"Doors & Gates",   "Red windowed door",       	 1493,   100},
    {"Doors & Gates",   "Black wooden door",         1494,   11100},
    {"Doors & Gates",   "Brown windowed door",       3089,   1100},
    {"Doors & Gates",   "Wooden farm door",        	 1497,   1100},
    {"Doors & Gates",   "White wooden door",         1498,   1100},
    {"Doors & Gates",   "Warehouse door",       	 1499,   1100},
    {"Doors & Gates",   "Red door",        			 1504,   1100},
    {"Doors & Gates",   "Blue door",        		 1505,   1100},
    {"Doors & Gates",   "White door",        		 1506,   1100},
    {"Doors & Gates",   "Yellow door",        		 1507,   1100},
    {"Doors & Gates",   "Kitchen door",        		 1523,   1100},
    {"Doors & Gates",   "Motel door",        		 1535,   1100},
    {"Doors & Gates",   "Blue motel door",           2970,   1100},
    {"Doors & Gates",   "24/7 door",     			 1560,   1100},
    {"Doors & Gates",   "Barred door",          	 3061,   1100},
    {"Doors & Gates",   "Red motel door",            3029,   1100},
    {"Doors & Gates",   "Security door",       		 2949,   1100},
    {"Doors & Gates",   "Tall white door",           2948,   1100},
    {"Doors & Gates",   "Bank door",           		 2946,   1100},
    {"Doors & Gates",   "Ship door",     			 2944,   1100},
    {"Doors & Gates",   "Tower door",        		 977,    1100},
    {"Doors & Gates",   "Maintenance doors",         11714,  1100},
    {"Doors & Gates",   "Dual office door",          19176,  1100},
    {"Doors & Gates",   "Screen door #1",        	 1495,   1100},
    {"Doors & Gates",   "Screen door #2",        	 1500,   1100},
    {"Doors & Gates",   "Screen door #3",        	 1501,   1100},
    {"Doors & Gates",   "Shop door #1",        		 1532,   1100},
    {"Doors & Gates",   "Shop door #2",      		 1496,   1100},
    {"Doors & Gates",   "Shop door #3",        		 1533,   1100},
    {"Doors & Gates",   "Shop door #4",        		 1537,   1100},
    {"Doors & Gates",   "Shop door #5",        		 1538,   1100},
    {"Doors & Gates",   "Office door #1",          	 1566,   1100},
    {"Doors & Gates",   "Office door #2",         	 1569,   1100},
    {"Doors & Gates",   "Office door #3",        	 1536,   1100},
    {"Doors & Gates",   "Office door #4",        	 1557,   1100},
    {"Doors & Gates",   "Office door #5",        	 1556,   1100},
    {"Doors & Gates",   "Wooden push door #1",       1491,   1100},
    {"Doors & Gates",   "Wooden push door #2",       1502,   1100},
    {"Doors & Gates",   "Garage door #1",            8957,   1100},
    {"Doors & Gates",   "Garage door #2",            7891,   1100},
    {"Doors & Gates",   "Garage door #3",     	 	 3037,   1100},
    {"Doors & Gates",   "Garage door #4",            19861,  1100},
    {"Doors & Gates",   "Garage door #5",            19864,  1100},
    {"Doors & Gates",   "Plain metal bar gate",      19912,  11000},
    {"Doors & Gates",   "Tall metal bar gate",       971,    11000},
    {"Doors & Gates",   "Long metal bar gate",       975,    11000},
    {"Doors & Gates",   "Los Santos Airport gate",   980,    11000},
    {"Doors & Gates",   "Fenced gate",               985,    11000},
    {"Doors & Gates",   "No parking gate",           19870,  11000},
    {"Doors & Gates",   "Fenced gate on wheels",     988,    11000},
    {"Walls",           "wall001",                   19353,  1100},
    {"Walls",           "wall002",                   19354,  1100},
    {"Walls",           "wall003",                   19355,  1100},
    {"Walls",           "wall004",                   19356,  1100},
    {"Walls",           "wall005",                   19357,  1100},
    {"Walls",           "wall006",                   19358,  1100},
    {"Walls",           "wall007",                   19359,  1100},
    {"Walls",           "wall008",                   19360,  1100},
    {"Walls",           "wall009",                   19361,  1100},
    {"Walls",           "wall010",                   19362,  1100},
    {"Walls",           "wall011",                   19363,  1100},
    {"Walls",           "wall012",                   19364,  1100},
    {"Walls",           "wall013",                   19365,  1100},
    {"Walls",           "wall014",                   19366,  1100},
    {"Walls",           "wall015",                   19367,  1100},
    {"Walls",           "wall016",                   19368,  1100},
    {"Walls",           "wall017",                   19369,  1100},
    {"Walls",           "wall018",                   19370,  1100},
    {"Walls",           "wall019",                   19371,  1100},
    {"Walls",           "wall020",                   19372,  1100},
    {"Walls",           "wall021",                   19373,  1100},
    //{"Walls",           "wall022",                   19374,1  100},
    {"Walls",           "wall023",                   19375,  1100},
    {"Walls",           "wall024",                   19376,  1100},
    {"Walls",           "wall025",                   19377,  1100},
    {"Walls",           "wall026",                   19378,  1100},
    {"Walls",           "wall027",                   19379,  1100},
    {"Walls",           "wall028",                   19380,  1100},
    {"Walls",           "wall029",                   19381,  1100},
    //{"Walls",           "wall030",                   19382,1  100},
    {"Walls",           "wall031",                   19383,  1100},
    {"Walls",           "wall032",                   19384,  1100},
    {"Walls",           "wall033",                   19385,  1100},
    {"Walls",           "wall034",                   19386,  1100},
    {"Walls",           "wall035",                   19387,  1100},
    {"Walls",           "wall036",                   19388,  1100},
    {"Walls",           "wall037",                   19389,  1100},
    {"Walls",           "wall038",                   19390,  1100},
    {"Walls",           "wall039",                   19391,  1100},
    {"Walls",           "wall040",                   19392,  1100},
    {"Walls",           "wall041",                   19393,  1100},
    {"Walls",           "wall042",                   19394,  1100},
    {"Walls",           "wall043",                   19395,  1100},
    {"Walls",           "wall044",                   19396,  1100},
    {"Walls",           "wall045",                   19397,  1100},
    {"Walls",           "wall046",                   19398,  1100},
    {"Walls",           "wall047",                   19399,  1100},
    {"Walls",           "wall048",                   19400,  1100},
    {"Walls",           "wall049",                   19401,  1100},
    {"Walls",           "wall050",                   19402,  1100},
    {"Walls",           "wall051",                   19403,  1100},
    {"Walls",           "wall052",                   19404,  1100},
    {"Walls",           "wall053",                   19405,  1100},
    {"Walls",           "wall054",                   19406,  1100},
    {"Walls",           "wall055",                   19407,  1100},
    {"Walls",           "wall056",                   19408,  1100},
    {"Walls",           "wall057",                   19409,  1100},
    {"Walls",           "wall058",                   19410,  1100},
    {"Walls",           "wall059",                   19411,  1100},
    {"Walls",           "wall060",                   19412,  1100},
    {"Walls",           "wall061",                   19413,  1100},
    {"Walls",           "wall062",                   19414,  1100},
    {"Walls",           "wall063",                   19415,  1100},
    {"Walls",           "wall064",                   19416,  1100},
    {"Walls",           "wall065",                   19417,  1100},
    {"Walls",           "wall066",                   19426,  1100},
    {"Walls",           "wall067",                   19427,  1100},
    {"Walls",           "wall068",                   19428,  1100},
    {"Walls",           "wall069",                   19429,  1100},
    {"Walls",           "wall070",                   19430,  1100},
    {"Walls",           "wall071",                   19431,  1100},
    {"Walls",           "wall072",                   19432,  1100},
    {"Walls",           "wall073",                   19433,  1100},
    {"Walls",           "wall074",                   19434,  1100},
    {"Walls",           "wall075",                   19435,  1100},
    {"Walls",           "wall076",                   19436,  1100},
    {"Walls",           "wall077",                   19437,  1100},
    {"Walls",           "wall078",                   19438,  1100},
    {"Walls",           "wall079",                   19439,  1100},
    {"Walls",           "wall080",                   19440,  1100},
    {"Walls",           "wall081",                   19441,  1100},
    {"Walls",           "wall082",                   19442,  1100},
    {"Walls",           "wall083",                   19443,  1100},
    {"Walls",           "wall084",                   19444,  1100},
    {"Walls",           "wall085",                   19445,  1100},
    {"Walls",           "wall086",                   19446,  1100},
    {"Walls",           "wall087",                   19447,  1100},
    {"Walls",           "wall088",                   19448,  1100},
    {"Walls",           "wall089",                   19449,  1100},
    {"Walls",           "wall090",                   19450,  1100},
    {"Walls",           "wall091",                   19451,  1100},
    {"Walls",           "wall092",                   19452,  1100},
    {"Walls",           "wall093",                   19453,  1100},
    {"Walls",           "wall094",                   19454,  1100},
    {"Walls",           "wall095",                   19455,  1100},
    {"Walls",           "wall096",                   19456,  1100},
    {"Walls",           "wall097",                   19457,  1100},
    {"Walls",           "wall098",                   19458,  1100},
    {"Walls",           "wall099",                   19459,  1100},
    {"Walls",           "wall100",                   19460,  1100},
    {"Walls",           "wall101",                   19461,  1100},
    {"Walls",           "wall102",                   19462,  1100},
    {"Walls",           "wall103",                   19463,  1100},
    {"Walls",           "wall104",                   19464,  1100},
    {"Walls",           "wall105",                   19465,  1100},
//    {"Decor",           "Guard tower",               3279,  1 5000},
    {"Decor",           "Dance floor",               19128,  11000},
    {"Decor",           "Tool board",                19815,  150},
    {"Decor",           "Mailbox",                   19867,  150},
    {"Decor",           "Single key",                11746,  150},
    {"Decor",           "Oxygen cylinder",           19816,  150},
    {"Decor",           "Cauldron",                  19527,  150},
    {"Decor",           "Valve",                     2983,   150},
    {"Decor",           "Writing board",             19805,  150},
    {"Decor",           "Punching bag",              1985,   150},
    {"Decor",           "Desk fan",           		 2192,   150},
    {"Decor",           "Satellite dish",            3031,   150},
    {"Decor",           "Shopping cart",             1349,   150},
    {"Decor",           "Fireplace logs",			 19632,  150},
    {"Decor",           "Telescope",                 2600,   150},
    {"Decor",           "Ladder",                    1428,   150},
    {"Decor",           "Plank",                     2937,   150},
    {"Decor",           "Blue curtains",             2558,   150},
    {"Decor",           "Old curtains",              14443,  150},
    {"Decor",           "Blinds",                    18084,  150},
    {"Decor",           "United states flag",        11245,  150},
    {"Decor",           "Double US flag",            2614,   150},
    {"Decor",           "Confederate flag",          2048,   150},
    {"Decor",           "Basketball court",          946,    150},
    {"Decor",           "Basketball",                2114,   150},
    {"Decor",           "Fire exit sign",            11710,  150},
    {"Decor",           "Fire extinguisher",         2690,   150},
    {"Decor",           "Fire extinguisher panel",   11713,  150},
    {"Decor",           "Fire alarm",                11713,  150},
    {"Decor",           "Fire hydrant",              1211,   150},
	{"Decor",           "Cocaine packet",            2891,   150},
    {"Decor",           "Drug bundle",         		 1279,   150},
    {"Decor",           "White package",           	 1575,   150},
    {"Decor",           "Orange package",          	 1576,   50},
    {"Decor",           "Yellow package",          	 1577, 	 50},
    {"Decor",           "Green package",           	 1578, 	 50},
    {"Decor",           "Blue package",            	 1579,   50},
    {"Decor",           "Red package",             	 1580,   50},
    {"Decor",           "Marijuana bundle",     	 2901,   50},
    {"Decor",           "Marijuana plant",           3409,   50},
    {"Decor",           "Ashtray",           		 1510, 	 50},
    {"Decor",           "Ashtray with cigar",        1665,   50},
    {"Decor",           "Pumpkin",                   19320,  50},
    {"Decor",           "Christmas tree",            19076,  50},
    {"Decor",           "Stage",         			 19608,  250},
    {"Decor",           "Gold record",          	 19617,  100},
    {"Decor",           "Moose head",        		 1736,   300},
    {"Decor",           "Cow",                       19833,  500},
    {"Decor",           "Rocking horse",             11733,  50},
    {"Decor",			"Deer",						 19315,  50},
    {"Decor",           "Boot",                      11735,  50},
    {"Decor",           "Old radiator",      		 1738,   50},
    {"Decor",           "Radiator",                  11721,  50},
    {"Decor",           "Round light",               11727,  50},
    {"Decor",           "Mop & pail",          		 1778,   50},
    {"Decor",           "Chambermaid",       		 1789,   50},
    {"Decor",           "Bucket",            		 2713,   50},
    {"Decor",           "Trolley",                   2994,   50},
    {"Decor",           "Body bags",        		 16444,  50},
    {"Decor",           "Beach ball",                1598, 	 50},
    {"Decor",           "Blackboard",        		 3077,   50},
    {"Decor",           "Dumbell",       			 3072,   50},
    {"Decor",           "Sports bag",                11745,  50},
    {"Decor",           "Portable toilet",           2984,   50},
    {"Decor",   		"Round burger shot sign", 	 2643,   50},
    {"Decor",           "Stretcher",          		 1997,   50},
    {"Decor",           "Hospital bed",              2146,   50},
    {"Decor",           "Work lamp",                 2196,   50},
    {"Decor",           "Fire bell",       			 1613,   50},
    {"Decor",           "Sword",                     19590,  50},
    {"Decor",           "Wooden bat",                19914,  50},
    {"Decor",           "Hand fan",                  19591,  50},
    {"Decor",           "Shop basket",               19592,  50},
    {"Decor",           "Safe door",                 19619,  50},
    {"Decor",           "Safe enclosure",            19618,  50},
    {"Decor",           "Bag of money",              1550,   50},
    {"Decor",           "Oil can",                   19621,  50},
    {"Decor",           "Wrench",                    19627,  50},
    {"Decor",           "Engine",                    19917,  50},
    {"Decor",           "Broom",                     19622,  50},
    {"Decor",           "Briefcase",                 19624,  50},
    {"Decor",           "Cigarette",                 19625,  50},
    {"Decor",           "Rolled joint",              3027,   50},
    {"Decor",           "Fire wood",                 19632,  50},
    {"Decor",           "Compacted trash",           19772,  50},
    {"Decor",           "Medic kit",                 11738,  50},
    {"Decor",           "Clip",                      19995,  50},
    {"Decor",           "Dippo lighter",             19998,  50},
    {"Decor",           "Briquettes",                19573,  50},
    {"Decor",           "Meat Sack",                 2805,   50},
    {"Decor",           "Small meat sack",           2803,   50},
    {"Decor",           "Stack of magazines",        2855,   50},
    {"Decor",           "Scattered magazines",       2852,   50},
    {"Decor",           "Scattered books",           2854,   50},
    {"Decor",           "Wooden stairs",             3361,   50},
    {"Decor",           "Long concrete stairs",      14410,  50},
    {"Decor",           "Short concrete stairs",     14416,  50},
    {"Decor",           "Short stairs",              14877,  50},
    {"Decor",           "Big window",      			 19325,  100},
    {"Decor",           "Small window",           	 19466,  50},
    {"Decor",           "Breakable window",       	 1649,   75},
    {"Decor",           "Red neon tube",             18647,  100},
    {"Decor",           "Blue neon tune",            18648,  100},
    {"Decor",           "Green neon tube",           18649,  100},
    {"Decor",           "Yellow neon tube",          18650,  100},
    {"Decor",           "Pink neon tube",            18651,  100},
    {"Decor",           "White neon tube",           18652,  100},
    {"Decor",           "Beer bottle",               1543,   10},
    {"Decor",           "Yellow beer bottle",        1544,   10},
    {"Decor",           "Medicine bottle",           1950,   10},
    {"Decor",           "Green beer bottle",         19818,  10},
    {"Decor",           "Whiskey bottle",            19823,  10},
    {"Decor",           "Wine bottle",               19820,  10},
    {"Decor",           "Red wine bottle",           19822,  10},
    {"Decor",           "Champagne bottle",          19824,  10},
    {"Decor",           "Beer",                      19821,  10},
    {"Decor",           "Target #1",           		 2056,   50},
    {"Decor",           "Target #2",           		 2055,   50},
    {"Decor",           "Target #3",           		 2051,   50},
    {"Decor",           "Target #4",           		 2050,   50},
    {"Decor",           "Target #5",           		 2049,   50},
    {"Decor",           "Clothes pile #1",     		 2819,   50},
    {"Decor",           "Clothes pile #2",      	 2843,   50},
    {"Decor",           "Clothes pile #3",      	 2844,   50},
    {"Decor",           "Clothes pile #4",      	 2845,   50},
    {"Decor",           "Clothes pile #5",      	 2846,   50},
    {"Decor",           "Dragon Head",          	 3528,   150},
    {"Decor",           "Fountain",             	 9833,   150},
    {"Decor",           "Light",                 	 1231,   150},
    {"Decor",           "Blue Light",             	19122,   150},
    {"Decor",           "Green Light",              19123,   150},
    {"Decor",           "Red Light",           	    19124,   150},
    {"Weapons",         "9mm",                        346,    1500},
    {"Weapons",         "Deagle",                     348,    1500},
    {"Weapons",         "Shotgun",                    349,    1500},
    {"Weapons",         "Ak-47",                      355,    1500},
    {"Weapons",         "UZI",                        352,    1500},
    {"Weapons",         "Camera",                     367,    1500}

};

enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eMapIcon,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA
};

enum aEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};

new AtmInfo[MAX_ATMS][aEnum];
enum veEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};

enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ
};

new const jobLocations[][jobEnum] =
{
	{"Foodpanda", 		980.6055, -1297.1161, 13.5462},
	{"Trucker",     	2434.4448, -2125.6113, 13.5469},
	{"Fisherman",   	393.2632,  -2070.5837, 7.8359},
	{"Bodyguard",   	2227.4705, -1715.9694, 13.5302},
	{"Arms Dealer",  	0.00, 0.00, 0.00},
	{"Miner",           -1008.2990,-2158.0593,34.7481},
	{"Meat Packager",  	421.0504, -1729.1787, 9.3531},
	{"Taxi Driver",     1748.1373, -1863.0981, 13.5755},
	{"Drug Dealer",     58.5773, -292.2565, 1.5781},
	{"Lawyer",          0.00, 0.00, 0.00},
	{"Detective",       0.00, 0.00, 0.00},
	{"Construction",	1265.4034, -1265.7041, 13.3503},
	{"Forklifter",      2772.6768,-2423.9595,13.6374},
	{"News Paper", 643.9371, -1368.7008, 13.6314}
};


enum MechEnum {
	Float:MechX,
	Float:MechY,
	Float:MechZ
};

enum FuelEnum {
	Float:FuelX,
	Float:FuelY,
	Float:FuelZ
};

new const FuelStation[][FuelEnum] = {
	{1004.0070, -939.3102, 42.1797},
	{1944.3260, -1772.9254, 13.3906},
	{-90.5515, -1169.4578, 2.4079},
	{-1609.7958, -2718.2048, 48.5391},
	{-2029.4968, 156.4366, 28.9498},
	{-2408.7590, 976.0934, 45.4175},
	{-2243.9629, -2560.6477, 31.8841},
	{-1676.6323, 414.0262, 6.9484},
	{2202.2349, 2474.3494, 10.5258},
	{614.9333, 1689.7418, 6.6968},
	{-1328.8250, 2677.2173, 49.7665},
	{70.3882, 1218.6783, 18.5165},
	{654.9641, -559.7485, 16.5015},
	{654.9617, -570.4176, 16.5015},
	{1382.9899, 461.9903, 20.1245},
	{1165.1558, 1341.8663, 10.8440},
	{1165.5591,1347.2380,10.8440},
	{1165.3307,1352.8799,10.8440},
	{1380.9395, 457.2494, 19.9260}
};

new const Float:butcherPositions[][] =
{
    {963.4455, 2106.9951, 1010.5694},
	{958.2581, 2107.9614, 1010.5694}
};

enum atmEnum
{
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmA
};

new const atmMachines[][atmEnum] =
{
    {2228.394775, -1714.255126, 13.158315, 270.000000},
    {1928.599975, -1779.941650, 13.136871, 90.000000},
    {1102.299438, -1438.380981, 15.396868, 90.000000},
    {2233.269042, -1158.040527, 25.540679, 270.000000}
};

enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},
    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};

new const Float:minerPositions[][] =
{
    {-995.2590,-2150.3672,35.3247}
/*    {1250.1315,-1251.8857,13.6803}
    {1244.8136,-1267.3768,14.0674}
    {1235.3142,-1250.9010,19.2036}*/
};

new const Float:constructionPositions[][] =
{
    {1249.3019, -1234.3677, 16.5618},
    {1249.0095, -1237.8938, 16.5618},
    {1248.9633, -1246.8964, 14.6885}
};

new const Float:paintballTSpawns[][] =
{ // TDM Arena
	//   X         Y        Z          R
	{1303.8156, 1.8952, 1001.0244, 146.4729}, // Team 1
	{1260.6339, -66.3295, 1002.4949, 318.4712} // Team 2
};
new const Float:paintballDSpawns[][] =
{ // Deagle Arena
    //   X         Y        Z          R
    {1299.0728, 2103.4670, 11.0234, 10.4824},
	{1298.5331, 2196.3188, 11.0234, 2.9623},
	{1397.0685, 2101.0967, 11.0234, 260.1884},
	{1315.7385, 2206.4363, 16.8045, 205.3078},
	{1388.1871, 2206.5242, 16.7969, 267.3483},
	{1407.4728, 2140.1846, 17.6797, 195.9077},
	{1411.0127, 2107.6167, 12.0156, 172.0940},
	{1399.2078, 2206.6550, 12.0156, 213.8402},
	{1301.0807, 2212.7083, 12.0156, 92.1932}
};
new const Float:paintballSSpawns[][] =
{ // Sniper Arena
    //   X         Y        Z          R
    {-2233.8169, -1743.4373, 480.8561, 37.9961},
	//{-2386.9824, -1841.8787, 441.4585, 356.9490},
	{-2351.9800, -1714.6760, 479.6617, 27.9689},
	{-2344.3889, -1703.7188, 483.6255, 326.3146},
	{-2425.2998, -1623.8129, 524.8774, 212.5245}
};
new const Float:paintballFSpawns[][] =
{// FFA Arena
    //   X         Y        Z          R
	{1291.2968, -0.1334, 1001.0228, 180.0000},
	{1304.6259, -28.7442, 1001.0326, 90.0000},
	{1260.6687, -0.6802, 1001.0234, 180.0000},
	{1251.9862, -26.3548, 1001.0340, 270.0000},
	{1278.8584, -44.1545, 1001.0236, 0.0000},
	{1256.5944, -61.9047, 1002.4999, 0.0000},
	{1297.3204, -61.4144, 1002.4980, 0.0000}
};

new const Float:hospitalspawns[][] =
{
	{1170.063232, -1337.757446, 1019.419799,358.48},
	{1170.063232, -1337.757446, 1019.419799,358.48},
	{1170.063232, -1337.757446, 1019.419799,358.48},
	{1170.063232, -1337.757446, 1019.419799,358.48}
};

new const Float:blackhospitalspawns[][] =
{
	{-196.2581, -1759.7427, 676.4661, 91.2158},
	{-196.4931, -1763.8557, 676.4661, 83.7975},
	{-200.6620, -1764.4087, 676.4661, 179.0909},
	{-196.5245, -1767.8369, 676.4661, 84.8392},
	{-196.6361, -1771.6008, 676.4661, 95.4651},
	{-200.5914, -1771.1653, 676.4661, 0.7084}
};

new const Float:drivingTestCPs[][] =
{
    {2499.9248, -1934.8944, 13.3266},
	{2557.6836, -1934.2548, 13.3828},
	{2660.0056, -1934.0017, 13.3426},
	{2712.2002, -1937.1917, 13.2945},
	{2711.2686, -1991.9512, 13.3946},
	{2750.6990, -1998.2791, 13.3240},
	{2772.3594, -1972.7683, 13.3725},
	{2773.3311, -1898.9994, 10.8950},
	{2721.9727, -1887.3322, 10.8828},
	{2671.2764, -1865.3688, 10.9101},
	{2646.3567, -1816.7141, 10.8438},
	{2645.6589, -1760.8271, 10.7188},
	{2626.6519, -1729.5005, 11.0852},
	{2567.5693, -1730.4186, 13.3828},
	{2497.2151, -1729.3203, 13.3828},
	{2437.0964, -1729.9464, 13.5971},
	{2411.3042, -1752.1208, 13.3828},
	{2411.3838, -1811.0560, 13.3828},
	{2411.9790, -1872.3624, 13.3828},
	{2392.5815, -1892.8632, 13.3828},
	{2373.4058, -1916.0201, 13.3828},
	{2410.9104, -1930.1116, 13.3828},
	{2445.3784, -1934.8329, 13.3282},
	{2487.1873, -1934.8633, 13.3547}
};

new const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

new const Float:arrestPoints[][] =
{
    {1588.3755,-1667.6022,2982.2800},
    {2689.5527,454.8143,10.8190},
    {302.3994,-1529.8495,24.9219},
    {1525.2711,-1677.7037,5.8906}
};

new const Float:washmoneyPoints[][] =
{
    {2316.5469, -1403.3070, 21.8769},
    {1479.284301, -1620.607910, 13.355999},
    {1971.9369,-1201.2697,17.4500},
    {882.8823,-1721.1710,12.9217},
    {897.0015,-1101.4503,23.2969}
};

new const Float:comservpoint[][] =
{
	{1475.277709, -1682.636230, 13.355999},
	{1474.577026, -1664.790405, 13.355999},
	{1474.209838, -1641.980102, 13.355999},
	{1484.200805, -1641.739135, 13.355999},
	{1484.655639, -1660.967773, 13.355999},
	{1484.137939, -1683.597045, 13.355999}
};

new const factionTypes[][] =
{
	{"Civilian"},
	{"Law enforcement"},
	{"Medical & fire"},
	{"News agency"},
	{"Government"},
	{"Hitman agency"},
	{"Federal police"},
	{"Mechanic"},
	{"Terrorist"},
	{"Car Dealer"},
	{"Angels Burger"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"}
};

new const clothingTypes[][] =
{
	{"Glasses"},
	{"Bandanas & masks"},
	{"Hats & caps"},
	{"Misc clothing"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone
};

new const clothingArray[][clothingEnum] =
{
    {"Glasses",		        "Red tinted shades",        19006, 2},
    {"Glasses",		        "Brown tinted shades",      19007, 2},
    {"Glasses",		        "Green tinted shades",      19008, 2},
    {"Glasses",		        "Blue tinted shades",       19009, 2},
    {"Glasses",		        "Pink tinted shades",       19010, 2},
    {"Glasses",		        "Spiralled shades",         19011, 2},
    {"Glasses",		        "Black tinted shades",      19012, 2},
    {"Glasses",		        "Gag glasses",       	    19013, 2},
    {"Glasses",		        "Checkered shades",         19014, 2},
    {"Glasses",		        "Reading glasses",    	    19015, 2},
    {"Glasses",		        "X-Ray glasses",            19016, 2},
    {"Glasses",		        "Plastic black shades",     19017, 2},
    {"Glasses",		        "Plastic orange shades",    19018, 2},
    {"Glasses",		        "Plastic red shades",       19019, 2},
    {"Glasses",		        "Plastic blue shades",      19020, 2},
    {"Glasses",		        "Plastic green shades",     19021, 2},
    {"Glasses",		        "Clear sunglasses",         19022, 2},
    {"Glasses",		        "Blue sunglasses",          19023, 2},
    {"Glasses",		        "Purple sunglasses",        19024, 2},
    {"Glasses",		        "Pink sunglasses",          19025, 2},
    {"Glasses",		        "Red sunglasses",           19026, 2},
    {"Glasses",		        "Brown sunglasses",         19027, 2},
    {"Glasses",		        "Yellow sunglasses",        19028, 2},
    {"Glasses",		        "Green sunglasses",         19029, 2},
    {"Glasses",		        "Plain brown shades",       19030, 2},
    {"Glasses",		        "Plain yellow shades",      19031, 2},
    {"Glasses",		        "Plain red shades",         19032, 2},
    {"Glasses",		        "Plain black shades",       19033, 2},
    {"Glasses",		        "Checkered glasses",        19034, 2},
    {"Glasses",		        "Wavy glasses",             19035, 2},
    {"Bandanas & masks",	"Balaclava", 			    19801, 2},
    {"Bandanas & masks",	"Dark blue bandana", 	   	18891, 2},
    {"Bandanas & masks",	"Red bandana", 			   	18892, 2},
    {"Bandanas & masks",	"Red & white bandana", 	   	18893, 2},
    {"Bandanas & masks",	"Orange star bandana", 	   	18894, 2},
    {"Bandanas & masks",	"Skull bandana", 		   	18895, 2},
    {"Bandanas & masks",	"Black bandana", 		   	18896, 2},
    {"Bandanas & masks",	"Blue bandana", 		   	18897, 2},
    {"Bandanas & masks",	"Green bandana", 		   	18898, 2},
    {"Bandanas & masks",	"Pink bandana", 		   	18899, 2},
    {"Bandanas & masks",	"Hippie bandana", 		   	18900, 2},
    {"Bandanas & masks",	"Tiger bandana", 		   	18901, 2},
    {"Bandanas & masks",	"Yellow bandana",		   	18902, 2},
    {"Bandanas & masks",	"Purple bandana", 		   	18903, 2},
    {"Bandanas & masks",	"Cool blue bandana", 	   	18904, 2},
    {"Bandanas & masks",	"Brown bandana", 		   	18905, 2},
    {"Bandanas & masks",	"Skull bandana mask", 	   	18911, 2},
    {"Bandanas & masks",	"Black bandana mask", 	   	18912, 2},
    {"Bandanas & masks",	"Grove bandana mask", 	   	18913, 2},
    {"Bandanas & masks",	"Camo bandana mask", 	   	18914, 2},
    {"Bandanas & masks",	"Hippie bandana mask", 	   	18915, 2},
    {"Bandanas & masks",	"Yellow bandana mask", 	   	18916, 2},
    {"Bandanas & masks",	"Blue bandana mask", 	   	18917, 2},
    {"Bandanas & masks",	"Green bandana mask", 	   	18918, 2},
    {"Bandanas & masks",	"White bandana mask", 	   	18919, 2},
    {"Bandanas & masks",	"Flower bandana mask", 	   	18920, 2},
    {"Bandanas & masks",	"White hockey mask", 	    19036, 2},
	{"Bandanas & masks",	"Red hockey mask", 		    19037, 2},
	{"Bandanas & masks",	"Green hockey mask", 	    19038, 2},
	{"Bandanas & masks",	"Sexy mask", 			    19557, 2},
	{"Bandanas & masks",	"Devil mask", 			   	11704, 2},
	{"Bandanas & masks",	"Gas mask", 			    19472, 2},
	{"Bandanas & masks",	"Zorro mask", 			   	18974, 2},
	{"Bandanas & masks",	"Gimp mask", 			    19163, 2},
	{"Hats & caps",         "Santa hat",                19064, 2},
    {"Hats & caps",			"Dude hat", 			    19160, 2},
	{"Hats & caps",			"Top hat", 				    19352, 2},
    {"Hats & caps",			"Witch hat",                19528, 2},
    {"Hats & caps",			"Yellow fire hat", 		    19330, 2},
	{"Hats & caps",			"Black fire hat", 	  	    19331, 2},
	{"Hats & caps",			"Black beret", 			   	18921, 2},
    {"Hats & caps",			"Brown beret", 			   	18922, 2},
    {"Hats & caps",			"Blue beret", 			   	18923, 2},
    {"Hats & caps",			"Camo beret", 			   	18924, 2},
    {"Hats & caps",			"Red beret", 			   	18925, 2},
    {"Hats & caps",			"Camo cap", 			   	18926, 2},
    {"Hats & caps",			"Wave cap", 			   	18927, 2},
    {"Hats & caps",			"Hippy cap", 			   	18928, 2},
    {"Hats & caps",			"Green cap", 			   	18929, 2},
    {"Hats & caps",			"Red cap", 				   	18930, 2},
    {"Hats & caps",			"Blue cap", 			  	18931, 2},
    {"Hats & caps",			"Orange cap", 			   	18932, 2},
    {"Hats & caps",			"White cap", 			   	18933, 2},
    {"Hats & caps",			"Plain pink cap", 		   	18934, 2},
    {"Hats & caps",			"Plain yellow cap", 	   	18935, 2},
    {"Hats & caps",			"Blue back cap", 		   	18939, 2},
    {"Hats & caps",			"Wave back cap", 		   	18940, 2},
    {"Hats & caps",			"Black back cap", 		   	18941, 2},
    {"Hats & caps",			"White back cap", 		   	18942, 2},
    {"Hats & caps",			"Green back cap", 		   	18943, 2},
    {"Hats & caps",			"Red boater hat", 		   	18944, 2},
    {"Hats & caps",			"Green boater hat", 	   	18945, 2},
    {"Hats & caps",			"Striped boater hat", 	   	18946, 2},
    {"Hats & caps",			"Black bowler hat", 	   	18947, 2},
    {"Hats & caps",			"White bowler hat",		    19488, 2},
    {"Hats & caps",			"Blue bowler hat", 		   	18948, 2},
    {"Hats & caps",			"Green bowler hat", 	   	18949, 2},
    {"Hats & caps",			"Red bowler hat", 		   	18950, 2},
    {"Hats & caps",			"Yellow bowler hat", 	   	18951, 2},
    {"Hats & caps",			"Black knit cap", 		   	18953, 2},
    {"Hats & caps",			"White knit cap", 		   	18954, 2},
    {"Hats & caps",			"Hippie hat", 			   	18960, 2},
    {"Hats & caps",			"Born 2 truck hat", 	   	18961, 2},
    {"Hats & caps",			"Brown cowboy hat", 	    19098, 2},
	{"Hats & caps",			"Black cowboy hat",		    19096, 2},
    {"Hats & caps",			"Skully cap", 			   	18964, 2},
    {"Hats & caps",			"Black bucket hat", 	   	18967, 2},
    {"Hats & caps",			"Plaid bucket hat", 	   	18968, 2},
    {"Hats & caps",			"Zig-Zag bucket hat", 	   	18969, 2},
    {"Hats & caps",			"Camo bucket hat", 		    19106, 2},
    {"Hats & caps",			"Hippy hat", 			    19113, 2},
    {"Hats & caps",			"Don't shoot me hat", 	    19114, 2},
    {"Hats & caps",			"Skull hat", 			    19115, 2},
    {"Hats & caps",			"Tiger hat", 			   	18970, 2},
    {"Hats & caps",			"Hard hat", 			   	18638, 2},
	{"Hats & caps",			"Straw hat", 			    19553, 2},
	{"Hats & caps",			"Pizza hat", 			    19558, 2},
	{"Hats & caps",			"Beanie hat", 			    19554, 2},
    {"Hats & caps",			"Checkered fedora", 	   	18971, 2},
    {"Hats & caps",			"Orange fedora", 		   	18972, 2},
    {"Hats & caps",			"Yellow fedora", 		   	18973, 2},
    {"Hats & caps",			"Camoflauge helmet", 	    19101, 2},
    {"Hats & caps",			"Black helmet", 		    19116, 2},
    {"Hats & caps",			"Red helmet", 			    19117, 2},
    {"Hats & caps",			"Green helmet",	 		    19118, 2},
    {"Hats & caps",			"Blue helmet", 			    19119, 2},
    {"Hats & caps",			"Yellow helmet", 		    19120, 2},
    {"Hats & caps",			"Boxing helmet", 		   	18952, 2},
    {"Hats & caps",			"Motorcycle helmet",   	   	18645, 2},
    {"Misc clothing",	    "Gold watch",	 			19039, 6},
	{"Misc clothing",	    "Silver watch", 			19040, 6},
	{"Misc clothing",	    "Bronze watch", 			19041, 6},
	{"Misc clothing",	    "Yellow watch", 			19042, 6},
	{"Misc clothing",	    "White watch", 			 	19043, 6},
	{"Misc clothing",	    "Purple watch", 			19044, 6},
	{"Misc clothing",	    "Pink watch", 				19045, 6},
	{"Misc clothing",	    "Green watch", 			 	19046, 6},
	{"Misc clothing",	    "Blue watch", 				19047, 6},
	{"Misc clothing",	    "Camo watch", 				19053, 6},
	{"Misc clothing",	    "White headphones", 		19421, 2},
    {"Misc clothing",	    "Black headphones", 		19422, 2},
    {"Misc clothing",	    "Orange headphones", 		19423, 2},
    {"Misc clothing",	    "Blue headphones", 		 	19424, 2},
	{"Misc clothing",	    "Red clown hair", 			19274, 2},
    {"Misc clothing",	    "Grey clown hair", 		 	19518, 2},
    {"Misc clothing",	    "Black hair", 				19077, 2},
    {"Misc clothing",	    "Grey hair", 				19517, 2},
	{"Misc clothing",	    "Bass guitar", 			 	19317, 1},
	{"Misc clothing",	    "White guitar", 		 	19318, 1},
	{"Misc clothing",	    "Black guitar", 			19319, 1},
	{"Misc clothing",	    "Pilot hat", 				19520, 2},
	{"Misc clothing",       "Bag of money",             1550,  1},
	{"Misc clothing",	    "Shop basket", 			 	19592, 6},
	{"Misc clothing",	    "Oil can", 				 	19621, 6},
	{"Misc clothing",	    "Broom", 				 	19622, 1},
	{"Misc clothing",	    "Camera", 					19623, 6},
	{"Misc clothing",	    "Briefcase", 				19624, 6},
	{"Misc clothing",	    "Cigarette", 				19625, 2},
	{"Misc clothing",	    "Spade", 					19626, 1},
	{"Misc clothing",	    "Left boxing glove", 		19555, 5},
	{"Misc clothing",	    "Right boxing glove", 		19556, 6},
	{"Misc clothing",	    "Scarf", 					19469, 2},
	{"Misc clothing",	    "Eye patch", 				19085, 2},
	{"Misc clothing",	    "Hiker backpack", 			19559, 1},
	{"Misc clothing",	    "Construction vest", 		19904, 1},
	{"Misc clothing",	    "Police radio", 			19942, 1},
	{"Misc clothing",	    "Bodybag", 				 	19944, 1},
	{"Misc clothing",	    "Sports bag", 				11745, 1},
	{"Misc clothing",	    "Holster", 				 	19773, 8},
    {"Misc clothing",	    "Fedora", 					18639, 2},
    {"Misc clothing",	    "Afro", 					18640, 2},
    {"Misc clothing",	    "Flashlight",          		18641, 6},
    {"Misc clothing",	    "Hammer",              		18635, 6},
    {"Misc clothing",	    "Wrench",              		18633, 2},
    {"Misc clothing",		"Gas Mask",					19472,	2},
	{"Misc clothing",		"FireHat1",					19330,	2},
	{"Misc clothing",		"FireHat2",					19331,	2},
	{"Misc clothing",		"SWATArmour1",				19142,	2},
	{"Misc clothing",		"Red Guitar",				19317,	2},
	{"Misc clothing",		"White Guitar",				19318,	2},
	{"Misc clothing",		"Black Guitar",				19319,	2},
	{"Misc clothing",		"TheParrot1",				19078,	2},
	{"Misc clothing",		"TheParrot2",				19079,	2},
    {"Misc clothing",       "Katana",         			3028,	2}

};

enum carEnum
{
	carCategory[16],
	carModel,
	cARPrice
};

new const vehicleArray[][carEnum] =
{
	{"Bikes",       	461, 200000}, // PCJ
	{"Bikes",       	462, 60000}, // Faggio
	{"Bikes",       	463, 800000}, // Freeway
	{"Bikes",       	468, 100000}, // Sanchez
	{"Bikes",       	471, 80000}, // Quad bike
	{"Bikes",       	481, 10000}, // BMX
	{"Bikes",       	509, 5000}, // Jap bike
	{"Bikes",       	510, 20000}, // Mountain bike
	{"Bikes",       	521, 500000}, // FCR
	{"Bikes",       	581, 400000}, //BF-400
	{"Bikes",       	586, 800000}, // Wayfer

	{"Cars",       		400, /*Landstalker*/ 700000},
	{"Cars",       		401, /*Bravura*/ 600000},
	{"Cars",       		404, /*Perennial*/ 600000},
	{"Cars",       		405, /*Sentinel*/ 600000},
	{"Cars",       		410, /*Manana*/ 700000},
	{"Cars",       		412, /*Voodoo*/ 700000},
	{"Cars",       		413, /*Pony*/ 750000},
	{"Cars",       		418, /*Moonbeam*/ 600000},
	{"Cars",       		419, /*Esperanto*/ 900000},
	{"Cars",       		421, /*Washington*/ 860000},
	{"Cars",       		422, /*Bobcat*/ 100000},
	{"Cars",       		424, /*BF Injection*/ 3000000},
	{"Cars",       		426, /*Premier*/ 1300000},
	{"Cars",       		436, /*Previon*/ 1300000},
	{"Cars",       		439, /*Stallion*/ 1200000},
	{"Cars",       		420, /*Rumpo*/ 800000},
	{"Cars",       		445, /*Admiral*/ 750000},
	{"Cars",       		458, /*Solair*/ 700000},
	{"Cars",       		466, /*Glendale*/ 700000},
	{"Cars",       		467, /*Oceanic*/ 700000},
	{"Cars",       		474, /*Hermes*/ 700000},
	{"Cars",       		475, /*Sabre*/ 900000},
	{"Cars",       		479, /*Regina*/ 700000},
	{"Cars",       		482, /*Burrito*/ 700000},
	{"Cars",       		575, /*Broadway*/ 800000},
	{"Cars",       		489, /*Rancher*/ 3500000},
	{"Cars",       		491, /*Virgo*/ 700000},
	{"Cars",       		492, /*Greenwood*/ 1500000},
	{"Cars",       		496, /*Blista Compact*/ 1500000},
	{"Cars",       		500, /*Mesa*/ 1500000},
	{"Cars",       		507, /*Elegant*/ 1500000},
	{"Cars",       		516, /*Nebula*/ 1300000},
	{"Cars",       		517, /*Majestic*/ 1300000},
	{"Cars",       		518, /*Buccaneer*/ 1300000},
	{"Cars",       		526, /*Fortune*/ 1300000},
	{"Cars",       		534, /*Remington*/ 1300000},
	{"Cars",       		567, /*Savanna*/ 1500000},
	{"Cars",       		527, /*Cadrona*/ 1300000},
	{"Cars",       		529, /*Willard*/ 1300000},
	{"Cars",       		533, /*Feltzer*/ 1300000},
	{"Cars",       		536, /*Blade*/ 1300000},
	{"Cars",       		540, /*Vincent*/ 1300000},
	{"Cars",       		542, /*Clover*/ 1300000},
	{"Cars",       		543, /*Sadler*/ 1300000},
	{"Cars",       		545, /*Hustler*/ 6000000},
	{"Cars",       		546, /*Intruder*/ 1300000},
	{"Cars",       		547, /*Primo*/ 1300000},
	{"Cars",       		549, /*Tampa*/ 1300000},
	{"Cars",       		550, /*Sunrise*/ 1300000},
	{"Cars",       		551, /*Merit*/ 1300000},
	{"Cars",       		554, /*Yosemite*/ 1300000},
	{"Cars",       		555, /*Windsor*/ 1300000},
	{"Cars",       		566, /*Tahoma*/ 1300000},
	{"Cars",       		576, /*Tornado*/ 1300000},
	{"Cars",       		579, /*Huntley*/ 1300000},
	{"Cars",       		580, /*Stafford*/ 1300000},
	{"Cars",       		585, /*Emperor*/ 1300000},
	{"Cars",       		589, /*Club*/ 1300000},
	{"Cars",       		600, /*Picador*/ 1300000},
	{"Cars",       		587, /*Euros*/ 1300000},
	{"Cars",       		402, /*Buffalo*/ 8000000},
	{"Cars",       		480, /*Comet*/ 4500000},
	{"Cars",       		565, /*Flash*/ 3500000},
	{"Cars",       		602, /*Alpha*/ 8000000},
	{"Cars",       		603, /*Phoenix*/ 8000000},

	{"Boats",			452, 999999999},
	{"Boats",			473, 999999999},
	{"Boats",			484, 999999999},

	{"Aircraft",		487, 999999999},
	{"Aircraft",		469, 999999999},
	{"Aircraft",		593, 999999999},
	{"Aircraft",		512, 999999999},
	{"Aircraft",		513, 999999999},
	{"Aircraft",		417, 999999999},
	{"Aircraft",		460, 999999999},
	{"Aircraft",		548, 999999999},
	{"Aircraft",		519, 999999999},
	{"Aircraft",		511, 999999999},
	{"Aircraft",		553, 999999999}
};


enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
	{"24/7 (Version 1)", 		17, -25.9733, -187.8952, 1003.5468, 0.0000},
    {"24/7 (Version 2)", 		10, 6.0159, -31.0345, 1003.5493, 0.0000},
    {"24/7 (Version 3)", 		18, -30.9967, -91.4492, 1003.5468, 0.0000},
    {"24/7 (Version 4)", 		16, -25.9416, -140.6656, 1003.5468, 0.0000},
    {"24/7 (Version 5)", 		4, 	-27.3069, -30.8341, 1003.5573, 0.0000},
    {"24/7 (Version 6)", 		6, 	-27.4368, -57.4361, 1003.5468, 0.0000},
    {"Ammunation (Version 1)", 	7, 	315.7398, -143.1958, 999.6016, 0.0000},
    {"Ammunation (Version 2)", 	1, 	285.3190, -41.1576, 1001.5156, 0.0000},
    {"Ammunation (Version 3)", 	4, 	285.7825, -85.9860, 1001.5228, 0.0000},
    {"Ammunation (Version 4)", 	6, 	296.7723, -111.6399, 1001.5156, 0.0000},
    {"Ammunation (version 5)", 	6, 	316.2890, -169.7619, 999.6010, 0.0000},
    {"Binco", 					15, 207.6329, -110.7673, 1005.1328, 0.0000},
    {"Pro-Laps", 				3, 	206.9459, -139.5319, 1003.5078, 0.0000},
    {"Didier Sachs", 			14,	204.2969, -168.3488, 1000.5233, 0.0000},
    {"Victim", 					5, 	226.7738, -8.2257, 1002.2108, 90.0000},
    {"Zip", 					18, 161.3670, -96.4953, 1001.8046, 0.0000},
    {"SubUrban", 				1, 	203.7149, -50.2200, 1001.8046, 0.0000},
    {"Betting (Version 1)", 	3,  834.1848, 7.3453, 1004.1870, 90.0000},
	{"Betting (Version 2)",     1,  -2170.3428, 640.7771, 1052.3817, 0.0000},
	{"Donut Shop", 				17, 377.0733, -193.0574, 1000.6400, 0.0000},
    {"Burger Shot", 			10, 363.1346, -74.8441, 1001.5078, 315.0000},
    {"Pizza Stack", 			5, 	372.3019, -133.1221, 1001.4921, 0.0000},
    {"Cluckin' Bell", 			9, 	364.8536, -11.1400, 1001.8516, 0.0000},
	{"Marco's Bistro",          1,  -795.0334, 489.8574, 1376.1953, 0.0000},
	{"Cafeteria",               4,  459.7685, -88.6637, 999.5547, 90.0000},
    {"Barber Shop", 			3, 	418.5545, -83.9392, 1001.8046, 0.0000},
    {"Tattoo Shop", 			3, 	-204.4362, -43.8119, 1002.2733, 0.0000},
    {"Ganton Gym", 				5, 	772.2800, -4.7154, 1000.7288, 0.0000},
    {"Las Venturas Gym", 		7, 	773.8508, -78.3952, 1000.6621, 0.0000},
    {"San Fierro Gym", 			6, 	774.1206, -49.9538, 1000.5858, 0.0000},
    {"Sex Shop", 				3, 	-100.3628, -24.4456, 1000.7188, 0.0000},
    {"RC Shop", 				6, 	-2240.3610, 128.2816, 1035.4210, 270.0000},
    {"Four Dragons Casino", 	10, 2018.2132, 1017.7788, 996.8750, 90.0000},
    {"Caligulas Casino", 		1, 	2234.0485, 1714.1568, 1012.3596, 180.0000},
    {"Red Sands Casino", 		12, 1133.1075, -15.3114, 1000.6796, 0.0000},
    {"Alhambra", 				17, 493.3728, -23.9953, 1000.6796, 0.0000},
    {"Pig Pen", 				2, 	1204.7922, -13.2587, 1000.9218, 0.0000},
    {"Big Spread Ranch", 		3, 	1212.1400, -26.3005, 1000.9531, 180.0000},
    {"Ten Green Bottles", 		11, 501.9559, -67.9867, 998.7578, 180.0000},
    {"Lil' Probe Inn",          18, -228.7570, 1401.2421, 27.7656, 270.0000},
    {"Warehouse",               18, 1307.0178, 4.1193, 1001.0289, 90.0000}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (Version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (Version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (Version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (Version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (Version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (Version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (Version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (Version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (Version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (Version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (Version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 5, 227.3921, 1114.6572, 1080.9985, 267.4590},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
    {"Mallu Gamers Mobile Community", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 1, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Alternative", "Alternative"},
    {"Alternative", "Adult Alternative"},
    {"Alternative", "Britpop"},
    {"Alternative", "Classic Alternative"},
    {"Alternative", "College"},
    {"Alternative", "Dancepunk"},
    {"Alternative", "Dream Pop"},
    {"Alternative", "Emo"},
    {"Alternative", "Goth"},
    {"Alternative", "Grunge"},
    {"Alternative", "Hardcore"},
    {"Alternative", "Indie Pop"},
    {"Alternative", "Indie Rock"},
    {"Alternative", "Industrial"},
    {"Alternative", "LoFi"},
    {"Alternative", "Modern Rock"},
    {"Alternative", "New Wave"},
    {"Alternative", "Noise Pop"},
    {"Alternative", "Post Punk"},
    {"Alternative", "Power Pop"},
    {"Alternative", "Punk"},
    {"Alternative", "Ska"},
    {"Alternative", "Xtreme"},
    {"Blues", "Blues"},
    {"Blues", "Acoustic Blues"},
    {"Blues", "Cajun and Zydeco"},
    {"Blues", "Chicago Blues"},
    {"Blues", "Contemporary Blues"},
    {"Blues", "Country Blues"},
    {"Blues", "Delta Blues"},
    {"Blues", "Electric Blues"},
    {"Classical", "Classical"},
    {"Classical", "Baroque"},
    {"Classical", "Chamber"},
    {"Classical", "Choral"},
    {"Classical", "Classical Period"},
    {"Classical", "Early Classical"},
    {"Classical", "Impressionist"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Alt Country"},
    {"Country", "Americana"},
    {"Country", "Bluegrass"},
    {"Country", "Classic Country"},
    {"Country", "Contemporary Country"},
    {"Country", "Honky Tonk"},
    {"Country", "Hot Country Hits"},
    {"Country", "Western"},
    {"Decades", "Decades"},
    {"Decades", "00s"},
    {"Decades", "30s"},
    {"Decades", "40s"},
    {"Decades", "50s"},
    {"Decades", "60s"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Easy Listening", "Easy Listening"},
    {"Easy Listening", "Exotica"},
    {"Easy Listening", "Light Rock"},
    {"Easy Listening", "Lounge"},
    {"Easy Listening", "Orchestral Pop"},
    {"Easy Listening", "Polka"},
    {"Easy Listening", "Space Age Pop"},
    {"Electronic", "Electronic"},
    {"Electronic", "Acid House"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Breakbeat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Downtempo"},
    {"Electronic", "Drum and Bass"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "Garage"},
    {"Electronic", "Hard House"},
    {"Electronic", "House"},
    {"Electronic", "IDM"},
    {"Electronic", "Jungle"},
    {"Electronic", "Progressive"},
    {"Electronic", "Techno"},
    {"Electronic", "Trance"},
    {"Electronic", "Tribal"},
    {"Electronic", "Trip Hop"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Contemporary Folk"},
    {"Folk", "Folk Rock"},
    {"Folk", "New Acoustic"},
    {"Folk", "Old Time"},
    {"Folk", "Traditional Folk"},
    {"Folk", "World Folk"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian"},
    {"Inspirational", "Christian Metal"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Christian Rock"},
    {"Inspirational", "Classic Christian"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Praise and Worship"},
    {"Inspirational", "Sermon and Services"},
    {"Inspirational", "Southern Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabic"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "Soca"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"International", "Worldbeat"},
    {"International", "Zouk"},
    {"Jazz", "Jazz"},
    {"Jazz", "Acid Jazz"},
    {"Jazz", "Naga"},
    {"Jazz", "Big Band"},
    {"Jazz", "Bop"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Fusion"},
    {"Jazz", "Hard Bop"},
    {"Jazz", "Latin Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Swing"},
    {"Jazz", "Vocal Jazz"},
    {"Jazz", "World Fusion"},
    {"Latin", "Latin"},
    {"Latin", "Bachata"},
    {"Latin", "Banda"},
    {"Latin", "Bossa Nova"},
    {"Latin", "Cumbia"},
    {"Latin", "Flamenco"},
    {"Latin", "Latin Dance"},
    {"Latin", "Latin Pop"},
    {"Latin", "Latin Rap"},
    {"Latin", "Latin Rock"},
    {"Latin", "Mariachi"},
    {"Latin", "Merengue"},
    {"Latin", "Ranchera"},
    {"Latin", "Reggaeton"},
    {"Latin", "Regional Mexican"},
    {"Latin", "Salsa"},
    {"Latin", "Samba"},
    {"Latin", "Tango"},
    {"Latin", "Tejano"},
    {"Latin", "Tropicalia"},
    {"Metal", "Metal"},
    {"Metal", "Black Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Grindcore"},
    {"Metal", "Hair Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Metalcore"},
    {"Metal", "Power Metal"},
    {"Metal", "Progressive Metal"},
    {"Metal", "Thrash Metal"},
    {"Misc", "Misc"},
    {"New Age", "New Age"},
    {"New Age", "Environmental"},
    {"New Age", "Ethnic Fusion"},
    {"New Age", "Healing"},
    {"New Age", "Meditation"},
    {"New Age", "Spiritual"},
    {"Pop", "Pop"},
    {"Pop", "Adult Contemporary"},
    {"Pop", "Barbershop"},
    {"Pop", "Bubblegum Pop"},
    {"Pop", "Dance Pop"},
    {"Pop", "Idols"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Oldies"},
    {"Pop", "Soft Rock"},
    {"Pop", "Teen Pop"},
    {"Pop", "Top 40"},
    {"Pop", "World Pop"},
    {"Public Radio", "Public Radio"},
    {"Public Radio", "College"},
    {"Public Radio", "News"},
    {"Public Radio", "Sports"},
    {"Public Radio", "Talk"},
    {"Public Radio", "Weather"},
    {"R&B and Urban", "R&B and Urban"},
    {"R&B and Urban", "Classic R&B"},
    {"R&B and Urban", "Contemporary R&B"},
    {"R&B and Urban", "Funk"},
    {"R&B and Urban", "Motown"},
    {"R&B and Urban", "Neo Soul"},
    {"R&B and Urban", "Quiet Storm"},
    {"R&B and Urban", "Soul"},
    {"R&B and Urban", "Urban Contemporary"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Dirty South"},
    {"Rap", "East Coast Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Hip Hop"},
    {"Rap", "Mixtapes"},
    {"Rap", "Old School"},
    {"Rap", "Turntablism"},
    {"Rap", "Underground Hip Hop"},
    {"Rap", "West Coast Rap"},
    {"Reggae", "Reggae"},
    {"Reggae", "Contemporary Reggae"},
    {"Reggae", "Dancehall"},
    {"Reggae", "Dub"},
    {"Reggae", "Pop Reggae"},
    {"Reggae", "Ragga"},
    {"Reggae", "Reggae Roots"},
    {"Reggae", "Rock Steady"},
    {"Rock", "Rock"},
    {"Rock", "Adult Alternative"},
    {"Rock", "Celtic Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Garage Rock"},
    {"Rock", "Glam"},
    {"Rock", "Hard Rock"},
    {"Rock", "Jam Bands"},
    {"Rock", "JROCK"},
    {"Rock", "Progressive Rock"},
    {"Rock", "Psychedelic"},
    {"Rock", "Rock & Roll"},
    {"Rock", "Rockabilly"},
    {"Rock", "Singer & Songwriter"},
    {"Rock", "Surf"},
    {"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Kwanzaa"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Original Score"},
    {"Soundtracks", "Showtunes"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "BlogTalk"},
    {"Talk", "Comedy"},
    {"Talk", "Community"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Old Time Radio"},
    {"Talk", "Other Talk"},
    {"Talk", "Political"},
    {"Talk", "Scanner"},
    {"Talk", "Spoken Word"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Adult"},
    {"Themes", "Best Of"},
    {"Themes", "Chill"},
    {"Themes", "Eclectic"},
    {"Themes", "Experimental"},
    {"Themes", "Female"},
    {"Themes", "Heartache"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"},
    {"Themes", "Rainy Day Mix"},
    {"Themes", "Reality"},
    {"Themes", "Sexy"},
    {"Themes", "Shuffle"},
    {"Themes", "Travel Mix"},
    {"Themes", "Trippy"},
    {"Themes", "Work Mix"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};

new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Venturas Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Venturas Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"Mallu Gamers Mobile Community", -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Venturas",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

// ---------------------------------------
native WP_Hash(buffer[], len, const str[]);
native IsValidVehicle(vehicleid);
// ---------------------------------------
native SendClientCheck(playerid, type, arg, offset, size);
forward OnClientCheckResponse(playerid, type, arg, response);

// Variables //

LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Null Error - failed to locate properly - contact a developer.");
	    return 1;
	}
	if(!strcmp(params, "racetrack1", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 829.3257,-2168.8684,2.6271, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Race Track Self Repair 1.");
	}
	if(!strcmp(params, "racetrack2", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 817.0483,-2168.1396,2.6409, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Race Track Self Repair 2");
	}
	if(!strcmp(params, "dmv", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2485.3062,-1958.7264,13.5812, 3.0);
     SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of DMV.");
	}
	else if(!strcmp(params, "paintball", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1310.1538, -1366.9827, 13.5144, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Paintball.");
	}
	else if(!strcmp(params, "mall", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Mall.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the All Saints.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 620.221923, -1510.108764, 14.977034, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Dealership.");
	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 154.2223, -1946.3030, 5.1920, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Boat Dealership.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Aircraft Dealership.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1462.0801, -1021.0511, 24.1041, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Bank.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1310.0944, -1367.9332, 13.5767, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Casino.");
	}
	else if(!strcmp(params, "cityhallls", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1481.1936, -1772.3101, 18.7958, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the City Hall LS.");
	}
	else if(!strcmp(params, "cityhalllv", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2412.8901, 1123.0446, 10.8203, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the City Hall LV.");
	}
	else if(!strcmp(params, "Mechanic Autoparts", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 936.917907, -1645.897216, 13.549866, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Mechanic HQ location.");
	}
    else if(!strcmp(params, "matpickup2", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2393.4885, -2008.5726, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials pickup.");
	}
	else if(!strcmp(params, "harvester", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -1112.4697, -1636.8641, 76.3672, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Harvester Sidejob.");
	}
	else if(!strcmp(params, "matfactory1", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st materials factory.");
	}
    else if(!strcmp(params, "matfactory2", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials factory.");
	}
	else if(!strcmp(params, "heisenbergs", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -65.0972, -1574.3820, 2.6107, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Heisenberg's meth cooking trailer.");
	}
	else if(!strcmp(params, "aiportdepot", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2112.3240, -2432.8130, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of LSI Materials Depot.");
	}
	else if(!strcmp(params, "marinadepot", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 714.5344, -1565.1694, 1.7680, 3.0);
        SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Marina materials depot.");
	}
	else if(!strcmp(params, "pawnshop", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1161.3275,-1489.9391,15.6496, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Pawnshop.");
	}
	else if(!strcmp(params, "VIP Location", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1797.979980, -1578.800048, 14.090999, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the VIP Lounge.");
	}
	else if(!strcmp(params, "foodpanda", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Foodpanda job.");
	}
	else if(!strcmp(params, "forklifter", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
     	SetPlayerCheckpoint(playerid, jobLocations[JOB_FORKLIFTER][jobX], jobLocations[JOB_FORKLIFTER][jobY], jobLocations[JOB_FORKLIFTER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Forklifter job.");
	}
	else if(!strcmp(params, "News Paper", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    //SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
		SetPlayerCheckpoint(playerid, 643.9371, -1368.7008, 13.6314, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the News Paper Job.");
	}
	else if(!strcmp(params, "trucker", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_COURIER][jobX], jobLocations[JOB_COURIER][jobY], jobLocations[JOB_COURIER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Trucker job.");
	}
	else if(!strcmp(params, "fisherman", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FISHERMAN][jobX], jobLocations[JOB_FISHERMAN][jobY], jobLocations[JOB_FISHERMAN][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Fisherman job.");
	}
	else if(!strcmp(params, "bodyguard", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_BODYGUARD][jobX], jobLocations[JOB_BODYGUARD][jobY], jobLocations[JOB_BODYGUARD][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Bodyguard job.");
	}
	else if(!strcmp(params, "armsdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_ARMSDEALER][jobX], jobLocations[JOB_ARMSDEALER][jobY], jobLocations[JOB_ARMSDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Arms Dealer job.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Miner job.");
	}
	else if(!strcmp(params, "meat packager", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_BUTCHER][jobX], jobLocations[JOB_BUTCHER][jobY], jobLocations[JOB_BUTCHER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Meat Packager Job.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Taxi Driver Job.");
	}
	else if(!strcmp(params, "drugdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DRUGDEALER][jobX], jobLocations[JOB_DRUGDEALER][jobY], jobLocations[JOB_DRUGDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Drug Dealer job.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Lawyer job.");
	}
	else if(!strcmp(params, "detective", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1548.2339, -1668.2773, 13.5667, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Detective job.");
	}
	else if(!strcmp(params, "construction", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_CONSTRUCTION][jobX], jobLocations[JOB_CONSTRUCTION][jobY], jobLocations[JOB_CONSTRUCTION][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Construction job.");
	}
	else if(!strcmp(params, "garbageman", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1596.9424, -1802.7905, 13.3619, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Garbage man job.");
	}
	else if(!strcmp(params, "meatchopper", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -16.9641, 1543.6111, 12.7560, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the MeatChopper Sidejob.");
	}
	else if(!strcmp(params, "els", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2316.5469, -1403.3070, 21.8769, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the East Los Santos Dirty Money Laundry.");
	}
	else if(!strcmp(params, "ps", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1477.8975, -1639.1193, 14.1484, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Pershing Square Dirty Money Laundry.");
	}
	else if(!strcmp(params, "gp", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1971.9369, -1201.2697, 17.4500, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Glen Park Dirty Money Laundry.");
	}
	else if(!strcmp(params, "vb", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 882.8823, -1721.1710, 12.9217, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Verona Beach Dirty Money Laundry.");
	}
	else if(!strcmp(params, "cm", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
		SetPlayerCheckpoint(playerid, 897.0015, -1101.4503, 23.2969, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Cemetery Dirty Money Laundry.");
	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest supermarket to you.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gun shop to you.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest clothes shop to you.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gym to you.");
	}
	else if(!strcmp(params, "pharmacy", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_PHARMACY);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest Pharmacy to you.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest restaurant to you.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest club/bar to you.");
	}
	return 1;
}

Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        //GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Diploma", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerInfo[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

forward UpdateRadar();
public UpdateRadar()
{
	new Float:x, Float:y, Float:z;
	foreach(new i : Player)
	{
	    GetPlayerPos(i, x, y, z);
	    if( (x < 3000.0 && x > -3000.0) &&
	        (y < 3000.0 && y > -3000.0) &&
	        (z < 3000.0 && z > -3000.0) )
		{
			x = (x / MAP_RESCALE) + MAP_OFF_X;
			y = (y / MAP_RESCALE) + MAP_OFF_Y;
			SetDynamicObjectPos(RadarBlip[i], x, y, RADAR_MAP_ZOFFSET+MAP_OFF_Z);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_X, x);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_Y, y);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_Z, RADAR_MAP_ZOFFSET+MAP_OFF_Z+1.3);
			RadarBlipShown[i] = true;
		}
		else
		{
			if(RadarBlipShown[i])
			{
				SetDynamicObjectPos(RadarBlip[i], 0.0, 0.0, -1000.0);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_X, 0.0);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_Y, 0.0);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[i], E_STREAMER_Z, -1000.0);
				RadarBlipShown[i] = false;
			}
		}
		if(IsPlayerInRangeOfPoint(i, 15.0, MAP_OFF_X, MAP_OFF_Y, MAP_OFF_Z)) Streamer_Update(i);
	}
	return 1;
}

forward Jailbreak(playerid);
public Jailbreak(playerid)
{
	switch(random(2))
	{
		case 0:
		{
			SetPlayerPos(playerid, 1760.087524, -1573.952636, 1734.942993);
			PlayerInfo[playerid][pTool]--;
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET tool = %i WHERE uid = %i", PlayerInfo[playerid][pTool], PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);
		}
        case 1:
		{
			SetPlayerPos(playerid, 1773.455444, -1570.020019, 1734.942993);
			PlayerInfo[playerid][pTool]--;
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET tool = %i WHERE uid = %i", PlayerInfo[playerid][pTool], PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);
		}
	}
    GameTextForPlayer(playerid, "Find the exit to escape.", 3000, 3);
    SetPlayerCheckpoint(playerid, 1780.073852, -1576.558471, 1734.942993, 3.0);
    PlayerInfo[playerid][pJailBreak] = 1;
    PlayerInfo[playerid][pJailTime] = 1;
    ClearAnimations(playerid);
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Jail Break')", PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
    return 1;
}

forward GMX(playerid);
public GMX(playerid)
{
	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(PlayerInfo[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
	    	TogglePlayerControllable(i, 0);
			if(DiscordInfo[dcGMX] == 1)
			{
				SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", DiscordInfo[dcGMXName]);
				DiscordInfo[dcGMX] = 0;
			}
			else
			{
				SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", DiscordInfo[dcGMXName]);
				//GMXName = "None";
			}


		}
		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Updating server...", 4000, 3);
	}
	foreach(Player, i)
	{
	 	SetTimerEx("GMX1", 3000, false, "i", playerid);
		TogglePlayerControllable(i, 0);
	}
}

forward GMX1(playerid);
public GMX1(playerid)
{
    gGMX = 1;
}

forward BotStatus(playerid);
public BotStatus(playerid)
{
	new msr[256];
	format(msr, sizeof(msr), "MGMC PLAYERS: %d", statusb);
	DCC_SetBotActivity(msr);
	DCC_SetBotPresenceStatus(DO_NOT_DISTURB);
}

forward DESTROYACTOR(playerid);
public DESTROYACTOR(playerid)
{
 if(IsValidActor(PlayerInfo[playerid][pReviveBot]))
		DestroyActor(PlayerInfo[playerid][pReviveBot]);

    PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pHunger] = 100;
	PlayerInfo[playerid][pHungerTimer] = 0;
    PlayerInfo[playerid][pThirst] = 100;
	PlayerInfo[playerid][pThirstTimer] = 0;
	GivePlayerCash(playerid, -4000);

    TogglePlayerControllable(playerid, 1);
	SetPlayerHealth(playerid, 100.0);
	ClearAnimations(playerid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	SCM(playerid, COLOR_YELLOW, "You have been revived by a BOT EMS for $4000! NP: You Should Continue New Life Rule as You Are Revived By BOT");
    return 1;
}

public DCC_OnMessageCreate(DCC_Message:message)
{
    new DCC_Channel:channel;
    new DCC_User:author;
    new msg[256];
    DCC_GetMessageContent(message,msg);
    DCC_GetMessageChannel(message, channel);
    DCC_GetMessageAuthor(message, author);
    new channel_id[DCC_ID_SIZE],author_name[DCC_USERNAME_SIZE],author_id[DCC_ID_SIZE];
    DCC_GetChannelId(channel, channel_id);
    DCC_GetUserName(author,author_name);
    DCC_GetUserId(author,author_id);
    if(!isNull(channel_id) && !isNull(author_name) && !isNull(msg))
    {
        CallRemoteFunction("OnMsgFromDiscord","ssss",author_id,channel_id,author_name,msg);
    }
    new botcheck, chcheck =0;
    if (strcmp( channel_id , "987365781136343081" , true ) == 0)
    {
    chcheck = 1;
    }
    DCC_IsUserBot(author,botcheck);
    if(botcheck == 0 && chcheck == 1)
    {
    format(msg,sizeof(msg), "{33FFF0}[Discord] MGMC ADMIN {FFFFFF}%s: %s",author_name,msg);
    SendClientMessageToAll(-1,msg);
    }
    return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

public AdminFly(playerid)
{
	if(!IsPlayerConnected(playerid))
		return flying[playerid] = false;

	if(flying[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new
			    keys,
				ud,
				lr,
				Float:x[2],
				Float:y[2],
				Float:z;

			GetPlayerKeys(playerid, keys, ud, lr);
			GetPlayerVelocity(playerid, x[0], y[0], z);
			if(ud == KEY_UP)
			{
				GetPlayerCameraPos(playerid, x[0], y[0], z);
				GetPlayerCameraFrontVector(playerid, x[1], y[1], z);
    			ApplyAnimation(playerid, "PARACHUTE", "FALL_SkyDive_Accel", 4.1, 1, 1, 1, 1, 1);
				SetPlayerToFacePos(playerid, x[0] + x[1], y[0] + y[1]);
				SetPlayerVelocity(playerid, x[1], y[1], z);
			}
			else
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.01);
		}

		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}

	return 0;
}

public Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

 	return ang;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked] && InsideTut[playerid] == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
	    {
		    PlayerInfo[playerid][pACWarns]++;

		    if(PlayerInfo[playerid][pACWarns] < 4)
		    {
	    	    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
	        	//Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], distance);
                new szString[128];
				format(szString, sizeof(szString),   "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], distance);
				SendDiscordMessage(2, szString);
			}
			else
			{
		    	SMA(COLOR_LIGHTRED, "AdmCmd: %s was autokicked by %s, reason: Teleport hacks", GetRPName(playerid), SERVER_BOT);
		    	KickPlayer(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
   if(PlayerInfo[playerid][pAdmin] > 3 && PlayerInfo[playerid][pAdminDuty])
   {
	    TeleportToCoords(playerid, fX, fY, fZ, 90.0000, 0, 0);
   }

   foreach(new i : Player)
   {
		if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
		{
			if(i != playerid)
			{
                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
			    SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
			}
		}
   }
   return 1;
}

forward OnPlayerUseValeStorage(playerid);
public OnPlayerUseValeStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsValidVehicle(vehicleid) && VehicleInfo[vehicleid][vID] == cache_get_field_content_int(0, "id"))
	    {
	       return SCM(playerid,COLOR_LIGHTRED, "Error: "WHITE"This vehicle is spawned already. /findcar to track it.");
	    }
	}
	new price = 5000;
    if(PlayerInfo[playerid][pCash] < 5000)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have $5000, to Use VALLEY SERVICE");
    }
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnValeVehicle", "ii", playerid, false);
		GivePlayerCash(playerid, -price);
	}
    return 1;
}

public FCNPC_OnReachDestination(npcid)
{
    if(!FCNPC_IsSpawned(npcid) || FCNPC_IsDead(npcid)) return 1;

    new driverid = GetValetDriverID(npcid);
	new playerid = ValletDriver[driverid][vPlayerID];
    if(driverid != -1)
	{
		ValletDriver[driverid][vUsed] = 0;
		ValletDriver[driverid][vPlayerID] = -1;
		SendClientMessageEx(playerid, COLOR_AQUA, "Your vehicle {00AA00}%s{33CCFF} has been delivered by our valet driver to your last call location.", vehicleNames[GetVehicleModel(ValletDriver[driverid][vVehicleID])-400]);
		FCNPC_ExitVehicle(ValletDriver[driverid][vDriverID]);
		SetPlayerChatBubble(ValletDriver[driverid][vDriverID], "thank you for calling valet service.", COLOR_PURPLE, 25.0, 6000);
		FCNPC_GoToPlayer(ValletDriver[driverid][vDriverID], ValletDriver[driverid][vPlayerID]);
		SetTimerEx("ValletDriverOut", 5000, 0, "d", ValletDriver[driverid][vDriverID]);
	}
	return 1;
}

forward ValletDriverOut(npcid);
public ValletDriverOut(npcid)
{
	FCNPC_Destroy(npcid);
	return 1;
}

DriveToPlayer(playerid, driverid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, z, 1.8);
	FCNPC_GoTo(driverid, x, y, z);
	// FCNPC_GoToPlayer(driverid, playerid);
  	return 1;
}

forward OnPlayerSpawnValeVehicle(playerid, parked);
public OnPlayerSpawnValeVehicle(playerid, parked)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
	    }
	    if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_SYNTAX, "This vehicle is impounded. You can release it from the CityHall. (/locate > General Location > Cityhall)");
		}
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x, Float:y, Float:z, Float:a,
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

			GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);

		    vehicleid = CreateVehicle(modelid, x + 200, y + 200, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;
		    VehicleInfo[vehicleid][vRegistered] = cache_get_field_content_int(0, "registered");
		    VehicleInfo[vehicleid][vValet] = 1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

			// VALE NPC
			new driverid = GetNextValletDriverID();
			ValletDriver[driverid][vDriverID] = FCNPC_Create("Driver");
         	ValletDriver[driverid][vUsed] = 1;
	        ValletDriver[driverid][vPlayerID] = playerid;
	        ValletDriver[driverid][vVehicleID] = vehicleid;
			FCNPC_Spawn(ValletDriver[driverid][vDriverID], 189, x, y, z);
			FCNPC_PutInVehicle(ValletDriver[driverid][vDriverID], vehicleid, 0);

			DriveToPlayer(playerid, ValletDriver[driverid][vDriverID]);
		    if(!parked)
			{
				SM(playerid, COLOR_YELLOW, "You have paid $5000 for a valet delivery of your {00ff15}%s {00ddff}the vehicle is now on the way to you.", GetVehicleName(vehicleid));
			}
	    }
	}

	return 1;
}


forward StartCookFood(playerid);
public StartCookFood(playerid)
{
   PlayerInfo[playerid][pFood] += 3;
   PlayerInfo[playerid][pCookFood] = 0;
   SM(playerid, COLOR_GREEN, "You Have Cooked %i Meal. Use Inventory To Eat It.", PlayerInfo[playerid][pFood]);
   mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", PlayerInfo[playerid][pFood], PlayerInfo[playerid][pID]);
   mysql_tquery(connectionID, queryBuffer);
}

forward StartCookWater(playerid);
public StartCookWater(playerid)
{
   PlayerInfo[playerid][pDrink] += 3;
   PlayerInfo[playerid][pCookFood] = 0;
   SM(playerid, COLOR_GREEN, "You Have Boiled %i Water. Use Inventory To Drink It.", PlayerInfo[playerid][pDrink]);
   mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", PlayerInfo[playerid][pDrink], PlayerInfo[playerid][pID]);
   mysql_tquery(connectionID, queryBuffer);
}

forward DestroyFleecaLock(playerid);
public DestroyFleecaLock(playerid)
{
	DestroyDynamicObject(RobberyInfo[fObjects]);
    PlayerInfo[playerid][pHammer] -= 1;
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hammer = %i WHERE uid = %i", PlayerInfo[playerid][pHammer], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	RobberyInfo[fRobStarted] = 1;
    ClearAnimations(playerid);
	SM(playerid, COLOR_GREEN, "Destroyed The Locker Safe");
}

forward HackCCTV(playerid);
public HackCCTV(playerid)
{
    PlayerInfo[playerid][pHammer] -= 1;
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hammer = %i WHERE uid = %i", PlayerInfo[playerid][pHammer], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
    ClearAnimations(playerid);
    PlayerInfo[playerid][pHackedCctv] = 1;
	SM(playerid, COLOR_GREEN, "SUCCESSFULLY HACKED CCTV FOOTAGE");
    SetPlayerCheckpoint(playerid, 296.672180, 1371.500122, 2023.845947, 3.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SCM(playerid, COLOR_WHITE, "Checkpoint marked to Main Bank Vault");
}

forward StartJewRob(playerid);
public StartJewRob(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SCM(playerid, COLOR_GREEN, "Go To Robbery Door And Destroy Its Lock By Hammer");
    RobberyInfo[jDoorLock] = 1;
}

forward DestroyLock(playerid);
public DestroyLock(playerid)
{
	DestroyDynamicObject(RobberyInfo[jObjects]);
    PlayerInfo[playerid][pHammer] -= 1;
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hammer = %i WHERE uid = %i", PlayerInfo[playerid][pHammer], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	RobberyInfo[jRobStarted] = 1;
    ClearAnimations(playerid);
	SM(playerid, COLOR_GREEN, "Destroyed The Locker Safe");
}

forward LootJew(playerid);
public LootJew(playerid)
{
	SM(playerid, COLOR_GREEN, "You Looted The Jewlry Vault Go To The Wash Money Location to exchange Jewels with Black Money");
	PlayerInfo[playerid][pWantedLevel] = 6;
    SetPlayerAttachedObject(playerid, 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
    new rand = random(sizeof(JEWROBMONEY));
	PlayerInfo[playerid][pDirtyCash] += JEWROBMONEY[rand];
    TogglePlayerControllable(playerid, 1);
    
   	SetPlayerCheckpoint(playerid, 1833.0172, -1396.1160, 13.4345, 5.0);
	PlayerInfo[playerid][pCP] = CHECKPOINT_JEWROB;
	ClearAnimations(playerid);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	ClearAnimations(playerid);
}

forward IntroTimer1(playerid);
public IntroTimer1(playerid)
{
	TextDrawShowForPlayer(playerid, CasCadeIntro[0]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[1]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[2]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[3]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[4]);

	TextDrawShowForPlayer(playerid, CasCadeIntro[5]);
	SetTimerEx("IntroTimer2", 1500, false, "i", playerid);
}

forward IntroTimer2(playerid);
public IntroTimer2(playerid)
{
	TextDrawHideForPlayer(playerid, CasCadeIntro[5]);
	
	TextDrawShowForPlayer(playerid, CasCadeIntro[0]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[1]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[2]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[3]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[4]);

	TextDrawShowForPlayer(playerid, CasCadeIntro[6]);
	SetTimerEx("IntroTimer3", 1500, false, "i", playerid);
}

forward IntroTimer3(playerid);
public IntroTimer3(playerid)
{
	TextDrawHideForPlayer(playerid, CasCadeIntro[5]);
	TextDrawHideForPlayer(playerid, CasCadeIntro[6]);
	
	TextDrawShowForPlayer(playerid, CasCadeIntro[0]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[1]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[2]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[3]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[4]);

	TextDrawShowForPlayer(playerid, CasCadeIntro[7]);
	SetTimerEx("IntroTimer4", 1500, false, "i", playerid);
}

forward IntroTimer4(playerid);
public IntroTimer4(playerid)
{
	TextDrawHideForPlayer(playerid, CasCadeIntro[5]);
	TextDrawHideForPlayer(playerid, CasCadeIntro[6]);
	TextDrawHideForPlayer(playerid, CasCadeIntro[7]);

	TextDrawShowForPlayer(playerid, CasCadeIntro[0]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[1]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[2]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[3]);
	TextDrawShowForPlayer(playerid, CasCadeIntro[4]);

	TextDrawShowForPlayer(playerid, CasCadeIntro[8]);
	SetTimerEx("IntroTimer5", 1000, false, "i", playerid);
}

forward IntroTimer5(playerid);
public IntroTimer5(playerid)
{
	for(new i = 0; i < 9; i++)
	{
		TextDrawHideForPlayer(playerid, CasCadeIntro[i]);
		SetTimerEx("ShowMainMenuCamera", 100, false, "i", playerid);
	}
}

public TimerGiveHarvester(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "You produced flower. Now, take them to the warehouse.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.0, 1, 0, 0, 0, 5000, 1);
	SetPlayerAttachedObject(playerid, 1, 2901, 5, 0.101, -0.0, 0.0, 5.50, 90, 90, 1, 1);
	SetPlayerCheckpoint(playerid, -1115.8110,-1621.4474,76.3739, 3.0);
	ClearAnimations(playerid);
// 	SetPVarInt(playerid, "harvestTimer", 28);
//    SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPHARVESTTIMER);
	ExtraPlants[playerid] = 0;
	return 1;
}

public TimerGiveHarvesterEx(playerid)
{
	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "You produced marijuana. Now, take them to the warehouse.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
    ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.1, 1, 0, 0, 0, 5000, 1);
	SetPlayerAttachedObject(playerid, 1, 2901, 5, 0.101, -0.0, 0.0, 5.50, 90, 90, 1, 1);
	SetPlayerCheckpoint(playerid, -1115.8110,-1621.4474,76.3739, 3.0);
	ClearAnimations(playerid);
// 	SetPVarInt(playerid, "harvestTimer", 28);
//    SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPHARVESTTIMER);
	ExtraPlants[playerid] = 1;
	return 1;
}

public TimerGiveMeat(playerid)
{

	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "{00FF00}Average {FFFFFF}metal produced. Take it to the warehouse to be examined.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 2806, 1, 0.184699, 0.426247, 0.000000, 259.531341, 60.949592, 0.000000, 0.476124, 0.468181, 0.470769);
	SetPlayerCheckpoint(playerid, -21.8623, 1545.5533, 12.7560, 3.0);
	ExtraMeatall[playerid] = 0;

	return 1;
}

public TimerGiveMeatEx(playerid)
{

	RemovePlayerAttachedObject(playerid, 3);
	SendClientMessage(playerid, -1, "{FFFF00}Big Sized {FFFFFF}meat produced. Take it to the warehouse to be examined.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 4, 2805, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769);
	SetPlayerCheckpoint(playerid, -21.8623, 1545.5533, 12.7560, 3.0);
	ExtraMeatall[playerid] = 1;

	return 1;
}

public TimerWashMoney(playerid)
{
    new madumi = PlayerInfo[playerid][pDirtyCash];
	new bawas = (madumi/100)*25; // 3 discount percent
 	new total = madumi-bawas;

 	SM(playerid, COLOR_WHITE, "You washed your money and earn %i.", total);
 	SendClientMessage(playerid, -1, "You are done washing the dirty money, it's time for you to go or else cops will arrest you.");

	PlayerInfo[playerid][pDirtyCash] -= madumi;
	GivePlayerCash(playerid, total);

    TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

public TimerUseRepairkit(playerid)
{
    new vehicleid =  GetNearbyVehicle(playerid);
    RepairVehicle(vehicleid);
    SCM(playerid, COLOR_WHITE, "You have repaired the vehicle you're riding...");
	SetVehicleHealth(vehicleid, 1000.0);
	ClearAnimations(playerid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s successfully repaired his/her vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

public EatingFood(playerid)
{
	PlayerInfo[playerid][pHunger] += 30;
	PlayerInfo[playerid][pHungerTimer] = 0;
	if (PlayerInfo[playerid][pHunger] > 100)
	{
		PlayerInfo[playerid][pHunger] = 100;
	}
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is done eating.", GetRPName(playerid));
	return 1;
}

public DrinkWater(playerid)
{
	PlayerInfo[playerid][pThirst] += 30;
	PlayerInfo[playerid][pThirstTimer] = 0;
	if (PlayerInfo[playerid][pThirst] > 100)
	{
		PlayerInfo[playerid][pThirst] = 100;
	}
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 1);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is done drinking.", GetRPName(playerid));
	return 1;
}

public TimerLockpick(playerid)
{
    TogglePlayerControllable(playerid, 1);
    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s successfully lockpicked the vehicle.", GetRPName(playerid));
	return 1;
}

public Bandage(playerid)
{
	PlayerInfo[playerid][pBleedTimer] = -1;
	PlayerInfo[playerid][pBleed] = 0;
	ClearAnimations(playerid);
	return 1;
}

public RobTraphouse(playerid)
{
    ClearAnimations(playerid);
    new rand = random(sizeof(TRAPHOUSE));
	PlayerInfo[playerid][pDirtyCash] += TRAPHOUSE[rand];
    TogglePlayerControllable(playerid, 1);
    SM(playerid, COLOR_WHITE, "%s successfully cracked the Casino safe.", GetRPName(playerid));

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
    return 1;
}

public RobBigbank(playerid)
{
    new i;
    SetPlayerCheckpoint(playerid, washmoneyPoints[i][0], washmoneyPoints[i][1], washmoneyPoints[i][2], 7.0);
    ClearAnimations(playerid);
    PlayerInfo[playerid][pWantedLevel] = 6;
    new rand = random(sizeof(BIGBANK));
	PlayerInfo[playerid][pDirtyCash] += BIGBANK[rand];
    TogglePlayerControllable(playerid, 1);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
    return 1;
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    PlayerInfo[playerid][pACWarns]++;

	    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly using airbreak hacks.", GetRPName(playerid), playerid);
	        //Log_Write("log_cheat", "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	        new szString[128];
			format(szString, sizeof(szString),   "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
			SendDiscordMessage(2, szString);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Airbreak", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Airbreak");
		}
	}
	return 1;
}

stock SendQuestionToStaff(color, text[])
{
	foreach(new x: Player)
	{
		if(PlayerInfo[x][pHelper] >= 1 || PlayerInfo[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}

IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

forward FlasherFunc();
public FlasherFunc() {
	new panelsx,doorsx,lightsx,tiresx;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    PlayerInfo[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

/*new AutoMessages[][] =
{
	"[MGMC:RP]{FFFFFF}Accounts are Saved Every 5 Minutes! - {5ee4ff}We value your Data"
};

forward AutoMessage();
public AutoMessage() {

	new string[203];
	format(string, sizeof(string), "%s", AutoMessages[random(sizeof(AutoMessages))]);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pLevel] < 100)
	    {
			SendClientMessage(i, COLOR_YELLOW, string);
		}
	}
    return 1;
}
*/
forward AutoSave();
public AutoSave()
{
    foreach(new i : Player)
    SavePlayerVariables(i);
    //new rand = random(sizeof(AutoMessages));
    //SendClientMessageToAll(SERVER_COLOR, AutoMessages[rand]);
    print("[SYSTEM] Database sucessfully saved");
    return 1;
}

new TD_Random_Messages_Intro[][] =
{
	"~r~MGMC ~w~City~b~:RP",
	"~b~Version ~w~3~r~.3"
};

forward TDUpdates();
public TDUpdates()
{
	TextDrawSetString(Text:CRPTD, TD_Random_Messages_Intro[random(sizeof(TD_Random_Messages_Intro))]);
}

GetDate()
{
	new date[5], datestring[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(datestring, sizeof(datestring), "%i-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return datestring;
}

GetAdminDivisionFull(playerid)
{
    new division[32];
	if(PlayerInfo[playerid][pFactionMod])
	{
	    division = "Faction Moderator";
	}
	else if(PlayerInfo[playerid][pGangMod])
	{
	    division = "Gang Moderator";
	}
	else if(PlayerInfo[playerid][pBanAppealer])
	{
	    division = "Ban Appealer";
	}
	else
	{
	    division = "";
	}
    return division;
}

GetStaffRank(playerid)
{
	new string[24];

	if(PlayerInfo[playerid][pAdmin] > 1)
	{
		switch(PlayerInfo[playerid][pAdmin])
		{
		    case 2: string = "Junior Admin";
		    case 3: string = "General Admin";
		    case 4: string = "Senior Admin";
			case 5: string = "Head Admin";
			case 6: string = "Executive Admin";
			case 7: string = "Management";
			case 8: string = "Developer";
			case 9: string = "Developer";
		}
		return string;
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
    	switch(PlayerInfo[playerid][pHelper])
    	{
			case 1: string = "Junior Helper";
			case 2: string = "General Helper";
			case 3: string = "Senior Helper";
			case 4: string = "Head Helper";
		}
	}
	else if(PlayerInfo[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	return string;
}

GetAdminDivision(playerid)
{
	new division[4];
	if(PlayerInfo[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(PlayerInfo[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(PlayerInfo[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else
	{
	    division = "";
	}
	return division;
}

GetGangName(gangid)
{
	new string[45];

	switch(gangid)
	{
		case -1: string = "Police";
		case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20: format(string, sizeof(string), "%s", GangInfo[gangid][gName]);
	}

	return string;
}

GetGangColor(gangid)
{
	new color;

	switch(gangid)
	{
         case -1: color = COLOR_BLUE;
         case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20: color = GangInfo[gangid][gColor];
	}

	return color;
}

GetAdminRank(playerid)
{
	new string[35];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0: string = "None";
	    case 1: string = "Moderator";
	    case 2: string = "Junior Admin";
	    case 3: string = "General Admin";
	    case 4: string = "Senior Admin";
		case 5: string = "Head Admin";
		case 6: string = "Executive Admin";
		case 7: string = "Management";
		case 8: string = "Developer";
	}

	return string;
}

GetColorARank(playerid)
{
	new string[35];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0: string = "None";
	    case 1: string = "Moderator";
	    case 2: string = "{00FF00}Junior Admin";
	    case 3: string = "{D900C8}General Admin";
	    case 4: string = "{FFFF00}Senior Admin";
		case 5: string = "{EE9A4D}Head Admin";
		case 6: string = "{FF0000}Executive Admin";
		case 7: string = "{00FF7C}Management";
		case 8: string = "{5DFF00}Developer";
	}

	return string;
}
GetHelperRank(playerid)
{
	new string[24];

	switch(PlayerInfo[playerid][pHelper])
	{
	    case 0: string = "None";
	    case 1: string = "Junior Helper";
	    case 2: string = "General Helper";
	    case 3: string = "Senior Helper";
	    case 4: string = "Head Helper";
	}

	return string;
}
FormatNumber(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "$", 0);
	if(number < 0)
		strins(value, "-", 0);

	return value;
}
GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Fists";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetDonatorRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "Bronze";
	    case 2: string = "Silver";
	    case 3: string = "Gold";
	}

	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "None";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || PlayerInfo[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_COURIER:
		{
		    PlayerInfo[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = courierskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your trucker skill level is now %i/5. You will deliver more products and earn more money now.", level + 1);
			}
		}
		case JOB_FISHERMAN:
		{
		    PlayerInfo[playerid][pFishingSkill]++;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = fishingskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
				SM(playerid, COLOR_YELLOW, "Your fishing skill level is now %i/5. You will catch bigger fish and your cooldowns are reduced.", level + 1);
			}
		}
		case JOB_ARMSDEALER:
		{
		    PlayerInfo[playerid][pWeaponSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = weaponskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your arms dealer skill level is now %i/5. You have unlocked more weapons.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
		    PlayerInfo[playerid][pSmugglerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET smugglerskill = smugglerskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your drug smuggler skill level is now %i/5. You will now earn more cash for smuggling.", level + 1);
			}
		}
		case JOB_LAWYER:
		{
		    PlayerInfo[playerid][pLawyerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = lawyerskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your lawyer skill level is now %i/5. Your cooldown times are reduced and you can free people for more time.", level + 1);
			}
		}
		case JOB_DETECTIVE:
		{
		    PlayerInfo[playerid][pDetectiveSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = detectiveskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your detective skill level is now %i/5. Your cooldown times are now reduced.", level + 1);
			}
		}
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_COURIER)
	{
	    if(0 <= PlayerInfo[playerid][pCourierSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pCourierSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pCourierSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pCourierSkill] <= 349) {
			return 4;
		} else if(PlayerInfo[playerid][pCourierSkill] >= 350) {
		    return 5;
		}
	}
	if(jobid == JOB_FISHERMAN)
	{
	    if(0 <= PlayerInfo[playerid][pFishingSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pFishingSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pFishingSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pFishingSkill] <= 349) {
			return 4;
		} else if(PlayerInfo[playerid][pFishingSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_ARMSDEALER)
	{
	    if(0 <= PlayerInfo[playerid][pWeaponSkill] <= 29) {
	        return 1;
		} else if(30 <= PlayerInfo[playerid][pWeaponSkill] <= 79) {
			return 2;
		} else if(80 <= PlayerInfo[playerid][pWeaponSkill] <= 199) {
			return 3;
		} else if(180 <= PlayerInfo[playerid][pWeaponSkill] <= 479) {
			return 4;
		} else if(PlayerInfo[playerid][pWeaponSkill] >= 480) {
		    return 5;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= PlayerInfo[playerid][pSmugglerSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerInfo[playerid][pSmugglerSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerInfo[playerid][pSmugglerSkill] <= 74) {
			return 3;
		} else if(75 <= PlayerInfo[playerid][pSmugglerSkill] <= 99) {
			return 4;
		} else if(PlayerInfo[playerid][pSmugglerSkill] >= 100) {
		    return 5;
		}
	}
	else if(jobid == JOB_LAWYER)
	{
	    if(0 <= PlayerInfo[playerid][pLawyerSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerInfo[playerid][pLawyerSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerInfo[playerid][pLawyerSkill] <= 99) {
			return 3;
		} else if(100 <= PlayerInfo[playerid][pLawyerSkill] <= 199) {
			return 4;
		} else if(PlayerInfo[playerid][pLawyerSkill] >= 200) {
		    return 5;
		}
	}
	else if(jobid == JOB_DETECTIVE)
	{
	    if(0 <= PlayerInfo[playerid][pDetectiveSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pDetectiveSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pDetectiveSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pDetectiveSkill] <= 399) {
			return 4;
		} else if(PlayerInfo[playerid][pDetectiveSkill] >= 400) {
		    return 5;
		}
	}

	return 0;
}

GetPlayerCapacity(playerid, item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 50000 + (PlayerInfo[playerid][pInventoryUpgrade] * 10000);
		}
		case CAPACITY_WEED:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
		    {
		        case 0: return 50;
		        case 1: return 75;
		        case 2: return 100;
		        case 3: return 125;
		        case 4: return 150;
		        case 5: return 200;
			}
		}
		case CAPACITY_COCAINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 125;
		        case 5: return 150;
			}
		}
		case CAPACITY_METH:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 20;
		        case 1: return 40;
		        case 2: return 60;
		        case 3: return 80;
		        case 4: return 100;
		        case 5: return 150;
			}
		}
        case CAPACITY_PAINKILLERS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 5;
		        case 1: return 10;
		        case 2: return 15;
		        case 3: return 20;
		        case 4: return 25;
		        case 5: return 30;
			}
		}
		case CAPACITY_SEEDS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 20;
		        case 2: return 30;
		        case 3: return 40;
		        case 4: return 50;
		        case 5: return 60;
			}
		}
		case CAPACITY_EPHEDRINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 15;
		        case 2: return 20;
		        case 3: return 25;
		        case 4: return 30;
		        case 5: return 40;
			}
		}
		case CAPACITY_HPAMMO:
		{
		    return 60;
		}
        case CAPACITY_POISONAMMO:
		{
		    return 60;
		}
        case CAPACITY_FMJAMMO:
		{
      		return 60;
		}
	}
	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        for(new i = 0; i < MAX_HOUSES; i ++)
	        {
	            if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
	        for(new i = 0; i < MAX_BUSINESSES; i ++)
	        {
	            if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
	        for(new i = 0; i < MAX_GARAGES; i ++)
	        {
	            if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        switch(PlayerInfo[playerid][pVIPPackage])
			{
			    case 2: return 4;
			    case 3: return 6;
			}

			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
            switch(PlayerInfo[playerid][pVIPPackage])
			{
			    case 1: return 10;
			    case 2: return 15;
			    case 3: return 20;
			}

	        switch(PlayerInfo[playerid][pAssetUpgrade])
	        {
	            case 0: return 3;
	            case 1: return 4;
	            case 2: return 5;
	            case 3: return 7;
	            case 4: return 10;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(GetFactionType(killerid) == FACTION_HITMAN && PlayerInfo[killerid][pContractTaken] == playerid)
	{
	    new price = PlayerInfo[playerid][pContracted];

	    SM(killerid, COLOR_YELLOW, "You have completed your contract on %s and received $%i.", GetRPName(playerid), price);
	    SM(playerid, COLOR_YELLOW, "You have been killed by a hitman and lost $%i.", price);

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[killerid][pCompletedHits]++;
	    PlayerInfo[playerid][pContracted] = 0;
	    PlayerInfo[playerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET completedhits = %i WHERE uid = %i", PlayerInfo[killerid][pCompletedHits], PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == playerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		//Log_Write("log_contracts", "%s (uid: %i) successfully completed their hit on %s (uid: %i) for $%i.", GetRPName(killerid), PlayerInfo[killerid][pID], GetRPName(playerid), PlayerInfo[playerid][pID], price);
	}
	else if(PlayerInfo[playerid][pContractTaken] == killerid)
	{
	    new price = PlayerInfo[killerid][pContracted];

	    SM(playerid, COLOR_YELLOW, "You have failed your contract on %s and lost $%i.", GetRPName(playerid), price);
	    SM(killerid, COLOR_YELLOW, "You have killed a hitman chasing after you and received $%i. The contract on your head has been removed.", price);

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pFailedHits]++;
	    PlayerInfo[killerid][pContracted] = 0;
	    PlayerInfo[killerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET failedhits = %i WHERE uid = %i", PlayerInfo[playerid][pFailedHits], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == killerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		//Log_Write("log_contracts", "%s (uid: %i) failed their hit on %s (uid: %i) and lost $%i.", GetRPName(playerid), PlayerInfo[playerid][pID], GetRPName(killerid), PlayerInfo[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

 	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;
	if((id = GetInsideHouse(playerid)) >= 0)
	{
	    x = HouseInfo[id][hPosX];
	    y = HouseInfo[id][hPosY];
	    z = HouseInfo[id][hPosZ];
	}
	else if((id = GetInsideBusiness(playerid)) >= 0)
	{
	    x = BusinessInfo[id][bPosX];
	    y = BusinessInfo[id][bPosY];
	    z = BusinessInfo[id][bPosZ];
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    x = GarageInfo[id][gPosX];
	    y = GarageInfo[id][gPosY];
	    z = GarageInfo[id][gPosZ];
	}
	else if((id = GetInsideEntrance(playerid)) >= 0)
	{
	    x = EntranceInfo[id][ePosX];
	    y = EntranceInfo[id][ePosY];
	    z = EntranceInfo[id][ePosZ];
	}
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    return 1;
	}
	return 0;
}

GetVehicleLinkedID(id)
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}
GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

PreviewClothing(playerid, index)
{
	new businessid = GetInsideBusiness(playerid);
    if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		PlayerInfo[playerid][pEditType] = EDIT_CLOTHING_PREVIEW;
        PlayerInfo[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This clothing item costs "SVRCLR"%s{CCFFFF} to purchase.", clothingArray[index][clothingName], FormatNumber(BusinessInfo[businessid][bPrices][1]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditAttachedObject(playerid, 9);
	}
}
AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(PlayerInfo[playerid][pAFKPos][0] == x && PlayerInfo[playerid][pAFKPos][1] == y && PlayerInfo[playerid][pAFKPos][2] == z && PlayerInfo[playerid][pAFKPos][3] == cx && PlayerInfo[playerid][pAFKPos][4] == cy && PlayerInfo[playerid][pAFKPos][5] == cz)
	{
		PlayerInfo[playerid][pAFKTime]++;

	    if(!PlayerInfo[playerid][pAFK] && PlayerInfo[playerid][pAFKTime] >= 60)
	    {
		    SCM(playerid, COLOR_WHITE, "You are now marked as "SVRCLR"Away from keyboard"WHITE" as you haven't moved in one minute.");
		    PlayerInfo[playerid][pAFK] = 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][pAFK])
		{
		    if(PlayerInfo[playerid][pAFKTime] < 120) {
		    	SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i seconds.", PlayerInfo[playerid][pAFKTime]);
			} else {
			    SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i minutes.", PlayerInfo[playerid][pAFKTime] / 60);
			}

			PlayerInfo[playerid][pAFK] = 0;
		}

		PlayerInfo[playerid][pAFKTime] = 0;
	}

	PlayerInfo[playerid][pAFKPos][0] = x;
	PlayerInfo[playerid][pAFKPos][1] = y;
	PlayerInfo[playerid][pAFKPos][2] = z;
	PlayerInfo[playerid][pAFKPos][3] = cx;
	PlayerInfo[playerid][pAFKPos][4] = cy;
	PlayerInfo[playerid][pAFKPos][5] = cz;
}
ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerInfo[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerInfo[playerid][pCategory]]))
        {
	        if(PlayerInfo[playerid][pClothingIndex] == -1)
	        {
	            PlayerInfo[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[PlayerInfo[playerid][pCategory]], models, index);
}

PurchaseLandObject(playerid, landid, index)
{
    if(PlayerInfo[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(PlayerInfo[playerid][pEditType] == EDIT_LAND_OBJECT_PREVIEW && IsValidDynamicObject(PlayerInfo[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
            PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		PlayerInfo[playerid][pEditType] = EDIT_LAND_OBJECT_PREVIEW;
		PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		PlayerInfo[playerid][pObjectLand] = landid;
        PlayerInfo[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This object costs "SVRCLR"%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
	}
}

ShowObjectSelectionMenu(playerid, type)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerInfo[playerid][pFurnitureIndex] = -1;

	for(new i = 0; i < sizeof(furnitureArray); i ++)
	{
	    if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
	    {
	        if(PlayerInfo[playerid][pFurnitureIndex] == -1)
	        {
	            PlayerInfo[playerid][pFurnitureIndex] = i;
			}

	        models[index++] = furnitureArray[i][fModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, type, furnitureCategories[PlayerInfo[playerid][pCategory]], models, index);
}

/*PurchaseFurniture(playerid, index)
{
    if(PlayerInfo[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(PlayerInfo[playerid][pEditType] == EDIT_FURNITURE_PREVIEW && IsValidDynamicObject(PlayerInfo[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
            PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		PlayerInfo[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
		PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        PlayerInfo[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This furniture item costs "SVRCLR"%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
	}
}*/

ClearChat(playerid)
{
	for(new i = 0; i < 29; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

ClearAllChat(playerid)
{
	for(new i = 0; i < 65; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}
Float:Streamer_GetExtraFloat(objectid, type)
{
	new
	    string[24];

	getproperty(.id = objectid, .value = type, .string = string);
	strunpack(string, string);
	return floatstr(string);
}

Streamer_SetExtraFloat(objectid, type, Float:value)
{
	new
	    string[24];

	format(string, sizeof(string), "%f", value);
	setproperty(.id = objectid, .value = type, .string = string);
	return 1;
}

Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}

CreateObjectEx(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:drawdistance = 0.0)
{
	new
		objectid = CreateObject(modelid, x, y, z, rx, ry, rz, drawdistance);

	if(objectid != INVALID_OBJECT_ID)
	{
	    gScriptObject{objectid} = 1;
	}
	return objectid;

}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}

LandDoorCheck(playerid)
{
    new houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid),id;

	if((id = GetNearbyLand(playerid)) >= 0 && (IsLandOwner(playerid, id) || PlayerInfo[playerid][pLandPerms] == id))
	{
		for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
		{
    		if(IsValidDynamicObject(i) && IsGateObject(i) && IsPlayerInRangeOfPoint(playerid, 10.0, Streamer_GetExtraFloat(i, E_OBJECT_X), Streamer_GetExtraFloat(i, E_OBJECT_Y), Streamer_GetExtraFloat(i, E_OBJECT_Z)) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandGate", "ii", playerid, i);
			    return 1;
			}
		}
	}
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

	return 0;
}

EnterCheck(playerid)
{
	new id, string[40];

	if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}
	if(PlayerInfo[playerid][pHurt] - 30 > 0)
		return SM(playerid, COLOR_GREY, "You are too hurt to operate/enter anything. Please wait %i seconds before trying again.", (PlayerInfo[playerid][pHurt] - 30));

    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
			Dyuze(playerid, "Notice", "This house is ~r~Locked.");
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);
			//SM(playerid, COLOR_SYNTAX, "** This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
		}
		else
		{
			SM(playerid, COLOR_SYNTAX, "** This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
			Dyuze(playerid, "Notice", "This garage is ~r~Locked.");
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their garage.", GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the garage.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToGarage(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    PlayerInfo[playerid][pLastEnter] = gettime();
			SetFreezePos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
			Dyuze(playerid, "Notice", "This store is ~r~Closed.");
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);
			SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			//SM(playerid, COLOR_SYNTAX, "** This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bName]);
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0)
			{
				if(PlayerInfo[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to pay the entry fee. You may not enter.");
		        }

		        format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		        Dyuze(playerid, "Notice", string);

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bName]);
            SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			SM(playerid, COLOR_SYNTAX, "** This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		}

		PlayerInfo[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
			Dyuze(playerid, "Notice", "This building is ~r~Locked.");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SCM(playerid, COLOR_SYNTAX, "This entrance has no interior and therefore cannot be entered.");
		    return 0;
		}

		if(!PlayerInfo[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SCM(playerid, COLOR_SYNTAX, "Your administrator level is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SCM(playerid, COLOR_SYNTAX, "This entrance is only accesible to a specific faction type. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[id][eVIP])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Your VIP rank is too low. You may not enter.");
		    	return 0;
			}
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    Dyuze(playerid, "Notice", string);
		}
		return 1;
	}
	return 0;
}

ExitCheck(playerid)
{
	new id;

    if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}

    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the house.", GetRPName(playerid));
		SetPlayerPos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if(
			(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the garage.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the business.", GetRPName(playerid));
		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        PlayerInfo[playerid][pLastReport] = gettime();
	        SAM(SERVER_COLOR, "Report from [%i]%s (RID: %i): %s", playerid, GetRPName(playerid), i, text);
	        new szString[128];
	    	format(szString, sizeof(szString),  "Report from [%i]%s (RID: %i): %s", playerid, GetRPName(playerid), i, text);
	        SendDiscordMessage(19, szString);
	        return 1;
		}
	}

	return 0;
}

AddDMReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        PlayerInfo[playerid][pLastReport] = gettime();
	        SAM(COLOR_YELLOW2, "%s has reported that the following player may be "RED"deathmatching{F5DEB3}: %s (ReportID: %i)", GetRPName(playerid), text, i);
	        return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
	mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(!strcmp(from, SERVER_BOT))
	{
	    gAnticheatBans++;
    	SaveServerInfo();
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);
	
	new szString[128];
	format(szString, sizeof(szString),  "%s (IP: %s) was banned by %s, reason: %s", GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
    SendDiscordMessage(1, szString);

	AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
	KickIP(GetPlayerIP(playerid));
}

Rangeban(playerid, from[], reason[])
{
	AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);
	new szString[128];
	format(szString, sizeof(szString),  "%s (IP: %s) was rangebanned by %s, reason: %s", GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	SendDiscordMessage(1, szString);

	KickIP(GetPlayerIP(playerid));
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetHealth(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

forward OnPlayerBleed(playerid);
public OnPlayerBleed(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pBleed] > 0)
		{
			new Float:health;
			GetPlayerHealth(playerid, health);
			SetPlayerHealth(playerid, health - 1.50);
		}
	}
	else
	{
		KillTimer(PlayerInfo[playerid][pBleedTimer]);
		PlayerInfo[playerid][pBleedTimer] = -1;
		PlayerInfo[playerid][pBleed] = 0;
	}
	return 1;
}

stock SetRadarMap(Float:x, Float:y, Float:z)
{
    MAP_OFF_X = x;
    MAP_OFF_Y = y;
    MAP_OFF_Z = z;

	for(new i = 0; i < 8; i++) SetDynamicObjectPos(MapPieces[i][RadarMapObject], MapPieces[i][RadarOffX]+x, MapPieces[i][RadarOffY]+y, MapPieces[i][RadarOffZ]+z);
	return 1;
}


stock IsABulletWeapon(weaponid)
{
	switch(weaponid)
	{
		case 22 .. 34:
		{
			return 1;
		}
	}
	return 0;
}

stock ShowNoticeGUIFrame(playerid, frame)
{
	HideNoticeGUIFrame(playerid);

	TextDrawShowForPlayer(playerid, NoticeTxtdraw[0]);
	TextDrawShowForPlayer(playerid, NoticeTxtdraw[1]);
	SendClientMessage(playerid, COLOR_YELLOW, "If the notice box didn't hide, use /hideplayergui to hide the notice box.");

	switch(frame)
	{
		case 1: // Looking up account
		{
			TextDrawSetString(NoticeTxtdraw[2], "Looking up account");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Checking to see if account exists...");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 2: // Fetching & Comparing Password
		{
			TextDrawSetString(NoticeTxtdraw[2], "Comparing Password");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Comparing passwords with database, Please Wait!");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 3: // Fetching & Loading Account
		{
			TextDrawSetString(NoticeTxtdraw[2], "Fetching Data");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Fetching & Loading your account, Please Wait!");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 4: // Streaming Objects
		{
			TextDrawSetString(NoticeTxtdraw[2], "Streaming Objects");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading objects within your area, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 5: // Login Queue
		{
			TextDrawSetString(NoticeTxtdraw[2], "Loading your Account");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Logging you into the server, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 6: // General loading
		{
			TextDrawSetString(NoticeTxtdraw[2], "Loading...");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
		}
		case 7: // Event Loading
		{
			TextDrawSetString(NoticeTxtdraw[2], "Joining Event");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading event information, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 8: // Event Exit
		{
			TextDrawSetString(NoticeTxtdraw[2], "Leaving Event");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading your last location, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
	}
}

stock HideNoticeGUIFrame(playerid)
{
	for(new i = 0; i < 4; i++)
	{
		TextDrawHideForPlayer(playerid, NoticeTxtdraw[i]);
	}
}

// VALE

stock GetXYInFrontOfPlayer(playerid, &Float:X, &Float:Y, &Float:Z, Float:distance)
{
	new Float:A;
	GetPlayerPos(playerid, X, Y, Z);

	if (GetPlayerVehicleID(playerid))	GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	else								GetPlayerFacingAngle(playerid, A);

	X += (distance * floatsin(-A, degrees));
	Y += (distance * floatcos(-A, degrees));
}

GetNextValletDriverID()
{
    for (new i = 0; i < MAX_VALETDRIVERS; i ++)
	{
	    if (!ValletDriver[i][vUsed])
	    {
	        return i;
		}
	}
	return -1;
}

GetValetDriverID(npcid)
{
	if(!FCNPC_IsValid(npcid) || npcid < 0 || npcid >= MAX_PLAYERS) return -1;

	new id = NPCDriverID[npcid];

	if(id >= 0 && id < MAX_VALETDRIVERS) if(ValletDriver[id][vUsed] && ValletDriver[id][vDriverID] == npcid) return id;

	for(new i = 0; i < MAX_VALETDRIVERS; i ++) // Note: This will only be executed if the Array doesn't hold the ID for some reason. Never happened yet.
	{
	    if(npcid != ValletDriver[i][vDriverID] || !ValletDriver[i][vUsed]) continue;

	    return i;
	}

	return -1;
}

stock SendDiscordMessage(channel, message[]) {
	new DCC_Channel:ChannelId;
	switch(channel)
	{
		// log-admin
		case 0:
		{
			//432448034258026497
			ChannelId = DCC_FindChannelById("985789127855341568");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-ban
		case 1:
		{
			//432456347997437952
			ChannelId = DCC_FindChannelById("985789153880997888");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-cheat
		case 2:
		{
			//432447907984310273
			ChannelId = DCC_FindChannelById("985789179357179964");
			DCC_SendChannelMessage(ChannelId, message);

		}
		// log-contracts
		case 3:
		{
			//432456150143729674
			ChannelId = DCC_FindChannelById("965566038429298728");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-faction
		case 4:
		{
			//447977057209679893
			ChannelId = DCC_FindChannelById("985789210571190322");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-gang
		case 5:
		{
			//537887476103249920
			ChannelId = DCC_FindChannelById("985789232243146792");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-give
		case 6:
		{
			//546587111516536832
			ChannelId = DCC_FindChannelById("985790437447069727");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-namechanges
		case 7:
		{
			//897760212981805066
			ChannelId = DCC_FindChannelById("985789263956279396");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-namehistory
		case 8:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("965566229257551933");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-property
		case 9:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789428956024872");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-punishment
		case 10:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789459717038120");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-vip
		case 11:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("965566365677285427");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// log-kills
		case 12:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789493758013461");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// mysql-error-log
		case 13:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789932213776424");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// Admin Chat
		case 14:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789554353123408");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-turf-war
		case 15:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789631624802314");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-advertisement
		case 16:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789769931964426");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// samp-point-war
		case 17:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789654169174027");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// helpers logs
		case 18:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789587437781052");
			DCC_SendChannelMessage(ChannelId, message);
		}
		// accept report logs
		case 19:
		{
			//546599295235653633
			ChannelId = DCC_FindChannelById("985789817965142056");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 20:
		{ // bug report
			ChannelId = DCC_FindChannelById("985789817965142056");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 21:
		{ // angle logs
			ChannelId = DCC_FindChannelById("965566799250870302");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 22:
		{ // whitelist channel
			ChannelId = DCC_FindChannelById("965566835506413618");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 23:
		{ // command channel
			ChannelId = DCC_FindChannelById("965566872680538142");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 24:
		{ // server info  channel
			ChannelId = DCC_FindChannelById("987369125250760834");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 25:
		{ // Robbery Log Channel
			ChannelId = DCC_FindChannelById("991001631938211890");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 26:
		{ // Report Handle log channel
			ChannelId = DCC_FindChannelById("1077272228053389423");
			DCC_SendChannelMessage(ChannelId, message);
		}
	}
	return 1;
}

stock ShowAtm(playerid)
{
    PlayerTextDrawShow(playerid, AtmTD[playerid][0]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][1]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][2]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][3]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][4]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][5]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][6]);
    PlayerTextDrawShow(playerid, AtmTD[playerid][7]);
    return 1;
}

stock HideAtm(playerid)
{
    PlayerTextDrawHide(playerid, AtmTD[playerid][0]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][1]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][2]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][3]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][4]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][5]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][6]);
    PlayerTextDrawHide(playerid, AtmTD[playerid][7]);
    return 1;
}
//vehpanel codes
stock ShowVehPanel(playerid)
{
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][0]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][1]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][2]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][3]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][4]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][5]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][6]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][7]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][8]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][9]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][10]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][11]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][12]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][13]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][14]);
    PlayerTextDrawShow(playerid, VehPanelTD[playerid][15]);
    SelectTextDraw(playerid, 0xFF0000FF);
    return 1;
}
stock HideVehPanel(playerid)
{
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][0]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][1]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][2]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][3]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][4]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][5]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][6]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][7]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][8]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][9]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][10]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][11]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][12]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][13]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][14]);
    PlayerTextDrawHide(playerid, VehPanelTD[playerid][15]);
    CancelSelectTextDraw(playerid);
    return 1;
}
//registertd madedits
Registration_TD(playerid)
{
RegistrationTD[playerid][0] = CreatePlayerTextDraw(playerid, 147.000000, 106.000000, "_");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][0], 1);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][0], 0.600000, 29.500000);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][0], 294.000000, 128.000000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][0], 2);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][0], -1);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][0], 255);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][0], 0);

RegistrationTD[playerid][1] = CreatePlayerTextDraw(playerid, 511.000000, 361.000000, "Create Identity");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][1], 2);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][1], 0.183331, 2.349997);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][1], 16.500000, 88.000000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][1], 2);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][1], 852308735);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][1], 200);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][1], 1);

RegistrationTD[playerid][2] = CreatePlayerTextDraw(playerid, 149.000000, 149.000000, "AGE");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][2], 2);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][2], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][2], 12.500000, 57.500000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][2], 2);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][2], -16776961);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][2], -1378294072);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][2], 1);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][2], 1);

RegistrationTD[playerid][3] = CreatePlayerTextDraw(playerid, 149.000000, 193.000000, "GENDER");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][3], 2);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][3], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][3], 16.500000, 59.500000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][3], 2);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][3], -16776961);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][3], -1378294072);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][3], 1);

RegistrationTD[playerid][4] = CreatePlayerTextDraw(playerid, 93.000000, 113.000000, "MGMC CHARACTER CREATION");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][4], 2);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][4], 0.183331, 1.549998);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][4], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][4], 1);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][4], 0);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][4], 0);

RegistrationTD[playerid][5] = CreatePlayerTextDraw(playerid, 148.000000, 239.000000, "SKIN ID");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][5], 2);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][5], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][5], 10.000000, 61.500000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][5], 2);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][5], -16776961);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][5], -1378294072);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][5], 1);

RegistrationTD[playerid][6] = CreatePlayerTextDraw(playerid, 106.000000, 277.000000, "Preview_Model");
PlayerTextDrawFont(playerid, RegistrationTD[playerid][6], 5);
PlayerTextDrawLetterSize(playerid, RegistrationTD[playerid][6], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, RegistrationTD[playerid][6], 81.000000, 83.000000);
PlayerTextDrawSetOutline(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawSetShadow(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, RegistrationTD[playerid][6], 1);
PlayerTextDrawColor(playerid, RegistrationTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, RegistrationTD[playerid][6], 125);
PlayerTextDrawBoxColor(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawUseBox(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawSetProportional(playerid, RegistrationTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawSetPreviewModel(playerid, RegistrationTD[playerid][6], 0);
PlayerTextDrawSetPreviewRot(playerid, RegistrationTD[playerid][6], -12.000000, 0.000000, -2.000000, 0.899999);
PlayerTextDrawSetPreviewVehCol(playerid, RegistrationTD[playerid][6], 6, 1);
}
forward ShowRegistration(playerid);
public ShowRegistration(playerid)
{
	for( new i = 0; i < 7; i ++)
	{
		PlayerTextDrawShow(playerid, RegistrationTD[playerid][i]);
	}
}
stock ShowRegistrationMenu(playerid, bool:show)
{
	if(show == true)
	{
		Registration_TD(playerid);
		SetTimerEx("ShowRegistration", 200, false, "d", playerid);
        SetPVarInt(playerid, "Registration", 1);

		for( new i = 0; i < 7; i ++)
		{
			PlayerTextDrawShow(playerid, RegistrationTD[playerid][i]);
			SelectTextDraw(playerid, 0xFF0000FF);
		}
	}
	else if(show == false)
	{
	    DeletePVar(playerid, "Registration");
		for( new i = 0; i < 7; i ++)
		{
			PlayerTextDrawHide(playerid, RegistrationTD[playerid][i]);
			PlayerTextDrawDestroy(playerid, RegistrationTD[playerid][i]);
			RegistrationTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw(playerid);
		}
	}
}

ShowTurfTD(playerid)
{
   PlayerTextDrawShow(playerid, TurfTD[playerid][0]);
   PlayerTextDrawShow(playerid, TurfTD[playerid][1]);
   PlayerTextDrawShow(playerid, TurfTD[playerid][2]);
   PlayerTextDrawShow(playerid, TurfTD[playerid][3]);
   PlayerTextDrawShow(playerid, TurfTD[playerid][4]);
   PlayerTextDrawShow(playerid, TurfTD[playerid][5]);
   return 1;
}

HideTurfTD(playerid)
{
   PlayerTextDrawHide(playerid, TurfTD[playerid][0]);
   PlayerTextDrawHide(playerid, TurfTD[playerid][1]);
   PlayerTextDrawHide(playerid, TurfTD[playerid][2]);
   PlayerTextDrawHide(playerid, TurfTD[playerid][3]);
   PlayerTextDrawHide(playerid, TurfTD[playerid][4]);
   PlayerTextDrawHide(playerid, TurfTD[playerid][5]);
   return 1;
}

ShowWarningTD(playerid)
{
   PlayerTextDrawShow(playerid, WarningTD[playerid][0]);
   PlayerTextDrawShow(playerid, WarningTD[playerid][1]);
   PlayerTextDrawShow(playerid, WarningTD[playerid][2]);
   PlayerTextDrawShow(playerid, WarningTD[playerid][3]);
   PlayerTextDrawShow(playerid, WarningTD[playerid][4]);
   PlayerTextDrawShow(playerid, WarningTD[playerid][5]);
   return 1;
}

HideWarning(playerid)
{
   PlayerTextDrawHide(playerid, WarningTD[playerid][0]);
   PlayerTextDrawHide(playerid, WarningTD[playerid][1]);
   PlayerTextDrawHide(playerid, WarningTD[playerid][2]);
   PlayerTextDrawHide(playerid, WarningTD[playerid][3]);
   PlayerTextDrawHide(playerid, WarningTD[playerid][4]);
   PlayerTextDrawHide(playerid, WarningTD[playerid][5]);
   return 1;
}
//phone main screen
stock ShowLock(playerid)
{
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][0]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][1]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][2]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][3]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][4]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][5]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][6]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][7]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][8]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][9]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][10]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][11]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][12]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][13]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][14]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][15]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][16]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][17]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][18]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][19]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][20]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][21]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][22]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][23]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][24]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][25]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][26]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][27]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][28]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][29]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][30]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][31]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][32]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][33]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][34]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][35]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][36]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][37]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][38]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][39]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][40]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][41]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][42]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][43]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][44]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][45]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][46]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][47]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][48]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][49]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][50]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][51]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][52]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][53]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][54]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][55]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][56]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][57]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][58]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][59]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][60]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][61]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][62]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][63]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][64]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][65]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][66]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][67]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][68]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][69]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][70]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][71]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][72]);
    PlayerTextDrawShow(playerid, HOMESCREENTD[playerid][73]);
    return 1;
}

stock HideLock(playerid)
{
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][0]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][1]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][2]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][3]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][4]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][5]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][6]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][7]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][8]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][9]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][10]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][11]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][12]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][13]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][14]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][15]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][16]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][17]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][18]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][19]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][20]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][21]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][22]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][23]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][24]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][25]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][26]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][27]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][28]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][29]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][30]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][31]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][32]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][33]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][34]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][35]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][36]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][37]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][38]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][39]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][40]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][41]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][42]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][43]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][44]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][45]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][46]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][47]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][48]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][49]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][50]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][51]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][52]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][53]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][54]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][55]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][56]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][57]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][58]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][59]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][60]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][61]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][62]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][63]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][64]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][65]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][66]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][67]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][68]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][69]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][70]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][71]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][72]);
    PlayerTextDrawHide(playerid, HOMESCREENTD[playerid][73]);
    return 1;
}

stock ShowGpay(playerid)
{
    PlayerTextDrawShow(playerid, playertextdraw_0[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_1[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_2[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_3[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_4[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_5[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_6[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_7[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_8[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_9[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_10[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_11[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_12[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_13[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_14[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_15[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_16[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_17[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_18[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_19[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_20[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_21[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_22[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_23[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_24[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_25[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_26[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_27[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_28[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_29[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_30[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_31[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_32[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_33[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_34[playerid]);
    PlayerTextDrawShow(playerid, playertextdraw_35[playerid]);
    return 1;
}

stock HideGpay(playerid)
{
    PlayerTextDrawHide(playerid, playertextdraw_0[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_1[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_2[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_3[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_4[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_5[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_6[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_7[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_8[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_9[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_10[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_11[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_12[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_13[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_14[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_15[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_16[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_17[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_18[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_19[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_20[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_21[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_22[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_23[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_24[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_25[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_26[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_27[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_28[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_29[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_30[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_31[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_32[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_33[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_34[playerid]);
    PlayerTextDrawHide(playerid, playertextdraw_35[playerid]);
    return 1;
}

stock ShowBank(playerid)
{
    PlayerTextDrawShow(playerid, BankTD1[playerid][0]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][1]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][2]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][3]);
	PlayerTextDrawShow(playerid, BankTD1[playerid][4]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][5]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][6]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][7]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][8]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][9]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][10]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][11]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][12]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][13]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][14]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][15]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][16]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][17]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][18]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][19]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][20]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][21]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][22]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][23]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][24]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][25]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][26]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][27]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][28]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][29]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][30]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][31]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][32]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][33]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][34]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][35]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][36]);
    PlayerTextDrawShow(playerid, BankTD1[playerid][37]);
    return 1;
}

stock HideBank(playerid)
{
    PlayerTextDrawHide(playerid, BankTD1[playerid][0]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][1]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][2]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][3]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][4]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][5]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][6]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][7]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][8]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][9]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][10]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][11]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][12]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][13]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][14]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][15]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][16]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][17]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][18]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][19]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][20]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][21]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][22]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][23]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][24]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][25]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][26]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][27]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][28]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][29]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][30]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][31]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][32]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][33]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][34]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][35]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][36]);
    PlayerTextDrawHide(playerid, BankTD1[playerid][37]);
    return 1;
}
stock ShowReceipt(playerid)
{
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][0]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][1]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][2]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][3]);
	PlayerTextDrawShow(playerid, BankReceiptTD[playerid][4]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][5]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][6]);
    PlayerTextDrawShow(playerid, BankReceiptTD[playerid][7]);
    return 1;
}

stock HideReceipt(playerid)
{
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][0]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][1]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][2]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][3]);
	PlayerTextDrawHide(playerid, BankReceiptTD[playerid][4]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][5]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][6]);
    PlayerTextDrawHide(playerid, BankReceiptTD[playerid][7]);
    return 1;
}
stock ShowBank1(playerid)
{
    PlayerTextDrawShow(playerid, BankTD2[playerid][0]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][1]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][2]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][3]);
	PlayerTextDrawShow(playerid, BankTD2[playerid][4]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][5]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][6]);
    PlayerTextDrawShow(playerid, BankTD2[playerid][7]);
    return 1;
}

stock HideBank1(playerid)
{
    PlayerTextDrawHide(playerid, BankTD2[playerid][0]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][1]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][2]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][3]);
	PlayerTextDrawHide(playerid, BankTD2[playerid][4]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][5]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][6]);
    PlayerTextDrawHide(playerid, BankTD2[playerid][7]);
    return 1;
}

stock SCMEx(playerid, color, fstring[], {Float, _}:...) 
{
    new n = numargs() * 4;
	if (n == 3 * 4) 
	{
		return SCM(playerid, color, fstring);
	}
	else 
	{
		new message[255];
		new arg_start;
        new arg_end;
        new i = 0;

        #emit CONST.pri  fstring
        #emit ADD.C    0x4
        #emit STOR.S.pri arg_start

        #emit LOAD.S.pri n
        #emit ADD.C    0x8
        #emit STOR.S.pri arg_end

        for (i = arg_end; i >= arg_start; i -= 4) 
        {
            #emit LCTRL    5
            #emit LOAD.S.alt i
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S  fstring
        #emit PUSH.C  128
        #emit PUSH.ADR message
        #emit PUSH.S  n
        #emit SYSREQ.C format

        i = n / 4 + 1;
        while (--i >= 0) 
        {
            #emit STACK 0x4
        }
        return SCM(playerid, color, message);
	}
}

GetArmor(playerid)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

AddToPaycheck(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pPaycheck] = PlayerInfo[playerid][pPaycheck] + amount;

		if(!PlayerInfo[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = paycheck + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

forward OnPlayerCallContact(playerid);
public OnPlayerCallContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return SCM(playerid, SERVER_COLOR , "You don't have that name in your contacts");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "contact_number");
		cache_get_field_content(0, "contact_name", contact);

		if(number == PlayerInfo[playerid][pPhone])
		{
			return SCM(playerid, SERVER_COLOR , "Error:"WHITE" Invalid number.");
		}	

		foreach(new i : Player)
		{
			if(PlayerInfo[i][pTogglePhone])
				return SCM(playerid, SERVER_COLOR , "The player's phone is off.");
		
			if(PlayerInfo[i][pPhone] == number)
			{
				if(PlayerInfo[i][pJailType] > 0)
				{
					return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
				}
				if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, SERVER_COLOR , "Error:"WHITE" This player is currently in a call. Wait until they hang up.");
				}
				if(PlayerInfo[i][pTogglePhone])
				{
					return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player has their mobile phone switched off.");
				}
				if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently in a live interview and can't talk on the phone.");
				}

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				KillTimer(PlayerInfo[playerid][pCallTimer]);
				KillTimer(PlayerInfo[i][pCallTimer]);

				PlayerInfo[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
				PlayerInfo[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

				PlayerInfo[playerid][pCallLine] = i;
				PlayerInfo[playerid][pCalling] = 1;
				PlayerInfo[playerid][pCallStage] = 0;

				PlayerInfo[i][pCallLine] = playerid;
				PlayerInfo[i][pCallStage] = 1;

				SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

				SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i (%s). Please wait for your call to be answered.", number, contact);
				SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
				return 1;
			}
		}

		SCM(playerid, SERVER_COLOR , "Error:"WHITE" That number is either not in service or the owner is offline.");
	}
	return 1;
}

forward OnPlayerTextContact(playerid);
public OnPlayerTextContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];

	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return 0;
	}
	else
	{
		new
			number;

		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);

		PlayerInfo[playerid][pPhoneSMS] = number;

		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
	}
	return 1;
}

forward OnPlayerListContacts(playerid);
public OnPlayerListContacts(playerid)
{
	new
		contact[MAX_PLAYER_NAME],
		string[1024],
		number;

	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	strcat(string, "Add Contact");

	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "contact_name", contact);
		number = cache_get_field_content_int(i, "contact_number");
		format(string, sizeof(string), "%s\n%s (%i)", string, contact, number);

		gListedItems[playerid][i] = cache_get_field_content_int(i, "contact_id");
	}
	ShowPlayerDialog(playerid, DIALOG_CONTACTS, DIALOG_STYLE_LIST, "{FFFFFF}My contacts", string, "Select", "Cancel");
}

ListContacts(playerid)
{
	if (PlayerInfo[playerid][pPhone] > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phone_contacts WHERE phone_number = %i", PlayerInfo[playerid][pPhone]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerListContacts", "i", playerid);
	}
}

forward OnPhoneBecomeAvailable(playerid);
public OnPhoneBecomeAvailable(playerid)
{
	if(PlayerInfo[playerid][pCallStage] < 1 && PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "They didn't answered the call.");
		SCM(playerid, COLOR_GREY, "The other line didn't picked up the call, please try again later.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
	} 
	/*else {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "You didn't answered the call, the phone stopped ringing.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's phone stopped ringing.", GetRPName(playerid));
	}

	PlayerInfo[playerid][pCallStage] = 0;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCalling] = 0;

	KillTimer(PlayerInfo[playerid][pCallTimer]);*/
	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}

GivePlayerCash(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] + amount;

		if(!PlayerInfo[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

GivePlayerDirtyCash(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pDirtyCash] = PlayerInfo[playerid][pDirtyCash] + amount;

		if(!PlayerInfo[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = dirtycash + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

RefundPlayer(playerid)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pRefunded] = 3;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 3 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		GivePlayerCash(playerid, 100000);
	    Dyuze(playerid, "Notice", "~g~$100000");
		// VIPRefund(playerid);
	}
}

/*VIPRefund(playerid)
{
	if (PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pVIPPackage] = 3;
		PlayerInfo[playerid][pVIPTime] = gettime() + (604800);
		PlayerInfo[playerid][pVIPCooldown] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", PlayerInfo[playerid][pVIPPackage], PlayerInfo[playerid][pVIPTime], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}*/

FriskPlayer(playerid, targetid)
{
	SM(playerid, SERVER_COLOR, "%s's Items:", GetRPName(targetid));

	SM(playerid, COLOR_GREEN, "Cash ($%i)", PlayerInfo[targetid][pCash]);
	SM(playerid, COLOR_GREEN, "Backpack: Cash ($%i)", PlayerInfo[targetid][bpCash]);
	SM(playerid, COLOR_REALRED, "Dirty Money ($%i)", PlayerInfo[targetid][pDirtyCash]);

	if(PlayerInfo[targetid][pBackpack])
	{
	    SCM(playerid, COLOR_GREY2, "Backpack");
	}
	if(PlayerInfo[targetid][pPhone])
	{
	    SCM(playerid, COLOR_GREY2, "Mobile Phone");
	}
	if(PlayerInfo[targetid][pWalkieTalkie])
	{
	    SCM(playerid, COLOR_GREY2, "Portable Radio");
	}
    if(PlayerInfo[targetid][pSpraycans])
	{
	    SM(playerid, COLOR_GREY2, "Spraycans (%i)", PlayerInfo[targetid][pSpraycans]);
	}
	if(PlayerInfo[targetid][pBoombox])
	{
	    SCM(playerid, COLOR_GREY2, "Boombox");
	}
	if(PlayerInfo[targetid][pMP3Player])
	{
	    SCM(playerid, COLOR_GREY2, "MP3 player");
	}
	if(PlayerInfo[targetid][pPhonebook])
	{
	    SCM(playerid, COLOR_GREY2, "Phonebook");
	}
	if(PlayerInfo[targetid][pMaterials] > 0)
	{
	    SM(playerid, COLOR_REALRED, "Materials (%i)", PlayerInfo[targetid][pMaterials]);
	}
    if(PlayerInfo[targetid][pPot])
	{
	    SM(playerid, COLOR_REALRED, "Pot (%ig)", PlayerInfo[targetid][pPot]);
	}
	if(PlayerInfo[targetid][pCrack])
	{
	    SM(playerid, COLOR_REALRED, "Crack (%ig)", PlayerInfo[targetid][pCrack]);
	}
	if(PlayerInfo[targetid][pMeth])
	{
	    SM(playerid, COLOR_REALRED, "Meth (%ig)", PlayerInfo[targetid][pMeth]);
	}
	if(PlayerInfo[targetid][pPainkillers])
	{
	    SM(playerid, COLOR_REALRED, "Painkillers (%i)", PlayerInfo[targetid][pPainkillers]);
	}
	if(PlayerInfo[targetid][pSeeds])
	{
	    SM(playerid, COLOR_REALRED, "Marijuana Seeds (%i)", PlayerInfo[targetid][pSeeds]);
	}
	if(PlayerInfo[targetid][pEphedrine])
	{
	    SM(playerid, COLOR_REALRED, "Raw Ephedrine (%i)", PlayerInfo[targetid][pEphedrine]);
	}
	if(PlayerInfo[targetid][bpMaterials] > 0)
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Materials (%i)", PlayerInfo[targetid][bpMaterials]);
	}
    if(PlayerInfo[targetid][bpPot])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Pot (%ig)", PlayerInfo[targetid][bpPot]);
	}
	if(PlayerInfo[targetid][bpCrack])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Crack: (%ig)", PlayerInfo[targetid][bpCrack]);
	}
	if(PlayerInfo[targetid][bpMeth])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Meth (%ig)", PlayerInfo[targetid][bpMeth]);
	}
	if(PlayerInfo[targetid][bpPainkillers])
	{
	    SM(playerid, COLOR_REALRED, "Backpack: Painkillers (%i)", PlayerInfo[targetid][bpPainkillers]);
	}

	switch(PlayerInfo[targetid][pSmuggleDrugs])
	{
	    case 1: SM(playerid, COLOR_REALRED, "Seeds package");
	    case 2: SM(playerid, COLOR_REALRED, "Crack package");
	    case 3: SM(playerid, COLOR_REALRED, "Raw ephedrine package");
	}

	for(new i = 0; i < 13; i ++)
	{
	    if(PlayerInfo[targetid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_REALRED, "%s", GetWeaponNameEx(PlayerInfo[targetid][pWeapons][i]));
		}
 	    else if(PlayerInfo[targetid][bpWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_REALRED, "Backpack: %s", GetWeaponNameEx(PlayerInfo[targetid][bpWeapons][i]));
		}
	}

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s searches for items on %s.", GetRPName(playerid), GetRPName(targetid));
}

DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	new package[12];
	switch(PlayerInfo[playerid][pSmuggleDrugs])
	{
	    case 0: package = "None";
	    case 1: package = "Seeds";
	    case 2: package = "Crack";
	    case 3: package = "Ephedrine";
	}
	SM(targetid, COLOR_REALRED, "_______ %s's inventory [Inventory Skill: %i/5] [%s] _______", GetRPName(playerid), PlayerInfo[playerid][pInventoryUpgrade], GetDate());
	SM(targetid, COLOR_WHITE, "(Pot: %i/%ig) - (Crack: %i/%ig) - (Meth: %i/%ig) - (Painkillers: %i/%i) - (Seeds: %i/%i)\n", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED),
		PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE), PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH), PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS), PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
	SM(targetid, SERVER_COLOR, "(Materials: %s/%i) - (Ephedrine: %i/%ig) - (Muriatic acid: %i/20) - (Baking soda: %i/20)\n", AddCommas(PlayerInfo[playerid][pMaterials]), GetPlayerCapacity(playerid, CAPACITY_MATERIALS),
		PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE), PlayerInfo[playerid][pMuriaticAcid], PlayerInfo[playerid][pBakingSoda]);

	SM(targetid, COLOR_WHITE, "(Fishing rod: %s) - (Fish bait: %i/20) - (Boombox: %s) - (MP3 player: %s) - (Phonebook: %s)\n", (PlayerInfo[playerid][pFishingRod]) ? ("Yes") : ("No"), PlayerInfo[playerid][pFishingBait], (PlayerInfo[playerid][pBoombox]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pMP3Player]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SM(targetid, SERVER_COLOR, "(Drivers License: %s) - (Cigars: %i) - (Spraycans: %i/20) - (Bombs: %i/3)- (Hacker Laptop: %i/5)\n", (PlayerInfo[playerid][pCarLicense]) ? ("Yes") : ("No"), PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pHammer]);
	SM(targetid, COLOR_WHITE, "(Gasoline: %i/20L) - (Portable Radio: %s) - (Mobile Phone: %s) - (Drug Package: %s) - (Rope: %i/10)\n", PlayerInfo[playerid][pGasCan], (PlayerInfo[playerid][pWalkieTalkie]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pPhone]) ? ("Yes") : ("No"), package, PlayerInfo[playerid][pRope]);
    SM(targetid, SERVER_COLOR, "(Watch: %s) - (GPS: %s) - (Diamonds: %i) - (Dirty Cash: %i) - (Jacket: %i) - (Foods: %i) - (Drinks: %i) - (Lockpick: %i)", (PlayerInfo[playerid][pWatch]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pGPS]) ? ("Yes") : ("No"), PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pFood], PlayerInfo[playerid][pDrink], PlayerInfo[playerid][pLockpick]);
    SCM(targetid, COLOR_REALRED, "______________________________________________________________________");
	return 1;
}

DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], insurance[24], division[32], Float:health, Float:armor, Float:maxarmor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, PlayerInfo[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(PlayerInfo[playerid][pGender] == 1) gender = "Male";
	else if(PlayerInfo[playerid][pGender] == 2) gender = "Female";
	else if(PlayerInfo[playerid][pGender] == 3) gender = "Shemale";

	switch(PlayerInfo[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    case HOSPITAL_VIP: insurance = "VIP LOUNGE";
	    default: insurance = "None";
	}

	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "None", true))
	    {
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		}
		else
		{
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fShortName]);
		}

	    format(facrank, sizeof(facrank), "%s (%i)", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);

	    if(PlayerInfo[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A";
	    division = "None";
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[PlayerInfo[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A";
	}

	switch(PlayerInfo[playerid][pVIPPackage])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}

	if(playerid == MAX_PLAYERS)
	{
	    health = PlayerInfo[playerid][pHealth];
	    armor = PlayerInfo[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}

	SM(targetid, 0x7514F6FF,  	"_______________________________________________________________________________");
 	SM(targetid, COLOR_WHITE, 		"%s - (Level: %i) - (Gender: %s) - (Age: %i) - (Cash: $%s) - (Bank: $%s) - (Hours: %i) - (Ph: %i)\n", name, PlayerInfo[playerid][pLevel], gender, PlayerInfo[playerid][pAge], AddCommas(PlayerInfo[playerid][pCash]), AddCommas(PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pHours], PlayerInfo[playerid][pPhone]);
	SM(targetid, COLOR_NAVYBLUE,  	 	"(Total Wealth: $%s) - (Addict: %i/3) - (Asset: %i/4) - (Channel: %i) - (Report Warnings: %i/3)\n", AddCommas(PlayerInfo[playerid][pCash] + PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pChannel], PlayerInfo[playerid][pReportWarns]);
	SM(targetid, COLOR_WHITE, 		"(Job: %s / %s) - (Job Skill: %i) - (Crimes: %i) - (Arrested: %i) - (Jail Time: %i seconds)\n", GetJobName(PlayerInfo[playerid][pJob]), GetJobName(PlayerInfo[playerid][pSecondJob]), GetJobLevel(playerid, PlayerInfo[playerid][pJob]), PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pArrested], PlayerInfo[playerid][pJailTime]);
	SM(targetid, COLOR_NAVYBLUE,  	 	"(Spawn Health: %.1f/100.0) - (Spawn Armor: %.1f/%.1f) - (Insurance: %s) - (Paycheck: $%i)\n", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnArmor], maxarmor, insurance, PlayerInfo[playerid][pPaycheck]);
    SM(targetid, COLOR_WHITE, 		"(Faction: %s [%s %i -%s]) - (Gang: %s [%s %i]) - (Helper: %s) - (DM Warnings: %i/5) - (Weapon Restriction: %i Hrs)\n", faction, facrank, PlayerInfo[playerid][pFactionRank], division, gang, gangrank, PlayerInfo[playerid][pGangRank], GetHelperRank(playerid), PlayerInfo[playerid][pDMWarnings], PlayerInfo[playerid][pWeaponRestricted]);
	SM(targetid, COLOR_NAVYBLUE, 		"(VIP Package: %s) - (Married to: %s) - (Warnings: %i) - (Wanted Level: %i)\n", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), PlayerInfo[playerid][pMarriedName], PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pWantedLevel]);
	SM(targetid, COLOR_WHITE,       "(Experience: %s/%s) - (Next Level: %s)\n",  FormatNumber(PlayerInfo[playerid][pEXP], 0), FormatNumber((PlayerInfo[playerid][pLevel] * 4), 0), FormatNumber((PlayerInfo[playerid][pLevel] + 1) * 5000));

	if(PlayerInfo[targetid][pAdmin] > 0)
	{
	    SM(targetid, COLOR_WHITE, 	"(Interior: %i) - (Virtual: %i) - (AFK: %s) - (Reports: %i) - (Help Requests: %i)", (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? ("No") : ((PlayerInfo[playerid][pAFK]) ? ("Yes") : ("No")),
			PlayerInfo[playerid][pReports], PlayerInfo[playerid][pHelpRequests]);
	}
	SM(targetid, 0x7514F6FF,  	"_______________________________________________________________________________");
	return 1;
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];
    //new vehiclestring[4096];
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			format(string, sizeof(string), ""WHITE"{ffffff}This account is not yet {7fff00}registered!\n{ffffff}Name : {ff0000}%s\n{ffffff}You can register by entering the password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,""SVRCLR"Registration Mallu Gamers Mobile Community",string,"Register","Abort");
		}
        case DIALOG_LOGIN:
		{
			format(string, sizeof(string), "{ffffff}This account has {7fff00}registered!\n{ffffff}Character Account :{7fffd4} %s\n{ffffff}Please login with your password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Login to Mallu Gamers Mobile Community",string,"Login","Abort");
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, ""SVRCLR"Gender", "Male\nFemale", "Select", "");
		}
		case DIALOG_SKIN:
		{
	   		ShowPlayerDialog(playerid, DIALOG_SKIN, DIALOG_STYLE_INPUT, ""SVRCLR"SKIN", ""WHITE"What skin would you like your character to be (Between 1-311 yeas old):", "Submit", "Back");
		}
		case DIALOG_VOICECHAT:
		{
		    ShowPlayerDialog(playerid, DIALOG_VOICECHAT, DIALOG_STYLE_LIST, ""SVRCLR"[MGMC:RP VOICE CHAT]", "Whisper\nNormal\nShout", "Select", "");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""SVRCLR"Age", ""WHITE"What age would you like your character to be (Between 13-99 yeas old):", "Submit", "Back");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""SVRCLR"Referral", ""WHITE"Have you been invited here by one of our players? Put their name:\n(Click on 'Skip' if you haven't been referred by anyone.)", "Submit", "Skip");
		}
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				new carolString[250];
				format(carolString, sizeof(carolString), ""RED"Merry"GREY"Christmas\n"WHITE"To start caroling on this house, type in the following into the text field.\n"GREEN"%s", ReturnLyrics(CarolLyrics[playerid]));
				ShowPlayerDialog(playerid, DIALOG_CAROL, DIALOG_STYLE_INPUT, ""SVRCLR"Christmas Caroling", carolString, "Submit", "Skip");
			}
		#endif*/
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Cancel");
			//ShowModelSelectionMenuEx(playerid, furnitureArray, "Select an item to buy", DIALOG_BUYFURNITURE1, 16.0, 0.0, 130.0);
		}
		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s ($%i)", string, furnitureArray[i][fName], furnitureArray[i][fPrice]);
                }
            }

            PlayerInfo[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_ATM:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, ""SVRCLR"Select your option", "Withdraw\nDeposit", "Submit", "Cancel");
		}
		case DIALOG_WTRADIO:
		{
	        ShowPlayerDialog(playerid, DIALOG_WTRADIO, DIALOG_STYLE_INPUT, ""SVRCLR"Radio", "Choose The Frequency Between 1 to 555 Channels", "Connect", "Cancel");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to deposit? (Your account balance is %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, ""SVRCLR"Deposit", string, "Select", "Cancel");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER, DIALOG_STYLE_INPUT, ""SVRCLR"GooglePay ID", "Please put the GooglePay ID you want to transfer the money to:", "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER2:
		{
		    format(string, sizeof(string), "How much would you like to transfer? (Your account balance is %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER2, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            PlayerInfo[playerid][pClothingIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s %s [%i products]", BusinessInfo[businessid][bName], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(PlayerInfo[playerid][pVIPPackage] > 0) {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes are free for VIP members.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				} else {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes costs $2,000.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				}
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[PlayerInfo[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"", string, i, FactionRanks[PlayerInfo[playerid][pFactionEdit]][i], FactionInfo[PlayerInfo[playerid][pFactionEdit]][fPaycheck][i]);
			}

			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, FactionInfo[PlayerInfo[playerid][pFactionEdit]][fName], string, "Change", "Cancel");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LANDBUILDTYPE, DIALOG_STYLE_LIST, "Choose your browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
  		case DIALOG_LANDBUILD1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }

		    ShowPlayerDialog(playerid, DIALOG_LANDBUILD1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Back");
		}
		case DIALOG_LANDBUILD2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            PlayerInfo[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_LANDBUILD2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_LANDMENU:
		{
		    new
		        landid = GetNearbyLand(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_MAINMENU, playerid);
		}
		case DIALOG_LANDOBJECTMENU:
		{
	        if(IsGateObject(PlayerInfo[playerid][pSelected]))
	        {
		        ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Object menu", "Edit object\nEdit gate destination\nDuplicate object\nSell object", "Select", "Cancel");
	        }
			else
			{
                ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Object menu", "Edit object\nDuplicate object\nSell object", "Select", "Cancel");
	        }
		}
		case DIALOG_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid >= 0 && HasLandPerms(playerid, landid))
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i ORDER BY id DESC LIMIT %i, %i", LandInfo[landid][lID], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_OBJECTS, MAX_LISTED_OBJECTS);
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_LANDOBJECTS, playerid);
			}
		}
		case DIALOG_MP3PLAYER:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nUploaded Music\nRadio Stations\nStop Music", "Select", "Cancel");
		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Browse Genres\nSearch by Name", "Select", "Back");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Choose a genre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], PlayerInfo[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Choose a subgenre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(PlayerInfo[playerid][pSearch])
		    {
		        mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pGenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
			else
			{
			    mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE genre = '%e' AND subgenre = '%e' ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pSubgenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Search by Name | "SERVER_NAME"", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}

		case DIALOG_GCLOTHES:
		{
		    if(!GetGangSkinCount(PlayerInfo[playerid][pGang]))
    		{
        		return SCM(playerid, COLOR_SYNTAX, "There are no skins setup for your gang.");
			}
			PlayerInfo[playerid][pSkinSelected] = -1;
    		ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR"Next{A9C4E4} to browse through available gang skins.", "Next", "Confirm");
		}

		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Gang Locker ($%i/$%i) (Materials: %i/%i)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH), GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Weapons\nDrugs\nMaterials\nCash\nClothes", "Select", "Cancel");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] 9mm (R1+)\n[%i] Sdpistol (R1+)\n[%i] Deagle (R4+)\n[%i] Shotgun (R1+)\n[%i] Sawn-off (R4+)\n[%i] Tec-9 (R3+)\n[%i] Micro Uzi (R3+)\n[%i] MP5 (R3+)\n[%i] AK-47 (R4+)\n[%i] M4 (R4+)\n[%i] Rifle (R2+)\n[%i] Sniper (R5+)\n[%i] Molotov (R5+)",
		        GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Gang Locker | Weapons", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Pot (%i/%ig)\nCrack (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH), GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang Locker | Drugs", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Pot", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Crack", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Meth", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Painkillers", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    format(string, sizeof(string), "HP ammo (%i/%i)\nPoison ammo (%i/%i)\nFMJ ammo (%i/%i)", GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_FMJAMMO));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO1, DIALOG_STYLE_LIST, "Gang Locker | Ammo", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_HPAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | HP ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_POISONAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | Poison ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_FMJAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | FMJ ammo", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Withdraw (%i/%i)\nDeposit", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			ShowPlayerDialog(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Gang Locker | Materials", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Withdraw ($%i/$%i)\nDeposit", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang Locker | Cash", string, "Select", "Back");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to withdraw? (The safe contains $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang Stash Withdraw | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to deposit? (The safe contains $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang Stash Deposit | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSPRICES:
		{
		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials\n10\tHollow Point Ammo\t$%i\t%i rounds\n11\tPoison Tip Ammo\t$%i\t%i rounds\n12\tFMJ Ammo\t$%i\t%i rounds",
		        GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][0], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][1], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][2], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][3], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][4], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][5], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][6], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][7], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][8],
				GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][9], GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][10], GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][11], GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a weapon price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Arms dealer", "Buy Guns\nBuy Ammo\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Gang arms dealer (Materials available: %i.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials",
		        GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][3], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][4], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][5], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][6], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Back");
		}
		case DIALOG_GANGARMSAMMO:
		{
		    format(string, sizeof(string), "#\tType\tCost\tStock\n1\tHollow Point Ammo\t$%i\t%i rounds\n2\tPoison Tip Ammo\t$%i\t%i rounds\n3\tFMJ Ammo\t$%i\t%i rounds",
				GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][9], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][10], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][11], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSAMMO, DIALOG_STYLE_TABLIST_HEADERS, "Arms dealer | Ammo", string, "Buy", "Back");
		}
		case DIALOG_GANGAMMOBUY:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][9], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsHPAmmo]);
			} else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][10], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPoisonAmmo]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][11], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsFMJAmmo]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOBUY, DIALOG_STYLE_INPUT, "Arms Dealer | Buy Ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Arms dealer (Materials available: %i.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit mats\nWithdraw mats\nDeposit ammo\nWithdraw ammo", "Select", "Back");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "How much materials would you like to deposit? (This arms dealer contains %i materials.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Arms dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "How much materials would you like to withdraw? (This arms dealer contains %i materials.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSITS, DIALOG_STYLE_LIST, "Arms dealer | Deposit ammo", string, "Select", "Back");
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSIT, DIALOG_STYLE_INPUT, "Arms dealer | Deposit ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo], GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAWS, DIALOG_STYLE_LIST, "Arms dealer | Withdraw ammo", string, "Select", "Back");
		}
        case DIALOG_GANGAMMOWITHDRAW:
		{
			if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo]);
   			} else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAW, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEALER, DIALOG_STYLE_LIST, "Drug dealer", "Buy Drugs\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Drug dealer", string, "Buy", "Back");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot]);
			} else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to buy? ($%i per gram. %i grams available.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Drug dealer | Buy", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Drug dealer (Pot: %i) (Crack: %i) (Meth: %i)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit drugs\nWithdraw drugs", "Select", "Back");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a drug price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Drug dealer | Deposit", string, "Select", "Back");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Drug dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Drug dealer | Withdraw", string, "Select", "Back");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Drug dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "List of Destination", "Job Locations\nNearest Businesses\nGeneral Locations\nPoints\nTurfs\nWash Money Locations\nVIP Locations", "Select", "Close");
		}
		case DIALOG_PAINTBALL:
		{
		    string =  "Name\tType\tCurrent Players\n";
		    format(string, sizeof(string), "%sDeathmatch Arena\tFFA\t%i\n", string, GetArenaPlayers(1));
		    format(string, sizeof(string), "%sTeam Deathmatch Arena\tTDM\t%i\n", string, GetArenaPlayers(2));
		    format(string, sizeof(string), "%sDeagle Arena\t1Shot\t%i\n", string, GetArenaPlayers(3));
		    format(string, sizeof(string), "%sSniper Arena\t1Shot\t%i\n", string, GetArenaPlayers(4));
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball", string, "Select", "Cancel");
		}
/*		case DIALOG_HELP:
		{
		    ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "List of Commands", "Chat\nGeneral\nUpgrades\nOther", "Select", "Close");
		}*/
		case DIALOG_TOP: {
			ShowPlayerDialog(playerid, DIALOG_TOP, DIALOG_STYLE_TABLIST, SERVER_DIALOG, ""RED"Top 20 Criminal in the City.\n"YELLOW"Top 20 Richest in the City.\n"GREEN"Top 20 Addict in the City.", "Select", "Close");
		}
		case DIALOG_TWEET:
		{
	    	ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
		}
		case DIALOG_SETTINGS:
		{
            ShowPlayerDialog(playerid, DIALOG_SETTINGS, DIALOG_STYLE_LIST, "Settings Menu", "Account Menu\nBug Fix\n Discord Menu\n", "Select", "Close");
		}
		case DIALOG_PHONEADVERTISE:
		{
	    	ShowPlayerDialog(playerid, DIALOG_PHONEADVERTISE, DIALOG_STYLE_INPUT, "Phone Advertisement", "Post Your Advertisement here", "Post", "Back");
		}
		case DIALOG_INSTAGRAM:
		{
	    	ShowPlayerDialog(playerid, DIALOG_INSTAGRAM, DIALOG_STYLE_INPUT, "Instagram", "What's on your mind?", "Post", "Back");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Question", "What should the question be? (displayed globally)", "Submit", "Back");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Answer", "What should the answer be? (displayed once answered)", "Submit", "Back");
			}
		}
	}
	return 1;
}

GetArenaPlayers(arena)
{
	new players;
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPaintball] == arena)
	    {
	        players++;
	    }
	}
	return players;
}

SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(PlayerInfo[playerid][pPosX] == 0.0 && PlayerInfo[playerid][pPosY] == 0.0 && PlayerInfo[playerid][pPosZ] == 0.0)
		{
            SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1529.6, -1691.2, 13.3, 1.0, -1, -1, -1, -1, -1, -1);
		}
		else
		{
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ], 1.0, -1, -1, -1, -1, -1, -1);
		}

		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }
	    SpawnPlayer(playerid);
	}
	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

SavePlayerWeapons(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pWeapons][8], PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pWeapons][12], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// And finally the ammo.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i, poisonammo = %i, fmjammo = %i, ammotype = %i, ammoweapon = %i WHERE uid = %i",
		   PlayerInfo[playerid][pHPAmmo], PlayerInfo[playerid][pPoisonAmmo], PlayerInfo[playerid][pFMJAmmo], PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pAmmoWeapon], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ResetBackpack(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty])
	{
		PlayerInfo[playerid][pBackpack] = 0;
		PlayerInfo[playerid][bpCash] = 0;
		PlayerInfo[playerid][bpMaterials] = 0;
		PlayerInfo[playerid][bpPot] = 0;
		PlayerInfo[playerid][bpCrack] = 0;
		PlayerInfo[playerid][bpMeth] = 0;
		PlayerInfo[playerid][bpPainkillers] = 0;
		PlayerInfo[playerid][bpWeapons][0] = 0;
		PlayerInfo[playerid][bpWeapons][1] = 0;
		PlayerInfo[playerid][bpWeapons][2] = 0;
		PlayerInfo[playerid][bpWeapons][3] = 0;
		PlayerInfo[playerid][bpWeapons][4] = 0;
		PlayerInfo[playerid][bpWeapons][5] = 0;
		PlayerInfo[playerid][bpWeapons][6] = 0;
		PlayerInfo[playerid][bpWeapons][7] = 0;
		PlayerInfo[playerid][bpWeapons][8] = 0;
		PlayerInfo[playerid][bpWeapons][9] = 0;
		PlayerInfo[playerid][bpWeapons][10] = 0;
		PlayerInfo[playerid][bpWeapons][11] = 0;
		PlayerInfo[playerid][bpWeapons][13] = 0;
		PlayerInfo[playerid][bpWeapons][14] = 0;
		PlayerInfo[playerid][bpHPAmmo] = 0;
		PlayerInfo[playerid][bpPoisonAmmo] = 0;
		PlayerInfo[playerid][bpFMJAmmo] = 0;
	}
	SavePlayerVariables(playerid);
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && !PlayerInfo[playerid][pAcceptedHelp] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY], PlayerInfo[playerid][pCameraZ]);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);

	        GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	        GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);

	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailbreak = %i WHERE uid = %i", PlayerInfo[playerid][pJailBreak], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i, refunded = %i WHERE uid = %i", PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY],
			PlayerInfo[playerid][pCameraZ], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld], PlayerInfo[playerid][pHealth], PlayerInfo[playerid][pArmor], PlayerInfo[playerid][pMinutes], PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pInjured], PlayerInfo[playerid][pHospital], PlayerInfo[playerid][pSpawnHealth],
			PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pJailType], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pRefunded], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, ecoin = %i, dirtycash = %i, toggletextdraws = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i, backpack = %i, flashlight = %i, chatanim = %i WHERE uid = %i", PlayerInfo[playerid][pNewbieMuted], PlayerInfo[playerid][pHelpMuted], PlayerInfo[playerid][pAdMuted],
			PlayerInfo[playerid][pLiveMuted], PlayerInfo[playerid][pGlobalMuted], PlayerInfo[playerid][pReportMuted], PlayerInfo[playerid][pReportWarns], PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pToggleTextdraws], PlayerInfo[playerid][pToggleOOC], PlayerInfo[playerid][pTogglePhone], PlayerInfo[playerid][pToggleAdmin], PlayerInfo[playerid][pToggleHelper], PlayerInfo[playerid][pToggleNewbie], PlayerInfo[playerid][pToggleWT],
			PlayerInfo[playerid][pToggleVIP], PlayerInfo[playerid][pBackpack], PlayerInfo[playerid][pFlashlight], PlayerInfo[playerid][pChatAnim], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglecam = %i, togglehud = %i, pottime = %i, potgrams = %i, showturfs = %i, showlands = %i, watchon = %i, gpson = %i, pizzacooldown = %i, deathcooldown = %i, detectivecooldown = %i, duty = %i, bandana = %i WHERE uid = %i", PlayerInfo[playerid][pToggleRadio], PlayerInfo[playerid][pToggleMusic],
			PlayerInfo[playerid][pToggleFaction], PlayerInfo[playerid][pToggleNews], PlayerInfo[playerid][pToggleGlobal], PlayerInfo[playerid][pToggleCam], PlayerInfo[playerid][pToggleHUD], PlayerInfo[playerid][pPotTime], PlayerInfo[playerid][pPotGrams], PlayerInfo[playerid][pShowTurfs], PlayerInfo[playerid][pShowLands], PlayerInfo[playerid][pWatchOn], PlayerInfo[playerid][pGPSOn], PlayerInfo[playerid][pPizzaCooldown], PlayerInfo[playerid][pDeathCooldown],
			PlayerInfo[playerid][pDetectiveCooldown], PlayerInfo[playerid][pDuty], PlayerInfo[playerid][pBandana], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Info
  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpcash = %i, bpmaterials = %i, bppot = %i, bpcrack = %i, bpmeth = %i, bppainkillers = %i, bphpammo = %i, bppoisonammo = %i, bpfmjammo = %i, totalpatients = %i, totalfires = %i, rarecooldown = %i WHERE uid = %i", PlayerInfo[playerid][bpCash], PlayerInfo[playerid][bpMaterials], PlayerInfo[playerid][bpPot], PlayerInfo[playerid][bpCrack], PlayerInfo[playerid][bpMeth],
			PlayerInfo[playerid][bpPainkillers], PlayerInfo[playerid][bpHPAmmo], PlayerInfo[playerid][bpPoisonAmmo], PlayerInfo[playerid][bpFMJAmmo], PlayerInfo[playerid][pTotalPatients], PlayerInfo[playerid][pTotalFires], PlayerInfo[playerid][pRareTime], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Weapons
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_0 = %i, bpweapon_1 = %i, bpweapon_2 = %i, bpweapon_3 = %i, bpweapon_4 = %i, bpweapon_5 = %i, bpweapon_6 = %i, bpweapon_7 = %i, bpweapon_8 = %i, bpweapon_9 = %i, bpweapon_10 = %i, bpweapon_11 = %i, bpweapon_12 = %i, bpweapon_13 = %i, bpweapon_14 = %i WHERE uid = %i", PlayerInfo[playerid][bpWeapons][0], PlayerInfo[playerid][bpWeapons][1], PlayerInfo[playerid][bpWeapons][2], PlayerInfo[playerid][bpWeapons][3],
			PlayerInfo[playerid][bpWeapons][4], PlayerInfo[playerid][bpWeapons][5], PlayerInfo[playerid][bpWeapons][6], PlayerInfo[playerid][bpWeapons][7], PlayerInfo[playerid][bpWeapons][8], PlayerInfo[playerid][bpWeapons][9], PlayerInfo[playerid][bpWeapons][10], PlayerInfo[playerid][bpWeapons][11], PlayerInfo[playerid][bpWeapons][12], PlayerInfo[playerid][bpWeapons][13], PlayerInfo[playerid][bpWeapons][14], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i, thirst = %i, thirsttimer = %i, Lottery = %i, LotteryB = %i, comserv = %i, food = %i, drink = %i, lockpick = %i, hammer = %i, repairkit = %i, brokenleg = %d where uid = %d", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pHungerTimer], PlayerInfo[playerid][pThirst], PlayerInfo[playerid][pThirstTimer], PlayerInfo[playerid][pLottery],PlayerInfo[playerid][pLotteryB],PlayerInfo[playerid][pComserv],PlayerInfo[playerid][pFood],PlayerInfo[playerid][pDrink],PlayerInfo[playerid][pLockpick],PlayerInfo[playerid][pHammer],PlayerInfo[playerid][pRepairKit],PlayerInfo[playerid][pBrokenLeg],PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		/*#if defined Christmas
	#else
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET candy = %i WHERE uid = %i", PlayerInfo[playerid][pCandy], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		#endif*/
	}
}

SendPaycheck(playerid)
{
	/*if(PlayerInfo[playerid][pPaycheck] <= 0)
	{
	    PlayerInfo[playerid][pPaycheck] = min(PlayerInfo[playerid][pLevel], 21) * 100; // Temporary
	}*/

    new paycheck = PlayerInfo[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 200) * gTax; // 8% tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

	switch(PlayerInfo[playerid][pVIPPackage])
	{
	    case 0: rate = 1;
	    case 1: rate = 2;
	    case 2: rate = 3;
	    case 3: rate = 4;
	}

	interest = (PlayerInfo[playerid][pBank] / 1000) * rate;

	if(interest > 50000)
	{
	    interest = 50000;
	}

	total += interest;

 	if(PlayerInfo[playerid][pRentingHouse])
	{
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == PlayerInfo[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}
	SCM(playerid, SERVER_COLOR, "_______________________________");
	SM(playerid, COLOR_GREY2, "Job Pay: {33CC33}+$%i", paycheck);

	if(PlayerInfo[playerid][pFaction] >= 0 && FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]] > 0)
	{
	    SM(playerid, COLOR_GREY2, "Faction Pay: {33CC33}+$%i", FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]]);
	    total += FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]];
	}

	SM(playerid, COLOR_GREY2, "Interest: {33CC33}+$%i {C8C8C8}(Rate: %.1f) [MAX: 50K]", interest, floatdiv(float(rate), 10));
	SM(playerid, COLOR_GREY2, "Income Tax: "SVRCLR"-$%i {C8C8C8}(%i Percent)", tax, gTax);

	if(renting != -1)
	{
		if(total >= rent || PlayerInfo[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	PlayerInfo[playerid][pBank] -= rent;
			}

			SM(playerid, COLOR_GREY2, "Rent Paid: "SVRCLR"-$%i", rent);
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}

	SM(playerid, COLOR_GREY2, "Old Balance: $%i", PlayerInfo[playerid][pBank]);
	SCM(playerid, SERVER_COLOR, "_______________________________");
	if((gDoubleXP) || PlayerInfo[playerid][pDoubleXP] > 0) {
		SM(playerid, COLOR_GREY2, "New Balance: $%i", PlayerInfo[playerid][pBank] + total);
	} else {
		SM(playerid, COLOR_GREY2, "New Balance: $%i", PlayerInfo[playerid][pBank] + total);
	}
	SM(playerid, COLOR_AQUA, "You have played %i/25 minutes this hour and earned your paycheck.", PlayerInfo[playerid][pMinutes]);
	Dyuze(playerid, "Payday", "Added to bank account.");
    GiftAllowed = 1;
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = 0;
	    SCM(playerid, COLOR_RED, "You couldn't afford to pay rent and were evicted as a result.");
	}

	AddToTaxVault(tax);

	if((gDoubleXP) || PlayerInfo[playerid][pDoubleXP] > 0) {
		PlayerInfo[playerid][pEXP] += 2;
		PlayerInfo[playerid][pBank] += total * 2;
	} else {
	    PlayerInfo[playerid][pEXP]++;
	    PlayerInfo[playerid][pBank] += total;
	}
	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    GiveGangPoints(PlayerInfo[playerid][pGang], 1);
	}
    PlayerInfo[playerid][pHours]++;
    PlayerInfo[playerid][pMinutes] = 0;
    PlayerInfo[playerid][pPaycheck] = 0;

	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		PlayerInfo[playerid][pWeaponRestricted]--;
	}
	if((!gDoubleXP) && PlayerInfo[playerid][pDoubleXP] > 0)
	{
	    PlayerInfo[playerid][pDoubleXP]--;

	    if(PlayerInfo[playerid][pDoubleXP] > 0)
	        SM(playerid, COLOR_YELLOW, "Your double XP token expires in %i more hours.", PlayerInfo[playerid][pDoubleXP]);
		else
		    SCM(playerid, COLOR_YELLOW, "Your double XP token has expired.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", PlayerInfo[playerid][pEXP], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pWeaponRestricted], PlayerInfo[playerid][pDoubleXP], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    gTotalHours++;
    SaveServerInfo();
}

// PUBLIC GARAGE

GetNearbyPG(playerid)
{
	for(new i = 0; i < MAX_PGARAGE; i ++)
	{
	    if(PGInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, PGInfo[i][aPosX], PGInfo[i][aPosY], PGInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}
ReloadPG(atmid)
{
	if(PGInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(PGInfo[atmid][aText]);
	    DestroyDynamicObject(PGInfo[atmid][aObject]);
		DestroyDynamicMapIcon(PGInfo[atmid][aMapIcon]);
        DestroyDynamicPickup(PGInfo[atmid][aPickup]);

		PGInfo[atmid][aText] = CreateDynamic3DTextLabel(""ORANGE"["WHITE"Public Garage"ORANGE"]"ORANGE"\nPress "WHITE"'Y'"ORANGE" to spawn/despawn a vehicle.", COLOR_ORANGE, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ] + 0.4, 20.0);
		PGInfo[atmid][aMapIcon] = CreateDynamicMapIcon(PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ], 55, 1, -1, -1, -1, 500.0);
        PGInfo[atmid][aPickup] = CreateDynamicPickup(19132, 1, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ]);

		//VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}

GetNearbyVen(playerid)
{
	for(new i = 0; i < MAX_VENDORS; i ++)
	{
	    if(VenInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, VenInfo[i][aPosX], VenInfo[i][aPosY], VenInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadVen(atmid)
{
	if(VenInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(VenInfo[atmid][aText]);
	    DestroyDynamicObject(VenInfo[atmid][aObject]);

		VenInfo[atmid][aText] = CreateDynamic3DTextLabel("Street Food\nPress "WHITE"'N'"ORANGE" to buy from vendor.", COLOR_ORANGE, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}

ReloadActor(actorid)
{
	if(ActorInfo[actorid][actorExists])
	{
		new string[128], name[24];

		strcpy(name, ActorInfo[actorid][actorName], 24);

		for(new i = 0, l = strlen(name); i < l; i ++)
		{
			if(name[i] == '_')
			{
				name[i] = ' ';
			}
		}

		ActorInfo[actorid][actor_ID] = CreateActor(ActorInfo[actorid][actorSkin], ActorInfo[actorid][actorX], ActorInfo[actorid][actorY], ActorInfo[actorid][actorZ], ActorInfo[actorid][actorA]);

		DestroyDynamic3DTextLabel(ActorInfo[actorid][actor_Label]);
		format(string, sizeof(string), "%s (%d)", name, actorid);
		ActorInfo[actorid][actor_Label] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ActorInfo[actorid][actorX], ActorInfo[actorid][actorY], ActorInfo[actorid][actorZ] + 1, 25.0);

		SetActorVirtualWorld(ActorInfo[actorid][actor_ID], ActorInfo[actorid][actorVW]);
	}
}

HangupCall(playerid, reason)
{
	new callerid = PlayerInfo[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SCM(playerid, COLOR_WHITE, "** The call has been dropped...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
    	SCM(playerid, COLOR_WHITE, "** You hung up your phone and ended the call.");

		if(callerid != playerid)
		{
			CancelSelectTextDraw(callerid);
			for(new i = 0; i < 13; i ++)
			{
				TextDrawHideForPlayer(callerid, CallingTD[i]);
			}
			for(new g = 0; g < 5; g++) {
				PlayerTextDrawHide(callerid, CallingPlayerTD[playerid][g]);
			}
			TextDrawHideForPlayer(callerid, CloseCallTD);
			TextDrawHideForPlayer(callerid, PICKUP);
			TextDrawHideForPlayer(callerid, HANGUP);
			SCM(callerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}

		PlayerInfo[callerid][pCallStage] = 0;
		PlayerInfo[callerid][pCallLine] = INVALID_PLAYER_ID;
	}
    if (callstream[playerid])
    {
        SvDeleteStream(callstream[playerid]);
        callstream[playerid] = SV_NULL;
    }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	PlayerInfo[playerid][pCallStage] = 0;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}

SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);

    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1]);
        fwrite(file, string);
        fclose(file);
	}
}

LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiis[24]s[128]iiiiiis[128]s[128]ii", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1]);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);
	
    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(CallingTD[11], string);
}

AddToJewelleryRobbery(playerid)
{
    for(new i = 0; i < MAX_JEWELLERY_ROBBERS; i ++)
	{
    	if(RobberyInfo[jRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[jRobbers][i] = playerid;
	        RobberyInfo[jPlanning] = 1;
	        break;
		}
	}
}

GetJewelleryRobbers()
{
	new count;

    for(new i = 0; i < MAX_JEWELLERY_ROBBERS; i ++)
	{
    	if(RobberyInfo[jRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

RemoveFromJewelleryRobbery(playerid)
{
    for(new i = 0; i < MAX_JEWELLERY_ROBBERS; i ++)
	{
    	if(RobberyInfo[jRobbers][i] == playerid)
	    {
	        RobberyInfo[jRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetJewelleryRobbers())
	{
	  	ResetJew();
	}
	else if(RobberyInfo[jPlanning] && RobberyInfo[jRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_JEWELLERY_ROBBERS; i ++)
	    {
	        if(RobberyInfo[jRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[jRobbers][0] = RobberyInfo[jRobbers][i];
	            RobberyInfo[jRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[jRobbers][0], COLOR_AQUA, "You are now the leader of this Jewellery heist!");
	            break;
			}
		}
	}
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInFleecaRobbery(playerid)
{
	if(RobberyInfo[fPlanning] || RobberyInfo[fRobStarted])
	{
		for(new i = 0; i < MAX_FLEECA_ROBBERS; i ++)
		{
	    	if(RobberyInfo[fRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

GetFleecaRobbers()
{
	new count;

    for(new i = 0; i < MAX_FLEECA_ROBBERS; i ++)
	{
    	if(RobberyInfo[fRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToFleecaRobbery(playerid)
{
    for(new i = 0; i < MAX_FLEECA_ROBBERS; i ++)
	{
    	if(RobberyInfo[fRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[fRobbers][i] = playerid;
	        RobberyInfo[fPlanning] = 1;
	        PlayerInfo[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromFleecaRobbery(playerid)
{
    for(new i = 0; i < MAX_FLEECA_ROBBERS; i ++)
	{
    	if(RobberyInfo[fRobbers][i] == playerid)
	    {
	        RobberyInfo[fRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetFleecaRobbers())
	{
	   ResetFleeca();
	}
	else if(RobberyInfo[fPlanning] && RobberyInfo[fRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_FLEECA_ROBBERS; i ++)
	    {
	        if(RobberyInfo[fRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[fRobbers][0] = RobberyInfo[fRobbers][i];
	            RobberyInfo[fRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[fRobbers][0], COLOR_AQUA, "You are now the leader of this Jewellery heist!");
	            break;
			}
		}
	}
	PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	DisablePlayerCheckpoint(playerid);

	return 0;
}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        PlayerInfo[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[rRobbers][0], COLOR_AQUA, "You are now the leader of this bank heist!");
	            break;
			}
		}
	}

	PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

IsPlayerInJewRobbery(playerid)
{
	if(RobberyInfo[jPlanning] || RobberyInfo[jRobStarted])
	{
		for(new i = 0; i < MAX_JEWELLERY_ROBBERS; i ++)
		{
	    	if(RobberyInfo[jRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

GetNearbyAtm(playerid)
{
	for(new i = 0; i < MAX_ATMS; i ++)
	{
	    if(AtmInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[i][aPosX], AtmInfo[i][aPosY], AtmInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadAtm(atmid)
{
	if(AtmInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(AtmInfo[atmid][aText]);
	    DestroyDynamicObject(AtmInfo[atmid][aObject]);

		AtmInfo[atmid][aText] = CreateDynamic3DTextLabel("ATM machine\nType "WHITE"'/atm'"TEAL" to operate.", COLOR_TEAL, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ] + 0.4, 10.0);
        AtmInfo[atmid][aObject] = CreateDynamicObject(19324, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ], 0.0, 0.0, AtmInfo[atmid][aPosA]);
	}
}

// Locker System

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 3.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLockers(factionid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
	    {
	        ReloadLocker(i);
		}
	}
}

ReloadLocker(lockerid)
{
	if(LockerInfo[lockerid][lExists])
	{
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), "%s "WHITE"(ID: %d)"LIGHTRED"\nPress"WHITE"'Y'"LIGHTRED" to access locker.", FactionInfo[LockerInfo[lockerid][lFaction]][fName], lockerid);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(LockerInfo[lockerid][lIcon], 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}

ResetJew()
{

    RobberyInfo[rTime] = 1;
    RobberyInfo[jPlanning] = 0;
    RobberyInfo[jRobStarted] = 0;
    RobberyInfo[jRobbing] = 0;
    RobberyInfo[jObjects] = CreateDynamicObject(19799, 1827.678100, -1393.198120, 12.475486, 0.000000, 90.299972, 90.399948, -1, -1, -1, 300.00, 300.00);
}

ResetFleeca()
{

    RobberyInfo[rTime] = 1;
    RobberyInfo[fPlanning] = 0;
    RobberyInfo[fRobStarted] = 0;
    RobberyInfo[fRobbing] = 0;
    RobberyInfo[fObjects] = CreateDynamicObject(19799, 697.013427, -1186.141113, 16.210567, 0.000000, -0.000000, 151.400024, -1, -1, -1, 300.00, 300.00);
}

ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The bank robbery is now finished. $%i was stolen from the bank.", RobberyInfo[rStolen]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}
	for(new i = 0; i < MAX_FLEECA_ROBBERS; i ++)
	{
	    RobberyInfo[fRobbers][i] = INVALID_PLAYER_ID;
	}
	for(new i = 0; i < MAX_JEWELLERY_ROBBERS; i ++)
	{
	    RobberyInfo[jRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 4;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
   	RobberyInfo[fRobStarted] = 0;
	RobberyInfo[fRobbing] = 0;
	RobberyInfo[fPlanning] = 0;
	RobberyInfo[jRobbing] = 0;
	RobberyInfo[jRobStarted] = 0;
	RobberyInfo[jPlanning] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 295.611907, 1372.987670, 2024.325683, 0.000000, 0.000000, 179.500015, -1, -1, -1, 300.00, 300.00);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}

ResetEvent()
{
	if(EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pJoinedEvent])
	        {
	            PlayerInfo[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}
CheckServerAd(szInput[])
{
	if(strfind(szInput, ":", true) != -1)
	{
		new
			iCount,
			iPeriod,
			iDash,
			iPos,
			iChar,
			iColon;

		while((iChar = szInput[iPos++]))
		{
			if('0' <= iChar <= '9') iCount++;
			else if(iChar == '.') iPeriod++;
			else if(iChar == '-') iDash++;
			else if(iChar == ':') iColon++;
		}
		if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, "play.") > -1 || strfind(szInput, ":7777") > -1) {
			return 1;
		}
	}

	return 0;
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		PlayerInfo[playerid][pLoopAnim] = 1;

	}
}
forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
	PlayerInfo[playerid][pLoopAnim] = 1;
}
PlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerInfo[playerid][pBrokenLeg] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pConstructionTime] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}
GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = PlayerInfo[playerid][pTaxiPassenger],
		bill = PlayerInfo[playerid][pTaxiBill],
		earned = PlayerInfo[playerid][pTaxiBill],
		string[20];

    if(PlayerInfo[playerid][pLaborUpgrade] != 0)
	{
	    earned += percent(earned, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
	    earned = earned*2;
	    SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	SM(passengerid, COLOR_AQUA, "This ride costed you "SVRCLR"$%i{CCFFFF}.", bill);
	SM(playerid, COLOR_AQUA, "You earned $%i for this ride.", bill);

	format(string, sizeof(string), "~r~-$%i", bill);
	Dyuze(passengerid, "Notice", string);

	format(string, sizeof(string), "~g~+$%i", bill);
	Dyuze(playerid, "Notice", string);

	GivePlayerCash(passengerid, -bill);
	GivePlayerCash(playerid, earned);

	PlayerInfo[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pTaxiBill] = 0;
	PlayerInfo[playerid][pTaxiTime] = 0;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(PlayerInfo[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(PlayerInfo[playerid][pFreezeTimer]);
	}
	SetPlayerPos(playerid, x, y, z);
    PlayerInfo[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);
	ShowNoticeGUIFrame(playerid, 4);
    TogglePlayerControllable(playerid, 0);
	//ShowFreezeTextdraw(playerid);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (PlayerInfo[playerid][pJob] == job || PlayerInfo[playerid][pSecondJob] == job);
}

SetScriptArmour(playerid, Float:amount)
{
    PlayerInfo[playerid][pACTime] = gettime() + 5;
	PlayerInfo[playerid][pArmorTime] = gettime() + 5;
	PlayerInfo[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

IsAForkliftVehicle(vehicleid)
{
	for(new i = 0; i < 5; i ++) {
	    if(vehicleid == forkliftVehicles[i]) return 1;
	}
	return 0;
}
StartForkliftJob(playerid)
{
	if(PlayerHasJob(playerid, JOB_FORKLIFTER))
    {
		switch (random(5))
		{
	        case 0: SetPlayerCheckpoint(playerid, 2756.0898, -2568.1514, 13.3329, 2.0);
			case 1: SetPlayerCheckpoint(playerid, 2396.0554, -2507.3931, 13.6478, 2.0);
			case 2: SetPlayerCheckpoint(playerid, 2350.6902, -2329.9878, 13.5469, 2.0);
			case 3: SetPlayerCheckpoint(playerid, 2204.1365, -2592.5439, 13.5409, 2.0);
			case 4: SetPlayerCheckpoint(playerid, 2450.6052, -2628.4292, 13.6645, 2.0);
		}
		PlayerInfo[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		PlayerInfo[playerid][pJobStage] = 0;
	}
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	PlayerInfo[playerid][pACTime] = gettime() + 2;
	PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

SetWeaponAmmo(playerid, type, amount)
{
	if(type == AMMO_HP) {
		PlayerInfo[playerid][pHPAmmo] = amount;
	} else if(type == AMMO_POISON) {
	    PlayerInfo[playerid][pPoisonAmmo] = amount;
	} else if(type == AMMO_FMJ) {
	    PlayerInfo[playerid][pFMJAmmo] = amount;
	}

	SetPlayerWeapons(playerid);
}

stock ClearDamages(playerid)
{
	for(new id = 0; id < MAX_DAMAGES; id++)
	{
		if(DamageData[playerid][id][damageTaken] != 0){
			DamageData[playerid][id][damageTaken] = 0;
			DamageData[playerid][id][damageBodypart] = 0;
			DamageData[playerid][id][damageTime] = 0;
			DamageData[playerid][id][damageWeapon] = -1;
			DamageData[playerid][id][damageBy] = -1;
		}
	}

	totalDamages[playerid] = 0;
	return true;
}

GiveWeapon(playerid, weaponid, bool:temp = false)
{
    if(PlayerInfo[playerid][pWeaponRestricted]) return 1;
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 320);
	    }
		else
		{
			PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 28, 29, 32:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerInfo[playerid][pACTime] = gettime() + 2;
	}
	return 1;
}

IsAFlashingEXB(carid)
{
	switch(GetVehicleModel(carid)) {
		case 596, 597, 598, 599, 541, 426, 427, 416, 407, 560, 490: return 1;
	}
	return 0;
}
SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 320);
	    }
		else
		{
			PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerInfo[playerid][pACTime] = gettime() + 2;
	}
}

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}
AddCommas(number, const separator[] = ",")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);

	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}

	return output;
}
PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (PlayerInfo[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}

	if((temp) && PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pJailType] && !PlayerInfo[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    /*if(PlayerInfo[playerid][pTempWeapons][i] > 0)
		    {
		        PlayerInfo[playerid][pTempWeapons][i] = 0;
		    }*/

		    if(PlayerInfo[playerid][pWeapons][i] > 0)
		    {
		        /*if(i == 2 && PlayerInfo[playerid][pTazer])
		        {
		            GiveWeapon(playerid, 23, true);
		            continue;
		        }*/

				if(PlayerInfo[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerInfo[playerid][pAmmoWeapon] == PlayerInfo[playerid][pWeapons][i])
				{
				    if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_HP && PlayerInfo[playerid][pHPAmmo] > 0) {
				        GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], PlayerInfo[playerid][pHPAmmo]);
				    } else if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_POISON && PlayerInfo[playerid][pPoisonAmmo] > 0) {
				        GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], PlayerInfo[playerid][pPoisonAmmo]);
					} else if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_FMJ && PlayerInfo[playerid][pFMJAmmo] > 0) {
					    GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], PlayerInfo[playerid][pFMJAmmo]);
				    } else {
						GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 320);
						SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
						PlayerInfo[playerid][pAmmoType] = AMMOTYPE_NORMAL;
						PlayerInfo[playerid][pAmmoWeapon] = 0;
					}
				}
				else
				{
				    if(16 <= PlayerInfo[playerid][pWeapons][i] <= 18)
				        GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 1);
				    else
						GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 320);
				}
			}
		}

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid) // Driveby
			    {
			        case 22, 28, 29, 32:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}
DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	return DestroyVehicle(vehicleid);
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;
}
SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	PlayerInfo[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid, type)
{
    if(PlayerInfo[playerid][pPaintball] == 0)
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}
	if(type == 1)
	{
		new rand = random(sizeof(paintballFSpawns));
		SetPlayerPos(playerid, paintballFSpawns[rand][0], paintballFSpawns[rand][1], paintballFSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballFSpawns[rand][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 1;
	}
	else if(type == 2)
	{
		SetPlayerPos(playerid, paintballTSpawns[pbNext][0], paintballTSpawns[pbNext][1], paintballTSpawns[pbNext][2]);
		SetPlayerFacingAngle(playerid, paintballTSpawns[pbNext][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

	    SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 2;
		PlayerInfo[playerid][pPaintballTeam] = pbNext;
		if(!pbNext)
		{
		    pbNext = 1;
		}
		else
		{
		    pbNext = 0;
		}
	}
	else if(type == 3)
	{
	    new rand = random(sizeof(paintballDSpawns));
		SetPlayerPos(playerid, paintballDSpawns[rand][0], paintballDSpawns[rand][1], paintballDSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballDSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[0], 0xFFFF0096);

	    SetPlayerHealth(playerid, 25.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 24, true);

		PlayerInfo[playerid][pPaintball] = 3;
	}
	else if(type == 4)
	{
		new rand = random(sizeof(paintballSSpawns));
		SetPlayerPos(playerid, paintballSSpawns[rand][0], paintballSSpawns[rand][1], paintballSSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballSSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[1], 0xFFFF0096);

	    SetPlayerHealth(playerid, 38.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 4;
	}
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	PlayerInfo[playerid][pJoinedEvent] = 1;
	PlayerInfo[playerid][bpWearing] = 0;
	PlayerInfo[playerid][pBandana] = 0;

	if(EventInfo[eType] == 2)
	{
		PlayerInfo[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(PlayerInfo[playerid][pEventTeam] == RED_TEAM) {
			Dyuze(playerid, "Notice", "You are on ~r~Red Team.");
		} else if(PlayerInfo[playerid][pEventTeam] == BLUE_TEAM) {
			Dyuze(playerid, "Notice", "You are on ~b~Red Team.");
		}
	}
	else
	{
	    PlayerInfo[playerid][pEventTeam] = 0;
	}

	/*for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GiveWeapon(playerid, EventInfo[eWeapons][x], true);
        }
    }*/

	SetPlayerPos(playerid, EventInfo[ePosX][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosY][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosZ][PlayerInfo[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][PlayerInfo[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		Dyuze(playerid, "Event", EventInfo[eJoinText]);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SM(playerid, COLOR_YELLOW, "Event: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eQS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eHeal]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""));
	}

	return 1;
}

SetPlayerInHospital(playerid, time = 15, type = -1)
{
    PlayerInfo[playerid][pHospitalType] = (type == -1) ? (random(2) + 1) : (type);
    PlayerInfo[playerid][pHospitalTime] = time;
    PlayerInfo[playerid][pHospital] = 1;

    SetPlayerVirtualWorld(playerid, random(100)+4);
    TogglePlayerControllable(playerid, 0);

	SetPlayerPos(playerid, 1166.573486, -1331.558105, 1020.151550);
	SetPlayerFacingAngle(playerid, 273.94);
 	InterpolateCameraPos(playerid, 1169.328369, -1324.109008, 1019.419799, 1166.229125, -1336.965576, 1019.419799, 7000);
	InterpolateCameraLookAt(playerid, 1169.328369, -1324.109008, 1019.419799, 1166.229125, -1336.965576, 1019.419799, 7000);

	SetPlayerInterior(playerid, 1);
}

SetPlayerInJail(playerid)
{
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(PlayerInfo[playerid][pJailType] == 1) // /prisonic
	{
		switch(random(6))
        {
            case 0:
			{
				SetPlayerPos(playerid, 1778.6372, -1563.9789, 1734.9430);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1774.3923, -1562.9175, 1734.9430);
			}
			case 2:
			{
				SetPlayerPos(playerid, 1770.0850, -1563.0596, 1734.9430);
			}
			case 3:
			{
				SetPlayerPos(playerid, 1765.6075, -1562.8074, 1734.9430);
			}
			case 4:
			{
				SetPlayerPos(playerid, 1761.2789, -1562.9852, 1734.9430);
			}
			case 5:
			{
				SetPlayerPos(playerid, 1757.2704, -1563.8149, 1734.9430);
			}
		}
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetPlayerFacingAngle(playerid, 180.0000);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	else if(PlayerInfo[playerid][pJailType] == 2) // /jail /prison
	{
		switch(random(6))
        {
            case 0:
			{
				SetPlayerPos(playerid, 1757.2209, -1582.5867, 1734.9430);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1761.4663, -1583.1366, 1734.9430);
			}
			case 2:
			{
				SetPlayerPos(playerid, 1765.7515, -1582.8560, 1734.9430);
			}
			case 3:
			{
				SetPlayerPos(playerid, 1770.1416, -1582.5586, 1734.9430);
			}
			case 4:
			{
				SetPlayerPos(playerid, 1774.2100, -1582.7510, 1734.9430);
			}
			case 5:
			{
				SetPlayerPos(playerid, 1778.4685, -1582.8289, 1734.9430);
			}
		}
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetPlayerFacingAngle(playerid, 360.0000);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	else if(PlayerInfo[playerid][pJailType] == 3) // IC prison
	{
		switch(random(6))
        {
            case 0:
			{
				SetPlayerPos(playerid, 1757.2209, -1582.5867, 1734.9430);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1761.4663, -1583.1366, 1734.9430);
			}
			case 2:
			{
				SetPlayerPos(playerid, 1765.7515, -1582.8560, 1734.9430);
			}
			case 3:
			{
				SetPlayerPos(playerid, 1770.1416, -1582.5586, 1734.9430);
			}
			case 4:
			{
				SetPlayerPos(playerid, 1774.2100, -1582.7510, 1734.9430);
			}
			case 5:
			{
				SetPlayerPos(playerid, 1778.4685, -1582.8289, 1734.9430);
			}
		}
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetPlayerFacingAngle(playerid, 360.00);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
}

TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        //ShowFreezeTextdraw(playerid);
        TogglePlayerControllable(playerid, 0);
	}
}
TeleportToGarage(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = true, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
		SCM(playerid, COLOR_SYNTAX, "Loading Objects...");
		Dyuze(playerid, "Notice", "Loading objects...");
        TogglePlayerControllable(playerid, 0);
	}
}
ShowLandsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_LANDS; i ++)
	{
	    if(LandInfo[i][lExists])
	    {
		    if(enable) {
 				GangZoneShowForPlayer(playerid, LandInfo[i][lGangZone], (LandInfo[i][lOwnerID] > 0) ? (0x0080FFAA) : (0x33CC33AA));
			} else {
		    	GangZoneHideForPlayer(playerid, LandInfo[i][lGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowLands] = enable;
}

ShowTurfsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1 && (GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE && GetFactionType(TurfInfo[i][tCapturer]) == FACTION_ARMY && GetFactionType(TurfInfo[i][tCapturer]) == FACTION_FEDERAL))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowTurfs] = enable;
}

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
        PlayerInfo[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(PlayerInfo[playerid][pZoneID]);

	PlayerInfo[playerid][pZoneID] = -1;
	PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pMinX] = 0.0;
    PlayerInfo[playerid][pMinY] = 0.0;
    PlayerInfo[playerid][pMaxX] = 0.0;
    PlayerInfo[playerid][pMaxY] = 0.0;
}



ResetCooking(playerid)
{
    PlayerInfo[playerid][pCookMeth] = 0;
	PlayerInfo[playerid][pCookGrams] = 0;
	PlayerInfo[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(PlayerInfo[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pJoinedEvent] = 0;
	}
	if(PlayerInfo[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);
	    PlayerInfo[playerid][pHospital] = 0;
	    PlayerInfo[playerid][pHospitalTime] = 0;
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
	}
	if(PlayerInfo[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(PlayerInfo[playerid][pConstructionTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(PlayerInfo[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	    PlayerInfo[playerid][pPlantedBomb] = 0;
	}
	if(PlayerInfo[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(PlayerInfo[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][pFreezeTimer] = -1;
	}
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pBrokenLeg] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pConstructionTime] = 0;
	PlayerInfo[playerid][pConstruction] = 0;
	PlayerInfo[playerid][pSpeedTime] = 0;
	PlayerInfo[playerid][pGraffiti] = -1;
	PlayerInfo[playerid][pGraffitiTime] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDelivered] = 0;
	PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pPoisonTime] = 0;
    PlayerInfo[playerid][pCapturingPoint] = -1;
    PlayerInfo[playerid][pCaptureTime] = 0;

 	CancelActiveCheckpoint(playerid);
 	RemovePlayerAttachedObject(playerid, 9);
}

CancelActiveCheckpoint(playerid)
{
    if(PlayerInfo[playerid][pDrivingTest])
	{
	    SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pPizzas] = 0;
	PlayerInfo[playerid][pNews] = 0;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pTestCP] = 0;
    PlayerInfo[playerid][pMiningRock] = 0;
    PlayerInfo[playerid][pConstruction] = 0;
    PlayerInfo[playerid][pShipment] = -1;
    PlayerInfo[playerid][pIllegalCargo] = -1;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", PlayerInfo[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}
	return 1;
}

SetPlayerSpecialTag(playerid, type)
{
	new
	    string[280];

    if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]);
        PlayerInfo[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_NORMAL)
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 0);
	}

	switch(type)
    {
		case TAG_ADMIN:
        {
            if(!strcmp(PlayerInfo[playerid][pAdminName], "None", true))
	            format(string, sizeof(string), "%s\n{089DCE}MGMC:RP Administrator\n{FF6347}%s", GetPlayerNameEx(playerid), GetAdminRank(playerid));
			else
			    format(string, sizeof(string), "%s\n{089DCE}MGMC:RP Administrator\n{FF6347}%s", PlayerInfo[playerid][pAdminName], GetAdminRank(playerid));

			if(strlen(GetAdminDivisionFull(playerid)) > 0)
			{
				format(string, sizeof(string), "%s\n{00C2E0}%s", string, GetAdminDivisionFull(playerid));
			}
			PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_HELPER:
		{
		    format(string, sizeof(string), "%s\n{089DCE}Helper Assisting\n{00FF00}%s", GetRPName(playerid), GetHelperRank(playerid));
    		PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
	}

	PlayerInfo[playerid][pTagType] = type;
}

SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0 && strcmp(PlayerInfo[playerid][pCustomTitle], "0", true) != 0) && strcmp(PlayerInfo[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, PlayerInfo[playerid][pCustomTitle], GetRPName(playerid));

    }
	else if(PlayerInfo[playerid][pAdmin] > 1)
	{
	    format(string, sizeof(string), ""SVRCLR"%s{7DAEFF} %s", GetColorARank(playerid), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "{33CCFF}%s{7DAEFF} %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin %s", GetRPName(playerid));
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
		format(string, sizeof(string), "%s Donator %s", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Level %i Player %s", PlayerInfo[playerid][pLevel], GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_NEWBIE, "[?] %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SM(i, COLOR_NEWBIE, "[?] %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWBIE, "[?] %s: %s", string, text);
			}
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] == 0)
	{
 		PlayerInfo[playerid][pLastNewbie] = gettime();
	}
}

SellWeapon(playerid, targetid, weaponid, price = 0)
{
	new cost;

	switch(weaponid)
	{
	    case 1: cost = 1000;
	    case 2, 5..8, 15: cost = 1000;
	    case 22: cost = 4000;
	    case 23: cost = 4000;
	    case 24: cost = 6500;
	    case 25: cost = 4000;
	    case 29: cost = 7000;
	    case 28, 32: cost = 6500;
	    case 30: cost = 9000;
	    case 33: cost = 8000;
	    case 34: cost = 20000;
	    case 31: cost = 10000;
	}

    if(PlayerInfo[playerid][pMaterials] >= cost)
    {
		PlayerInfo[playerid][pMaterials] -= cost;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(targetid == playerid)
		{
		    SM(playerid, COLOR_AQUA, "You have crafted yourself a "SVRCLR"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts themselves a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SM(playerid, COLOR_AQUA, "You have sold %s a "SVRCLR"%s{CCFFFF} for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
			SM(targetid, COLOR_AQUA, "%s has sold you a "SVRCLR"%s{CCFFFF} for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);

			GivePlayerCash(playerid, price);
			GivePlayerCash(targetid, -price);

			IncreaseJobSkill(playerid, JOB_ARMSDEALER);

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    	{
	        	if(PlayerInfo[playerid][pWeaponSkill] < 30) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 30 - PlayerInfo[playerid][pWeaponSkill]);
	        	} else if(PlayerInfo[playerid][pWeaponSkill] < 80) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 80 - PlayerInfo[playerid][pWeaponSkill]);
	        	} else if(PlayerInfo[playerid][pWeaponSkill] < 180) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 180 - PlayerInfo[playerid][pWeaponSkill]);
            	} else if(PlayerInfo[playerid][pWeaponSkill] < 480) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 480 - PlayerInfo[playerid][pWeaponSkill]);
				}
			}
			else
			{
				//
			}

	    	/*if(GetJobLevel(playerid, JOB_ARMSDEALER) == 1) // J E C K
	    	{
	    		if(weaponid >= 5 && weaponid >= 6 && weaponid >= 2 && weaponid >= 7 && weaponid >= 8 && weaponid >= 15 && weaponid >= 1)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}

			}
	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 2)
	    	{
                if(weaponid >= 22 && weaponid >= 23 && weaponid >= 25)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 3)
      		{
                if(weaponid >= 28 && weaponid >= 29 && weaponid >= 32)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 4)
	    	{
	        	if(weaponid >= 24 && weaponid >= 33)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 5)
	    	{
                if(weaponid >= 30)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}*/
		}

		GiveWeapon(targetid, weaponid);
		return 1;
	}
	else
	{
	    SCM(targetid, COLOR_SYNTAX, "That player has ran out of materials.");
	}

	return 0;
}

Namechange(playerid, oldname[], newname[])
{
    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
        {
            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
            ReloadHouse(i);
        }
    }

    for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
        {
            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
            ReloadGarage(i);
        }
    }

    for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
        {
            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
            ReloadBusiness(i);
        }
    }

    for(new i = 0; i < MAX_LANDS; i ++)
    {
        if(LandInfo[i][lExists] && !strcmp(LandInfo[i][lOwner], oldname, false))
        {
            strcpy(LandInfo[i][lOwner], newname, MAX_PLAYER_NAME);
            ReloadLand(i);
        }
    }


    for(new i = 0; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
        {
            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
        }
    }

	// Updating queries.
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = '%s' WHERE uid = %i", newname, PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

	strcpy(PlayerInfo[playerid][pUsername], newname, MAX_PLAYER_NAME);

    SetPlayerName(playerid, newname);
    SavePlayerVariables(playerid);
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

/*stock IsARentalCar(carid)
{
	if(GetVehicleModel(carid) == RentCars) {
		return 1;
	}
	return 0;
}*/

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_ARMY;
}

IsCarDealer(playerid)
{
	return GetFactionType(playerid) == FACTION_CARDEALER;
}

IsAngelsBurger(playerid)
{
	return GetFactionType(playerid) == FACTION_BURGER;
}

IsTerrorist(playerid)
{
	return GetFactionType(playerid) == FACTION_TERRORIST;
}

IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFindPlayer] == playerid && PlayerInfo[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}

IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}

IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Doors & Gates") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
			ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been deleted by an administrator.");
            SetPlayerSkin(i, 230);

	        PlayerInfo[i][pFaction] = -1;
	        PlayerInfo[i][pFactionRank] = 0;
	        PlayerInfo[i][pDivision] = -1;
	        PlayerInfo[i][pDuty] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetFactionType(playerid)
{
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return FactionInfo[PlayerInfo[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
   	strcpy(FactionInfo[factionid][fShortName], "None", 24);
	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "Pending", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gHPAmmo] = 0;
	GangInfo[gangid][gPoisonAmmo] = 0;
	GangInfo[gangid][gFMJAmmo] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount /= 2;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable in %i hours.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable to capture!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1254, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128];

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "[(Level %i) Gang Stash]\n"WHITE"Owned by: %s", GangInfo[gangid][gLevel], GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1275, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    /*if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Arms Dealer]\n"WHITE"Owned by: %s\nType /armsdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Drug Dealer]\n"WHITE"Owned by: %s\nType /drugdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}*/
	}
}

GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == gangid)
	    {
	        SM(i, COLOR_LIGHTRED, "The gang you were apart of has been deleted by an administrator.");
	        PlayerInfo[i][pGang] = -1;
	        PlayerInfo[i][pGangRank] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 50;
	    case 2: return 75;
	    case 3: return 100;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetVehicleGarage(vehicleid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == PlayerInfo[playerid][pID]) || (VehicleInfo[vehicleid][vOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}

	if(!VehicleInfo[vehicleid][vRegistered])
	{
	    SetVehicleNumberPlate(vehicleid, "UNREG");
	    ResyncVehicle(vehicleid);
	} else {
	    new plate[15];
	    format(plate, sizeof(plate), "LSV-0%d", VehicleInfo[vehicleid][vID]);
	    strcpy(VehicleInfo[vehicleid][vPlate], plate, 32);
	    SetVehicleNumberPlate(vehicleid, plate);
	    ResyncVehicle(vehicleid);
	}
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vPlate], "UNREG", 32);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}

    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vOwner] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vPot] = 0;
	VehicleInfo[vehicleid][vCrack] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vHPAmmo] = 0;
	VehicleInfo[vehicleid][vPoisonAmmo] = 0;
	VehicleInfo[vehicleid][vFMJAmmo] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;
    VehicleInfo[vehicleid][vValet] = 0;
	VehicleInfo[vehicleid][vRegistered] = 0;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}
	ResetVehicleObjects(vehicleid);
}

IsPointInLand(landid, Float:x, Float:y)
{
	if((LandInfo[landid][lMinX] <= x <= LandInfo[landid][lMaxX]) && (LandInfo[landid][lMinY] <= y <= LandInfo[landid][lMaxY]))
	{
	    return 1;
	}

	return 0;
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

HasLandPerms(playerid, landid)
{
	return IsLandOwner(playerid, landid) || PlayerInfo[playerid][pLandPerms] == landid;
}

IsLandOwner(playerid, landid)
{
	return (LandInfo[landid][lOwnerID] == PlayerInfo[playerid][pID]) || (LandInfo[landid][lOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

SetLandOwner(landid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, LandInfo[landid][lOwner], MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = PlayerInfo[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET ownerid = %i, owner = '%s' WHERE id = %i", LandInfo[landid][lOwnerID], LandInfo[landid][lOwner], LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadLand(landid);
}

GetLandObjectID(sql_id)
{
    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
    {
        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == sql_id)
        {
            return i;
		}
	}

	return INVALID_OBJECT_ID;
}

GetLandObjectCapacity(playerid)
{
	return (PlayerInfo[playerid][pVIPPackage] * 50) + 250;
}

RemoveLandObject(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteLandObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadLandObject(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, labels);
	}
}

ReloadAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
	}
}

ReloadLand(landid)
{
	if(LandInfo[landid][lExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(LandInfo[landid][lText]);
		DestroyDynamicPickup(LandInfo[landid][lPickup]);
	    DestroyDynamicArea(LandInfo[landid][lArea]);
	    GangZoneDestroy(LandInfo[landid][lGangZone]);

	    LandInfo[landid][lArea] = CreateDynamicRectangle(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lGangZone] = GangZoneCreateEx(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);

        if(LandInfo[landid][lOwnerID] == 0)
        {
	        format(string, sizeof(string), "This land is for sale worth $%i (%i)", LandInfo[landid][lPrice],landid);
		}
		else
		{
		    format(string, sizeof(string), "This land belongs to %s (%i)", LandInfo[landid][lOwner], landid);
		}
		LandInfo[landid][lText] = CreateDynamic3DTextLabel(string, 0xff6b9cff, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ], 15.0, .worldid = 0, .interiorid = 0);
		LandInfo[landid][lPickup] = CreateDynamicPickup(19523, 1, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ]);

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pShowLands])
	        {
	            GangZoneShowForPlayer(i, LandInfo[landid][lGangZone], (LandInfo[landid][lOwnerID] > 0) ? (0x99ffbeAA) : (0x33CC33AA));
			}
		}
	}
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}
Object_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return i;
	}
	return -1;
}

forward Toll_G10();
forward Toll_G9();
forward Toll_G8();
forward Toll_G7();
forward Toll_G6();
forward Toll_G5();
forward Toll_G4();
forward Toll_G3();
forward Toll_G2();
forward Toll_G();

public Toll_G10()
{
      DestroyDynamicObject( Border000 );
      Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
      Border00 = 0;
      return 1;
}
public Toll_G9()
{
      DestroyDynamicObject( Border999 );
      Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
      Border99 = 0;
      return 1;
}
public Toll_G8()
{
      DestroyDynamicObject( Border888 );
      Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
      Border88 = 0;
      return 1;
}
public Toll_G7()
{
      DestroyDynamicObject( Border777 );
      Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
      Border77 = 0;
      return 1;
}
public Toll_G5()
{
      DestroyDynamicObject( Border555 );
      Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
      Border55 = 0;
      return 1;
}
public Toll_G6()
{
      DestroyDynamicObject( Border666 );
      Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
      Border66 = 0;
      return 1;
}
public Toll_G3()
{
      DestroyDynamicObject( Border333 );
      Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
      Border33 = 0;
      return 1;
}
public Toll_G4()
{
      DestroyDynamicObject( Border444 );
      Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
      Border44 = 0;
      return 1;
}
public Toll_G2()
{
      DestroyDynamicObject( Border222 );
      Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);
      Border22 = 0;
      return 1;
}

public Toll_G()
{
      DestroyDynamicObject( Border111 );
	  Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);//
      Border11 = 0;
      return 1;
}

// D.MARKO
stock ShowGPSTextdraw(playerid) {
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][1]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][6]);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][7]);
}

stock HideGPSTextdraw(playerid) {
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][1]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][6]);
	PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][7]);
}

stock PlayerName(playerid)
{
    static pname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
    return pname;
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionInfo[i][fType] == sqlid)
	    return i;

	return -1;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetWeaponModel(weaponid)
{
    switch(weaponid)
    {
        case 1:
            return 331;

        case 2..8:
            return weaponid+331;

        case 9:
            return 341;

        case 10..15:
            return weaponid+311;

        case 16..18:
            return weaponid+326;

        case 22..29:
            return weaponid+324;

        case 30,31:
            return weaponid+325;

        case 32:
            return 372;

        case 33..45:
            return weaponid+324;

        case 46:
            return 371;
    }
    return 0;
}

forward OnObjectCreated(gateid);
public OnObjectCreated(gateid)
{
	if (gateid == -1 || !ObjectData[gateid][mobjExists])
	    return 0;

	ObjectData[gateid][mobjID] = cache_insert_id(connectionID);
	Object_Save(gateid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(connectionID);
	Gate_Save(gateid);

	return 1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "%.0f MPH Speed Limit\n"GREY"(( Type '/rules' > 'Speed Laws' for info. ))", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, 0xFF0000FF, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
		//SpeedData[speedid][sMapIcon] = CreateDynamicMapIcon(SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 56, 0, .style = MAPICON_GLOBAL);
	}
	return 1;
}

stock GiftBox(playerid, giveplayerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || playerid == MAX_PLAYERS)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 90)
		{
		    new gift = Random(1, 7);
		    if(gift == 1)
		    {
          		if(PlayerInfo[giveplayerid][pHours] < 2)
          		{
				    return GiftBox(playerid, giveplayerid);
				}
		        GivePlayerWeaponEx(giveplayerid, 24);
		        GivePlayerWeaponEx(giveplayerid, 31);
		        GivePlayerWeaponEx(giveplayerid, 34);
		        GivePlayerWeaponEx(giveplayerid, 29);
		        SendClientMessage(giveplayerid, COLOR_GREY2, " Congratulations! - You won Full Weapon Set");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a full weapon set, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 2)
		    {
		        PlayerInfo[giveplayerid][pFirstAid]++;
		        SM(giveplayerid, COLOR_GREY2, "Congratulations, you have won a first aid kit!");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a first aid kit, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 3)
		    {
		        PlayerInfo[giveplayerid][pMaterials] += 2000;
		        SM(giveplayerid, COLOR_GREY2, "Congratulations, you have won 2,000 materials!");
	         	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[giveplayerid][pMaterials], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 4)
		    {
				PlayerInfo[giveplayerid][pPot] += 50;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 50 grams of pot!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 50 grams of pot, enjoy!", GetPlayerNameEx(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[giveplayerid][pPot], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 5)
		    {
		        PlayerInfo[giveplayerid][pCrack] += 25;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 25 grams of crack!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 25 grams of cocaine, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[giveplayerid][pCrack], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 6)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $20,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $20,000, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		}
		else if(randgift > 90 && randgift <= 99)
		{
		    new gift = Random(1, 5);
			if(gift == 1)
			{
			    GivePlayerCash(giveplayerid, 15000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $15000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $15000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
			    PlayerInfo[giveplayerid][pMaterials] += 15000;
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 15,000 materials!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 15,000 materials, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[giveplayerid][pMaterials], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 3)
			{
			    PlayerInfo[giveplayerid][pUpgradePoints] += 10;
				SM(giveplayerid, COLOR_GREY, " Congratulations, you have won 10 upgrade points!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 10 upgrade points, enjoy!", GetPlayerNameEx(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", PlayerInfo[giveplayerid][pUpgradePoints], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 4)
			{
			    GivePlayerCash(giveplayerid, 20000);
				SM(giveplayerid, COLOR_GREY, " Congratulations, you have won a $20,000!");
				//SM(giveplayerid, COLOR_GREY, " Note: This rare reward may take up to 48 hours to be rewarded, contact Shop Techs.");
				//SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just won a free car from giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $20,000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
		}
		else if(randgift > 99 && randgift <= 100)
		{
		    new gift = Random(1, 4);
			if(gift == 1 && PlayerInfo[giveplayerid][pVIPPackage] <= 2)
			{
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won 5 days of Diamond VIP!");
				SM(giveplayerid, COLOR_GREY, " Note: This rare reward may take up to 48 hours to be rewarded.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Diamond VIP')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just won one month of {D909D9}Diamond VIP{FFFF00} from giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 5 days of Diamond VIP, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			if(gift == 1)
			{
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won a free house!");
				SM(giveplayerid, COLOR_GREY, " Note: This rare reward may take up to 48 hours to be rewarded.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Free House')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just won a free house from giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a free house, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
				GivePlayerCash(giveplayerid, 100000);
				SM(giveplayerid, COLOR_GREY, "Congratulations, you have won $100,000!");
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}:%s has just won $100,000 from the giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $100,000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
		}
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}
forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(connectionID);
	Speed_Save(speedid);

	return 1;
}
forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_content_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_content_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_content_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_content_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_content_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_content_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_content_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

forward CheckKeyPress(playerid);
public CheckKeyPress(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	MovePlayerCCTV(playerid);
}

stock MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SendClientMessage(playerid, 0xFF0000AA, "Invald CCTV");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, 1, "i", playerid);
    TextDrawShowForPlayer(playerid, TD);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	for(new menu; menu<TotalMenus; menu++)
	{

		if(Current == CCTVMenu[menu])
		{
		    if(MenuType[PlayerMenu[playerid]] == 1)
		    {
		        if(row == 11)
		        {
		            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
		            TogglePlayerControllable(playerid, 0);
		            PlayerMenu[playerid] = (menu+1);
				}
				else
				{
				    if(PlayerMenu[playerid] == 0)
				    {
				    	SetPlayerToCCTVCamera(playerid, row);
				    	PlayerMenu[playerid] = -1;
					}
					else
					{
					    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
					    PlayerMenu[playerid] = -1;
					}
				}
			}
			else
			{
			    if(PlayerMenu[playerid] == 0)
			    {
			    	SetPlayerToCCTVCamera(playerid, row);
			    	PlayerMenu[playerid] = -1;
				}
				else
				{
				    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
				    PlayerMenu[playerid] = -1;
				}
			}
		}
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerMenu[playerid] = -1;
	return 1;
}

/*stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}*/

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Object_Duplicate(playerid, idx)
{
	for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
	{
		ObjectData[i][mobjExists] = true;
		ObjectData[i][mobjModel] = ObjectData[idx][mobjModel];

		ObjectData[i][mobjPos][0] = ObjectData[idx][mobjPos][0];
		ObjectData[i][mobjPos][1] = ObjectData[idx][mobjPos][1];
		ObjectData[i][mobjPos][2] = ObjectData[idx][mobjPos][2];
		ObjectData[i][mobjPos][3] = ObjectData[idx][mobjPos][3];
		ObjectData[i][mobjPos][4] = ObjectData[idx][mobjPos][4];
		ObjectData[i][mobjPos][5] = ObjectData[idx][mobjPos][5];

		ObjectData[i][mobjInterior] = ObjectData[idx][mobjInterior];
		ObjectData[i][mobjWorld] = ObjectData[idx][mobjInterior];

		ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[idx][mobjModel], ObjectData[idx][mobjPos][0], ObjectData[idx][mobjPos][1], ObjectData[idx][mobjPos][2], ObjectData[idx][mobjPos][3], ObjectData[idx][mobjPos][4], ObjectData[idx][mobjPos][5], ObjectData[idx][mobjWorld], ObjectData[idx][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

		mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

		PlayerInfo[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[i][mobjObject]);
		PlayerInfo[playerid][pEditmObject] = i;
		PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
		return i;
	}
	return -1;
}

stock ShowVehicleHUDForPlayer(playerid)
{
	PlayerTextDrawShow(playerid, _vhudSeatBelt[playerid]);
	PlayerTextDrawShow(playerid, _vhudLights[playerid]);
	_vhudVisible[playerid] = 1;
}


stock HideVehicleHUDForPlayer(playerid)
{
	PlayerTextDrawHide(playerid, _vhudSeatBelt[playerid]);
	PlayerTextDrawHide(playerid, _vhudLights[playerid]);
	_vhudVisible[playerid] = 0;
}

stock Object_Create(playerid, idx)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
		{
		    ObjectData[i][mobjExists] = true;
			ObjectData[i][mobjModel] = idx;

			ObjectData[i][mobjPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][mobjPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][mobjPos][2] = z;
			ObjectData[i][mobjPos][3] = 0.0;
			ObjectData[i][mobjPos][4] = 0.0;
			ObjectData[i][mobjPos][5] = angle;

            ObjectData[i][mobjInterior] = GetPlayerInterior(playerid);
            ObjectData[i][mobjWorld] = GetPlayerVirtualWorld(playerid);

            ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

			new string[48];
			format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
			ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

			mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

			PlayerInfo[playerid][pEditmObject] = -1;
			EditDynamicObject(playerid, ObjectData[i][mobjObject]);
			PlayerInfo[playerid][pEditmObject] = i;
			PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
			SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(connectionID, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Object_Delete(gateid)
{
	if (gateid != -1 && ObjectData[gateid][mobjExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `object` WHERE `mobjID` = '%d'", ObjectData[gateid][mobjID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(ObjectData[gateid][mobjObject]))
		    DestroyDynamicObject(ObjectData[gateid][mobjObject]);

		if (IsValidDynamic3DTextLabel(ObjectData[gateid][mobjname2]))
			DestroyDynamic3DTextLabel(ObjectData[gateid][mobjname2]);

	    ObjectData[gateid][mobjExists] = false;
	    ObjectData[gateid][mobjID] = 0;
	}
	return 1;
}

stock Object_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `object` SET `mobjModel` = '%d', `mobjX` = '%.4f', `mobjY` = '%.4f', `mobjZ` = '%.4f', `mobjRX` = '%.4f', `mobjRY` = '%.4f', `mobjRZ` = '%.4f', `mobjInterior` = '%d', `mobjWorld` = '%d' WHERE `mobjID` = '%d'",
	    ObjectData[gateid][mobjModel],
	    ObjectData[gateid][mobjPos][0],
	    ObjectData[gateid][mobjPos][1],
	    ObjectData[gateid][mobjPos][2],
	    ObjectData[gateid][mobjPos][3],
	    ObjectData[gateid][mobjPos][4],
	    ObjectData[gateid][mobjPos][5],
	    ObjectData[gateid][mobjInterior],
	    ObjectData[gateid][mobjWorld],
	    ObjectData[gateid][mobjID]
	);
	return mysql_tquery(connectionID, query);
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(connectionID, query);
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_content_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_content_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_content_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_content_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_content_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_content_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_content_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_content_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_content_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_content_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_content_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_content_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_content_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_content_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_content_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_content_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_content_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_content_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_content_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_content_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_content_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], connectionID, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Object_Load();
public Object_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAPOBJECTS)
	{
	    ObjectData[i][mobjExists] = true;
	    ObjectData[i][mobjID] = cache_get_field_content_int(i, "mobjID");
	    ObjectData[i][mobjModel] = cache_get_field_content_int(i, "mobjModel");
	    ObjectData[i][mobjInterior] = cache_get_field_content_int(i, "mobjInterior");
	    ObjectData[i][mobjWorld] = cache_get_field_content_int(i, "mobjWorld");
	    ObjectData[i][mobjPos][0] = cache_get_field_content_float(i, "mobjX");
	    ObjectData[i][mobjPos][1] = cache_get_field_content_float(i, "mobjY");
	    ObjectData[i][mobjPos][2] = cache_get_field_content_float(i, "mobjZ");
	    ObjectData[i][mobjPos][3] = cache_get_field_content_float(i, "mobjRX");
	    ObjectData[i][mobjPos][4] = cache_get_field_content_float(i, "mobjRY");
	    ObjectData[i][mobjPos][5] = cache_get_field_content_float(i, "mobjRZ");

	    ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);
	}
	return 1;
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

stock RBS(bizid)
{
	new string[128];
	if(BusinessInfo[bizid][bLocked] == 1) format(string, sizeof(string), "{AA3333}Closed"WHITE"");
    else if(BusinessInfo[bizid][bLocked] == 0) format(string, sizeof(string), "{00FF00}Opened"WHITE"");
	return string;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock TerminateInfo(playerid, reason)
{
    if(Reconnecting[playerid] == true)
    {
    	new string[64];
     	format(string, sizeof(string), "unbanip %s", ReconnectIP[playerid]);
      	SendRconCommand(string);
       	Reconnecting[playerid] = false;
       	SendRconCommand("reloadbans");
	}
	if(PlayerInfo[playerid][pBleedTimer] != -1)
	{
		KillTimer(PlayerInfo[playerid][pBleedTimer]);
		PlayerInfo[playerid][pBleedTimer] = -1;
	}
    if(IsPlayerNPC(playerid)) return 1;
	DestroyDynamic3DTextLabel(PlayerLabel[playerid]);
	DestroyDynamic3DTextLabel(InjuredLabel[playerid]);
	/*#if defined Christmas
	#else
		PlayerTextDrawDestroy(playerid, EventTextdraw[playerid]);
	#endif*/

	TextDrawHideForPlayer(playerid, CRPTD);

	for(new i = 0; i < 16; i ++)
	{
	       PlayerTextDrawDestroy(playerid, HungerTD[playerid][i]);
	}

	Maskara[playerid] = 0;
	PowerSpec[playerid] = 0;

/*	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0)
	{
	    new reasona[64] = "Quitting During Arrest", prisonbay[64] = "ANTI RB";
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", prisonbay, reasona, playerid);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pPrisonReason], "Quitting During Arrest", 128);

		Log_Write("log_punishments", "SERVER prisoned %s (uid: %i) for 15 minutes, reason: quitting during arrest", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for 15 minutes by ANTI RB, reason: Quitting During Arrest", GetRPName(playerid));
	}
	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
	    TextDrawHideForPlayer(playerid, TD);
	}
	CurrentCCTV[playerid] = -1;

 	DestroyDynamic3DTextLabel(PlayerInfo[playerid][aMeID]);
 	PlayerInfo[playerid][aMeStatus] = 0;

	KillTimer(Timer[playerid]);
    pBlood[playerid] = false;*/
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SM(i, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerInfo[i][pSpectating]), PlayerInfo[i][pSpectating]);
	    	PlayerInfo[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(PlayerInfo[i][pHouseOffer] == playerid)
		{
		    PlayerInfo[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pGarageOffer] == playerid)
		{
		    PlayerInfo[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pBizOffer] == playerid)
		{
		    PlayerInfo[i][pBizOffer] = INVALID_PLAYER_ID;
		}
 		if(PlayerInfo[i][pMarriageOffer] == playerid)
		{
		    PlayerInfo[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pVestOffer] == playerid)
		{
		    PlayerInfo[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pCarOffer] == playerid)
		{
		    PlayerInfo[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFactionOffer] == playerid)
		{
		    PlayerInfo[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pGangOffer] == playerid)
		{
		    PlayerInfo[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFriskOffer] == playerid)
		{
		    PlayerInfo[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pCarryOffer] == playerid)
		{
		    PlayerInfo[i][pCarryOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTicketOffer] == playerid)
		{
		    PlayerInfo[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveOffer] == playerid)
		{
		    PlayerInfo[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveBroadcast] == playerid)
		{
		    PlayerInfo[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pShakeOffer] == playerid)
		{
		    PlayerInfo[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLandOffer] == playerid)
		{
		    PlayerInfo[i][pLandOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pSellOffer] == playerid)
		{
		    PlayerInfo[i][pSellOffer] = INVALID_PLAYER_ID;
		}
 		if(PlayerInfo[i][pAllianceOffer] == playerid)
		{
		    PlayerInfo[i][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pDefendOffer] == playerid)
		{
		    PlayerInfo[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDiceOffer] == playerid)
		{
		    PlayerInfo[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pSendRob] == playerid)
		{
		    PlayerInfo[i][pSendRob] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pInviteOffer] == playerid)
		{
		    PlayerInfo[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRobberyOffer] == playerid)
		{
		    PlayerInfo[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTextFrom] == playerid)
		{
		    PlayerInfo[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pWhisperFrom] == playerid)
		{
		    PlayerInfo[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFindPlayer] == playerid)
		{
		    PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRemoveFrom] == playerid)
		{
		    PlayerInfo[i][pRemoveFrom] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SM(i, COLOR_YELLOW, "Your chat with %s (ID %i) has ended as they left the server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(PlayerInfo[i][pActiveReport] >= 0 && (ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[PlayerInfo[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid)
				SCM(i, COLOR_YELLOW, "The player who made the report has left the server.");
			else
                SCM(i, COLOR_YELLOW, "The admin who accepted the report has left the server.");

		    ReportInfo[PlayerInfo[i][pActiveReport]][rExists] = 0;
		    PlayerInfo[i][pActiveReport] = -1;
		}
		if(PlayerInfo[i][pDueling] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Your duel target has left the server.");
		    PlayerInfo[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(PlayerInfo[i][pContractTaken] == playerid)
		{
		    SCM(i, COLOR_YELLOW, "Your contract target has disconnected from the server.");
		    PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDraggedBy] == playerid)
		{
		    SCM(i, COLOR_AQUA, "The person dragging you has disconnected. You are free!");
			PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}
		if(PlayerInfo[i][pCallLine] == playerid)
		{
		    HangupCall(PlayerInfo[i][pCallLine], HANGUP_DROPPED);
		}
	}
	if(PlayerInfo[playerid][pLogged])
	{
		/*if(PlayerInfo[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s possibly left the server while in a gunfight.", GetRPName(playerid));
			PlayerInfo[playerid][pInjured] = 1;
		}*/
	    SavePlayerVariables(playerid);
	    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s left the server while tazed or cuffed.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}
	if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SM(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has left the server while injured.", GetRPName(playerid));
		PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAcceptedEMS] == playerid)
	    {
	        SCM(i, COLOR_YELLOW, "Your medic has left the server while rescuing you. (you can now accept your fate)");
	        PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(PlayerInfo[playerid][pTutorial])
	{
	    KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pEditObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pBombObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pPotObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pPotObject]);
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
	}
	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(PlayerInfo[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(PlayerInfo[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	if(PlayerInfo[playerid][pDyuze])
	{
	    KillTimer(PlayerInfo[playerid][pDyuzeTimer]);
	}
	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(PlayerInfo[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
	    }
	}

	if(PlayerInfo[playerid][pLogged])
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(IsValidVehicle(i) && IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 3600000, false, "i", i);
	   		}
		}
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s disconnected and therefore failed to capture the point. ))", GetRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(PlayerInfo[playerid][pGang] >= 0)
		        {
		            GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(PlayerInfo[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(PlayerInfo[playerid][pFaction] >= 0)
		        {
		            FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}
 	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && InfluenceInfo[iTurf] == i)
		{
            if(PlayerInfo[playerid][pGang] == InfluenceInfo[iAttGang])
            {
			     if(PlayerInfo[playerid][pInfluenced] == 1)
			     {
                      InfluenceInfo[iAttGangMembers]--;
                      PlayerInfo[playerid][pInfluenced] = 0;
			     }
		    }
		    else if(InfluenceInfo[iAttGang] == -1)
              {
          		if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iAttGangMembers]--;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }

			if(PlayerInfo[playerid][pGang] == InfluenceInfo[iDefGang])
		    {
                 if(PlayerInfo[playerid][pInfluenced] == 1)
			     {
                      InfluenceInfo[iDefGangMembers]--;
                      PlayerInfo[playerid][pInfluenced] = 0;
			     }
			}
			else if(InfluenceInfo[iDefGang] == -1)
              {
    			if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iDefGangMembers]--;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }
		}
	}
	switch(reason)
	{
	    case 0: SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Timeout)", GetRPName(playerid));
	    case 1: SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Leaving)", GetRPName(playerid));
	    case 2: SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Kicked)", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

// Vehicle Tank Explode
stock Float: GetDistanceCameraToLocation(Float: cam_X, Float: cam_Y, Float: cam_Z, Float: vect_X, Float: vect_Y, Float: vect_Z, Float: dest_X, Float: dest_Y, Float: dest_Z, Float: targetDist = 0.0)
{
        cam_X -= dest_X;
        cam_Y -= dest_Y;
        cam_Z -= dest_Z;

        targetDist = floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);

        cam_X += vect_X * targetDist;
        cam_Y += vect_Y * targetDist;
        cam_Z += vect_Z * targetDist;

        return floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);
}

stock IsPlayerAimingAtPoint(playerid, Float: pos_X, Float: pos_Y, Float: pos_Z, Float: aimRadius)
{
        new
                Float: cam_Pos[3],
                Float: cam_Vect[3]
        ;
        GetPlayerCameraPos(playerid, cam_Pos[0], cam_Pos[1], cam_Pos[2]);
        GetPlayerCameraFrontVector(playerid, cam_Vect[0], cam_Vect[1], cam_Vect[2]);

        new
                Float: aimOffset
        ;
        switch(GetPlayerWeapon(playerid))
        {
                case 22, 23, 24, 25, 26, 27, 28, 29, 32, 38: aimOffset = -2.1;
                case 30, 31: aimOffset = -1.3;
                case 33: aimOffset = -0.9;
                case 34: return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[0], cam_Vect[1], cam_Vect[2], pos_X, pos_Y, pos_Z) < aimRadius;
                default: return 0;
        }
        new
                Float: aimAngle = atan2(cam_Vect[2], floatsqroot(cam_Vect[0] * cam_Vect[0] + cam_Vect[1] * cam_Vect[1])),
                Float: tmpVar
        ;
        cam_Vect[2] = floatcos(aimAngle + (aimOffset * -2), degrees) * floatsin(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);
        tmpVar = floatcos(aimAngle + (aimOffset * -2), degrees) * floatcos(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);

        return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[2], tmpVar, floatsin(aimAngle + (aimOffset * -2), degrees), pos_X, pos_Y, pos_Z) < aimRadius;
}

stock GetPetrolcapOffsets(modelID, &Float: aimOffset_X, &Float: aimOffset_Y, &Float: aimOffset_Z)
{
        enum e_PetrolcaPlayerInfo
        {
                e_ModelID,
                Float: e_Offset_X,
                Float: e_Offset_Y,
                Float: e_Offset_Z
        };
        static const
                g_PetrolcaPlayerInfo[][e_PetrolcaPlayerInfo] =
                {
                        { 400, -1.100, -2.059, -0.070 },
                        { 401, 1.090, -0.939, 0.000 },
                        { 402, 1.039, -1.919, 0.140 },
                        { 403, -1.450, 0.070, -0.800 },
                        { 404, -0.939, -2.359, -0.009 },
                        { 405, -1.039, -2.180, -0.039 },
                        { 407, -1.110, -3.660, -0.540 },
                        { 408, -1.230, 1.299, -0.660 },
                        { 409, -0.980, -2.829, 0.119 },
                        { 410, -1.019, -1.669, 0.209 },
                        { 411, 1.090, -2.099, 0.090 },
                        { 412, 0.000, -3.549, -0.170 },
                        { 413, -1.049, 0.340, -0.529 },
                        { 414, -0.920, -0.740, -0.699 },
                        { 415, -1.129, -2.069, 0.019 },
                        { 416, -1.350, -2.740, -0.189 },
                        { 418, -1.179, -1.769, -0.019 },
                        { 418, 1.210, -1.570, -0.079 },
                        { 419, -1.080, -1.990, 0.029 },
                        { 420, -1.100, -2.150, 0.100 },
                        { 421, -1.070, -2.440, -0.170 },
                        { 422, -1.080, -0.419, -0.200 },
                        { 423, -1.169, -1.899, -0.319 },
                        { 424, 0.180, 1.080, 0.430 },
                        { 426, -1.100, -2.150, 0.090 },
                        { 427, -1.269, -3.200, -0.159 },
                        { 428, -1.009, -3.059, -0.490 },
                        { 429, 0.990, -2.140, 0.140 },
                        { 431, -1.450, -5.469, -0.129 },
                        { 433, -1.519, 0.159, -0.680 },
                        { 434, -0.730, -1.580, 0.289 },
                        { 436, -1.070, -1.820, 0.140 },
                        { 437, -1.490, -4.969, -0.500 },
                        { 438, -1.090, -1.929, -0.019 },
                        { 439, -1.110, -1.509, 0.059 },
                        { 440, -1.090, -0.460, -0.419 },
                        { 442, -1.210, -2.210, 0.059 },
                        { 443, -1.529, 1.240, -0.899 },
                        { 444, 0.000, -2.599, -0.059 },
                        { 445, -1.039, -1.940, 0.129 },
                        { 451, 1.059, -1.220, -0.039 },
                        { 455, -1.529, -0.009, -0.759 },
                        { 456, 0.790, -0.050, -0.610 },
                        { 458, -1.110, -2.049, -0.109 },
                        { 459, -0.819, -2.390, -0.479 },
                        { 459, -1.049, -2.289, 0.219 },
                        { 461, 0.000, 0.140, 0.540 },
                        { 463, 0.000, 0.170, 0.469 },
                        { 466, 0.000, -3.000, -0.129 },
                        { 467, -1.070, -2.299, 0.119 },
                        { 468, 0.000, 0.009, 0.409 },
                        { 470, -1.259, -2.380, 0.239 },
                        { 475, -1.070, -1.600, 0.129 },
                        { 477, -1.200, -1.529, 0.239 },
                        { 478, 1.090, -0.340, 0.230 },
                        { 479, -1.090, -1.970, 0.029 },
                        { 480, -1.000, -0.879, 0.100 },
                        { 482, 1.070, -2.190, 0.000 },
                        { 483, 0.930, -2.509, -0.039 },
                        { 485, -0.889, 0.720, 0.019 },
                        { 486, -0.699, -3.170, 0.579 },
                        { 489, 1.159, -0.740, 0.000 },
                        { 490, 1.370, -1.250, 0.000 },
                        { 491, -1.070, -2.180, 0.000 },
                        { 492, -0.980, -2.240, 0.119 },
                        { 494, -1.019, -2.200, 0.119 },
                        { 495, 1.210, -1.909, -0.100 },
                        { 496, 1.059, -1.860, 0.150 },
                        { 498, -1.299, -0.009, 0.090 },
                        { 499, -1.110, -1.070, -0.349 },
                        { 500, -0.980, -1.710, -0.070 },
                        { 502, -1.080, -1.879, 0.140 },
                        { 503, -1.100, -2.049, 0.029 },
                        { 504, 0.000, -3.000, -0.129 },
                        { 504, -1.159, -1.830, 0.109 },
                        { 505, 1.159, -0.740, 0.000 },
                        { 506, 1.049, -1.110, -0.050 },
                        { 507, -1.169, -2.299, 0.109 },
                        { 508, -1.379, -3.049, -0.670 },
                        { 514, 1.429, 0.379, -0.649 },
                        { 515, -1.450, 0.479, -1.309 },
                        { 516, -1.100, -2.450, -0.029 },
                        { 517, -1.179, -1.950, 0.070 },
                        { 518, 1.210, -2.190, -0.070 },
                        { 521, 0.000, 0.129, 0.610 },
                        { 522, 0.000, 0.140, 0.610 },
                        { 523, 0.000, 0.150, 0.550 },
                        { 524, 1.529, 0.479, -0.990 },
                        { 525, -1.389, -0.509, -0.090 },
                        { 526, -0.990, -1.960, 0.059 },
                        { 527, -1.139, -1.690, 0.140 },
                        { 528, -1.090, -2.029, 0.119 },
                        { 529, -1.200, -2.220, 0.200 },
                        { 531, -0.009, 0.819, 0.430 },
                        { 533, 1.019, -1.960, 0.140 },
                        { 534, -1.039, -0.819, -0.200 },
                        { 535, -1.200, -0.560, 0.270 },
                        { 536, -1.070, -1.690, 0.090 },
                        { 540, -1.169, -2.519, -0.019 },
                        { 541, 1.009, -1.990, 0.150 },
                        { 542, -1.120, -1.919, 0.310 },
                        { 543, -1.100, -0.949, 0.000 },
                        { 544, -1.299, 2.069, 0.319 },
                        { 545, 0.000, -2.220, -0.319 },
                        { 546, 1.090, -2.029, 0.150 },
                        { 547, -1.169, -2.009, 0.119 },
                        { 549, -1.080, -1.179, 0.219 },
                        { 550, -1.070, -2.490, 0.039 },
                        { 551, -1.149, -2.670, 0.090 },
                        { 552, -1.289, -0.959, 0.490 },
                        { 554, 1.210, -2.390, 0.119 },
                        { 555, -0.790, -1.500, 0.180 },
                        { 557, 1.190, -2.569, 0.850 },
                        { 558, -1.090, -1.940, 0.270 },
                        { 559, -1.080, -1.710, 0.270 },
                        { 560, 1.139, -1.899, 0.129 },
                        { 561, 1.110, -2.299, 0.109 },
                        { 562, 1.039, -0.699, 0.070 },
                        { 565, 0.910, -0.870, 0.029 },
                        { 566, 1.080, -2.440, 0.019 },
                        { 567, 0.000, -2.859, -0.460 },
                        { 568, -0.500, -0.660, 0.379 },
                        { 571, 0.000, 0.189, 0.019 },
                        { 572, -0.379, -0.970, 0.159 },
                        { 573, -1.179, 0.479, -0.479 },
                        { 574, -0.750, -0.970, 0.280 },
                        { 575, 0.000, -2.779, -0.050 },
                        { 576, 0.000, -3.160, -0.250 },
                        { 578, -1.240, 2.910, -0.019 },
                        { 579, 1.220, -2.299, 0.170 },
                        { 580, 1.190, -1.820, 0.239 },
                        { 581, 0.000, 0.129, 0.540 },
                        { 582, -1.059, 0.140, -0.280 },
                        { 583, -0.759, 0.409, -0.059 },
                        { 584, 0.000, 0.000, 0.000 },
                        { 585, 1.139, -2.299, 0.200 },
                        { 587, -1.230, -1.220, 0.100 },
                        { 588, -1.460, -2.160, 0.219 },
                        { 589, 0.980, -0.889, 0.119 },
                        { 596, -1.110, -2.160, 0.100 },
                        { 597, -1.100, -2.150, 0.100 },
                        { 598, -1.080, -1.960, 0.159 },
                        { 599, 1.159, -0.740, 0.000 },
                        { 600, 1.090, -2.029, 0.079 },
                        { 601, -1.330, -1.690, 0.920 },
                        { 602, 1.090, -1.990, 0.109 },
                        { 603, 1.179, -2.190, -0.079 },
                        { 604, 0.000, -3.000, -0.129 },
                        { 605, -1.100, -0.949, 0.000 },
                        { 609, -1.299, 0.000, 0.100 }
                }
        ;
        for(new i; i < sizeof(g_PetrolcaPlayerInfo); ++i)
        {
                if(g_PetrolcaPlayerInfo[i][e_ModelID] == modelID)
                {
                        aimOffset_X = g_PetrolcaPlayerInfo[i][e_Offset_X];
                        aimOffset_Y = g_PetrolcaPlayerInfo[i][e_Offset_Y];
                        aimOffset_Z = g_PetrolcaPlayerInfo[i][e_Offset_Z];
                        return 1;
                }
        }
        return 0;
}

GetNearbyLand(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_LANDS; i ++)
		{
			if(LandInfo[i][lExists] && IsPlayerInDynamicArea(playerid, LandInfo[i][lArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    amount = percent(amount, 10);

	    SM(playerid, COLOR_AQUA, "You have been taxed a 10 percent fee of "SVRCLR"$%i{CCFFFF} for selling in %s's turf.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
	    GivePlayerCash(playerid, -amount);

	    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

GetNearbyTurf(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_TURFS; i ++)
		{
			if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
			{
			    return i;
			}
		}
	}
	return -1;
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}
	return -1;
}


GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = PlayerInfo[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nOwned by %s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
			else
			{
		        format(string, sizeof(string), "%s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
            new color = COLOR_GREY1;
			if(EntranceInfo[entranceid][eColor] != -256)
			{
				color = EntranceInfo[entranceid][eColor];
			}
			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, color, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    //EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == PlayerInfo[playerid][pID]) || (EntranceInfo[entranceid][eOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = PlayerInfo[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128*2];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
        DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

        if(BusinessInfo[businessid][bOwnerID] == 0)
        {
	        format(string, sizeof(string), ""WHITE"Business Type: "YELLOW"%s\n"WHITE"Business Cost: "YELLOW"$%i\n"WHITE"Business Fee: "YELLOW"$%i\n"WHITE"Business Place: "YELLOW"%s\n"WHITE"Business ID : "YELLOW"%d\n\n"GREY"Press 'Y' to enter/exit", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid);
		}
		else
		{
           format(string, sizeof(string), ""WHITE"Business Name: "YELLOW"%s\n"WHITE"Business Owner: "YELLOW"%s\n"WHITE"Business Fee: "YELLOW"$%i\n"WHITE"Business Place: "YELLOW"%s\n"WHITE"Business ID: "YELLOW"%d\n\n"GREY"Press 'Y' to enter/exit", BusinessInfo[businessid][bName], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]),businessid);
		}
        BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 10.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE:
			{
			 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 17, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1274, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_GUNSHOP:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(2061, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_CLOTHES:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1275, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_RESTAURANT:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1582, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_GYM:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1314, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_AGENCY:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 58, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1210, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_BARCLUB:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 49, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(19835, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		}
	}
}

ShowBlood(playerid, time)
{
    for(new i = 0; i < 8;i++)
    {
		if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty])
        {
        	TextDrawShowForPlayer(playerid, Blood[i]);
		}
    }
    Timer[playerid] = SetTimerEx("RemoveBlood", time*1000, false, "i", playerid);
    return 1;
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == PlayerInfo[playerid][pID]) || (BusinessInfo[businessid][bOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == PlayerInfo[playerid][pID]) || (GarageInfo[garageid][gOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s Garage\nPrice: $%i\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gPrice], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}
		else
		{
		    format(string, sizeof(string), "%s Garage\nOwned by %s\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gOwner], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0xc1ff75ff, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = PlayerInfo[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}

HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pFurniturePerms] == houseid;
}

IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID]) || (HouseInfo[houseid][hOwnerID] > 0 && PlayerInfo[playerid][pAdminDuty]);
}

GetVehicleStashCapacity(vehicleid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {25000,   5000,   25,   25,  10,  5,  80,  60,  50,  3}, // level 1
	    {50000,   10000,  50,   50,  25,  10, 100, 80,  60,  4}, // level 2
	    {100000,  25000,  100,  75,  50,  20, 125, 100, 70,  5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}
GetBackpackCapacity(playerid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {30000,   5000,   25,   25,  10,  5,  80,  60,  50,  4}, // Small
	    {55000,   10000,  50,   50,  25,  10, 100, 80,  60,  8}, // Medium
	    {120000,  25000,  100,  75,  50,  20, 125, 100, 70,  12} // Large
	};

	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		return stashCapacities[PlayerInfo[playerid][pBackpack] - 1][item];
	}

	return 0;
}
GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 100000, 500,  500,  250,  50,  1000, 500,  250},
		{2000000, 200000, 1000, 1000, 500,  100, 1500, 1000, 500},
		{3000000, 300000, 1500, 1500, 1000, 250, 2000, 1500, 1000}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W    C    M    P   HP   PT   FMJ  WEP
	    {50000,   5000,   50,  25,  20,  10, 80,  60,  50,  2}, // level 1
	    {100000,  10000,  100, 50,  40,  20, 100, 80,  60,  4}, // level 2
	    {250000,  25000,  150, 75,  60,  30, 125, 100, 70,  6}, // level 3
	    {500000,  50000,  200, 100, 80,  40, 150, 125, 80,  8}, // level 4
	    {1000000, 100000, 300, 200, 100, 50, 200, 150, 100, 10} // level 5
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 50;
	    case 1: return 75;
	    case 2: return 100;
	    case 3: return 150;
	    case 4: return 300;
	    case 5: return 500;
	}

	return 0;
}

GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 1200.0)
	        {
	        	houseIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}

RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}

ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}

ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        housestring[128*2],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nCost: $%i\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xffea5eff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19524, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			//HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 45.0);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\nRent Cost: $%i\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
		    }
		    else
		    {
			    format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			}
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xff3838ff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	        HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			//HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 32, 1, -1, -1, -1, 45.0);
		}

	}
}
IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

/*Float:GetVehicleSpeedMPH(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 100;
	}

	return 0.0;
}*/

Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}
GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

IsACluckNBellVehicle(carid)
{
	for(new v = 0; v < sizeof(pizzaVehicles); v++)
	{
	    if(carid == pizzaVehicles[v]) return 1;
	}
	return 0;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > PlayerInfo[playerid][pACTime] && !PlayerInfo[playerid][pKicked] && InsideTut[playerid] == 0)
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 350 && PlayerInfo[playerid][pAdmin] < 2)
		{
		    PlayerInfo[playerid][pACWarns]++;

		    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
		        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly speedhacking, speed: %.1f km/h.", GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        //Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        new szString[128];
			    format(szString, sizeof(szString),   "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
			    SendDiscordMessage(2, szString);
			}
			else
			{
			    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Speed hacking", GetRPName(playerid), SERVER_BOT);
			    //BanPlayer(playerid, SERVER_BOT, "Speed hacking");
			    Kick(playerid);
			}
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pJetpack])
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Jetpack", GetRPName(playerid), SERVER_BOT);
	    	//BanPlayer(playerid, SERVER_BOT, "Jetpack");
	    	Kick(playerid);
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && PlayerInfo[playerid][pAdmin] < 2)
                    {
                    	SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Flying Hacks", GetRPName(playerid), SERVER_BOT);
		    			//BanPlayer(playerid, SERVER_BOT, "Flying hacks");
		    			Kick(playerid);
					}
				}
			}
		}

		// Armor hacks
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(!(gettime() - PlayerInfo[playerid][pLastUpdate] > 5))
  			{
				if(floatround(armor) > floatround(PlayerInfo[playerid][pArmor]) && gettime() > PlayerInfo[playerid][pACTime] && gettime() > PlayerInfo[playerid][pArmorTime] && PlayerInfo[playerid][pAdmin] < 2)
				{
		            PlayerInfo[playerid][pACWarns]++;
	    	        PlayerInfo[playerid][pArmorTime] = gettime() + 10;

				    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				    {
				        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetRPName(playerid), playerid, PlayerInfo[playerid][pArmor], armor);
				        //Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pArmor], armor);
                        new szString[128];
					    format(szString, sizeof(szString),   "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pArmor], armor);
					    SendDiscordMessage(1, szString);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Armor hacking", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Armor hacking");
					    Kick(playerid);
					}
				}
			}

			PlayerInfo[playerid][pArmor] = armor;
		}
	}

	// Ammo hacks
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerInfo[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}

	// WARPing into vehicles while locked
	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_DOORS) && (!IsVehicleOwner(playerid, GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pVehicleKeys] != GetPlayerVehicleID(playerid)))
    {
        new
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1.0);
        GameTextForPlayer(playerid, "~r~This vehicle is locked!", 3000, 3);
    }*/
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	if(PlayerInfo[playerid][pLogged])
	{
	    PlayerInfo[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		Dyuze(playerid, "Successfully", "Turned on the engine.");
	}
	return 1;
}

forward SetVehicleEngineHotwire(vehicleid, playerid);
public SetVehicleEngineHotwire(vehicleid, playerid)
{
	if(PlayerInfo[playerid][pLogged])
	{
	    PlayerInfo[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has successfully hotwired the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name) && PlayerInfo[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAimingEx(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

/*IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}*/

IsPlayerInMiningArea(playerid)
{
    for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

IsPlayerInConstructionArea(playerid)
{
    for(new i = 0; i < sizeof(constructionPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, constructionPositions[i][0], constructionPositions[i][1], constructionPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

IsPlayerInButcherArea(playerid)
{
    for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)|| IsPlayerInRangeOfPoint(playerid, 12.0, 1165.1558,1341.8663,10.8440)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484) || IsPlayerInRangeOfPoint(playerid, 12.0, 1165.5591,1347.2380,10.8440)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165) || IsPlayerInRangeOfPoint(playerid, 12.0, 1165.3307,1352.8799,10.8440)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260)) {
	    return 1;
	}

	return 0;
}

forward Checkin(playerid);
public Checkin(playerid)
{
	new rand = random(sizeof(blackhospitalspawns));
	SetFreezePos(playerid, blackhospitalspawns[rand][0], blackhospitalspawns[rand][1], blackhospitalspawns[rand][2]);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 1);
	SetCameraBehindPlayer(playerid);

	PlayerInfo[playerid][pInjured] = 0;
    PlayerInfo[playerid][pHunger] = 50;
    PlayerInfo[playerid][pHungerTimer] = 0;
    PlayerInfo[playerid][pThirst] = 50;
    PlayerInfo[playerid][pThirstTimer] = 0;
    PlayerInfo[playerid][pBrokenLeg] = 0;

    TogglePlayerControllable(playerid, 1);
    SetPlayerHealth(playerid, 100.0);
    ClearAnimations(playerid, 1);
    GivePlayerCash(playerid, -15000);
    UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, ""); 
	return 1;
}

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 403.8266, -2088.7598, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 398.7553, -2088.7490, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 396.2197, -2088.6692, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 391.1094, -2088.7976, 7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 383.4157, -2088.7849, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 374.9598, -2088.7979, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 369.8107, -2088.7927, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 367.3637, -2088.7925, 7.8359)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 362.2244, -2088.7981, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 354.5382, -2088.7979, 7.8359)) {
	    return 1;
	}

	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && PlayerInfo[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            PlayerInfo[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            PlayerInfo[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(PlayerInfo[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            PlayerInfo[i][pStreamType] = type;
			        }
				}
			}

			strcpy(PlayerInfo[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	PlayerInfo[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyPotPlant(playerid)
{
	if(PlayerInfo[playerid][pPotPlanted])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pPotObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET potplanted = 0, pottime = 0, potgrams = 0, pot_x = 0.0, pot_y = 0.0, pot_z = 0.0, pot_a = 0.0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[playerid][pPotPlanted] = 0;
	    PlayerInfo[playerid][pPotTime] = 0;
	    PlayerInfo[playerid][pPotGrams] = 0;
	    PlayerInfo[playerid][pPotX] = 0.0;
	    PlayerInfo[playerid][pPotY] = 0.0;
	    PlayerInfo[playerid][pPotZ] = 0.0;
	    PlayerInfo[playerid][pPotA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(PlayerInfo[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pBoomboxText]);

		PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		PlayerInfo[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        PlayerInfo[playerid][pBoomboxPlaced] = 0;
        PlayerInfo[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageFormatted(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock ReturnName(playerid)
{
	new
		color, sz_playerName[MAX_PLAYER_NAME];

	if(!isnull(PlayerInfo[playerid][pUsername]))
	{
		if((color = GetPlayerColor(playerid)) == 0xFFFFFF00)
		{
	        color = 0xAAAAAAFF;
		}
	    format(sz_playerName, sizeof(sz_playerName), "{%06x}%s", color >>> 8, PlayerInfo[playerid][pUsername]);
	}
	else
	{
		GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	}
	return sz_playerName;
}

SendMessage(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

ShowActionBubble(playerid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 2)
	{
		SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 25.0, 6000);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 25.0, 6000);

		#emit RETN
	}
	return 1;
}

SendMessageToAll(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

/*Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}*/

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

/*public UpdateFPS(playerid)
{
	new string[24];
	new drunk2 = GetPlayerDrunkLevel(playerid);
	if(drunk2 < 100)
	{
	    SetPlayerDrunkLevel(playerid,2000);
	}
	else
	{
	    if(LastDrunkLevel[playerid] != drunk2)
	    {
	        new fps = LastDrunkLevel[playerid] - drunk2;

	        if((fps > 0) && (fps < 200))
			FPS2[playerid] = fps;
			LastDrunkLevel[playerid] = drunk2;
		}
	}
	format(string,sizeof(string)," %d",FPS2[playerid]-1);
	PlayerTextDrawSetString(playerid, FPStext[0] ,string);
	if(FPS2[playerid]-1 > 20)
	{
        PlayerTextDrawSetString(playerid, FPStext[1] , "(GOOD)");
        PlayerTextDrawColor(playerid, FPStext[1] , 0x33AA33AA);
        PlayerTextDrawShow(playerid, FPStext[1]);
        PlayerTextDrawShow(playerid, FPStext[0]);
    }
	if(FPS2[playerid]-1 < 20)
	{
        PlayerTextDrawSetString(playerid, FPStext[1] , "(BAD)");
        PlayerTextDrawColor(playerid, FPStext[1] , 0xFF0000AA);
        PlayerTextDrawShow(playerid, FPStext[1]);
        PlayerTextDrawShow(playerid, FPStext[0]);
    }
}
*/
forward SendAdminMessage(color, const text[], {Float,_}:...);
public SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}


SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendTurfAdminMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
		SAM(color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4


		SAM(color, str);

		#emit RETN
	}
	return 1;
}

SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "Material Turf"; }
		case 2: { ret = "Drug Turf"; }
		case 3: { ret = "Income Turf"; }
		case 4: { ret = "Money Turf"; }
		case 5: { ret = "Black Market"; }
	}
	return ret;
}
SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0))
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0))
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}


SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SCM(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SCM(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SCM(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SCM(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SCM(i, color5, text);
        }
        else if(PlayerInfo[i][pListen])
        {
            SCM(i, color5, text);
        }
	}
}



forward RemoveBlood(playerid);
public RemoveBlood(playerid)
{
    for(new i = 0; i < 8;i++)
    {
        TextDrawHideForPlayer(playerid, Blood[i]);
    }
    pBlood[playerid] = false;
    return 1;
}

public RobFleecabank(playerid)
{
	new i;
    SetPlayerCheckpoint(playerid, washmoneyPoints[i][0], washmoneyPoints[i][1], washmoneyPoints[i][2], 7.0);
    ClearAnimations(playerid);
    SetPlayerAttachedObject(playerid, 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
    PlayerInfo[playerid][pWantedLevel] = 6;
    TogglePlayerControllable(playerid, 1);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
    return 1;
}

// After registration
forward PlayerSpawn(playerid);
public PlayerSpawn(playerid)
{
	if(PlayerInfo[playerid][pLogged] && PlayerInfo[playerid][pTutorial])
	{
		if(PlayerInfo[playerid][pLogged] && PlayerInfo[playerid][pTutorial])
		{
			for(new i = 0; i < 2; i++) {
				TextDrawHideForPlayer(playerid, PublicTD[i]);
			}
			PlayerTextDrawHide(playerid, PublicTD2[playerid]);

			InsideTut[playerid] = 0;
			PlayerInfo[playerid][pTutorial] = 0;
			PlayerInfo[playerid][pSetup] = 0;

			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

            SetPlayerPos(playerid, 1659.378906, -2243.642333, 13.531332);
			SetPlayerFacingAngle(playerid, 175.31);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);

			SetCameraBehindPlayer(playerid);
			StopAudioStreamForPlayer(playerid);
			TogglePlayerControllable(playerid, 1);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", PlayerInfo[playerid][pGender], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

/*			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = i%, bank = i%, hours = i%, vippackage = i%, viptime = %i WHERE uid = %i", PlayerInfo[playerid][pCash], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pHours], PlayerInfo[playerid][pVIPPackage], PlayerInfo[playerid][pVIPTime], PlayerInfo[playerid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
*/
			// Scripted
			SCM(playerid, COLOR_WHITE, "You've just arrived to the nation, and the city welcomes you with open arms.");
			SCM(playerid, COLOR_WHITE, "You brought $50,000 in your pocket/wallet, and $50,000 in your bank. Use [/refund] to get bonus rewards!");

			// Refund
			SCM(playerid, COLOR_BLUE, "[Welcome to "SERVER_NAME". Use the {FFFF90}/requesthelp{FFFFFF} command to guide you around the server.]");
			SCM(playerid, COLOR_BLUE, "[Use the {FFFF90}/locate{FFFFFF} command to point to locations of jobs, businesses, and common places.]");
			SCM(playerid, COLOR_BLUE, "[We are well aware of the script in use, please get to know our community before you pass on any judgement.]");
			SendClientMessage(playerid, COLOR_YELLOW, "And also you're a poor guy, You need to find a job just type /findjob");
			SMA(COLOR_LIGHTRED, "MGMC:RP AIRLINES: [%s(%d)] has just arrived to the city, welcome him/her through [/g]", GetRPName(playerid), playerid);
			ShowRegistrationMenu(playerid, false);
		}
	}
}

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

stock Marko(playerid, time = 10000)
{
	if(PlayerInfo[playerid][pMarko])
	{
		for(new i = 0; i < 14; i ++)
		{
			PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
		}
	    KillTimer(PlayerInfo[playerid][pMarkoTimer]);
	}
	for(new i = 0; i < 14; i ++)
	{
		PlayerTextDrawShow(playerid, SHOWID[playerid][i]);
	}

	PlayerInfo[playerid][pMarko] = true;
	PlayerInfo[playerid][pMarkoTimer] = SetTimerEx("HidetheMarko", time, false, "d", playerid);
}

forward HidetheMarko(playerid);
public HidetheMarko(playerid)
{
	if (!PlayerInfo[playerid][pMarko])
	    return 0;

	PlayerInfo[playerid][pMarko] = false;
	for(new i = 0; i < 14; i ++)
	{
		PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
	}
	return 1;
}

forward HideKnockTD(playerid);
public HideKnockTD(playerid)
{
   foreach(new i : Player)
   {
	   if(GetNearbyTurf(i) == InfluenceInfo[iTurf])
	   {
           PlayerTextDrawHide(i, TurfKnockTD[i][0]);
           PlayerTextDrawHide(i, TurfKnockTD[i][1]);
           PlayerTextDrawHide(i, TurfKnockTD[i][2]);
       }
   }
}

stock Dyuze(playerid, title[], string[], time = 5000)
{
	if(PlayerInfo[playerid][pDyuze])
	{
	    PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	    KillTimer(PlayerInfo[playerid][pDyuzeTimer]);
	}
	new string2[128];
	format(string2, sizeof(string2), "%s~n~_", title);
	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][0], string2);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][0]);

	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][0], string);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][0]);

	PlayerInfo[playerid][pDyuze] = true;
	PlayerInfo[playerid][pDyuzeTimer] = SetTimerEx("HidetheDyuze", time, false, "d", playerid);
}

forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!PlayerInfo[playerid][pDyuze])
	    return 0;

	PlayerInfo[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	return 1;
}

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					Dyuze(i, "Countdown", "3");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					Dyuze(i, "Countdown", "2");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					Dyuze(i, "Countdown", "1");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
					Dyuze(i, "Countdown", "Go! Go! Go!");
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

forward CountdownAll(playerid, count);
public CountdownAll(playerid, count)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					Dyuze(i, "Countdown", "3");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					Dyuze(i, "Countdown", "2");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					Dyuze(i, "Countdown", "1");
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
					Dyuze(i, "Countdown", "Go! Go! Go!");
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("CountdownAll", 1000, false, "ii", playerid, count);
	}
}

forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	TogglePlayerControllable(playerid, 1);
}

forward TeleportPlayerFromTurf(playerid);
public TeleportPlayerFromTurf(playerid)
{
    PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pHunger] = 100;
	PlayerInfo[playerid][pHungerTimer] = 0;
    PlayerInfo[playerid][pThirst] = 100;
	PlayerInfo[playerid][pThirstTimer] = 0;

	ResetPlayerWeaponsEx(playerid);

    TogglePlayerControllable(playerid, 1);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerVirtualWorld(playerid, 0);
	ClearAnimations(playerid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	SetPlayerPos(playerid, 329.465301, -1803.470581, 4.600659);

	ClearDamages(playerid);

	SM(playerid, COLOR_AQUA, "You have been send to Garage From Turf.");
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
	    HideNoticeGUIFrame(playerid);
	}
}

forward UnfreezePlayerEx(playerid);
public UnfreezePlayerEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	HideNoticeGUIFrame(playerid);
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new number = random(60) + 1, jackpot = random(20000) + 10000;
	foreach (new i : Player)
	{
		if(PlayerInfo[i][pLotteryB] == 1)
		{
			if (PlayerInfo[i][pLottery] == number)
			{
				GivePlayerMoney(i, jackpot);
				SMA(COLOR_YELLOW, "Lottery: %s have won the lottery jackpot of %s!", GetRPName(i), FormatNumber(jackpot));
			}
			else
			{
				SCM(i, COLOR_WHITE, "Lottery: You didn't win the lottery draw this time.");
			}
			PlayerInfo[i][pLottery] = 0;
			PlayerInfo[i][pLotteryB] = 0;
		}
	}
	return 1;
}

IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}

IsSurfable(vehid)
{
	switch(GetVehicleModel(vehid)) {
		case 422, 535, 470, 406, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
			return 1;
	}
	if(IsHelicopter(vehid)) return 1;
	return 0;
}

AntiCarSurf(playerid)
{
    new vehid = GetPlayerSurfingVehicleID(playerid);
    if(vehid != INVALID_VEHICLE_ID && GetVehicleSpeed(vehid) >= 20.0)
    {
		if(IsSurfable(vehid)) {
			SetPVarInt(playerid, "DistortAim", 1);
			//SetPlayerDrunkLevel(playerid, 30000);
        }
        else {
        	GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
            SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY]+1.0, PlayerInfo[playerid][pPosZ]+1.0);
        }
    }
    /*else {
		if(GetPVarType(playerid, "DistortAim") != 0) {
			DeletePVar(playerid, "DistortAim");
			SetPlayerDrunkLevel(playerid, 0);
        }
    }*/
}

ComServ(playerid)
{
	if (PlayerInfo[playerid][pComserv] > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 100.0, 1477.3464, -1667.8080, 14.5532))
		{
			SetPlayerPos(playerid, 1482.4253,-1717.5935,14.0469);
			SetPlayerFacingAngle(playerid, 9.8095);
			PlayerInfo[playerid][pComserv] += 2;
			SM(playerid, COLOR_GREY2,"** You can not escape. Your community service has been extended to %i", PlayerInfo[playerid][pComserv]);
		}
	}
}

forward SecondTimer();
public SecondTimer()
{
	new hour, minute, boomboxid, string[128];
	gettime(hour, minute);
	if(InfluenceInfo[iTime] > 0)
	{
	    InfluenceInfo[iTime]--;
	}
	foreach(new i : Player)
	{
  		//SetPlayerTime(i, hour, minute);
		if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
		{
			ComServ(i);
		    AFKCheck(i);
			AntiCarSurf(i);
            /*#if defined Christmas
				#else
				if(PlayerInfo[i][pLastCarolTime] > 0)
				{
					PlayerInfo[i][pLastCarolTime] -= 1;
				}
			#endif*/
            new Float:vhp;
			for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
			{
				if(GetVehicleModel(vehicleid) == 0) continue; //only returns 0 when vehicle is invalid (not spawned)
				GetVehicleHealth(vehicleid,vhp);
				if(vhp < 300.0) {
					SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
					SetVehicleHealth(vehicleid, 251.0);
				}
			}
	    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{ // UpdateSpeedo
				new vehicleid = GetPlayerVehicleID(i);
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
			    {
	        		new
						Float:health;

					GetVehicleHealth(vehicleid, health);
					if(PlayerInfo[i][pSpeedometer] == 1) {
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][7], "KM/H");
					} else if(PlayerInfo[i][pSpeedometer] == 2) {
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][7], "MP/H");
                    }
					if(VehicleHasEngine(vehicleid)) {
                        format(string, sizeof(string), "%i", vehicleFuel[vehicleid]);
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][6], string);
						format(string, sizeof(string), "%.0f", GetVehicleSpeed(vehicleid));
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][2], string);
                        format(string, sizeof(string), "%.0f", health-250.0);
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][4], string);
		  	            format(string, sizeof(string), "%s", (GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("~r~LOCK") : ("~g~LOCK"));
					    PlayerTextDrawSetString(i, SpeedPlayerTD[i][8], string);
					    format(string, sizeof(string), "%s", (ExBJck[i]) ? ("~r~SEATBELT") : ("~g~SEATBELT"));
					    PlayerTextDrawSetString(i, SpeedPlayerTD[i][1], string);
					    format(string, sizeof(string), "%s", (GetVehicleParams(vehicleid, VEHICLE_LIGHTS)) ? ("~r~LIGHT") : ("~g~LIGHT"));
					    PlayerTextDrawSetString(i, SpeedPlayerTD[i][0], string);
					    
                    }
					/*if(VehicleHasEngine(vehicleid)) {
						format(string, sizeof(string), "%.0f%%", health-750);
						PlayerTextDrawSetString(i, SpeedPlayerTD[i][10], string);
					}*/
					for(new x = 0; x < MAX_DEPLOYABLES; x++)
					{
					    if(DeployInfo[x][dExists] && DeployInfo[x][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(x, 3.0, DeployInfo[x][dPosX], DeployInfo[x][dPosY], DeployInfo[x][dPosZ]))
				        {
				            new
				                panels,
				                doors,
				                lights,
				                tires;

				            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

				            if(tires != 15)
				            {
				                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
								Dyuze(i, "Notice", "Spiked!");
				            }
				        }
					}
				}
			}
	        if(PlayerInfo[i][pCapturingPoint] >= 0)
			{
				PlayerInfo[i][pCaptureTime]--;

				if(PlayerInfo[i][pCaptureTime] <= 0)
				{
					new Float:x, Float:y, Float:z;

					GetPlayerPos(i, x, y, z);

					if(PointInfo[PlayerInfo[i][pCapturingPoint]][pTime] == 0 && PlayerInfo[i][pPointX] == x && PlayerInfo[i][pPointY] == y && PlayerInfo[i][pPointZ] == z)
					{
						SMA(COLOR_GREEN, "%s attempted to capture %s for %s. It will be theirs in 10 minutes.", GetRPName(i), PointInfo[PlayerInfo[i][pCapturingPoint]][pName], GangInfo[PlayerInfo[i][pGang]][gName]);

						PointInfo[PlayerInfo[i][pCapturingPoint]][pCaptureTime] = 10;
						PointInfo[PlayerInfo[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "You moved from your position and therefore failed to capture.");
					}

					PlayerInfo[i][pCapturingPoint] = -1;
					PlayerInfo[i][pCaptureTime] = 0;
				}
			}
  	        if(PlayerInfo[i][pGang] >= 0) {
				PlayerTextDrawHide(i, PlayerstatTD[i][0]);
				format(string, sizeof(string), "%s", GangInfo[PlayerInfo[i][pGang]][gName]);
				PlayerTextDrawColor(i, PlayerstatTD[i][0], (GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff) + 0xFF);
				if(!PlayerInfo[i][pToggleTextdraws]) {
				    PlayerTextDrawShow(i, PlayerstatTD[i][0]);
				}
			} else if(PlayerInfo[i][pFaction] >= 0) {
				PlayerTextDrawHide(i, PlayerstatTD[i][0]);
				format(string, sizeof(string), "%s", FactionInfo[PlayerInfo[i][pFaction]][fName]);
				PlayerTextDrawColor(i, PlayerstatTD[i][0], (FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff) + 0xFF);
				if(!PlayerInfo[i][pToggleTextdraws]) {
				    PlayerTextDrawShow(i, PlayerstatTD[i][0]);
				}
			} else {
				PlayerTextDrawHide(i, PlayerstatTD[i][0]);
				format(string, sizeof(string), "MGMC Citizen");
				PlayerTextDrawColor(i, PlayerstatTD[i][0], COLOR_WHITE);
                if(!PlayerInfo[i][pToggleTextdraws]) {
				    PlayerTextDrawShow(i, PlayerstatTD[i][0]);
				}
			}
   PlayerTextDrawSetString(i, PlayerstatTD[i][0], string);
	       	/*if(Maskara[i] && !PlayerInfo[i][pAdminDuty])
	    	{
	        	format(string, sizeof(string), "Stranger_%d", MaskaraID[i]);
				SetPlayerName(i, string);
	    	}
	    	if(!Maskara[i] && !PlayerInfo[i][pAdminDuty])
	    	{
				SetPlayerName(i, PlayerInfo[i][pUsername]);
	    	}*/

			/*#if defined Christmas
			#else
				if(PlayerInfo[i][pCandy])
				{
					format(string,sizeof(string),"C%d",PlayerInfo[i][pCandy]);
					PlayerTextDrawSetString(i, EventTextdraw[i], string);
				}
			#endif*/

		   	if(++PlayerInfo[i][pHungerTimer] >= 180 && PlayerInfo[i][pHunger] > 0) // 3 minutes
			{
				PlayerInfo[i][pHungerTimer] = 0;
				PlayerInfo[i][pHunger] -= 1;
				if(PlayerInfo[i][pHunger] == 10)
				{
					SendMessage(i, COLOR_GREY, "You hear your stomach rumble, you need to eat. You can die due to starvation");
				}
				if(PlayerInfo[i][pHunger] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to starvation.");
					SetPlayerHealth(i, 0);
				}
			}
			if(++PlayerInfo[i][pThirstTimer] >= 120 && PlayerInfo[i][pThirst] > 0) // 2 minutes
			{
				PlayerInfo[i][pThirstTimer] = 0;
				PlayerInfo[i][pThirst] -= 1;

				if(PlayerInfo[i][pThirst] == 10)
				{
					SendMessage(i, COLOR_GREY, "You are thirsty, you need to drink. You can die due to thirst!");
				}
   				if(PlayerInfo[i][pThirst] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to thirst.");
     				SetPlayerHealth(i, 0);
				}
			}
			if(PlayerInfo[i][pSetup])
			{
                PlayerTextDrawSetPreviewModel(i, RegistrationTD[i][6], GetPlayerSkinScript(i));
	            PlayerTextDrawShow(i, RegistrationTD[i][6]);
			}
			            if(InfluenceInfo[iEnabled] == 1)
			{
             //new gangid = InfluenceInfo[iGangid];
			 new turfid = GetNearbyTurf(i);

			 new attackinggang = InfluenceInfo[iAttGang];
  	         new defendinggang = InfluenceInfo[iDefGang];
	         new attackinggangmembers = InfluenceInfo[iAttGangMembers];
	         new defendinggangmembers = InfluenceInfo[iDefGangMembers];


			 if(turfid == InfluenceInfo[iTurf])
             {
     ShowTurfTD(i);


				 if(attackinggangmembers > defendinggangmembers)
			     {
                     format(string, sizeof(string), "%s", GetGangName(attackinggang));
                     PlayerTextDrawSetString(i, TurfTD[i][5], string);
	              // PlayerTextDrawColor(i, TurfTD[i][0], (GetGangColor(attackinggang) & ~0xff) + 0xFF);
				 }
			     else if(defendinggangmembers > attackinggangmembers)
			     {
				      format(string, sizeof(string), "%s", GetGangName(defendinggang));
                      PlayerTextDrawSetString(i, TurfTD[i][5], string);
	                   // PlayerTextDrawColor(i, TurfTD[i][0], (GetGangColor(defendinggang) & ~0xff) + 0xFF);
				 }
                 else if(attackinggangmembers == defendinggangmembers)
			     {
					 format(string, sizeof(string), "%s", GetGangName(defendinggang));
                     PlayerTextDrawSetString(i, TurfTD[i][5], string);
	                // PlayerTextDrawColor(i, TurfTD[i][0], (GetGangColor(defendinggang) & ~0xff) + 0xFF);
				 }
			  }
			  else
 	          {
				 HideTurfTD(i);
			  }
 	        }
 	        else
 	        {
               HideTurfTD(i);
			}

            new turfid = GetNearbyTurf(i);

            if(turfid == InfluenceInfo[iTurf])
            {

	   	 	    if(InfluenceInfo[iTime] > 0)
			    {
			        new time = InfluenceInfo[iTime];
                    format(string, sizeof(string), "%s", FormatTime(time));
                    PlayerTextDrawSetString(i, TurfTD[i][2], string);
                    PlayerTextDrawShow(i, TurfTD[i][2]);

                    format(string, sizeof(string), "%s", TurfInfo[turfid][tName]);
                    PlayerTextDrawSetString(i, TurfTD[i][4], string);
                    PlayerTextDrawShow(i, TurfTD[i][4]);
			    }
			    else
			    {
                   PlayerTextDrawHide(i, TurfTD[i][1]);
                   PlayerTextDrawHide(i, TurfTD[i][5]);
                   PlayerTextDrawHide(i, TurfTD[i][3]);
                   PlayerTextDrawHide(i, TurfTD[i][4]);
			    }
			}
			else
			{
                 PlayerTextDrawHide(i, TurfTD[i][1]);
                 PlayerTextDrawHide(i, TurfTD[i][5]);
                 PlayerTextDrawHide(i, TurfTD[i][3]);
                 PlayerTextDrawHide(i, TurfTD[i][4]);
			}


			if(InfluenceInfo[iEnabled] == 1 && PlayerInfo[i][pAdmin])
			{
                    if(turfid == InfluenceInfo[iTurf])
                    {
							  new attmembers = InfluenceInfo[iAttGangMembers];
							  new defmembers = InfluenceInfo[iDefGangMembers];
							  new attackinggang = InfluenceInfo[iAttGang];
  	                          new defendinggang = InfluenceInfo[iDefGang];

							  format(string, sizeof(string), "%d", attmembers);
							  TextDrawSetString(TurfCountTD[4], string);

							  format(string, sizeof(string), "%s", GetGangName(attackinggang));
							  TextDrawSetString(TurfCountTD[6], string);

							  format(string, sizeof(string), "%d", defmembers);
							  TextDrawSetString(TurfCountTD[5], string);

							  format(string, sizeof(string), "%s", GetGangName(defendinggang));
							  TextDrawSetString(TurfCountTD[7], string);

							  TextDrawShowForPlayer(i, TurfCountTD[0]);
							  TextDrawShowForPlayer(i, TurfCountTD[1]);
							  TextDrawShowForPlayer(i, TurfCountTD[2]);
							  TextDrawShowForPlayer(i, TurfCountTD[3]);
							  TextDrawShowForPlayer(i, TurfCountTD[4]);
							  TextDrawShowForPlayer(i, TurfCountTD[5]);
							  TextDrawShowForPlayer(i, TurfCountTD[6]);
							  TextDrawShowForPlayer(i, TurfCountTD[7]);
					}
					else
					{
                         TextDrawHideForPlayer(i, TurfCountTD[0]);
							  TextDrawHideForPlayer(i, TurfCountTD[1]);
							  TextDrawHideForPlayer(i, TurfCountTD[2]);
							  TextDrawHideForPlayer(i, TurfCountTD[3]);
							  TextDrawHideForPlayer(i, TurfCountTD[4]);
							  TextDrawHideForPlayer(i, TurfCountTD[5]);
							  TextDrawHideForPlayer(i, TurfCountTD[6]);
							  TextDrawHideForPlayer(i, TurfCountTD[7]);
					}
			}
            else
					{
                         TextDrawHideForPlayer(i, TurfCountTD[0]);
							  TextDrawHideForPlayer(i, TurfCountTD[1]);
							  TextDrawHideForPlayer(i, TurfCountTD[2]);
							  TextDrawHideForPlayer(i, TurfCountTD[3]);
							  TextDrawHideForPlayer(i, TurfCountTD[4]);
							  TextDrawHideForPlayer(i, TurfCountTD[5]);
							  TextDrawHideForPlayer(i, TurfCountTD[6]);
							  TextDrawHideForPlayer(i, TurfCountTD[7]);
					}
            new Float:health, Float:armour;
			format(string, sizeof(string), "%d", GetHealth(i));
            PlayerTextDrawSetString(i, HungerTD[i][14], string);

            format(string, sizeof(string), "%d", GetArmor(i));
            PlayerTextDrawSetString(i, HungerTD[i][15], string);
            
			format(string, sizeof(string), "%d", PlayerInfo[i][pHunger]);
			PlayerTextDrawSetString(i, HungerTD[i][12], string);

			format(string, sizeof(string), "%d", PlayerInfo[i][pThirst]);
			PlayerTextDrawSetString(i, HungerTD[i][13], string);

		    format(string, sizeof(string), "ID: ~w~%d", i);
            PlayerTextDrawSetString(i, IdTD[i][0], string);
            
		    format(string, sizeof(string), "Black Money: ~w~%s", FormatNumber(PlayerInfo[i][pDirtyCash]));
		    PlayerTextDrawSetString(i, BlackmoneyTD[i][0], string);
	        
	        format(string, sizeof(string), "$%d", PlayerInfo[i][pBank]);
            PlayerTextDrawSetString(i, playertextdraw_30[i], string);
            
		    //ATM CODES
            format(string, sizeof(string), "$%d", PlayerInfo[i][pBank]);
            PlayerTextDrawSetString(i, AtmTD[i][7], string);
            
            format(string, sizeof(string), "$%d", PlayerInfo[i][pBank]);
            PlayerTextDrawSetString(i, BankTD1[i][5], string);

			/*if(PlayerInfo[i][pGang] >= 0) {
				PlayerTextDrawHide(i, PlayerStatsTD[i]);
				format(string, sizeof(string), "%s", GangInfo[PlayerInfo[i][pGang]][gName]);
				PlayerTextDrawColor(i, PlayerStatsTD[i], (GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff) + 0xFF);
				PlayerTextDrawShow(i, PlayerStatsTD[i]);
			} else if(PlayerInfo[i][pFaction] >= 0) {
				PlayerTextDrawHide(i, PlayerStatsTD[i]);
				format(string, sizeof(string), "%s", FactionInfo[PlayerInfo[i][pFaction]][fName]);
				PlayerTextDrawColor(i, PlayerStatsTD[i], (FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff) + 0xFF);
				PlayerTextDrawShow(i, PlayerStatsTD[i]);
			} else {
				PlayerTextDrawHide(i, PlayerStatsTD[i]);
				format(string, sizeof(string), "Unemployed");
				PlayerTextDrawColor(i, PlayerStatsTD[i], COLOR_WHITE);
				PlayerTextDrawShow(i, PlayerStatsTD[i]);
			}
			PlayerTextDrawSetString(i, PlayerStatsTD[i], string);*/
			if (PlayerInfo[i][pSpeedTime] > 0)
			{
			    PlayerInfo[i][pSpeedTime]--;
			}
		    if(PlayerInfo[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498))
				{
			    	PlayerInfo[i][pShipment] = -1;
			    	SCM(i, COLOR_SYNTAX, "Shipment cancelled. You went into another vehicle.");
				}
		    }

		    if(PlayerInfo[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 586)
				{
				    if(PlayerInfo[i][pPizzaTime] < 90)
					{
						PlayerInfo[i][pPizzaTime]++;
					}
				}
				else
				{
				    PlayerInfo[i][pPizzas] = 0;
				    PlayerInfo[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, SERVER_COLOR, "delivery cancelled. You went into another vehicle.");
				}
			}
			if(PlayerInfo[i][pNews] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 586)
				{
				    if(PlayerInfo[i][pNewsTime] < 90)
					{
						PlayerInfo[i][pNewsTime]++;
					}
				}
				else
				{
				    PlayerInfo[i][pNews] = 0;
				    PlayerInfo[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, COLOR_SYNTAX, "News Paper cancelled. You went into another vehicle.");
				}
			}
			else if (PlayerInfo[i][pGraffiti] != -1 && PlayerInfo[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != PlayerInfo[i][pGraffiti])
				{
				    PlayerInfo[i][pGraffiti] = -1;
            	    PlayerInfo[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        PlayerInfo[i][pGraffitiTime]--;

		            if (PlayerInfo[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, PlayerInfo[i][pGraffitiText]);
	        	        format(GraffitiData[PlayerInfo[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[PlayerInfo[i][pGraffiti]][graffitiColor] = PlayerInfo[i][pGraffitiColor];

						Graffiti_Refresh(PlayerInfo[i][pGraffiti]);
					    Graffiti_Save(PlayerInfo[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, SERVER_COLOR, "**{C2A2DA} %s puts their can of spray paint away.", GetRPName(i));

		   	            PlayerInfo[i][pGraffiti] = -1;
		   	            PlayerInfo[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!PlayerInfo[i][pToggleTextdraws])
		    {
			    if(PlayerInfo[i][pGPSOn])
				{
				    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
				        HideGPSTextdraw(i);
					}
				    else {
						new Float:rz;
						if(IsPlayerInAnyVehicle(i)) {
							GetVehicleZAngle(GetPlayerVehicleID(i), rz);
						}
						else {
							GetPlayerFacingAngle(i, rz);
						}

						if(rz >= 348.75 || rz < 11.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "N");
						else if(rz >= 326.25 && rz < 348.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NNE");
						else if(rz >= 303.75 && rz < 326.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NE");
						else if(rz >= 281.25 && rz < 303.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "ENE");
						else if(rz >= 258.75 && rz < 281.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "E");
						else if(rz >= 236.25 && rz < 258.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "ESE");
						else if(rz >= 213.75 && rz < 236.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SE");
						else if(rz >= 191.25 && rz < 213.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SSE");
						else if(rz >= 168.75 && rz < 191.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "S");
						else if(rz >= 146.25 && rz < 168.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SSW");
						else if(rz >= 123.25 && rz < 146.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "SW");
						else if(rz >= 101.25 && rz < 123.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "WSW");
						else if(rz >= 78.75 && rz < 101.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "W");
						else if(rz >= 56.25 && rz < 78.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "WNW");
						else if(rz >= 33.75 && rz < 56.25) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NW");
						else if(rz >= 11.5 && rz < 33.75) PlayerTextDrawSetString(i, PlayerInfo[i][pText][1], "NNW");
						PlayerTextDrawSetString(i, PlayerInfo[i][pText][0], GetPlayerZoneName(i));
					}
				}
				if(PlayerInfo[i][pWatchOn])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
						TextDrawHideForPlayer(i, TimeTD);
					else
					    TextDrawShowForPlayer(i, TimeTD);
				}
				if(!PlayerInfo[i][pToggleHUD])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
						PlayerTextDrawHide(i, PlayerInfo[i][pText][3]);
					    PlayerTextDrawHide(i, PlayerInfo[i][pText][4]);
					}
					else
					{
					    PlayerTextDrawShow(i, PlayerInfo[i][pText][3]);
					    PlayerTextDrawShow(i, PlayerInfo[i][pText][4]);
					}
				}
			}

		    if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - PlayerInfo[i][pLastDesync] > 120)
	        {
	            SCM(i, COLOR_REALRED, "** WARNING: You are desynced. You are advised to relog once you see this message.");
	            PlayerInfo[i][pLastDesync] = gettime();
	        }

		    if(PlayerInfo[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(PlayerInfo[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(PlayerInfo[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerInfo[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(PlayerInfo[i][pSpectating]));
		    }
		    if(PlayerInfo[i][pTutorial])
		    {
		        TogglePlayerControllable(i, 0);
		    }
			if(PlayerInfo[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(PlayerInfo[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, PlayerInfo[i][pDraggedBy]);
			}
			if(PlayerInfo[i][pVIPPackage] > 0 && gettime() > PlayerInfo[i][pVIPTime])
			{
			    PlayerInfo[i][pVIPPackage] = 0;
			    PlayerInfo[i][pVIPTime] = 0;
			    PlayerInfo[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your donator subscription has expired. You are no longer a VIP.");
			}
			/*if(PlayerInfo[i][pWeaponLicense] > 0 && gettime() > PlayerInfo[i][pWeaponLicenseTime])
			{
			    PlayerInfo[i][pWeaponLicense] = 0;
			    PlayerInfo[i][pWeaponLicenseTime] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0, gunlicensetime = 0 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your weapon license has expired.");
			}*/
			if(PlayerInfo[i][pVIPPackage] < 1 && PlayerInfo[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    PlayerInfo[i][pSecondJob] = JOB_NONE;
			    SCM(i, COLOR_LIGHTRED, "Your second job has been removed as you don't have a Donator subscription.");
			}
			if(PlayerInfo[i][pFirstAid])
			{
				GetPlayerHealth(i, health);

				if((health + 1.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    PlayerInfo[i][pFirstAid] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				}
			}
			if(PlayerInfo[i][pTazedTime] > 0)
			{
			    PlayerInfo[i][pTazedTime]--;

			    if(!PlayerInfo[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);
			        TogglePlayerControllable(i, 1);
			    }
			}
			if(PlayerInfo[i][pHurt] > 0)
			{
				PlayerInfo[i][pHurt]--;
			}
			if(PlayerInfo[i][pFishTime] > 0)
			{
			    PlayerInfo[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    PlayerInfo[i][pFishTime] = 0;
				}
			    else if(PlayerInfo[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);

					if(1 <= rand <= 20)
	    			{
	 	   				SCM(i, COLOR_SYNTAX, "You reeled in your line and caught nothing...");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 10 + random(50);

		    			SM(i, COLOR_AQUA, "You reeled in your line and caught a used wallet with $%i inside.", amount);
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(10) + 100;

					    SM(i, COLOR_AQUA, "You reeled in your line and caught a rare 18th century coin valued at $%i!", amount);
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight;

					    if(PlayerInfo[i][pUsedBait])
						{
							weight = random(15);
					    }
						else
						{
					        weight = random(10);
	    		        }

	    		        SM(i, COLOR_AQUA, "You reeled in your line and caught a fish weighing %i kg!", weight);
						PlayerInfo[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i WHERE uid = %i", PlayerInfo[i][pFishWeight], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						IncreaseJobSkill(i, JOB_FISHERMAN);

	    				if(GetJobLevel(i, JOB_FISHERMAN) < 5)
	    				{
	        				if(PlayerInfo[i][pFishingSkill] < 50) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 50 - PlayerInfo[i][pFishingSkill]);
	        				} else if(PlayerInfo[i][pFishingSkill] < 100) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 100 - PlayerInfo[i][pFishingSkill]);
	        				} else if(PlayerInfo[i][pFishingSkill] < 200) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 200 - PlayerInfo[i][pFishingSkill]);
            				} else if(PlayerInfo[i][pFishingSkill] < 350) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 350 - PlayerInfo[i][pFishingSkill]);
							}
						}
						else
						{
							//
						}

						if(GetJobLevel(i, JOB_FISHERMAN) == 1)
						{
							if(PlayerInfo[i][pFishWeight] >= 50)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 2)
						{
							if(PlayerInfo[i][pFishWeight] >= 100)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 3)
						{
							if(PlayerInfo[i][pFishWeight] >= 150)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 4)
						{
							if(PlayerInfo[i][pFishWeight] >= 200)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 5)
						{
							if(PlayerInfo[i][pFishWeight] >= 250)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}
			if(PlayerInfo[i][pJailType] > 0)
			{
			    PlayerInfo[i][pJailTime]--;

			    if(PlayerInfo[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);
					if(!PlayerInfo[i][pJailBreak])
					{
			        SCM(i, COLOR_GREY2, "Your jail sentence has expired.");
			        SetPlayerPos(i, 1544.4407, -1675.5522, 13.5584);
					SetPlayerFacingAngle(i, 90.0000);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);
					}
					else
					{
						SCM(i, COLOR_GREY2, "Your jail sentence has expired. You have been wanted due to your jailbreak sentence.");
					}
					PlayerInfo[i][pJailType] = 0;
			        PlayerInfo[i][pJailTime] = 0;
				}
			}
			if(PlayerInfo[i][pHospital] && PlayerInfo[i][pHospitalTime])
			{
				PlayerInfo[i][pHospitalTime]--;

				if(PlayerInfo[i][pHospitalTime] == 0)
				{
					new rand = random(sizeof(hospitalspawns));
					SetFreezePos(i, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
					SetPlayerFacingAngle(i, hospitalspawns[rand][3]);
					SetPlayerInterior(i, 1);
					SetPlayerVirtualWorld(i, PlayerInfo[i][pHospitalType]);
					SetCameraBehindPlayer(i);

					if(!enabledpurge) {
						GivePlayerCash(i, -500);
						Dyuze(i, "Notice", "Discharged we deduct you $500.");
						if(PlayerInfo[i][pDelivered])
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $500 for your stay. Your items is safed!");
							PlayerInfo[i][pDelivered] = 0;
						}
						else
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $500 for your stay. Your illegal items have been confiscated by staff.");
							SCM(i, COLOR_LIGHTRED, "(( You have lost 30 minutes of your memory. ))");
						}
					} else SCM(i, COLOR_DOCTOR, "You have been discharged for free for the purge event. (( Type /purgeme to refill your weapons. ))");

					new hospital[32];
					switch(PlayerInfo[i][pHospitalType])
					{
					    case HOSPITAL_COUNTY: strcat(hospital, "County General Hospital");
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "All Saints Hospital");
					    case HOSPITAL_VIP: strcat(hospital, "VIP LOUNGE");
					}

					UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

					SetPlayerHealth(i, PlayerInfo[i][pSpawnHealth]);
					SetScriptArmour(i, PlayerInfo[i][pSpawnArmor]);
					PlayerInfo[i][pHunger] = 50; // Hunger
					PlayerInfo[i][pHungerTimer] = 0;
					PlayerInfo[i][pThirst] = 50; // Thirst
					PlayerInfo[i][pThirstTimer] = 0;
					PlayerInfo[i][pDirtyCash] = 0;
					PlayerInfo[i][pBrokenLeg] = 0;

					PlayerInfo[i][pHospital] = 0;
		            PlayerInfo[i][pHospitalTime] = 0;
		        }
			}
			if(PlayerInfo[i][pRefuel] != INVALID_VEHICLE_ID)
			{
			    PlayerInfo[i][pRefuelAmount] += 2;
			    vehicleFuel[PlayerInfo[i][pRefuel]]++;

			    if(vehicleFuel[PlayerInfo[i][pRefuel]] >= 100 || PlayerInfo[i][pCash] < PlayerInfo[i][pRefuelAmount] || GetVehicleParams(PlayerInfo[i][pRefuel], VEHICLE_ENGINE))
			    {
			        AddPointMoney(POINT_FUEL, PlayerInfo[i][pRefuelAmount]);
			        GivePlayerCash(i, -PlayerInfo[i][pRefuelAmount]);
			        SM(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for "SVRCLR"$%i{CCFFFF}.", PlayerInfo[i][pRefuelAmount]);

			        PlayerInfo[i][pRefuel] = INVALID_VEHICLE_ID;
			        PlayerInfo[i][pRefuelAmount] = 0;
			    }
			}
			if(PlayerInfo[i][pMiningTime] > 0)
			{
			    PlayerInfo[i][pMiningTime]--;

			    if(PlayerInfo[i][pMiningTime] <= 0)
				{
					if(IsPlayerInMiningArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerInfo[i][pTazedTime] && !PlayerInfo[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        PlayerInfo[i][pCP] = CHECKPOINT_MINING;

		                SetPlayerAttachedObject(i, 9, 3929, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, -962.6600, -2157.6577, 35.1390, 2.0);

						if(1 <= number <= 3)
						{
						    PlayerInfo[i][pMiningRock] = 2;
						    SCM(i, COLOR_AQUA, "You have dug up an old quality stone. Send it to our boss.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a 1980's stone. Send it to our boss.");
						    PlayerInfo[i][pMiningRock] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a quality metal. Send it to our boss.");
						    PlayerInfo[i][pMiningRock] = 4;
						}
						else if(number == 9 && !PlayerInfo[i][pRareTime])
						{
						    SCM(i, COLOR_AQUA, "Woah, this looks oddly weird to find in the middle of a city, lets show it to the boss.");
						    PlayerInfo[i][pMiningRock] = 5;
						}
						else
						{
						    PlayerInfo[i][pMiningRock] = 1;
	                    	SCM(i, COLOR_AQUA, "You have dug up an ordinary stone. Send it to our boss.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerInfo[i][pConstructionTime] > 0)
			{
			    PlayerInfo[i][pConstructionTime]--;

			    if(PlayerInfo[i][pConstructionTime] <= 0)
				{
					if(IsPlayerInConstructionArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerInfo[i][pTazedTime] && !PlayerInfo[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        PlayerInfo[i][pCP] = CHECKPOINT_CONSTRUCTION;

		                SetPlayerAttachedObject(i, 9, 3931, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 1279.8998, -1252.6083, 13.9328, 2.0);

						if(1 <= number <= 3)
						{
						    PlayerInfo[i][pConstruction] = 2;
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    PlayerInfo[i][pConstruction] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    PlayerInfo[i][pConstruction] = 4;
						}
						else if(number == 9)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    PlayerInfo[i][pConstruction] = 5;
						}
						else
						{
						    PlayerInfo[i][pConstruction] = 1;
	                    	SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerInfo[i][pPackageTime] > 0)
			{
			    PlayerInfo[i][pPackageTime]--;

			    if(PlayerInfo[i][pPackageTime] <= 0)
				{
					if(IsPlayerInButcherArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerInfo[i][pTazedTime] && !PlayerInfo[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        PlayerInfo[i][pCP] = CHECKPOINT_BUTCHER;

		                SetPlayerAttachedObject(i, 9, 2805, 6, 0.140999, 0.184999, -0.250000, -23.300001, -6.400006, 12.699996, 0.716000, 0.803000, 0.859999);

						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 943.8313, 2110.6758, 1010.4289, 2.0);

						if(1 <= number <= 3)
						{
						    PlayerInfo[i][pPackagingMeat] = 2;
						    SCM(i, COLOR_WHITE, "You chopped the meat cleanly.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_WHITE, "You chopped the meat cleanly.");
						    PlayerInfo[i][pPackagingMeat] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_WHITE, "You chopped the meat cleanly.");
						    PlayerInfo[i][pPackagingMeat] = 4;
						}
						else if(number == 9 && !PlayerInfo[i][pRareTime])
						{
						    SCM(i, COLOR_WHITE, "You chopped the meat perfectly.");
						    PlayerInfo[i][pPackagingMeat] = 5;
						}
						else
						{
						    PlayerInfo[i][pPackagingMeat] = 1;
	                    	SCM(i, COLOR_WHITE, "The meat was done. Drop it off at the marker.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerInfo[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(PlayerInfo[i][pTaxiPassenger], GetPlayerVehicleID(i)) || PlayerInfo[i][pTaxiFare] == 0 || PlayerInfo[PlayerInfo[i][pTaxiPassenger]][pCash] < PlayerInfo[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        PlayerInfo[i][pTaxiTime]++;

			        if(PlayerInfo[i][pTaxiTime] >= 15)
			        {
			            PlayerInfo[i][pTaxiTime] = 0;
			            PlayerInfo[i][pTaxiBill] += PlayerInfo[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Taxi Meter:~w~ $%i", PlayerInfo[i][pTaxiBill]);
					Dyuze(i, "Notice", string);
			    }
			}
			if(PlayerInfo[i][pMuted] > 0)
			{
			    PlayerInfo[i][pMuted]--;

			    if(PlayerInfo[i][pMuted] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer muted.");
				}
			}
			if(PlayerInfo[i][pSpamTime] > 0)
			{
			    PlayerInfo[i][pSpamTime]--;
			}
			if(PlayerInfo[i][pVehicleCount] > 0)
			{
			    PlayerInfo[i][pVehicleCount]--;
			}
			if(PlayerInfo[i][pMechanicCall] > 0)
			{
			    PlayerInfo[i][pMechanicCall]--;
			}
			if(PlayerInfo[i][pTaxiCall] > 0)
			{
			    PlayerInfo[i][pTaxiCall]--;
			}
			if(PlayerInfo[i][pEmergencyCall] > 0)
			{
			    PlayerInfo[i][pEmergencyCall]--;
			}
			if(PlayerInfo[i][pCourierCooldown] > 0)
			{
			    PlayerInfo[i][pCourierCooldown]--;
			}
   			if(PlayerInfo[i][pPizzaCooldown] > 0)
			{
       			PlayerInfo[i][pPizzaCooldown]--;
			}
			if(PlayerInfo[i][pNewsCooldown] > 0)
			{
       			PlayerInfo[i][pNewsCooldown]--;
			}
			if(PlayerInfo[i][pRareTime] > 0)
			{
		    	PlayerInfo[i][pRareTime]--;
			}
			if(PlayerInfo[i][pVipTimes] > 0)
			{
		    	PlayerInfo[i][pVipTimes]--;
			}

   			if(PlayerInfo[i][pDeathCooldown] > 0)
			{
       			PlayerInfo[i][pDeathCooldown]--;
			}
			if(PlayerInfo[i][pDetectiveCooldown] > 0)
			{
       			PlayerInfo[i][pDetectiveCooldown]--;
			}
			if(PlayerInfo[i][pLootTime] > 0)
			{
			    PlayerInfo[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && PlayerInfo[i][pLootTime] <= 0)
			    {
			        new amount = random(10000) + 1000;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERY;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					Dyuze(i, "Notice", string);

			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, 1462.363891, -1023.768432, 23.833436, 3.0);
			    }
				else if((PlayerInfo[i][pRobbingBiz] >= 0 && PlayerInfo[i][pRobbingBiz] == GetInsideBusiness(i)) && PlayerInfo[i][pLootTime] <= 0)
			    {
					if(PlayerInfo[i][pRobCash] >= BusinessInfo[PlayerInfo[i][pRobbingBiz]][bCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						PlayerInfo[i][pLootTime] = 0;
					} else {
						PlayerInfo[i][pLootTime] = 5;
						Dyuze(i, "Notice", "Looting business vault...");
					}

			        new amount = random(1000) + 500;

			        //ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERYBIZ;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					Dyuze(i, "Notice", string);

			        SM(i, COLOR_AQUA, "You have looted P%i and now have P%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosX], BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosY], BusinessInfo[PlayerInfo[i][pRobbingBiz]][bPosZ], 3.0);
			    }
                else if(IsPlayerInFleecaRobbery(i) && PlayerInfo[i][pLootTime] <= 0)
			    {
			        new fleeca = random(5000) + 1000;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += fleeca;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERYFLEECA;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", fleeca);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", fleeca, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, 688.636596, -1181.485473, 15.366247, 3.0);
			    }
				else if((PlayerInfo[i][pRobbingHouse] >= 0 && PlayerInfo[i][pRobbingHouse] == GetInsideHouse(i)) && PlayerInfo[i][pLootTime] <= 0)
			    {
					if(PlayerInfo[i][pRobCash] >= HouseInfo[PlayerInfo[i][pRobbingHouse]][hCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						PlayerInfo[i][pLootTime] = 0;
					} else {
						PlayerInfo[i][pLootTime] = 5;
						Dyuze(i, "Notice", "Looting house vault...");
					}

			        new amount = random(1000) + 500;

			        //ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERYHOUSE;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					Dyuze(i, "Notice", string);

			        SM(i, COLOR_AQUA, "You have looted P%i and now have P%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosX], HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosY], HouseInfo[PlayerInfo[i][pRobbingHouse]][hPosZ], 3.0);
			    }
			}
			if(PlayerInfo[i][pFindTime] > 0)
			{
			    PlayerInfo[i][pFindTime]--;

			    if(PlayerInfo[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, PlayerInfo[i][pFindPlayer], GetPlayerColor(PlayerInfo[i][pFindPlayer]));
					PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((PlayerInfo[i][pToggleMusic]) || (PlayerInfo[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != PlayerInfo[i][pBoomboxListen]))
			{
				PlayerInfo[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    PlayerInfo[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!PlayerInfo[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && PlayerInfo[i][pBoomboxListen] != boomboxid))
			{
			    PlayerInfo[i][pBoomboxListen] = boomboxid;

			    if(PlayerInfo[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, PlayerInfo[boomboxid][pBoomboxURL]);
			        PlayerInfo[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(PlayerInfo[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                PlayerInfo[i][pPickTime]--;

                if(PlayerInfo[i][pPickTime] <= 0)
                {
                    new planterid = PlayerInfo[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !PlayerInfo[planterid][pLogged] || !PlayerInfo[planterid][pPotPlanted])
                    {
                        SCM(i, COLOR_SYNTAX, "This plant is no longer available to pick.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, PlayerInfo[planterid][pPotX], PlayerInfo[planterid][pPotY], PlayerInfo[planterid][pPotZ]))
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You left the area of the plant.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You must stay crouched when picking a plant.");
					}
					else
					{
					    PlayerInfo[i][pPot] += PlayerInfo[planterid][pPotGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[i][pPot], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(i, COLOR_AQUA, "You have harvested %i grams of pot from this plant.", PlayerInfo[planterid][pPotGrams]);
					    DestroyPotPlant(planterid);
					}

					PlayerInfo[i][pPickPlant] = INVALID_PLAYER_ID;
					PlayerInfo[i][pPickTime] = 0;
				}
			}
			if(PlayerInfo[i][pCookMeth] > 0)
			{
                PlayerInfo[i][pCookTime]--;

                if(PlayerInfo[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 10.0, 333.694000, 1123.089477, 1083.890258))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have left the cooking spot.");
                        ResetCooking(i);
                    }
                    else if(PlayerInfo[i][pEphedrine] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of ephedrine.");
                        ResetCooking(i);
					}
                    else if(PlayerInfo[i][pBakingSoda] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of baking soda.");
                        ResetCooking(i);
					}
					else if(PlayerInfo[i][pMeth] + 2 > GetPlayerCapacity(i, CAPACITY_METH))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of inventory space for meth.");
                        ResetCooking(i);
					}
					else
					{
						Dyuze(i, "Notice", "+2 grams of meth!");

						PlayerInfo[i][pEphedrine] -= 1;
						PlayerInfo[i][pMeth] += 2;
						PlayerInfo[i][pCookGrams] += 2;

						if((PlayerInfo[i][pCookGrams] % 4) == 0)
						{
						    PlayerInfo[i][pMuriaticAcid]--;
						    PlayerInfo[i][pBakingSoda]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i, bakingsoda = %i WHERE uid = %i", PlayerInfo[i][pEphedrine], PlayerInfo[i][pMeth], PlayerInfo[i][pMuriaticAcid], PlayerInfo[i][pBakingSoda], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!PlayerInfo[i][pEphedrine])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of ephedrine therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!PlayerInfo[i][pMuriaticAcid])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of muriatic acid therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
       					else if(!PlayerInfo[i][pBakingSoda])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of baking soda therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(PlayerInfo[i][pMeth] >= GetPlayerCapacity(i, CAPACITY_METH))
	                    {
	                        SM(i, COLOR_LIGHTRED, "You ran out of inventory space for meth therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        PlayerInfo[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(PlayerInfo[i][pDrugsUsed] >= 4)
			{
			    PlayerInfo[i][pDrugsTime]--;

			    if(PlayerInfo[i][pDrugsTime] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer stoned.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);

			        PlayerInfo[i][pDrugsUsed] = 0;
			        PlayerInfo[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
				}
			}
			if(PlayerInfo[i][pPoisonTime] > 0)
			{
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    PlayerInfo[i][pPoisonTime]--;
			}

			AnticheatCheck(i);

			//GetPlayerHealth(i, PlayerInfo[i][pHealth]);

			if(PlayerInfo[i][pGang] >= 0 && !PlayerInfo[i][pBandana])
			{
				new id, gang = PlayerInfo[i][pGang], color;
				if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[gang][gColor];
				}
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][PlayerInfo[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][PlayerInfo[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}
			if(!PlayerInfo[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Nametag colors gang colors bandana badge
				if(PlayerInfo[i][pJoinedEvent] && EventInfo[eType] == 2)
				{
				    SetPlayerColor(i, (PlayerInfo[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				}
				else if(PlayerInfo[i][pPaintball] == 2)
				{
				    SetPlayerColor(i, (PlayerInfo[i][pPaintballTeam] == 1) ? (0x33CCFF00) : (0xFFFF9900));
				}
				else if(PlayerInfo[i][pJailType] == 2)
				{
				    SetPlayerColor(i, 0xF4A41900);
				}
				else if(PlayerHasJob(i, JOB_TAXIDRIVER) && PlayerInfo[i][pTaxiFare] > 0)
				{
				    SetPlayerColor(i, 0xFFD70000);
				}
				else if(PlayerInfo[i][pFaction] >= 0 && PlayerInfo[i][pDuty] && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_HITMAN)
				{
					SetPlayerColor(i, FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff);
				}
				else if(PlayerInfo[i][pGang] >= 0 && PlayerInfo[i][pBandana])
				{
				    SetPlayerColor(i, GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff);
				}
				else if(PlayerInfo[i][pVIPPackage] > 0 && PlayerInfo[i][pVIPColor])
				{
				    SetPlayerColor(i, 0xC2A2DA00);
				}
				/*else if(PlayerInfo[i][pAdmin] > 0 && PlayerInfo[i][pAdminDuty])
				{
                    SetPlayerSpecialTag(i, TAG_ADMIN);
				}*/
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				    //SetPlayerSpecialTag(i, TAG_NORMAL);
				}
			}
		}
	}
	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
		SendRconCommand("reloadfs propamap");
		//SendRconCommand("reloadfs propawound");
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}
	format(string, sizeof(string), "Marijuana Seeds\n"WHITE"Stock: %i\nPrice: $5/seed\n/getdrug seeds [amount]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Raw Ephedrine\n"WHITE"Stock: %i\nPrice: $150/gram\n/getdrug ephedrine [amount]", gEphedrineStock);
	UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Crack\n"WHITE"Stock: %i\nPrice: $250/gram\n/getdrug crack [amount]", gCrackStock);
    UpdateDynamic3DTextLabelText(gCrackText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour;
	gettime(.hour = hour);
	RefreshTime();
	if(gHour != hour)
	{
	    SMA(COLOR_WHITE, "The server time is now: %02d:00.", hour);
    	foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
	        {
		        if(PlayerInfo[i][pAFK] && PlayerInfo[i][pAFKTime] > 900)
		        {
		            SCM(i, COLOR_LIGHTRED, "You didn't receive a paycheck this hour as you were AFK for more than 15 minutes.");
		        }
		        else if(PlayerInfo[i][pMinutes] < 30)
		        {
		            SCM(i, COLOR_LIGHTRED, "You are ineligible for a paycheck as you played less than 30 minutes this hour.");
		        }
		        /*else
		        {
		            new code = Random(100000, 999999);
	  				PayCheckCode[i] = code;

					SCM(i, COLOR_GREY,"______________________________________________________");
					SCM(i, COLOR_WHITE,"Information for tax on paychecks, Type /taxhelp.");
	  				SCM(i, COLOR_GREY,"______________________________________________________");
	    			SCM(i, COLOR_WHITE,"Type /signcheck, to receive your paycheck.");
	    			SCM(i, COLOR_WHITE,"You have 5 minutes to signcheck before it becomes invalid.");
		    		SCM(i, COLOR_GREY,"______________________________________________________");

					Dyuze(i, "Payday", "Type /signcheck to get your paycheck.");
		  			SetTimerEx("LastAlertPayCheck", 243000, false, "i", i);
				}*/
				{
				    SendPaycheck(i);
				}
				if(PlayerInfo[i][pReportMuted])
				{
					PlayerInfo[i][pReportMuted]--;

					if(PlayerInfo[i][pReportMuted] <= 0)
					{
					    PlayerInfo[i][pReportMuted] = 0;
					    PlayerInfo[i][pReportWarns] = 0;

					    SCM(i, COLOR_YELLOW, "Your report mute has automatically been lifted.");
				    }
				}
			}
	    }

	    for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
				    SMA(COLOR_GREEN, "%s is now available to capture.", PointInfo[i][pName]);
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

				if(!TurfInfo[i][tTime] && TurfInfo[i][tType] != 8)
				{
				    SendTurfMessage(i, COLOR_GREEN, "%s is now available to capture.", TurfInfo[i][tName]);
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		switch(hour)
		{
		    case 0, 6, 12, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_POLICE && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_FEDERAL && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_ARMY && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
			}
		}

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}

		for(new i = 0; i < MAX_BUSINESSES; i ++)
		{
			if(BusinessInfo[i][bRobbed] > 0)
			{
				BusinessInfo[i][bRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i WHERE id = %i", BusinessInfo[i][bRobbed], BusinessInfo[i][bID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
			if(HouseInfo[i][hRobbed] > 0)
			{
				HouseInfo[i][hRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i WHERE id = %i", HouseInfo[i][hRobbed], HouseInfo[i][hID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}

	    SetWorldTime(hour);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(PlayerInfo[i][pPotPlanted] && PlayerInfo[i][pPotTime] > 0)
		    {
		        PlayerInfo[i][pPotTime]--;

		        if((PlayerInfo[i][pPotTime] % 2) == 0)
		        {
		            PlayerInfo[i][pPotGrams]++;
		        }
		    }
		    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(PlayerInfo[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        PlayerInfo[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(PlayerInfo[PointInfo[i][pCapturer]][pGang] == -1)// || PlayerInfo[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(PlayerInfo[PointInfo[i][pCapturer]][pGang], 50);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = PlayerInfo[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						SMA(COLOR_GREEN, "{%06x}%s has successfully captured %s for %s.", GangInfo[PointInfo[i][pCapturedGang]][gColor] >>> 8, GetRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Your gang has earned $%i and 50 GP for successfully capturing this point.", PointInfo[i][pProfits]);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 10;

		                ReloadPoint(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	            if(!IsLawEnforcement(TurfInfo[i][tCapturer]) && (PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1))// || PlayerInfo[TurfInfo[i][tCapturer]][pGangRank] < 5))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

              		if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(IsLawEnforcement(TurfInfo[i][tCapturer]))
		                {
		                    TurfInfo[i][tCapturedGang] = -1;
							SMA(COLOR_GREEN, "%s has been successfully claimed back as a civilian turf by Officer %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
						}
						else
						{
						    new gangid = PlayerInfo[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 25);
						    
						    SMA(COLOR_GREEN, "%s has been successfully claimed by %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        GangInfo[gangid][gHPAmmo] = GangInfo[gangid][gHPAmmo] + 80 > GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) : GangInfo[gangid][gHPAmmo] + 80;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 80 rounds of hollow point ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[gangid][gHPAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 2:
							    {
							        GangInfo[gangid][gPoisonAmmo] = GangInfo[gangid][gPoisonAmmo] + 60 > GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) : GangInfo[gangid][gPoisonAmmo] + 60;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 60 rounds of poison tip ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[gangid][gPoisonAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
							    {
							        GangInfo[gangid][gFMJAmmo] = GangInfo[gangid][gFMJAmmo] + 30 > GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) : GangInfo[gangid][gFMJAmmo] + 30;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 30 rounds of full metal jacket ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[gangid][gFMJAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							    case 4:
							    {
							        new amount = 100000;
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 10000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %i materials in the stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
							    {
							        GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 100;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 100;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of pot & 100 grams crack in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i, meth = %i WHERE id = %i", GangInfo[gangid][gPot], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
							    {
							        GangInfo[gangid][gCrack] = GangInfo[gangid][gCrack] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCrack] + 50;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of Crack in the stash for capturing this turf!");
							        
							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[gangid][gCrack], gangid);
							        mysql_tquery(connectionID, queryBuffer);
							        
									GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 50;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of Meth in the stash for capturing this turf!");
							        
							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
							        
							        GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 50;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of Pots in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[gangid][gPot], gangid);
							        mysql_tquery(connectionID, queryBuffer);

								}
								case 7:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Your gang will now receive 10 percents of all sales in this turf.");
							    }
							    case 8:
							    {
							        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += 4;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += 2;

							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned 9mm(4), and Shotgun(2) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = %i, weapon_shotgun = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 9:
			    				{
								    GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += 5;
								    GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += 5;
								    GangInfo[gangid][gWeapons][GANGWEAPON_UZI] += 5;
								    
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned MP5(5), Tec9(5), and Uzi(5) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET  weapon_mp5 = %i, weapon_tec9 = %i, weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_UZI], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 10:
								{
								    GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += 3;
								    GangInfo[gangid][gWeapons][GANGWEAPON_M4] += 3;
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += 5;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned Deagle(3), M4(3), AK47(5) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = %i, weapon_m4 = %i, weapon_ak47 = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], GangInfo[gangid][gWeapons][GANGWEAPON_M4], GangInfo[gangid][gWeapons][GANGWEAPON_AK47], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 6;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0)
		        {
		            SCM(ReportInfo[i][rReporter], COLOR_SYNTAX, "Your report has expired. You can make an admin request on "SERVER_URL" if you still need help.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}
}

forward FuelTimer();
public FuelTimer()
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(VehicleHasEngine(i) && GetVehicleParams(i, VEHICLE_ENGINE))
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SCM(GetVehicleDriver(i), COLOR_LIGHTRED, "** This vehicle is running low on fuel. Visit the nearest gas station to fill up. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0)
			{
			    SetVehicleParams(i, VEHICLE_ENGINE, false);
			}

		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 3)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SendClientMessage(x, COLOR_PURPLE, "** An explosion can be heard. Smoke is rising from a building nearby.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            PlayerInfo[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SM(x, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
	                    }

						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!PlayerInfo[playerid][pKicked])
	{
	    PlayerInfo[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    PlayerInfo[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER TEN MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 3600000, false, "i", vehicleid);
	}
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SCM(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SCM(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SM(index, COLOR_RED, "The music database is currently not available. (error %i)", response_code);
    }
}

forward Radio_PlayStation(playerid);
public Radio_PlayStation(playerid)
{
	if(cache_get_row_count(radioConnectionID))
	{
	    new name[128], url[128];

	    cache_get_field_content(0, "name", name);
	    cache_get_field_content(0, "url", url);

	    switch(PlayerInfo[playerid][pMusicType])
	    {
	        case MUSIC_MP3PLAYER:
	        {
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station on their MP3 player.", GetRPName(playerid));
	    		SM(playerid, COLOR_AQUA, "You are now tuned in to "SVRCLR"%s{CCFFFF}.", name);
				SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
			}
			case MUSIC_BOOMBOX:
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station on their boombox.", GetRPName(playerid));
	    		SM(playerid, COLOR_AQUA, "Your boombox is now tuned in to "SVRCLR"%s{CCFFFF}.", name);
				SetMusicStream(MUSIC_BOOMBOX, playerid, url);
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the radio station in their vehicle.", GetRPName(playerid));
		    		SM(playerid, COLOR_AQUA, "Your radio is now tuned in to "SVRCLR"%s{CCFFFF}.", name);
					SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
				}
			}
		}
	}
}

forward Radio_ListStations(playerid);
public Radio_ListStations(playerid)
{
	new rows = cache_get_row_count(radioConnectionID);

	if((!rows) && PlayerInfo[playerid][pSearch] && PlayerInfo[playerid][pPage] == 1)
	{
	    SCM(playerid, COLOR_SYNTAX, "No results found.");
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
	}
	else if(rows)
	{
	    static string[MAX_LISTED_STATIONS * 64], name[128];

	    string[0] = 0;

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "name", name);
	        format(string, sizeof(string), "%s\n%s", string, name);
		}

		if(PlayerInfo[playerid][pPage] > 1)
		{
		    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
		}
		if(rows == MAX_LISTED_STATIONS)
		{
		    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
		}

		ShowPlayerDialog(playerid, DIALOG_MP3RADIORESULTS, DIALOG_STYLE_LIST, "Results", string, "Play", "Back");
	}
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no active charges on them.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Charged by\tDate\tReason";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Active charges:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = PlayerInfo[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SM(i, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
                PlayerInfo[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't exist and therefore has no information to view.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
	}
	else
	{
	    new string[512];

	    PlayerInfo[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Name: %s\nGender: %s\nAge: %i years old\nCrimes commited: %i\nTimes arrested: %i\nWanted level: %i/6\nDrivers License: %s\nGun License: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Female") : ("Male"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Yes") : ("No"), cache_get_field_content_int(0, "gunlicense") ? ("Yes") : ("No"));
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Player lookup", string, "Options", "Cancel");
	}
}
forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
        }
        else //SCM(playerid, COLOR_SYNTAX, "This command is disabled.");
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}

forward OnPlayerDMVRelease(playerid);
public OnPlayerDMVRelease(playerid)
{
	new tickets = cache_get_field_content_int(0, "tickets");

	if(PlayerInfo[playerid][pCash] < tickets)
	{
		return SCMf(playerid, COLOR_SYNTAX, "You need %s to release this impounded vehicle.", FormatNumber(tickets));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '0', tickets = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -tickets);
	SCMf(playerid, -1, "You have paid %s to release your %s...", FormatNumber(tickets), vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}

forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(PlayerInfo[playerid][pGang]))
    {
        SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i members at its level.", GetGangMemberLimit(PlayerInfo[playerid][pGang]));
    }
    else
    {
    	PlayerInfo[targetid][pGangOffer] = playerid;
		PlayerInfo[targetid][pGangOffered] = PlayerInfo[playerid][pGang];

		SM(targetid, COLOR_AQUA, "%s has invited you to join "SVRCLR"%s{CCFFFF} (/accept gang).", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pGang]][gName]);
		SM(playerid, COLOR_AQUA, "You have invited %s to join your gang.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(PlayerInfo[playerid][pCash] < vehicleArray[index][cARPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
        }
		else
		{
	        switch(random(3))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '562.3970', '-1283.8485', '17.0007', '0.0000')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '557.8670', '-1283.9822', '17.0007', '0.0000')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 2:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '552.8177', '-1284.1307', '17.0007', '0.0000')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
                    mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][cARPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][cARPrice]);

	        format(string, sizeof(string), "~r~-$%i", vehicleArray[index][cARPrice]);
    	    Dyuze(playerid, "Notice", string);

	        SM(playerid, COLOR_YELLOW, "%s purchased for $%i. Goto to Public Garage to spawn this vehicle.", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
    	    //Log_Write("log_property", "%s (uid: %i) purchased a %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
		}
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");
	}
	else
	{
	    strcpy(PlayerInfo[playerid][pNameChange], name, MAX_PLAYER_NAME);

		PlayerInfo[playerid][pFreeNamechange] = 2;
		PlayerInfo[playerid][pChosenLevel] = level;
	    PlayerInfo[playerid][pChosenSkin] = skinid;

		SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		SM(playerid, COLOR_AQUA, "Once the namechange has been approved, you will receive your chosen name, level and skin.");

		SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");

	    if(PlayerInfo[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
	}
	else
	{
	    strcpy(PlayerInfo[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(PlayerInfo[playerid][pFreeNamechange]) {
			SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		} else {
		    SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for $%i, please wait for admin approval.", name, PlayerInfo[playerid][pLevel] * 7500);
		}

		SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

stock IsAtrentcar(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1364.8516, -1285.8067, 13.0996))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1445.3681, -1041.1490, 23.3138))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1109.915893, -1652.31335, 76.36787))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2238.252929, -2654.340820, 13.546875))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2208.000976, -1991.421997, 13.546875))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2240.552734, -2190.607910, 13.546875))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2001.181152, -2359.860595, 30.625000))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.396240, -1455.543334, 13.554687))
		{
			return 1;
		}
 	}
	return 0;
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerLockLandDoor(playerid, id);
public OnPlayerLockLandDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseLandGate(playerid, objectid, id);
public OnPlayerUseLandGate(playerid, objectid, id)
{
	if(!Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
	{
	    new
         	Float:x = cache_get_field_content_float(0, "move_x"),
 			Float:y = cache_get_field_content_float(0, "move_y"),
 			Float:z = cache_get_field_content_float(0, "move_z");

	    if(x == 0.0 && y == 0.0 && z == 0.0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "This gate has no destination set.");
	    }
	    else
	    {
			MoveDynamicObject(objectid, x, y, z, 3.0, cache_get_field_content_float(0, "move_rx"), cache_get_field_content_float(0, "move_ry"), cache_get_field_content_float(0, "move_rz"));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their remote to open the gate.", GetRPName(playerid));
			Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 1);
		}
	}
	else
	{
		MoveDynamicObject(objectid, cache_get_field_content_float(0, "pos_x"), cache_get_field_content_float(0, "pos_y"), cache_get_field_content_float(0, "pos_z"), 3.0, cache_get_field_content_float(0, "rot_x"), cache_get_field_content_float(0, "rot_y"), cache_get_field_content_float(0, "rot_z"));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their remote to close the gate.", GetRPName(playerid));
		Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 0);
	}
}
forward OnPlayerUseLandDoor(playerid, objectid, id);
public OnPlayerUseLandDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is already in the phonebook.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have added %s with number %i to the phonebook directory.", name, number);
	    //Log_Write("log_faction", "%s (uid: %i) added %s with number %i to the phonebook.", GetRPName(playerid), PlayerInfo[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is not in the phonebook.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have removed %s with number %i from the phonebook directory.", name, number);
	   // Log_Write("log_faction", "%s (uid: %i) removed %s with number %i from the phonebook.", GetRPName(playerid), PlayerInfo[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't have any injuries.");
	}
	else
	{
	    SM(playerid, SERVER_COLOR, "%s's Injuries", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot with a %s", gettime() - cache_get_row_int(i, 1), GetRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != PlayerInfo[playerid][pFaction])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
	}
	else if(cache_get_row_int(0, 2) > PlayerInfo[playerid][pFactionRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		//Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);
        new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);
		SendDiscordMessage(4, szString);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your faction.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != PlayerInfo[playerid][pGang])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
	}
	else if(cache_get_row_int(0, 2) > PlayerInfo[playerid][pGangRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		//Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);
        new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);
		SendDiscordMessage(5, szString);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your gang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, allyname[32];

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else
	{
		SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new color, members = cache_get_row_int(0, 0), szMessage[1080];

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN || FactionInfo[factionid][fType] == FACTION_FEDERAL && PlayerInfo[playerid][pAdmin] < 6)
	{
    	format(szMessage, sizeof(szMessage), "{%06x}%i. %s | "RED"Confidential", color >>> 8, factionid, FactionInfo[factionid][fName]);
	}
   	else
   	{
		format(szMessage, sizeof(szMessage), "{%06x}%i. %s | Leader: %s | Members: %i", color >>> 8, factionid, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader], members);
	}
	SCM(playerid, COLOR_GREY, szMessage);
}

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The specified phone number is already taken.");
	}
	else
	{
	    PlayerInfo[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -100000);
	    Dyuze(playerid, "Notice", "~r~-$100000");

	    SM(playerid, COLOR_WHITE, "** You paid $100000 to change your phone number to %i.", number);
	    //Log_Write("log_vip", "%s Donator %s (uid: %i) has purchased phone number: %i for $100000.", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], number);
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
    		if(cache_get_field_content_int(0, "impounded"))
		    {
			return SCM(playerid, COLOR_RED, "[ERROR]{ffffff} This vehicle is impounded. You can release it from the CityHall. (/gps)");
		    }
	    }

	    new
			modelid = cache_get_field_content_int(0, "modelid"),
            Float:x, Float:y, Float:z, Float:a,
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

   GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);
		PutPlayerInVehicle(playerid, vehicleid, 0);


		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;
		    VehicleInfo[vehicleid][vRegistered] = cache_get_field_content_int(0, "registered");
		    VehicleInfo[vehicleid][vValet] = 0;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SM(playerid, COLOR_AQUA, "You Have Spawned Your [%s] From Public Garage.", GetVehicleName(vehicleid));
			}
	    }
	}

	return 1;
}

forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SM(playerid, COLOR_AQUA, "%s purchased for $%i. /clothing to find your new item.", name, price);

    format(string, sizeof(string), "~r~-$%i", price);
	Dyuze(playerid, "Notice", string);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, SERVER_COLOR , "Error:"WHITE" The number you're trying to reach does not belong to any particular person.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player has their mobile phone switched off.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", PlayerInfo[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));
	    SCMf(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", username, number, msg);
	    SCM(playerid, COLOR_WHITE, "** The player who owns the number is offline, but will receive your text when they log in.");

        GivePlayerCash(playerid, -1);
        Dyuze(playerid, "Notice", "~w~Text sent!~n~~r~-$1");
	}
}

forward OnAdminCreateActor(playerid, actorid, name[], skin, Float:x, Float:y, Float:z, Float:angle, world);
public OnAdminCreateActor(playerid, actorid, name[], skin, Float:x, Float:y, Float:z, Float:angle, world)
{
	strcpy(ActorInfo[actorid][actorName], name, MAX_PLAYER_NAME);
	ActorInfo[actorid][actorID] = cache_insert_id(connectionID);
	ActorInfo[actorid][actorSkin] = skin;
	ActorInfo[actorid][actorX] = x;
	ActorInfo[actorid][actorY] = y;
	ActorInfo[actorid][actorZ] = z;
	ActorInfo[actorid][actorA] = angle;
	ActorInfo[actorid][actorVW] = world;
	ActorInfo[actorid][actorExists] = 1;

	ReloadActor(actorid);
	SCMf(playerid, COLOR_NEWBIE, "** Actor %i created successfully.", actorid);
}

forward OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    PGInfo[atm][aID] = cache_insert_id(connectionID);
	PGInfo[atm][aExists] = true;
    PGInfo[atm][aPosX] = x;
    PGInfo[atm][aPosY] = y;
    PGInfo[atm][aPosZ] = z;
    PGInfo[atm][aPosA] = a;

	ReloadPG(atm);
	SM(playerid, COLOR_TEAL, "** Public Garage [%i] Created", atm);
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SM(playerid, COLOR_SYNTAX, "This house has reached its limit of %i tenants.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SM(playerid, COLOR_YELLOW, "You are now renting at %s's house. You will pay $%i every paycheck.", HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice]);
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't exist, or is not renting at your home.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && PlayerInfo[i][pLogged])
	        {
	            PlayerInfo[i][pRentingHouse] = 0;
	            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SM(playerid, COLOR_WHITE, "** You have evicted %s from your property.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no flags listed under their account.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SM(playerid, SERVER_COLOR, "%s's Flags", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SM(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", PlayerInfo[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}

forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has changed %s's account password.", GetRPName(playerid), username);
	}
}

forward OnVerifyRemoveFlag(playerid, targetid, slot);
public OnVerifyRemoveFlag(playerid, targetid, slot)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_row_int(0, 0));
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "** %s's flag in slot %i was removed.", GetRPName(targetid), slot);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has no outstanding flag in that slot.");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1239;
	LockerInfo[lockerid][lLabel] = 1;

    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SCMf(playerid, COLOR_GREEN, "* Locker %i created for %s.", lockerid, FactionInfo[factionid][fName]);
}

forward OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    AtmInfo[atm][aID] = cache_insert_id(connectionID);
	AtmInfo[atm][aExists] = true;
    AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z;
    AtmInfo[atm][aPosA] = a;

	ReloadAtm(atm);
	SCMf(playerid, COLOR_GREEN, "** ATM [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    VenInfo[atm][aID] = cache_insert_id(connectionID);
	VenInfo[atm][aExists] = true;
    VenInfo[atm][aPosX] = x;
    VenInfo[atm][aPosY] = y;
    VenInfo[atm][aPosZ] = z;
    VenInfo[atm][aPosA] = a;

	ReloadVen(atm);
	SCMf(playerid, COLOR_TEAL, "** VENDOR "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminListVehiclesForRemoval(playerid, targetid);
public OnAdminListVehiclesForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
    {
        SendClientMessage(playerid, COLOR_GREY, "This player owns no vehicles.");
	}
	else
	{
		static string[1024];

		string = "#\tModel\tLocation";

		for(new i = 0; i < rows; i ++)
    	{
			new
				vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				format(string, sizeof(string), "%s\nn/a\t%s\t%s", string, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
			}
			else
			{
				format(string, sizeof(string), "%s\nID %i\t%s\t%s", string, vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
		}

		PlayerInfo[playerid][pRemoveFrom] = targetid;
		ShowPlayerDialog(playerid, DIALOG_REMOVEPVEH, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to remove.", string, "Select", "Cancel");
	}
}

forward OnVerifyRemoveVehicle(playerid, targetid);
public OnVerifyRemoveVehicle(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id")), modelid = cache_get_field_content_int(0, "modelid");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    if(vehicleid != INVALID_VEHICLE_ID)
	    {
	        DespawnVehicle(vehicleid, false);
		}

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	    SM(targetid, COLOR_AQUA, "%s has removed your {FF6347}%s{33CCFF} from your vehicle list.", GetRPName(playerid), vehicleNames[modelid - 400]);
	}
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /stats for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    PlayerInfo[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
		PlayerInfo[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        PlayerInfo[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        PlayerInfo[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        PlayerInfo[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        PlayerInfo[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        PlayerInfo[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        PlayerInfo[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        PlayerInfo[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        PlayerInfo[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        PlayerInfo[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        PlayerInfo[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        PlayerInfo[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        PlayerInfo[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        PlayerInfo[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        PlayerInfo[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        PlayerInfo[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        PlayerInfo[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");
        PlayerInfo[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        PlayerInfo[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        PlayerInfo[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
        PlayerInfo[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        PlayerInfo[MAX_PLAYERS][pHelper] = cache_get_field_content_int(0, "helperlevel");
        PlayerInfo[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        PlayerInfo[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
        PlayerInfo[MAX_PLAYERS][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
		PlayerInfo[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		PlayerInfo[MAX_PLAYERS][pComserv] = cache_get_field_content_int(0, "comserv");
		PlayerInfo[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		PlayerInfo[MAX_PLAYERS][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
		PlayerInfo[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		PlayerInfo[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        PlayerInfo[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        PlayerInfo[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        PlayerInfo[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        PlayerInfo[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        PlayerInfo[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        PlayerInfo[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
        PlayerInfo[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        PlayerInfo[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        PlayerInfo[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        PlayerInfo[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        PlayerInfo[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        PlayerInfo[MAX_PLAYERS][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

		/*#if defined Christmas
	#else
			PlayerInfo[MAX_PLAYERS][pCandy] = cache_get_field_content_int(0, "candy");
		#endif*/

		PlayerInfo[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		PlayerInfo[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		PlayerInfo[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		PlayerInfo[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		PlayerInfo[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		PlayerInfo[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		PlayerInfo[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		PlayerInfo[MAX_PLAYERS][pPot] = cache_get_field_content_int(0, "pot");
		PlayerInfo[MAX_PLAYERS][pCrack] = cache_get_field_content_int(0, "crack");
		PlayerInfo[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		PlayerInfo[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		PlayerInfo[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		PlayerInfo[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		PlayerInfo[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		PlayerInfo[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		PlayerInfo[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		PlayerInfo[MAX_PLAYERS][pWeaponClip] = cache_get_field_content_int(0, "weaponclip");
		PlayerInfo[MAX_PLAYERS][pBandage] = cache_get_field_content_int(0, "bandage");
		PlayerInfo[MAX_PLAYERS][pMedkit] = cache_get_field_content_int(0, "medkit");
		PlayerInfo[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		PlayerInfo[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		PlayerInfo[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		PlayerInfo[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		PlayerInfo[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		PlayerInfo[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		PlayerInfo[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		PlayerInfo[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		PlayerInfo[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		PlayerInfo[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		PlayerInfo[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		PlayerInfo[MAX_PLAYERS][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
		PlayerInfo[MAX_PLAYERS][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
		PlayerInfo[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		PlayerInfo[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		PlayerInfo[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
		PlayerInfo[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		PlayerInfo[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		PlayerInfo[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		PlayerInfo[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		PlayerInfo[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		PlayerInfo[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		PlayerInfo[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		PlayerInfo[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		PlayerInfo[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		PlayerInfo[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		PlayerInfo[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		PlayerInfo[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		PlayerInfo[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		PlayerInfo[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		PlayerInfo[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		PlayerInfo[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		PlayerInfo[MAX_PLAYERS][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
		//PlayerInfo[MAX_PLAYERS][pWeaponLicenseTime] = cache_get_field_content_int(0, "gunlicensetime");
		PlayerInfo[MAX_PLAYERS][pVIPPackage] = cache_get_field_content_int(0, "vippackage");
		PlayerInfo[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		PlayerInfo[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		PlayerInfo[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		PlayerInfo[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		PlayerInfo[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		PlayerInfo[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		PlayerInfo[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		PlayerInfo[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		PlayerInfo[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		PlayerInfo[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		PlayerInfo[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		PlayerInfo[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		PlayerInfo[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		PlayerInfo[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		PlayerInfo[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		PlayerInfo[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		PlayerInfo[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		PlayerInfo[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		PlayerInfo[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		PlayerInfo[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		PlayerInfo[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		PlayerInfo[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		PlayerInfo[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		PlayerInfo[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		PlayerInfo[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		PlayerInfo[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		PlayerInfo[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		PlayerInfo[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
		PlayerInfo[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		PlayerInfo[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		PlayerInfo[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
		PlayerInfo[MAX_PLAYERS][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
		PlayerInfo[MAX_PLAYERS][pPotTime] = cache_get_field_content_int(0, "pottime");
		PlayerInfo[MAX_PLAYERS][pPotGrams] = cache_get_field_content_int(0, "potgrams");
		PlayerInfo[MAX_PLAYERS][pPotX] = cache_get_field_content_float(0, "pot_x");
		PlayerInfo[MAX_PLAYERS][pPotY] = cache_get_field_content_float(0, "pot_y");
		PlayerInfo[MAX_PLAYERS][pPotZ] = cache_get_field_content_float(0, "pot_z");
		PlayerInfo[MAX_PLAYERS][pPotA] = cache_get_field_content_float(0, "pot_a");
		PlayerInfo[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		PlayerInfo[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        PlayerInfo[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        PlayerInfo[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
        PlayerInfo[MAX_PLAYERS][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
		PlayerInfo[MAX_PLAYERS][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
		PlayerInfo[MAX_PLAYERS][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
		PlayerInfo[MAX_PLAYERS][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
		PlayerInfo[MAX_PLAYERS][pAmmoType] = cache_get_field_content_int(0, "ammotype");
		PlayerInfo[MAX_PLAYERS][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
		PlayerInfo[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		PlayerInfo[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		PlayerInfo[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		PlayerInfo[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		PlayerInfo[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		PlayerInfo[MAX_PLAYERS][pRefunded] = cache_get_field_content_int(0, "refunded");
		PlayerInfo[MAX_PLAYERS][pMask] = cache_get_field_content_int(0, "mask");
		PlayerInfo[MAX_PLAYERS][pBlindfold] = cache_get_field_content_int(0, "blindfold");
		PlayerInfo[MAX_PLAYERS][pHunger] = cache_get_field_content_int(0, "hunger");
		PlayerInfo[MAX_PLAYERS][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
		PlayerInfo[MAX_PLAYERS][pThirst] = cache_get_field_content_int(0, "thirst");
		PlayerInfo[MAX_PLAYERS][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");
		PlayerInfo[MAX_PLAYERS][pLottery] = cache_get_field_content_int(0, "Lottery");
		PlayerInfo[MAX_PLAYERS][pLotteryB] = cache_get_field_content_int(0, "LotteryB");


		strcpy(PlayerInfo[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s offline flagged %s's account for '%s'.", GetRPName(playerid), username, desc);
	}
}

forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "This player has no ban history recorded.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SM(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SM(playerid, COLOR_YELLOW, "%s last logged in on the %s (server time).", username, date);
	}
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if((PlayerInfo[playerid][pAdmin] < 6) && cache_get_row_int(0, 0) > PlayerInfo[playerid][pHelper] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);
        new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	    SendDiscordMessage(0, szString);
	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's helper level to %i.", GetRPName(playerid), username, level);
	    //Log_Write("log_admin", "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's admin level to %i.", GetRPName(playerid), username, level);
	    //Log_Write("log_admin", "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
        new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	    SendDiscordMessage(0, szString);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "Pending", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 6;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;

	ReloadTurf(turfid);
	SM(playerid, COLOR_YELLOW, "** Turf %i created successfully.", turfid);
}

forward OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z);
public OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z)
{
	strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);

	LandInfo[landid][lExists] = 1;
	LandInfo[landid][lID] = cache_insert_id(connectionID);
	LandInfo[landid][lOwnerID] = 0;
	LandInfo[landid][lPrice] = price;
	LandInfo[landid][lMinX] = minx;
	LandInfo[landid][lMinY] = miny;
	LandInfo[landid][lMaxX] = maxx;
	LandInfo[landid][lMaxY] = maxy;
	LandInfo[landid][lX] = x;
	LandInfo[landid][lY] = y;
	LandInfo[landid][lZ] = z;
	LandInfo[landid][lHeight] = height;
	LandInfo[landid][lGangZone] = -1;
    LandInfo[landid][lArea] = -1;
    LandInfo[landid][lText] = Text3D:INVALID_3DTEXT_ID;
	LandInfo[landid][lPickup] = -1;

    ReloadLand(landid);
    SM(playerid, SERVER_COLOR, "** Land %i created successfully.", landid);
}

forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 1239;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eMapIconID] = -1;
	EntranceInfo[entranceid][eColor] = -256;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SM(playerid, SERVER_COLOR, "** Entrance %i created successfully.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
    format(BusinessInfo[businessid][bName], 64, "Unamed Business");

	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 1;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	BusinessInfo[businessid][bRobbed] = 3;
	BusinessInfo[businessid][bRobbing] = 0;

	for (new j = 0; j < 25; j ++)
	{
		BusinessInfo[businessid][bPrices][j] = 0;
	}

	switch(BusinessInfo[businessid][bType])
	{
		case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB, BUSINESS_PHARMACY:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. Type /buy to purchase from this business.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_GYM:
		    format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. /buy to purchase a fighting style.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_AGENCY:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. /(ad)vertise to make an advertisement.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i, name = '%e', message = '%e' WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, SERVER_COLOR, "** Business %i created successfully.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SM(playerid, SERVER_COLOR, "** Garage %i created successfully.", garageid);
}

forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hHPAmmo] = 0;
	HouseInfo[houseid][hPoisonAmmo] = 0;
	HouseInfo[houseid][hFMJAmmo] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hRobbed] = 3;
	HouseInfo[houseid][hRobbing] = 0;


	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, SERVER_COLOR, "** House %i created successfully.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. You cannot delete them.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted %s's account.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't killed, or has been killed, by anyone since they registered.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SCM(playerid, SERVER_COLOR, "Kills & Deaths");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == PlayerInfo[targetid][pID])
	        {
		        SM(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == PlayerInfo[targetid][pID])
	        {
	            SM(playerid, COLOR_YELLOW, "[%s] %s was killed by %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't been damaged by anyone since they connected.");
	}
	else
	{
	    SCM(playerid, SERVER_COLOR, "Damage Received");

	    for(new i = 0; i < rows; i ++)
	    {
	        SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot by %s with a %s", gettime() - cache_get_row_int(i, 2), GetRPName(targetid), GetRPName(cache_get_row_int(1, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SM(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't registered any shots since they connected.");
	}
	else
	{
	    new weaponid, hittype, timestamp, where[48];

	    SM(playerid, SERVER_COLOR, "%i Last Shots", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", where);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(where, sizeof(where), "Vehicle (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    where = "Missed";
			}

			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s shot a %s and hit: %s", gettime() - timestamp, GetRPName(targetid), GetWeaponNameEx(weaponid), where);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "This IP address is already banned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SM(i, COLOR_YELLOW, "** Your IP address has been banned by %s, reason: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has banned IP '%s', reason: %s", GetRPName(playerid), ip, reason);
	    //Log_Write("log_punishments", "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], ip, reason);
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], ip, reason);
		SendDiscordMessage(10, szString);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "There are no bans that match your criteria.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was rangebanned by %s, reason: %s", date, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was banned by %s, reason: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was rangebanned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was permanently banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && PlayerInfo[playerid][pAdmin] < 7)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This player is permanently banned. Permabans may only be lifted by Management.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned %s.", GetRPName(playerid), username);
		//Log_Write("log_punishments", "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
		new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
		SendDiscordMessage(10, szString);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "There is no banned player known by that name.");
	}

	return 1;
}

#if defined DISCORD
	forward DiscordSet(username[], discord[], tag[]);
	public DiscordSet(username[], discord[], tag[])
	{
		if(!cache_get_row_count(connectionID))
		{
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), "The player specified doesn't exist.");
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET discordname = '%s', discordtag = '%s' WHERE username = '%e'", discord, tag, username);
			mysql_tquery(connectionID, queryBuffer);

			SAM(COLOR_LIGHTRED, "AdmCmd: "SERVER_BOT" has set %s's discord account.", username);

			new string[128];
			format(string, sizeof(string), "AdmCmd: "SERVER_BOT" has set %s's discord account.", username);
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), string);
		}
	}

forward DOnAdminLockAccount(username[]);
public DOnAdminLockAccount(username[])
{
		if(!cache_get_row_count(connectionID))
		{
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), "The player specified doesn't exist.");
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
			mysql_tquery(connectionID, queryBuffer);

			SAM(COLOR_LIGHTRED, "AdmCmd: "SERVER_BOT" has whitelist %s's account.", username);

			new string[128];
			format(string, sizeof(string), "AdmCmd: "SERVER_BOT" has whitelist %s's account.", username);
			DCC_SendChannelMessage(DCC_FindChannelById(TADMIN), string);
		}
	}
#endif

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has whitelist %s's account.", GetRPName(playerid), username);
	    //Log_Write("log_admin", "%s (uid: %i) whitelist %s's account.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has unwhitelist %s's account.", GetRPName(playerid), username);
	    //Log_Write("log_admin", "%s (uid: %i) unwhitelist %s's account.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The name specified is taken already.");
	}
	else
	{
	    //Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);
		//Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has changed %s's name to %s.", GetRPName(playerid), GetRPName(targetid), name);
		SM(targetid, COLOR_WHITE, "** %s changed your name from %s to %s.", GetRPName(playerid), GetRPName(targetid), name);
		new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);
	    SendDiscordMessage(0, szString);
	    format(szString, sizeof(szString), "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);
	    SendDiscordMessage(7, szString);
		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline banned by %s, reason: %s", username, GetPlayerNameEx(playerid), reason);
        //Log_Write("log_punishments", "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, reason);
		new szString[128];
		format(szString, sizeof(szString),  "%s (IP: %s) was banned by %s, reason: %s", username, ip, GetPlayerNameEx(playerid), reason);
		SendDiscordMessage(1, szString);
		format(szString, sizeof(szString), "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, reason);
		SendDiscordMessage(10, szString);
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline prisoned for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		//Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, minutes, reason);
		new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, minutes, reason);
		SendDiscordMessage(10, szString);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline fined for $%i by %s, reason: %s", username, amount, GetRPName(playerid), reason);
        //Log_Write("log_admin", "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, amount, reason);
        new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, amount, reason);
	    SendDiscordMessage(0, szString);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\n[!] %s\r\n\r\n", GetDate(), errorid, callback, query, error);
        SendDiscordMessage(13, string);
		fwrite(file, string);
		fclose(file);
	}

	/*SAM(COLOR_LIGHTRED, "AdmCmd: A MySQL error occurred (error %i). Details written to mysql_error.txt.", errorid);
	return 1;*/
}

forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new bannedby[24], date[24], reason[128];

	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

				Dyuze(extraid, "Notice", "You are banned!", 999999);

				if(cache_get_field_content_int(0, "permanent"))
				    SM(extraid, COLOR_YELLOW, "You are permanently banned from this server.");
				else
					SM(extraid, COLOR_YELLOW, "You are banned from this server. You can appeal your ban at ("SERVER_URL")");

				SM(extraid, COLOR_LIGHTRED, "Admin: %s", bannedby);
	            SM(extraid, COLOR_LIGHTRED, "Date: %s", date);
	            SM(extraid, COLOR_LIGHTRED, "Reason: %s", reason);

				KickPlayer(extraid);
	        }
	        else
	        {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
			new string[128];
			for(new i = 0; i < 2; i++)
			{
				TextDrawShowForPlayer(extraid, PublicTD[i]);
			}
			PlayerTextDrawShow(extraid, PublicTD2[extraid]);

			InterpolateCameraPos(extraid, 1429.946655, -1597.120483, 41, 2098.130615, -1775.991210, 41.111639, 50000);
			InterpolateCameraLookAt(extraid, 247.605590, -1841.989990, 39.802570, 817.645996, -1645.395751, 29.292520, 15000);
/*			format(string, sizeof(string), "_~n~"SERVER_URL"~n~~w~%s~n~_",gServerMOTD);
			TextDrawSetString(PublicTD[6], string);
*/
	        if(rows)
	        {
				format(string, sizeof(string), "%s~n~~w~MGMC:RP Status: ~r~Login~n~~w~PLAYERS REACHED: %d~n~CURRENT PLAYERS: %d",GetRPName(extraid),gPlayerRecord,Iter_Count(Player));
				PlayerTextDrawSetString(extraid, PublicTD2[extraid], string);
				ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
				format(string, sizeof(string), "%s~n~~w~MGMC:RP Status: ~g~Register~n~~w~PLAYERS REACHED: %d~n~CURRENT PLAYERS: %d",GetRPName(extraid),gPlayerRecord,Iter_Count(Player));
			    PlayerTextDrawSetString(extraid, PublicTD2[extraid], string);

				if(strfind(GetPlayerNameEx(extraid), "_") == -1)
			    {
			        ShowPlayerDialog(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-Roleplay Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
			    }
			    else
			    {
    				ShowDialogToPlayer(extraid, DIALOG_REGISTER);
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

			if(id)
	        {
	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
	        }
	    }
	    case THREAD_PROCESS_LOGIN:
	    {	// OnPlayerLogin
	        if(!rows)
	        {
	            PlayerInfo[extraid][pLoginTries]++;

				if(PlayerInfo[extraid][pLoginTries] < 3)
				{
					ShowDialogToPlayer(extraid, DIALOG_LOGIN);
					SM(extraid, COLOR_LIGHTRED, "Incorrect password. You have %i more attempts before you are kicked.", 3 - PlayerInfo[extraid][pLoginTries]);
				}
				else
				{
					Kick(extraid);
				}

		    } // put "!" for whitelist
	        else if(cache_get_field_content_int(0, "locked"))
         	{
          		SCM(extraid, COLOR_LIGHTRED, "** This account is not whitelsted. Contact us "SERVER_URL" to put your account in the whitelist.");
            	SAM(COLOR_YELLOW, "AdmWarning: %s tried to login with not whitelist.", GetRPName(extraid));
             	KickPlayer(extraid);
            }
			else
   			{
	            new date[64];

	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", PlayerInfo[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", PlayerInfo[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", PlayerInfo[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", PlayerInfo[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", PlayerInfo[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", PlayerInfo[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "customtitle", PlayerInfo[extraid][pCustomTitle], connectionID, 64);
	            PlayerInfo[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");

	            PlayerInfo[extraid][pID] = cache_get_field_content_int(0, "uid");
				PlayerInfo[extraid][pSetup] = cache_get_field_content_int(0, "setup");
                PlayerInfo[extraid][pGender] = cache_get_field_content_int(0, "gender");
                PlayerInfo[extraid][pAge] = cache_get_field_content_int(0, "age");
                PlayerInfo[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                PlayerInfo[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                PlayerInfo[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                PlayerInfo[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                PlayerInfo[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                PlayerInfo[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                PlayerInfo[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                PlayerInfo[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                PlayerInfo[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                PlayerInfo[extraid][pWorld] = cache_get_field_content_int(0, "world");
                PlayerInfo[extraid][pCash] = cache_get_field_content_int(0, "cash");
                PlayerInfo[extraid][pBank] = cache_get_field_content_int(0, "bank");
                PlayerInfo[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                PlayerInfo[extraid][pLevel] = cache_get_field_content_int(0, "level");
                PlayerInfo[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                PlayerInfo[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                PlayerInfo[extraid][pHours] = cache_get_field_content_int(0, "hours");
                PlayerInfo[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                PlayerInfo[extraid][pHelper] = cache_get_field_content_int(0, "helperlevel");
                PlayerInfo[extraid][pHealth] = cache_get_field_content_float(0, "health");
                PlayerInfo[extraid][pArmor] = cache_get_field_content_float(0, "armor");
                PlayerInfo[extraid][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
				PlayerInfo[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				PlayerInfo[extraid][pComserv] = cache_get_field_content_int(0, "comserv");
				PlayerInfo[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				PlayerInfo[extraid][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
				PlayerInfo[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				PlayerInfo[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                PlayerInfo[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                PlayerInfo[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                PlayerInfo[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
                PlayerInfo[extraid][pFormerAdmin] = cache_get_field_content_int(0, "formeradmin");
                PlayerInfo[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                PlayerInfo[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                PlayerInfo[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                PlayerInfo[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                PlayerInfo[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                PlayerInfo[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                PlayerInfo[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                PlayerInfo[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                PlayerInfo[extraid][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

				/*#if defined Christmas
	#else
					PlayerInfo[extraid][pCandy] = cache_get_field_content_int(0, "candy");
				#endif*/

				PlayerInfo[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				PlayerInfo[extraid][pJob] = cache_get_field_content_int(0, "job");
				PlayerInfo[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				PlayerInfo[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				PlayerInfo[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				PlayerInfo[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				PlayerInfo[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
				PlayerInfo[extraid][pPot] = cache_get_field_content_int(0, "pot");
				PlayerInfo[extraid][pCrack] = cache_get_field_content_int(0, "crack");
				PlayerInfo[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				PlayerInfo[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				PlayerInfo[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				PlayerInfo[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				PlayerInfo[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				PlayerInfo[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				PlayerInfo[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				PlayerInfo[extraid][pWeaponClip] = cache_get_field_content_int(0, "weaponclip");
				PlayerInfo[extraid][pBandage] = cache_get_field_content_int(0, "bandage");
				PlayerInfo[extraid][pMedkit] = cache_get_field_content_int(0, "medkit");
				PlayerInfo[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				PlayerInfo[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				PlayerInfo[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				PlayerInfo[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				PlayerInfo[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				PlayerInfo[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				PlayerInfo[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				PlayerInfo[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				PlayerInfo[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				PlayerInfo[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				PlayerInfo[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				PlayerInfo[extraid][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
				PlayerInfo[extraid][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
				PlayerInfo[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				PlayerInfo[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				PlayerInfo[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
            	PlayerInfo[extraid][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
				PlayerInfo[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				PlayerInfo[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				PlayerInfo[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				PlayerInfo[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				PlayerInfo[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				PlayerInfo[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				PlayerInfo[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				PlayerInfo[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				PlayerInfo[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				PlayerInfo[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				PlayerInfo[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				PlayerInfo[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				PlayerInfo[extraid][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
				PlayerInfo[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				PlayerInfo[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				PlayerInfo[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
				PlayerInfo[extraid][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
				//PlayerInfo[extraid][pWeaponLicenseTime] = cache_get_field_content_int(0, "gunlicensetime");
				PlayerInfo[extraid][pVIPPackage] = cache_get_field_content_int(0, "vippackage");
				PlayerInfo[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				PlayerInfo[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
				PlayerInfo[extraid][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
				PlayerInfo[extraid][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
				PlayerInfo[extraid][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
				PlayerInfo[extraid][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
				PlayerInfo[extraid][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
				PlayerInfo[extraid][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
				PlayerInfo[extraid][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
				PlayerInfo[extraid][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
				PlayerInfo[extraid][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
				PlayerInfo[extraid][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
				PlayerInfo[extraid][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
				PlayerInfo[extraid][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
				PlayerInfo[extraid][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
				PlayerInfo[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				PlayerInfo[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				PlayerInfo[extraid][pGang] = cache_get_field_content_int(0, "gang");
				PlayerInfo[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				PlayerInfo[extraid][pDivision] = cache_get_field_content_int(0, "division");
				PlayerInfo[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				PlayerInfo[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				PlayerInfo[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				PlayerInfo[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				PlayerInfo[extraid][pReports] = cache_get_field_content_int(0, "reports");
				PlayerInfo[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				PlayerInfo[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				PlayerInfo[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				PlayerInfo[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				PlayerInfo[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				PlayerInfo[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				PlayerInfo[extraid][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
				PlayerInfo[extraid][pPotTime] = cache_get_field_content_int(0, "pottime");
				PlayerInfo[extraid][pPotGrams] = cache_get_field_content_int(0, "potgrams");
				PlayerInfo[extraid][pPotX] = cache_get_field_content_float(0, "pot_x");
				PlayerInfo[extraid][pPotY] = cache_get_field_content_float(0, "pot_y");
				PlayerInfo[extraid][pPotZ] = cache_get_field_content_float(0, "pot_z");
				PlayerInfo[extraid][pPotA] = cache_get_field_content_float(0, "pot_a");
				PlayerInfo[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				PlayerInfo[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                PlayerInfo[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                PlayerInfo[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
                PlayerInfo[extraid][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
   				PlayerInfo[extraid][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
				PlayerInfo[extraid][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
				PlayerInfo[extraid][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
				PlayerInfo[extraid][pAmmoType] = cache_get_field_content_int(0, "ammotype");
				PlayerInfo[extraid][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
				PlayerInfo[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				PlayerInfo[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				PlayerInfo[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				PlayerInfo[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				PlayerInfo[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				PlayerInfo[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				PlayerInfo[extraid][pShowLands] = cache_get_field_content_int(0, "showlands");
				PlayerInfo[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				PlayerInfo[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				PlayerInfo[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				PlayerInfo[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
				PlayerInfo[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                PlayerInfo[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                PlayerInfo[extraid][pNewsCooldown] = cache_get_field_content_int(0, "newscooldown");
                PlayerInfo[extraid][pDeathCooldown] = cache_get_field_content_int(0, "deathcooldown");
                PlayerInfo[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
            	PlayerInfo[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	PlayerInfo[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	PlayerInfo[extraid][pRefunded] = cache_get_field_content_int(0, "refunded");
            	PlayerInfo[extraid][pBackpack] = cache_get_field_content_int(0, "backpack");
            	PlayerInfo[extraid][bpCash] = cache_get_field_content_int(0, "bpcash");
				PlayerInfo[extraid][bpMaterials] = cache_get_field_content_int(0, "bpmaterials");
				PlayerInfo[extraid][bpPot] = cache_get_field_content_int(0, "bppot");
				PlayerInfo[extraid][bpCrack] = cache_get_field_content_int(0, "bpcrack");
				PlayerInfo[extraid][bpMeth] = cache_get_field_content_int(0, "bpmeth");
				PlayerInfo[extraid][bpPainkillers] = cache_get_field_content_int(0, "bppainkillers");
    			PlayerInfo[extraid][bpWeapons][0] = cache_get_field_content_int(0, "bpweapon_0");
				PlayerInfo[extraid][bpWeapons][1] = cache_get_field_content_int(0, "bpweapon_1");
				PlayerInfo[extraid][bpWeapons][2] = cache_get_field_content_int(0, "bpweapon_2");
				PlayerInfo[extraid][bpWeapons][3] = cache_get_field_content_int(0, "bpweapon_3");
				PlayerInfo[extraid][bpWeapons][4] = cache_get_field_content_int(0, "bpweapon_4");
				PlayerInfo[extraid][bpWeapons][5] = cache_get_field_content_int(0, "bpweapon_5");
				PlayerInfo[extraid][bpWeapons][6] = cache_get_field_content_int(0, "bpweapon_6");
				PlayerInfo[extraid][bpWeapons][7] = cache_get_field_content_int(0, "bpweapon_7");
				PlayerInfo[extraid][bpWeapons][8] = cache_get_field_content_int(0, "bpweapon_8");
				PlayerInfo[extraid][bpWeapons][9] = cache_get_field_content_int(0, "bpweapon_9");
				PlayerInfo[extraid][bpWeapons][10] = cache_get_field_content_int(0, "bpweapon_10");
				PlayerInfo[extraid][bpWeapons][11] = cache_get_field_content_int(0, "bpweapon_11");
				PlayerInfo[extraid][bpWeapons][13] = cache_get_field_content_int(0, "bpweapon_13");
				PlayerInfo[extraid][bpWeapons][14] = cache_get_field_content_int(0, "bpweapon_14");
				PlayerInfo[extraid][bpHPAmmo] = cache_get_field_content_int(0, "bphpammo");
				PlayerInfo[extraid][bpPoisonAmmo] = cache_get_field_content_int(0, "bppoisonammo");
				PlayerInfo[extraid][bpFMJAmmo] = cache_get_field_content_int(0, "bpfmjammo");
                PlayerInfo[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                PlayerInfo[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                PlayerInfo[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                PlayerInfo[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                PlayerInfo[extraid][pRope] = cache_get_field_content_int(0, "rope");
                PlayerInfo[extraid][pBlindfold] = cache_get_field_content_int(0, "blindfold");
                PlayerInfo[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
                PlayerInfo[extraid][pMask] = cache_get_field_content_int(0, "mask");
    			PlayerInfo[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				PlayerInfo[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				PlayerInfo[extraid][pChatAnim] = cache_get_field_content_int(0, "chatanim");

                PlayerInfo[extraid][pLogged] = 1;
                PlayerInfo[extraid][pACTime] = gettime() + 5;

                PlayerInfo[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
                PlayerInfo[extraid][pVipTimes] = cache_get_field_content_int(0, "vipdlcooldown");
                PlayerInfo[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
                PlayerInfo[extraid][pEcoin] = cache_get_field_content_int(0, "ecoin");
				PlayerInfo[extraid][pHunger] = cache_get_field_content_int(0, "hunger");
				PlayerInfo[extraid][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
				PlayerInfo[extraid][pThirst] = cache_get_field_content_int(0, "thirst");
				PlayerInfo[extraid][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");
				PlayerInfo[extraid][pLottery] = cache_get_field_content_int(0, "Lottery");
				PlayerInfo[extraid][pLotteryB] = cache_get_field_content_int(0, "LotteryB");
				PlayerInfo[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");
				PlayerInfo[extraid][pVoiceChat] = cache_get_field_content_int(0, "voicechat");
				PlayerInfo[extraid][pRepairKit] = cache_get_field_content_int(0, "repairkit");
				PlayerInfo[extraid][pFood] = cache_get_field_content_int(0, "food");
				PlayerInfo[extraid][pDrink] = cache_get_field_content_int(0, "drink");
				PlayerInfo[extraid][pLockpick] = cache_get_field_content_int(0, "lockpick");
				PlayerInfo[extraid][pHammer] = cache_get_field_content_int(0, "hammer");
				PlayerInfo[extraid][pNationalID] = cache_get_field_content_int(0, "nationalid");
				cache_get_field_content(0, "discordtag", PlayerInfo[extraid][pDiscordTag], connectionID, 8);
				cache_get_field_content(0, "discordname", PlayerInfo[extraid][pDiscordName], connectionID, 16);


				TogglePlayerControllable(extraid, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", extraid);

				if(PlayerInfo[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", PlayerInfo[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(PlayerInfo[extraid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
				}

                if(!PlayerInfo[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }

				if(!PlayerInfo[extraid][pToggleTextdraws])
				{
					if(!PlayerInfo[extraid][pToggleHUD])
					{
					    PlayerTextDrawShow(extraid, PlayerInfo[extraid][pText][3]);
					    PlayerTextDrawShow(extraid, PlayerInfo[extraid][pText][4]);
					}
					if(PlayerInfo[extraid][pWatchOn])
					{
					    TextDrawShowForPlayer(extraid, TimeTD);
					}
					if(PlayerInfo[extraid][pGPSOn])
					{
                        ShowGPSTextdraw(extraid);
					}
				}

            	if(!isnull(gServerMOTD))
            	{
            		SM(extraid, SERVER_COLOR, "News:"WHITE" %s", gServerMOTD);
            	}
            	if(!isnull(adminMOTD) && PlayerInfo[extraid][pAdmin] > 0)
            	{
            		SM(extraid, COLOR_LIGHTRED, "Admin News:"WHITE" %s", adminMOTD);
            	}
            	if(!isnull(helperMOTD) && (PlayerInfo[extraid][pHelper] > 0 || PlayerInfo[extraid][pAdmin] > 0))
            	{
            		SM(extraid, COLOR_AQUA, "Helper News:"WHITE" %s", helperMOTD);
            	}
            	if(PlayerInfo[extraid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[extraid][pGang]][gMOTD], "None", true) != 0)
            	{
            		SM(extraid, COLOR_GREEN, "Gang News:"WHITE" %s", GangInfo[PlayerInfo[extraid][pGang]][gMOTD]);
            	}

				if(cache_get_field_content_int(extraid, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SM(extraid, COLOR_YELLOW, "%i players who you've referred reached level 3. Therefore you received +1 level!", count);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!PlayerInfo[extraid][pSetup])
                {
                    if(!PlayerInfo[extraid][pAdminDuty] && !PlayerInfo[extraid][pToggleCam])
                    {
                        PlayerInfo[extraid][pLoginCamera] = 1;
					}
                    if(PlayerInfo[extraid][pPotPlanted] && PlayerInfo[extraid][pPotObject] == INVALID_OBJECT_ID)
                    {
                        PlayerInfo[extraid][pPotObject] = CreateDynamicObject(3409, PlayerInfo[extraid][pPotX], PlayerInfo[extraid][pPotY], PlayerInfo[extraid][pPotZ] - 1.8, 0.0, 0.0, PlayerInfo[extraid][pPotA]);
					}
					if(PlayerInfo[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					if(PlayerInfo[extraid][pShowLands])
					{
					    ShowLandsOnMap(extraid, true);
					}

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = NOW(), ip = '%s' WHERE uid = %i", GetPlayerIP(extraid), PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

			     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

				    if(!PlayerInfo[extraid][pTogglePhone])
				    {
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", PlayerInfo[extraid][pPhone]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
					}

					for(new i = 1; i < MAX_VEHICLES; i ++)
					{
					    if(IsValidVehicle(i) && IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}

					// Just in case.
					//SetPlayerSpecialTag(extraid, TAG_NORMAL);

					for(new i = 0; i < 2; i++) {
						TextDrawHideForPlayer(extraid, PublicTD[i]);
					}
					PlayerTextDrawHide(extraid, PublicTD2[extraid]);

				    if(PlayerInfo[extraid][pAdminDuty])
				    {
				    	PlayerInfo[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, PlayerInfo[extraid][pUsername]);

				        SAM(COLOR_LIGHTRED, "AdmCmd: %s is no longer on admin duty.", GetRPName(extraid));
				        SCM(extraid, COLOR_WHITE, "** You are no longer on admin duty. Your account's statistics have been preserved.");
				    }
				    else
				    {
					    if(PlayerInfo[extraid][pAdmin])
					    {
					        SAM(COLOR_LIGHTRED, "AdmCmd: %s %s has logged in.", GetAdminRank(extraid), GetRPName(extraid));
					    }
					    if(PlayerInfo[extraid][pGang] >= 0)
					    {
							SendGangMessage(PlayerInfo[extraid][pGang], COLOR_AQUA, "(( %s %s has logged in. ))", GangRanks[PlayerInfo[extraid][pGang]][PlayerInfo[extraid][pGangRank]], GetRPName(extraid));
						}
						if(PlayerInfo[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(PlayerInfo[extraid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has logged in. ))", FactionRanks[PlayerInfo[extraid][pFaction]][PlayerInfo[extraid][pFactionRank]], GetRPName(extraid));
						}

        	        	if(PlayerInfo[extraid][pAdmin] > 0) {
							SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a level %i %s.", PlayerInfo[extraid][pAdmin], GetAdminRank(extraid));
						} else if(PlayerInfo[extraid][pHelper] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a %s.", GetHelperRank(extraid));
						} else if(PlayerInfo[extraid][pVIPPackage] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a %s Donator.", GetDonatorRank(PlayerInfo[extraid][pVIPPackage]));
        	        	} else {
        	        	    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a level %i player.", PlayerInfo[extraid][pLevel]);
        	        	}
        	        	new hour, minute, second;
        	        	gettime(hour, minute, second);
        	        	SM(extraid, COLOR_YELLOW, "The time now is %02d:%02d", hour, minute);
        	        	SM(extraid, COLOR_WHITE, "[Client Detector]: You have Login via %s", IsPlayerAndroid(extraid) ? ("Mobile") : ("PC"));
					    StopAudioStreamForPlayer(extraid);
					}
					if(PlayerInfo[extraid][pFaction] >= 0 && FactionInfo[PlayerInfo[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	ResetPlayerWeaponsEx(extraid);
				        SM(extraid, COLOR_LIGHTRED, "You were either kicked from the faction while offline or it was deleted.");
			            SetPlayerSkin(extraid, 230);

				        PlayerInfo[extraid][pFaction] = -1;
				        PlayerInfo[extraid][pFactionRank] = 0;
				        PlayerInfo[extraid][pDivision] = -1;
				        PlayerInfo[extraid][pDuty] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(PlayerInfo[extraid][pGang] >= 0 && !GangInfo[PlayerInfo[extraid][pGang]][gSetup])
					{
					    SCM(extraid, COLOR_LIGHTRED, "You have either been kicked from the gang while offline or it was deleted.");
					    PlayerInfo[extraid][pGang] = -1;
					    PlayerInfo[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
				}
				if(PlayerInfo[extraid][pBrokenLeg]) {
					SCM(extraid, COLOR_RED, "(( You have a broken leg the last time you logged out. ))");
				}

				SetPlayerToSpawn(extraid);
	        }
	    }
	    case THREAD_DMVRELEASE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You do not have any impounded vehicles.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tTickets";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s\t{ff0000}%s{ffffff}", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], FormatNumber(cache_get_field_content_int(i, "tickets")));

				ShowPlayerDialog(extraid, DIALOG_DMVRELEASE, DIALOG_STYLE_TABLIST_HEADERS, "Impound Department", string, "Release", "Cancel");
		    }
		}
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has %i pending flags. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SM(extraid, SERVER_COLOR, "%i Results Found", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);

		            SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
		        }
		    }
		    else
		    {
		        SCM(extraid, COLOR_SYNTAX, "This IP address is not associated with any accounts.");
			}
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SCM(extraid, SERVER_COLOR, ""REVISION"");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SM(extraid, COLOR_GREY1, "%s", text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Helper Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SM(extraid, COLOR_AQUA, "[H1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, COLOR_AQUA, "[H2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, COLOR_AQUA, "[H3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, COLOR_AQUA, "[H4]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Admin Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "adminlevel"))
				{
					case 1: SM(extraid, SERVER_COLOR, "[A1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, SERVER_COLOR, "[A2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, SERVER_COLOR, "[A3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, SERVER_COLOR, "[A4]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 5: SM(extraid, SERVER_COLOR, "[A5]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 6: SM(extraid, SERVER_COLOR, "[A6]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 7: SM(extraid, SERVER_COLOR, "[A7]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 8: SM(extraid, SERVER_COLOR, "[A8]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
                HouseInfo[i][hPot] = cache_get_field_content_int(i, "pot");
                HouseInfo[i][hCrack] = cache_get_field_content_int(i, "crack");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hHPAmmo] = cache_get_field_content_int(i, "hpammo");
                HouseInfo[i][hPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
                HouseInfo[i][hFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
				HouseInfo[i][hRobbed] = cache_get_field_content_int(i, "robbed");
				HouseInfo[i][hRobbing] = cache_get_field_content_int(i, "robbing");
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "There is nobody currently renting at your home.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SCM(extraid, SERVER_COLOR, "List of Tenants");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"), cache_get_field_content_int(i, "world"), cache_get_field_content_int(i, "interior"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "houseid"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0, .worldid = cache_get_field_content_int(i, "world"), .interiorid = cache_get_field_content_int(i, "interior")));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);

		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
          		cache_get_field_content(i, "name", BusinessInfo[i][bName], connectionID, 64);
                cache_get_field_content(i, "message", BusinessInfo[i][bMessage], connectionID, 128);
				BusinessInfo[i][bRobbed] = cache_get_field_content_int(i, "robbed");
				BusinessInfo[i][bRobbing] = cache_get_field_content_int(i, "robbing");

				new str[64];
				for (new j = 0; j < 25; j ++)
				{
					format(str, 32, "prices%d", j);
					BusinessInfo[i][bPrices][j] = cache_get_field_content_int(i, str);
				}

                ReloadBusiness(i);
		    }

		    printf("[Script] %i businesses loaded.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eColor] = cache_get_field_content_int(i, "color");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eExists] = 1;
                EntranceInfo[i][eMapIconID] = -1;

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_ACTORS:
		{
		    for(new i = 0; i < rows && i < MAX_DYNAMIC_ACTORS; i ++)
		    {
				ActorInfo[i][actorExists] = 1;
				ActorInfo[i][actorID] = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", ActorInfo[i][actorName], connectionID, 24);
				ActorInfo[i][actorSkin] = cache_get_field_content_int(i, "skin");
				ActorInfo[i][actorX] = cache_get_field_content_float(i, "x");
				ActorInfo[i][actorY] = cache_get_field_content_float(i, "y");
				ActorInfo[i][actorZ] = cache_get_field_content_float(i, "z");
				ActorInfo[i][actorA] = cache_get_field_content_float(i, "a");
				ActorInfo[i][actorVW] = cache_get_field_content_int(i, "world");
                ReloadActor(i);
		    }

		    printf("[Script] %i actors loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
                if(FactionInfo[factionid][fType] != FACTION_NONE)
			    {
			    	factionstream[factionid] = SvCreateGStream(0xffff0000, "Faction Radio");
			    }
		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_LANDS:
		{
		    for(new i = 0; i < rows && i < MAX_LANDS; i ++)
		    {
		        cache_get_field_content(i, "owner", LandInfo[i][lOwner], connectionID, MAX_PLAYER_NAME);

		        LandInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LandInfo[i][lOwnerID] = cache_get_field_content_int(i, "ownerid");
		        LandInfo[i][lPrice] = cache_get_field_content_int(i, "price");
		        LandInfo[i][lMinX] = cache_get_field_content_float(i, "min_x");
		        LandInfo[i][lMinY] = cache_get_field_content_float(i, "min_y");
		        LandInfo[i][lMaxX] = cache_get_field_content_float(i, "max_x");
		        LandInfo[i][lMaxY] = cache_get_field_content_float(i, "max_y");
		        LandInfo[i][lHeight] = cache_get_field_content_float(i, "height");
		        LandInfo[i][lX] = cache_get_field_content_float(i, "lx");
		        LandInfo[i][lY] = cache_get_field_content_float(i, "ly");
		        LandInfo[i][lZ] = cache_get_field_content_float(i, "lz");
		        LandInfo[i][lGangZone] = -1;
		        LandInfo[i][lArea] = -1;
		        LandInfo[i][lLabels] = 0;
		        LandInfo[i][lExists] = 1;
				LandInfo[i][lPickup] = -1;

		        ReloadLand(i);
			}

			printf("[Script] %i lands loaded.", rows);
		}
		case THREAD_LOAD_LANDOBJECTS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_LAND);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "landid"));
				Streamer_SetExtraFloat(objectid, E_OBJECT_X, cache_get_field_content_float(i, "pos_x"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Y, cache_get_field_content_float(i, "pos_y"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Z, cache_get_field_content_float(i, "pos_z"));

				if(extraid)
				{
				    new
				        landstring[48];

				    cache_get_field_content(i, "name", landstring);

					format(landstring, sizeof(landstring), "[%i] - %s", objectid, landstring);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(landstring, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0));
				}
			}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gPot] = cache_get_field_content_int(i, "pot");
		        GangInfo[gangid][gCrack] = cache_get_field_content_int(i, "crack");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
				GangInfo[gangid][gHPAmmo] = cache_get_field_content_int(i, "hpammo");
				GangInfo[gangid][gPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
				GangInfo[gangid][gFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
				GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");

				// Gang stash weapons
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "weapon_sawnoff");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		        GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "weapon_molotov");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugPot] = cache_get_field_content_int(i, "drugpot");
                GangInfo[gangid][gDrugCrack] = cache_get_field_content_int(i, "drugcrack");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "pot_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "crack_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");
                GangInfo[gangid][gArmsHPAmmo] = cache_get_field_content_int(i, "armshpammo");
                GangInfo[gangid][gArmsPoisonAmmo] = cache_get_field_content_int(i, "armspoisonammo");
                GangInfo[gangid][gArmsFMJAmmo] = cache_get_field_content_int(i, "armsfmjammo");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;
		        gangstream[gangid] = SvCreateGStream(0xffff0000, "Gang Radio");
				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    PlayerInfo[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SM(extraid, SERVER_COLOR, "House ID %i", houseid);
			SM(extraid, COLOR_GREY2, "(Value: $%i) - (Rent Price: $%i) - (Level: %i/5) - (Active: %s) - (Locked: %s)", HouseInfo[houseid][hPrice], HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 1209600) ? ("{FFA500}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SM(extraid, COLOR_GREY2, "(Class: %s) - (Location: %s) - (Furniture: %i/%i) - (Tenants: %i/%i)", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SM(extraid, COLOR_SYNTAX, "Your house is only allowed up to %i furniture at its current level.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
				ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveFurniture(PlayerInfo[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your home contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SM(extraid, COLOR_YELLOW, "** You have %i unread text messages. (/texts)", rows);
			}
		}
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You have no more unread text messages to read.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Texts sent to you while offline (recent first):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] SMS from %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "Next", "OK");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to spawn.", string, "Select", "Cancel");
		    }
		}
        case THREAD_VALE_STORAGE:
		{
           if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[2084], vehicleid;

		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
		            else if(cache_get_field_content_int(i, "impounded"))
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Impounded{FFFFFF}\tDMV", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}
				ShowPlayerDialog(extraid, DIALOG_VALESTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[2084], vehicleid;

		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
		            else if(cache_get_field_content_int(i, "impounded"))
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Impounded{FFFFFF}\tDMV", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}
				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24], hours[100];

		    SCM(extraid, SERVER_COLOR, "Faction Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
                cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "%s %s - Last Seen: %s", FactionRanks[PlayerInfo[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Gang Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "[%i] %s %s - Last Seen: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[PlayerInfo[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && PlayerInfo[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The phonebook directory is currently empty.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((PlayerInfo[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(PlayerInfo[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Phonebook directory", string, "Select", "Close");
		    }
		}
		case THREAD_COUNT_LANDOBJECTS:
		{
		    if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(extraid))
		    {
		        SM(extraid, COLOR_SYNTAX, "You are only only allowed up to %i objects for your land.", GetLandObjectCapacity(extraid));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_LANDBUILDTYPE);
				//ShowDialogToPlayer(extraid, DIALOG_LANDBUILD1);
			}
		}
		case THREAD_SELL_LANDOBJECT:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveLandObject(PlayerInfo[extraid][pSelected]);
			}
		}
		case THREAD_DUPLICATE_LANDOBJECT:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], landid = GetNearbyLand(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(PlayerInfo[extraid][pCash] < price)
			    {
			        SCM(extraid, COLOR_SYNTAX, "You can't afford to duplicate this object.");
			    }
			    else
			    {
			        PlayerInfo[extraid][pObjectLand] = landid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SM(extraid, COLOR_YELLOW, "%s duplicated for $%i. You will now edit this object.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    Dyuze(extraid, "Notice", string);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], modelid, name, price, x, y, z, rx, ry, rz, x, y, z - 10.0);
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM landobjects LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_OBJECT, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_OBJECT:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            PlayerInfo[extraid][pEditType] = EDIT_LAND_OBJECT;
		    	    	PlayerInfo[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	Dyuze(extraid, "Notice", "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel");

			            //PlayerInfo[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_CLEAR_LANDOBJECTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, landid = GetNearbyLand(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllLandObjects(landid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		case THREAD_LIST_LANDOBJECTS:
		{
		    if((!rows) && PlayerInfo[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no objects which can be listed.");
		    }
		    else
		    {
		        static string[MAX_LISTED_OBJECTS * 48], name[32];

		        string = "#\tName\tCost\tDistance";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"\t%.1fm", string, GetLandObjectID(cache_get_field_content_int(i, "id")), name, cache_get_field_content_int(i, "price"), GetPlayerDistanceFromPoint(extraid, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
				}

				if(PlayerInfo[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_OBJECTS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_LANDOBJECTS, DIALOG_STYLE_TABLIST_HEADERS, "List of objects", string, "Select", "Back");
		    }
		}
		case THREAD_LAND_MAINMENU:
		{
		    ShowPlayerDialog(extraid, DIALOG_LANDMENU, DIALOG_STYLE_LIST, "Land Menu | "SERVER_NAME"", "Build object\nEdit object\nToggle labels\nSell all objects\nPermissions", "Select", "Cancel");
		}
		case THREAD_LAND_INFORMATION:
		{
		    new landid = GetNearbyLand(extraid);

		    SCM(extraid, SERVER_COLOR, "Land Info:");
			SM(extraid, COLOR_GREY2, "(ID: %i) - (Value: $%i) - (Objects: %i/%i) - (Location: %s)", landid, LandInfo[landid][lPrice], cache_get_row_int(0, 0), GetLandObjectCapacity(landid), GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]));
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;
					vehicleFuel[vehicleid] = 100;

					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_LOAD_PGARAGE:
		{
		    for(new i = 0; i < rows && i < MAX_PGARAGE; i ++)
		    {
		        PGInfo[i][aID] = cache_get_field_content_int(i, "id");
		        PGInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        PGInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	PGInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	PGInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				PGInfo[i][aExists] = true;
				ReloadPG(i);
			}
			printf("[Script] %i Public Garage loaded", (rows < MAX_PGARAGE) ? (rows) : (MAX_PGARAGE));
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
		        AtmInfo[i][aID] = cache_get_field_content_int(i, "id");
		        AtmInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        AtmInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	AtmInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	AtmInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				AtmInfo[i][aExists] = true;
				ReloadAtm(i);
			}
			printf("[Script] %i atms loaded", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
        case THREAD_LOAD_VENDORS:
		{
		    for(new i = 0; i < rows && i < MAX_VENDORS; i ++)
		    {
		        VenInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadVen(i);
			}
			printf("[Script] %i vendors loaded", (rows < MAX_VENDORS) ? (rows) : (MAX_VENDORS));
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == PlayerInfo[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}

			    SM(extraid, SERVER_COLOR, "%s:", GangInfo[PlayerInfo[extraid][pGang]][gName]);
			    SM(extraid, COLOR_GREY2, "Leader: %s - Level: %i/3 - Strikes: %i/3 - Members: %i/%i - Vehicles: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gLeader], GangInfo[PlayerInfo[extraid][pGang]][gLevel], GangInfo[PlayerInfo[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(PlayerInfo[extraid][pGang]), GetGangVehicles(PlayerInfo[extraid][pGang]), GetGangVehicleLimit(PlayerInfo[extraid][pGang]));
			    SM(extraid, COLOR_GREY2, "Gang Points: %i GP - Turf Tokens: %i - Cash: $%i/$%i - Materials: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gPoints], GangInfo[PlayerInfo[extraid][pGang]][gTurfTokens], GangInfo[PlayerInfo[extraid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_CASH), GangInfo[PlayerInfo[extraid][pGang]][gMaterials], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_MATERIALS));
			    SM(extraid, COLOR_GREY2, "Turfs: %i/%i - Pot: %i/%ig - Crack: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[PlayerInfo[extraid][pGang]][gPot], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[extraid][pGang]][gCrack], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[extraid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_METH),
					GangInfo[PlayerInfo[extraid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
				SM(extraid, COLOR_GREY2, "Hollow point: %i/%i - Poison tip: %i/%i - Full metal jacket: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gHPAmmo], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[PlayerInfo[extraid][pGang]][gPoisonAmmo], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[PlayerInfo[extraid][pGang]][gFMJAmmo], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_FMJAMMO));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The username specified is not registered.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        SM(extraid, COLOR_WHITE, "** %s's IP: %s **", username, ip);

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The player specified doesn't exist.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SCM(extraid, COLOR_SYNTAX, "This account is listed under your own IP address. You can't refer yourself.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), PlayerInfo[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

					PlayerInfo[extraid][pTutorial] = 1;
					PlayerInfo[extraid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", extraid);

	                SM(extraid, COLOR_YELLOW, "** You have chosen %s as your referrer. They will be rewarded once you reach level 3.", username);
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && PlayerInfo[i][pLogged] && PlayerInfo[i][pID] == PlayerInfo[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        PlayerInfo[referralid][pLevel]++;
			        SCM(referralid, COLOR_YELLOW, "A player who you've referred reached level 3. Therefore you received 1 level!");
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1 WHERE uid = %i", PlayerInfo[referralid][pID]);
					mysql_tquery(connectionID, queryBuffer);

				}
				else
				{
				    // Referrer is offline. Let's give them their dirtycash and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", PlayerInfo[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SCM(extraid, SERVER_COLOR, "Flagged Players:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SM(extraid, COLOR_WHITE, "** %s[%i] has %i active flags.", GetRPName(i), i, flags[i]);
				}
			}
		}
	}
}

ResetClotheSetup(playerid)
{
	PlayerInfo[playerid][pOutfit] = 0;

	UpdateClotheSetup(playerid);
}
UpdateClotheSetup(playerid)
{
	PlayerTextDrawSetPreviewModel(playerid, ClotheTD[playerid][2], GetPlayerSkinScript(playerid));
	PlayerTextDrawShow(playerid, ClotheTD[playerid][2]);

}
UpdateClotheSelection(playerid, index)
{
	new size;

	if (PlayerInfo[playerid][pGender] == 1) {
		size = sizeof(g_MaleSkins);
	} else if (PlayerInfo[playerid][pGender] == 2) {
		size = sizeof(g_FemaleSkins);
	}

	if (index < 0) {
		index = --size;
	} else if (index >= size) {
		index = 0;
	}

	PlayerInfo[playerid][pOutfit] = index;

	if (PlayerInfo[playerid][pGender] == 1) {
		PlayerInfo[playerid][pSkin] = g_MaleSkins[index];
	} else if (PlayerInfo[playerid][pGender] == 2) {
		PlayerInfo[playerid][pSkin] = g_FemaleSkins[index];
	}

	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
}

public OnPlayerClickTextDraw(playerid, Text:clickedid) {
	// CALLING TD
	if(clickedid == PICKUP) {
	    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		PlayerInfo[PlayerInfo[playerid][pCallLine]][pCallStage] = 2;
		PlayerInfo[playerid][pCallStage] = 2;
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][3]);
		PlayerTextDrawHide(PlayerInfo[playerid][pCallLine], CallingPlayerTD[playerid][4]);
		TextDrawHideForPlayer(playerid, PICKUP);
		StopAudioStreamForPlayer(playerid);
		//TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat to talk to the caller.");
		SCM(PlayerInfo[playerid][pCallLine], COLOR_WHITE, "** They answered the call. You can now speak in chat to talk to them.");
			//////////////////////////////////// - Samp Voice - //////////////////////////////////////////
    	callstream[playerid] = SvCreateGStream(0xffff0000, "Call");
	    callstream[PlayerInfo[playerid][pCallLine]] = SvCreateGStream(0xffff0000, "Call");
	    SvAttachListenerToStream(callstream[PlayerInfo[playerid][pCallLine]], playerid);
	    SvAttachListenerToStream(callstream[playerid], PlayerInfo[playerid][pCallLine]);
	}
	if(clickedid == HANGUP) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		HangupCall(playerid, HANGUP_USER);
		StopAudioStreamForPlayer(playerid);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == CloseCallTD) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		CancelSelectTextDraw(playerid);
	}
 	if(clickedid == Text:INVALID_TEXT_DRAW && !PlayerInfo[playerid][pLogged])
	{
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerInfo[playerid][pWeapons] = weaponid;
	PlayerInfo[playerid][pAmmo] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

CMD:ammo(playerid, params[])
{
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Error:"WHITE" You can't use this command at the moment.");
	}

	if(!PlayerInfo[playerid][pWeaponClip])
	{
	    return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have any weapon clip left.");
	}
	new weaponid = 0;

	switch ((weaponid = GetScriptWeapon(playerid)))
	{
		case 22, 23: GiveWeaponToPlayer(playerid, weaponid, 68);
		case 24, 27: GiveWeaponToPlayer(playerid, weaponid, 35);
	    case 25, 26: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 28, 31, 32: GiveWeaponToPlayer(playerid, weaponid, 200);
	    case 29, 30: GiveWeaponToPlayer(playerid, weaponid, 120);
	    case 33, 34: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 35..37: GiveWeaponToPlayer(playerid, weaponid, 4);
	    case 38: GiveWeaponToPlayer(playerid, weaponid, 500);
		default: return SCM(playerid, COLOR_SYNTAX, "You cannot use an ammo cartridge on this weapon.");
	}
	PlayReloadAnimation(playerid, weaponid);
	PlayerInfo[playerid][pWeaponClip]--;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponclip = %i WHERE uid = %i", PlayerInfo[playerid][pWeaponClip], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s has used an weapon clip on their %s.", ReturnName(playerid), GetWeaponNameEx(weaponid));
	return 1;
}
stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

public OnGameModeInit()
{
	// Uncomment the line to enable debug mode
    // SvDebug(SV_TRUE);
    SetTimer("BotStatus", 1000, true);
    gstream = SvCreateGStream(0xffff0000, "Global");

    SetTimer("AutoMessage",60*1000*AUTO_MESSAGE_TIME,1);
	new string[128];
	connectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);

	if(mysql_errno(connectionID))
	{
	    print("Unable to establish a connection with the MySQL server...");
	    SendRconCommand("exit");
	    return 0;
	}

    radioConnectionID = mysql_connect(MYSQL_HOSTNAME, "MGMCRP", "shoutcast", "MGMCRP");

	if(mysql_errno(radioConnectionID))
	{
	    print("Couldn't connect to radio station database... server will continue to operate normally.");
	    radioConnectionID = 0;
	}
	SetTimer("AutoSave",601000 ,1);
    SetTimer("AutoMessage",601000 ,1);

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	mysql_tquery(connectionID, "TRUNCATE TABLE shots");
	mysql_tquery(connectionID, "SELECT * FROM atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM publicgarage", "OnQueryFinished", "ii", THREAD_LOAD_PGARAGE, 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
	mysql_tquery(connectionID, "SELECT * FROM vendors", "OnQueryFinished", "ii", THREAD_LOAD_VENDORS, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM graffiti", "Graffiti_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM speedcameras", "Speed_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM lands", "OnQueryFinished", "ii", THREAD_LOAD_LANDS, 0);
    mysql_tquery(connectionID, "SELECT * FROM landobjects", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `gates`", "Gate_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM actors", "OnQueryFinished", "ii", THREAD_LOAD_ACTORS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `speedcameras`", "SpeedCam_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `object`", "Object_Load", "");
    switch(random(4))
	{
	    case 0: gWeather = 13;
	    case 1: gWeather = 10;
	    case 2: gWeather = 7;
	    case 3: gWeather = 12;
	}
		new index;
	MapPieces[index++][RadarMapObject] = CreateDynamicObject(19168,-0.750,0.750,0.000,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	MapPieces[index++][RadarMapObject] = CreateDynamicObject(19169,0.750,0.750,0.000,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	MapPieces[index++][RadarMapObject] = CreateDynamicObject(19170,-0.750,-0.750,0.000,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	MapPieces[index++][RadarMapObject] = CreateDynamicObject(19171,0.750,-0.750,0.000,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	MapPieces[index][RadarMapObject] = CreateDynamicObject(19362,1.495,-0.014,-1.750,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(MapPieces[index++][RadarMapObject], 0, 6056, "venice_law", "law_blue4", -10079488);
	MapPieces[index][RadarMapObject] = CreateDynamicObject(19362,-1.534,-0.014,-1.750,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(MapPieces[index++][RadarMapObject], 0, 6056, "venice_law", "law_blue4", -10079488);
	MapPieces[index][RadarMapObject] = CreateDynamicObject(19362,-0.019,1.500,-1.749,0.000,0.000,89.999,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(MapPieces[index++][RadarMapObject], 0, 6056, "venice_law", "law_blue4", -10079488);
	MapPieces[index][RadarMapObject] = CreateDynamicObject(19362,-0.019,-1.529,-1.749,0.000,0.000,89.999,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(MapPieces[index++][RadarMapObject], 0, 6056, "venice_law", "law_blue4", -10079488);


	for(new i = 0; i < 8; i++) GetDynamicObjectPos(MapPieces[i][RadarMapObject], MapPieces[i][RadarOffX], MapPieces[i][RadarOffY], MapPieces[i][RadarOffZ]);

	SetTimer("UpdateRadar", 1000, true);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		RadarBlip[i] = CreateDynamicObject(338,0.0,0.0,-1000.0,-4.799,0.000,0.000,-1,-1,-1,300.000,300.000);
		SetDynamicObjectMaterial(RadarBlip[i], 0, 10765, "airportgnd_sfse", "white", -6750208);
		Radar3DText[i] = CreateDynamic3DTextLabel("_", 0xFF0000FF, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10.0);
		if(IsPlayerConnected(i))
		{
			new name[MAX_PLAYER_NAME+1];
			GetPlayerName(i, name, MAX_PLAYER_NAME+1);
			UpdateDynamic3DTextLabelText(Radar3DText[i], 0xFF0000FF, name);
		}
	}

//	SetRadarMap(0.0, 0.0, 3.0);
	for(new x=0; x<MAX_VEHICLES; x++)
	{
		Flasher[x] = 0;
		FlasherState[x] = 0;
	}
	FlashTimer = SetTimer("FlasherFunc", 200, 1);

	SetWeather(gWeather);
	EnableStuntBonusForAll(0);
//    UsePlayerPedAnims();
	DisableInteriorEnterExits();
	AllowInteriorWeapons(0);
	ManualVehicleEngineAndLights();
	SetDamageFeed(true);
	SetDamageSounds(0, 0);
	SetVehicleUnoccupiedDamage(false);
	SetVehiclePassengerDamage(true);
	GiftAllowed = 1;
	//ShowNameTags(1);
	ShowNameTags(0);

	//Streamer_TickRate(100);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	gDoubleXP = false;
	gDoubleSalary = false;

	// CCTV's (10 MAX)
	AddCCTV("LS Grovestreet", 2491.7839, -1666.6194, 46.3232, 0.0);
	AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0);
	AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);
	AddCCTV("SF Airport", -1275.8070, 52.9402, 82.9162, 0.0);
	AddCCTV("SF Crossroad", -1899.0861,731.0627,65.2969, 90.0);
	AddCCTV("SF Tower", -1753.6606,884.7520,305.8750, 150.0);
	AddCCTV("LV The Strip 1", 2137.2390, 2143.8286, 30.6719, 270.0);
	AddCCTV("LV The Strip 2", 1971.7627, 1423.9323, 82.1563, 270.0);
    AddCCTV("Mount Chiliad", -2432.5852, -1620.1143, 546.8554, 270.0);
	AddCCTV("Sherman Dam", -702.9260, 1848.8094, 116.0507, 0.0);
	AddCCTV("Desert", 35.1291, 2245.0901, 146.6797, 310.0);
	AddCCTV("Query", 588.1079,889.4715,-14.9023, 270.0);
	AddCCTV("Mining", 1254.1508,-1265.7378,13.3707, 90.0);

	TD = TextDrawCreate(160, 400, "~y~Keys:~n~Arrow-Keys: ~w~Move The Camera~n~~y~Sprint-Key: ~w~Speed Up~n~~y~Crouch-Key: ~w~Exit Camera");
    TextDrawLetterSize(TD, 0.4, 0.9);
    TextDrawSetShadow(TD, 0);
    TextDrawUseBox(TD,1);
	TextDrawBoxColor(TD,0x00000055);
	TextDrawTextSize(TD, 380, 400);

	new Count, Left = TotalCCTVS;
	for(new menu; menu<MAX_CCTVMENUS; menu++)
	{
	    if(Left > 12)
	    {
	        CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
	        TotalMenus++;
	        MenuType[menu] = 1;
	        for(new i; i<11; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
			AddMenuItem(CCTVMenu[menu], 0, "Next");
		}
		else if(Left<13 && Left > 0)
		{
		    CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
		    TotalMenus++;
		    MenuType[menu] = 2;
		    new tmp = Left;
	        for(new i; i<tmp; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
		}
	}
	/*-----------------------------*/

	// Point bounds
	pointboundaries[0] = GangZoneCreate(2545.8984375 ,-2153.3203125, 2707.03125, -2062.5); // FFC
	pointboundaries[1] = GangZoneCreate(1361.328125,-1435.546875,1478.515625,-1236.328125); // MP1
	pointboundaries[2] = GangZoneCreate(2077.1484375, -2361.328125, 2285.15625, -2179.6875); // MF1
	pointboundaries[3] = GangZoneCreate(2298.828125,-2064.453125,2546.875,-1935.546875); // MP2
	pointboundaries[4] = GangZoneCreate(2156.25, -1151.3671875, 2320.3125, -1001.953125); // MF2
	pointboundaries[5] = GangZoneCreate(2581.0546875, -2586.9140625, 2862.3046875, -2329.1015625); // AEC
	pointboundaries[6] = GangZoneCreate(2105.46875,-1753.90625,2177.734375,-1626.953125); // Drug House
	pointboundaries[7] = GangZoneCreate(2304.6875,-1181.640625,2361.328125,-1160.15625); // Crack Lab
	pointboundaries[8] = GangZoneCreate(13.671875,-402.34375,167.96875,-208.984375); // Drug Factory

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel("Community Service\n"SVRCLR"(( Type '/clean' to start cleaning. ))", COLOR_GREY, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2], 10.0);
	}
	
	// chop car
    CreateDynamicPickup(1550, 1, 2077.838623, -2020.001708, 13.546875);
    CreateDynamic3DTextLabel("Chopshop\n/chopcar[To Chop Player's Car.].",0xDABB3EAA,2077.838623, -2020.001708, 13.546875, 15);

/*	CreateDynamic3DTextLabel("BigBank Vault\nType [/robbigbank] To start robbery",COLOR_YELLOW,296.7507,1378.5189,2023.8459+0.6,4.0);
	CreateDynamicPickup(1550, 1, 296.7507, 1378.5189, 2023.8459);*/

    CreateDynamic3DTextLabel("Fleeca Vault\nType [/startfleecarob] To start robbery",COLOR_YELLOW,704.2659,-1184.6938,15.9806+0.6,4.0);
	CreateDynamicPickup(1550, 1, 704.2659,-1184.6938,15.9806);
	
    CreateDynamic3DTextLabel("Fleeca Vault\nType [/startfleecarob] To start robbery",COLOR_YELLOW,701.201843, -1182.450317, 15.980570+0.6,4.0);
	CreateDynamicPickup(1550, 1, 701.201843, -1182.450317, 15.980570);

    CreateDynamic3DTextLabel("Fleeca Vault\nType [/startfleecarob] To start robbery",COLOR_YELLOW,699.414611, -1181.430175, 15.980570+0.6,4.0);
	CreateDynamicPickup(1550, 1, 699.414611, -1181.430175, 15.980570);
	
	CreateDynamic3DTextLabel("AirPlane Vault\nType [/robairplane] To start robbery",COLOR_YELLOW,4.3740,23.0148,1199.6012+0.6,4.0);
	CreateDynamicPickup(1550, 1, 4.3740,23.0148,1199.6012);

	CreateDynamic3DTextLabel("Casino Vault\nType [/robcasino] To start robbery",COLOR_YELLOW,346.046630, 162.273681, 1025.789062,4.0);

	CreateDynamic3DTextLabel("Hospital Menu\n"SVRCLR"(( Type '[/buyinsurance]' to spawn here.\n Type '[/checkin]' to heal yourself))", COLOR_DOCTOR, 1153.202026, -1305.075927, 1019.413940, 10.0);
	CreateDynamicPickup(1240, 1, 1153.202026, -1305.075927, 1019.413940);

	/*CreateDynamic3DTextLabel("Checkin\n"SVRCLR"(( Type '/checkin' to revive. cost $15000 ))", COLOR_DOCTOR, -201.5379,-1741.0367,675.7687, 10.0);
	CreateDynamicPickup(1240, 1, -201.5379,-1741.0367,675.7687);*/

	CreateDynamic3DTextLabel(""TEAL"Black HP Desk\nPress "WHITE"'n'"TEAL" to open menu.",COLOR_TEAL,-201.5379, -1741.0367, 675.7687+0.6,4.0);// Insurance

    CreateDynamic3DTextLabel("Paintball arena\n/enter to play paintball!", COLOR_YELLOW, 2114.2373, -1742.5184, 13.5547, 10.0);
	CreateDynamicPickup(1254, 1, 2114.2373, -1742.5184, 13.5547);

    // Materials Pickup 1
	CreateDynamic3DTextLabel("Materials\nCost: $40000\n"SVRCLR"(( Type '/getmats' to begin. ))", COLOR_GREY, -2737.242919, 115.554534, 4.392271, 10.0);
	CreateDynamicPickup(1575, 1, -2737.242919, 115.554534, 4.392271);

	CreateDynamic3DTextLabel("Loading Dock\n"SVRCLR"(( Type '/loadtruck' and pick a load to begin delivery. ))", COLOR_GREY, 2460.9790,-2119.2590,13.5530, 10.0);
	CreateDynamicPickup(1239, 1, 2460.9790,-2119.2590,13.5530);

	CreateDynamic3DTextLabel("Drivers Test\n"SVRCLR"(( Type '/taketest' to begin. ))", COLOR_GREY, 1490.284545, 1305.569702, 1093.296386, 10.0);
	CreateDynamicPickup(1239, 1, 1490.284545, 1305.569702, 1093.296386);

	CreateDynamic3DTextLabel("Grotti Dealership\n"SVRCLR"(( Type '/buyvehicle' to view catalog. ))", COLOR_GREY, 599.914916, -1508.440673, 15.190327, 10.0);
	CreateDynamicPickup(1274, 1, 599.914916, -1508.440673, 15.190327);

	CreateDynamic3DTextLabel("Mechanic Shop\n"SVRCLR"(( Type '/buyrepairkit' to buy repairkit. ))", COLOR_GREY, 949.726074, -1641.879638, 13.635803, 10.0);
	CreateDynamicPickup(19134, 1, 949.726074, -1641.879638, 13.635803);
	
	CreateDynamic3DTextLabel("Boat Dealership\n"SVRCLR"(( Type '/buyvehicle' to view catalog. ))", COLOR_GREY, 154.2223, -1946.3030, 5.1920, 10.0);
	CreateDynamicPickup(1274, 1, 154.2223, -1946.3030, 5.1920);

	CreateDynamic3DTextLabel("Aircraft Dealership\n"RED"Temporary Disabled", COLOR_GREY, 1892.6315, -2328.6721, 13.5469, 10.0);
	CreateDynamicPickup(1274, 1, 1892.6315, -2328.6721, 13.5469);

	CreateDynamic3DTextLabel("Name Changes\nCost: $15,000 per level\n"SVRCLR"(( Type '/changename' to request one. ))\n(( Type '/signcheck' to sign the paper. ))\n(( Type '/buylevel and '/upgrade' to upgrade. ))\n(([/changename] = $15,000 Per Level))\n(([/upgrade] = $15,000 Per Upgrade))\n(([/getnationalid] = $5,000 for nationalid to get jobs))\n(([/getweaponlic] = $40,000 for weaponlicense to use guns))\n(([/dmvrelease] to get your vehicle out of Impound Station))", COLOR_GREY, 1253.872802, -71.741867, 5001.085937, 10.0);
	CreateDynamicPickup(1239, 1, 1253.872802, -71.741867, 5001.085937);

	CreateDynamic3DTextLabel("Microphone\n"SVRCLR"(( Type '/mic' to use this microphone. ))", COLOR_GREY, 1082.1001,-1740.0272,14.1402, 10.0);
	CreateDynamicPickup(1239, 1, 1082.1001,-1740.0272,14.1402);

	CreateDynamic3DTextLabel("Drug Smuggling\nCost: $75\n"SVRCLR"(( Type '/getcrate' to begin smuggling. ))", COLOR_GREY, 2168.7490,1589.8691,999.9709, 10.0);
	CreateDynamicPickup(1279, 1, 2168.7490,1589.8691,999.9709);

	CreateDynamic3DTextLabel("Meth Cookoff\n> Requires Ephedrine <\n"SVRCLR"(( Type '/cookmeth' to begin cooking. ))", COLOR_GREY, 333.694000, 1123.089477, 1083.890258, 10.0);
	CreateDynamicPickup(1577, 1, 333.694000, 1123.089477, 1083.890258);
	
	  // pd
     CreateDynamic3DTextLabel(""TEAL"["WHITE"Faction Garage"TEAL"]"WHITE"\nPress "WHITE"'[Y]'"TEAL" to spawn a vehicle.", COLOR_TEAL, 1589.947875, -1622.7648892, 13.382812 + 0.4, 20.0);
     CreateDynamicPickup(19134, 1, 1589.947875, -1622.7648892, 13.382812); //spawn

     CreateDynamic3DTextLabel(""TEAL"["WHITE"Faction Garage"TEAL"]"WHITE"\nType "WHITE"'[/fd]'"TEAL" to despawn a vehicle.", COLOR_TEAL, 1554.651611, -1607.967041, 13.382812 + 0.4, 20.0);
     CreateDynamicPickup(19134, 1, 1554.651611, -1607.967041, 13.382812); //despawn

     //  medic
     CreateDynamic3DTextLabel(""TEAL"["WHITE"Faction Garage"TEAL"]"WHITE"\nPress "WHITE"'[Y]'"TEAL" to spawn a vehicle.", COLOR_TEAL, 1135.550903, -1338.575073, 13.742506 + 0.4, 20.0);
     CreateDynamicPickup(19134, 1, 1135.550903, -1338.575073, 13.742506);  //spawn

     CreateDynamic3DTextLabel(""TEAL"["WHITE"Faction Garage"TEAL"]"WHITE"\nType "WHITE"'[/fd]'"TEAL" to despawn a vehicle.", COLOR_TEAL, 1096.872680, -1316.325195, 13.712162 + 0.4, 20.0);
     CreateDynamicPickup(19134, 1, 1096.872680, -1316.325195, 13.712162); //despawn

	CreateDynamic3DTextLabel("Bank\n"SVRCLR"(( Type '/bank' for more help. ))", COLOR_GREY, 292.768981, 1345.343017, 2023.838012, 10.0);
	CreateDynamicPickup(1239, 1, 292.768981, 1345.343017, 2023.838012);

    CreateDynamic3DTextLabel("[CookFood Area]\n/cook To Start Cooking.", COLOR_YELLOW, 797.000915, -1621.011108, 13.525935, 10.0);
    CreateDynamicPickup(1582, 1, 797.000915, -1621.011108, 13.525935);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana Seeds\nStock: 100\n"SVRCLR"(( Type '/getdrug seeds [amount]' ))", COLOR_GREY, 321.374359, 1117.816284, 1083.882812, 10.0);
	CreateDynamicPickup(1578, 1, 321.374359, 1117.816284, 1083.882812);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw Ephedrine\nStock: 100\n"SVRCLR"(( '/getdrug ephedrine [amount]' ))", COLOR_GREY, 323.902679, 1117.215942, 1083.882812, 10.0);
	CreateDynamicPickup(1577, 1, 323.902679, 1117.215942, 1083.882812);

	gCrackText = CreateDynamic3DTextLabel("Crack\nStock: 100\n"SVRCLR"(( Type '/getdrug Crack [amount]' ))", COLOR_GREY, 2346.760986, -1185.064086, 1031.976562, 10.0);
    CreateDynamicPickup(1575, 1, 2346.760986, -1185.064086, 1031.976562);

//	CreateDynamic3DTextLabel("BLACKMARKET\n{FFFFFF}/blackmarket to purchase illegal.", COLOR_YELLOW, -50.1366, -269.3632, 6.6332, 10.0);

	CreateDynamic3DTextLabel("NEWBIE INFORMATION:\n"SVRCLR"(( Type '/newbinfo' for more information. ))", COLOR_GREY, 1564.5627,-2248.6436,13.5469, 18.0); // 2

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior

	BlackMarketActor = CreateActor(28, -50.1366, -269.3632, 6.6332, 176.0331);//bmactor
	ApplyActorAnimation(BlackMarketActor, "PED", "IDLE_CHAT", 4.1, 1, 0, 0, 1, 0);
	SetActorInvulnerable(BlackMarketActor, true);

	JewelryActor = CreateActor(150, 191.3565, 1851.8076, 994.3726, 274.6840);//bmactor
	ApplyActorAnimation(JewelryActor, "PED", "IDLE_CHAT", 4.1, 1, 0, 0, 1, 0);
	SetActorInvulnerable(JewelryActor, true);

	//PAWNSHOP
	PAWNSHOP = CreateActor(150, 81.9193, 2504.4148, 2001.0847, 181.0000);// PAWNSHOP ACTOR
	ApplyActorAnimation(PAWNSHOP, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(PAWNSHOP, true);

	//CITYHALL
	CITYHALL = CreateActor(120, 1254.114746, -74.104133, 5001.085937, 358.72);// CITYHALL ACTOR
	ApplyActorAnimation(CITYHALL, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(CITYHALL, true);
	SetActorVirtualWorld(CITYHALL, 1);

	// Job NPC
 	ActorJob[0] = CreateActor(73, -27.9695, -1118.8699, 1.0781, 168.7887);// ArmsDealerActor
    ApplyActorAnimation(ActorJob[0], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
  	SetActorInvulnerable(ActorJob[0], true);

 	ActorJob[1] = CreateActor(163, 2227.3613,-1715.8910,13.5260, 145.1277);// BodyguardActor
    ApplyActorAnimation(ActorJob[1], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0);
  	SetActorInvulnerable(ActorJob[1], true);

   	ActorJob[2] = CreateActor(261, 2434.4448, -2125.6113, 13.5469, 0.0);// TruckerActor
	ApplyActorAnimation(ActorJob[2], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[2], true);

    ActorJob[3] = CreateActor(20, 980.6055, -1297.1161, 13.5462, 206.6949);// FoodPanda
	ApplyActorAnimation(ActorJob[3], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[3], true);

   	ActorJob[4] = CreateActor(71, 1548.2339,-1668.2773,13.5667,84.2340);// DetectiveActor
	ApplyActorAnimation(ActorJob[4], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[4], true);
    SetActorVirtualWorld(ActorJob[4], 1);

	ActorJob[5] = CreateActor(14, 393.2632,-2070.5837,7.8359, 56.3435);// FisherActor
	ApplyActorAnimation(ActorJob[5], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[5], true);
/*
	ActorJob[6] = CreateActor(50, 2328.2659, -2314.9421, 13.5469, 138.6372);// MechanicActor
	ApplyActorAnimation(ActorJob[6], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[6], true);*/

	ActorJob[7] = CreateActor(27, -1008.2990,-2158.0593,34.7481,311.8129);// MinerActor
	ApplyActorAnimation(ActorJob[7], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[7], true);

	ActorJob[8] = CreateActor(15, 1748.1373, -1863.0981, 13.5755, 357.0072);// TaxiActor
	ApplyActorAnimation(ActorJob[8], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[8], true);

	ActorJob[9] = CreateActor(28, 58.5773, -292.2565, 1.5781, 354.2440);// DrugsmugActor
	ApplyActorAnimation(ActorJob[9], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[9], true);

	ActorJob[10] = CreateActor(113, 1381.0668, -1086.6857, 27.3906, 121.4697);// LawyerActor
	ApplyActorAnimation(ActorJob[10], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[10], true);

	ActorJob[11] = CreateActor(16, 1265.5177, -1265.8708, 13.3806, 7.6151);// MinerActor
	ApplyActorAnimation(ActorJob[11], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[11], true);

	ActorJob[12] = CreateActor(60, 643.9371, -1368.7008, 13.6314, 87.69);// NewsPaperActor
    ApplyActorAnimation(ActorJob[12], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
    SetActorInvulnerable(ActorJob[12], true);
    
   	ActorJob[13] = CreateActor(28, 870.425903, -24.951305, 63.982223, 86.78);// Kayoperiko shop
	ApplyActorAnimation(ActorJob[13], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[13], true);

	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), "%s\n"SVRCLR"(( Press 'N' to get job. ))", jobLocations[i][jobName]);
	    CreateDynamic3DTextLabel(string, COLOR_GREY, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
	}
	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("ATM Machine\nType "WHITE"'/atm'"TEAL" to use. ))", COLOR_TEAL, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}
	for(new i = 0; i < sizeof(FuelStation); i ++)
	{
		CreateDynamicPickup(1650, 1, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ]);
	    CreateDynamic3DTextLabel("Fuel Station\n"SVRCLR"(( Type '/refuel' to refill. ))", COLOR_GREY, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ] + 0.4, 12.0);
	}
	for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
	    CreateDynamic3DTextLabel("Press "SVRCLR"'n'"SVRCLR" to begin chopping.", COLOR_WHITE, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2], 25.0);
	}
	// - PLATE REGISTRATION CENTER
	CreateDynamicPickup(1581, 1, 2501.0352, -1946.1055, 13.4937);
	CreateDynamic3DTextLabel("(( Type '/registercar' to get a plate number for your vehicle. ))", SERVER_COLOR, 2501.0352, -1946.1055, 13.4937 + 0.4, 15.0);

    CreateDynamic3DTextLabel("{00FF00}Marijuana {FFFFFF}plant\n{C1C1C1}To get started, go to the plant",0xFFFFFFFF,-992.3234,-1607.9264,76.3672,90, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel("{00FF00}Marijuana {FFFFFF}plant\n{C1C1C1}To get started, go to the plant",0xFFFFFFFF,-991.8456,-1622.5966,76.3672,90, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreateDynamic3DTextLabel("{00FF00}Marijuana {FFFFFF}plant\n{C1C1C1}To get started, go to the plant",0xFFFFFFFF,-990.8137,-1635.1368,76.3672,90, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	CreatePickup(1275, 23, -1112.4697,-1636.8641,76.3672);
	CreateDynamic3DTextLabel("Harvester Sidejob\n Type [/harvest] to get this job.",0x00FF00FF, -1112.4697, -1636.8641, 76.3672, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
 
	for(new i = 0; i < sizeof(minerPositions); i ++)
	{
		CreateDynamicPickup(18634, 1, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]);
	    CreateDynamic3DTextLabel("(( Press 'N' to begin mining. ))", SERVER_COLOR, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Arrest\n"SVRCLR"(( Type '/arrest' to arrest a suspect. ))", COLOR_GREY, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}
	for(new i = 0; i < sizeof(constructionPositions); i ++)
	{
	    CreateDynamic3DTextLabel(""SVRCLR"Construction Area\n"WHITE" Press "SVRCLR"'n'"WHITE" to begin.", SERVER_COLOR, constructionPositions[i][0], constructionPositions[i][1], constructionPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(washmoneyPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Dirty Money\n"SVRCLR"(( Type /washmoney to wash the money. ))", COLOR_GREY, washmoneyPoints[i][0], washmoneyPoints[i][1], washmoneyPoints[i][2], 7.0);
	    CreateDynamicPickup(1239, 1, washmoneyPoints[i][0], washmoneyPoints[i][1], washmoneyPoints[i][2]);
	}
    if(_:Discord_EchoC == 0)
    Discord_EchoC = DCC_FindChannelById(DISCORD_ECHANNEL); // Discord channel ID
    //DCC_SendChannelMessage(Discord_EchoC, ":green_circle:[MGMC SAMP] Server Online !");
	new DCC_Embed:embed = DCC_CreateEmbed();
	DCC_SetEmbedTitle(embed, "SERVER INFO");
	DCC_SetEmbedDescription(embed, ":white_check_mark:[MGMC SAMP] Server Online !");
	DCC_SetEmbedColor(embed, 0x0000FFFF);
    DCC_SendChannelEmbedMessage(Discord_EchoC, embed);
	// Blindfold - Ez Jeck
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
	TextDrawLetterSize(Blind, 0.000000, 49.378147);
	TextDrawTextSize(Blind, -2.000000, 0.000000);
	TextDrawAlignment(Blind, 3);
	TextDrawColor(Blind, -1);
	TextDrawUseBox(Blind, true);
	TextDrawBoxColor(Blind, 255);
	TextDrawSetShadow(Blind, 0);
	TextDrawSetOutline(Blind, 0);
	TextDrawBackgroundColor(Blind, 255);
	TextDrawFont(Blind, 1);

	ANN[0] = TextDrawCreate(321.000000, 139.000000, "_");
	TextDrawFont(ANN[0], 1);
	TextDrawLetterSize(ANN[0], 0.600000, 8.949996);
	TextDrawTextSize(ANN[0], 298.500000, 748.500000);
	TextDrawSetOutline(ANN[0], 1);
	TextDrawSetShadow(ANN[0], 0);
	TextDrawAlignment(ANN[0], 2);
	TextDrawColor(ANN[0], -1);
	TextDrawBackgroundColor(ANN[0], 255);
	TextDrawBoxColor(ANN[0], 180);
	TextDrawUseBox(ANN[0], 1);
	TextDrawSetProportional(ANN[0], 1);
	TextDrawSetSelectable(ANN[0], 0);

	ANN[1] = TextDrawCreate(319.000000, 146.000000, "Announcement");
	TextDrawFont(ANN[1], 3);
	TextDrawLetterSize(ANN[1], 0.737499, 4.099997);
	TextDrawTextSize(ANN[1], 400.000000, 17.000000);
	TextDrawSetOutline(ANN[1], 0);
	TextDrawSetShadow(ANN[1], 0);
	TextDrawAlignment(ANN[1], 2);
	TextDrawColor(ANN[1], -2686721);
	TextDrawBackgroundColor(ANN[1], 255);
	TextDrawBoxColor(ANN[1], 50);
	TextDrawUseBox(ANN[1], 0);
	TextDrawSetProportional(ANN[1], 1);
	TextDrawSetSelectable(ANN[1], 0);

	ANN[2] = TextDrawCreate(319.000000, 187.000000, ""); // text
	TextDrawFont(ANN[2], 1);
	TextDrawLetterSize(ANN[2], 0.233332, 2.000000);
	TextDrawTextSize(ANN[2], 400.000000, 505.000000);
	TextDrawSetOutline(ANN[2], 0);
	TextDrawSetShadow(ANN[2], 0);
	TextDrawAlignment(ANN[2], 2);
	TextDrawColor(ANN[2], -1);
	TextDrawBackgroundColor(ANN[2], 255);
	TextDrawBoxColor(ANN[2], 50);
	TextDrawUseBox(ANN[2], 0);
	TextDrawSetProportional(ANN[2], 1);
	TextDrawSetSelectable(ANN[2], 0);
	
	CasCade1 = TextDrawCreate(577.0, 7.0, "MGMC");
	TextDrawAlignment(CasCade1, 2);
	TextDrawBackgroundColor(CasCade1, -1);
	TextDrawFont(CasCade1, 3);
	TextDrawLetterSize(CasCade1, 0.41, 1.4);
	TextDrawColor(CasCade1, -1);
	TextDrawSetOutline(CasCade1, 1);
	TextDrawSetProportional(CasCade1, 1);

	CasCade2 = TextDrawCreate(577.0, 8.0, "MGMC");
	TextDrawAlignment(CasCade2, 2);
	TextDrawBackgroundColor(CasCade2, 255);
	TextDrawFont(CasCade2, 3);
	TextDrawLetterSize(CasCade2, 0.4, 1.2);
	TextDrawColor(CasCade2, -1);
	TextDrawSetOutline(CasCade2, 1);
	TextDrawSetProportional(CasCade2, 1);

	CasCade3 = TextDrawCreate(577.0, 14.0, "Roleplay");
	TextDrawAlignment(CasCade3, 2);
	TextDrawBackgroundColor(CasCade3, 255);
	TextDrawFont(CasCade3, 0);
	TextDrawLetterSize(CasCade3, 0.38, 1.2);
	TextDrawColor(CasCade3, 255);
	TextDrawSetOutline(CasCade3, 1);
	TextDrawSetProportional(CasCade3, 1);

	CasCade4 = TextDrawCreate(577.0, 14.0, "Role Play");
	TextDrawAlignment(CasCade4, 2);
	TextDrawBackgroundColor(CasCade4, -1);
	TextDrawFont(CasCade4, 0);
	TextDrawLetterSize(CasCade4, 0.38, 1.2);
	TextDrawColor(CasCade4, 255);
	TextDrawSetOutline(CasCade4, 1);
	TextDrawSetProportional(CasCade4, 1);
	
    NoticeTxtdraw[0] = TextDrawCreate(186.000000, 181.000000, "Box");
	TextDrawBackgroundColor(NoticeTxtdraw[0], 0);
	TextDrawFont(NoticeTxtdraw[0], 1);
	TextDrawLetterSize(NoticeTxtdraw[0], 1.590000, 7.700005);
	TextDrawColor(NoticeTxtdraw[0], 0);
	TextDrawSetOutline(NoticeTxtdraw[0], 0);
	TextDrawSetProportional(NoticeTxtdraw[0], 1);
	TextDrawSetShadow(NoticeTxtdraw[0], 1);
	TextDrawUseBox(NoticeTxtdraw[0], 1);
	TextDrawBoxColor(NoticeTxtdraw[0], 100);
	TextDrawTextSize(NoticeTxtdraw[0], 454.000000, 18.000000);

	NoticeTxtdraw[1] = TextDrawCreate(317.000000, 174.000000, ""SERVER_NAME" - Notice");
	TextDrawAlignment(NoticeTxtdraw[1], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[1], 255);
	TextDrawFont(NoticeTxtdraw[1], 2);
	TextDrawLetterSize(NoticeTxtdraw[1], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[1], -1);
	TextDrawSetOutline(NoticeTxtdraw[1], 1);
	TextDrawSetProportional(NoticeTxtdraw[1], 1);

	// Title
	NoticeTxtdraw[2] = TextDrawCreate(323.000000, 196.000000, " ");
	TextDrawAlignment(NoticeTxtdraw[2], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[2], 255);
	TextDrawFont(NoticeTxtdraw[2], 2);
	TextDrawLetterSize(NoticeTxtdraw[2], 0.449999, 2.000000);
	//TextDrawLetterSize(NoticeTxtdraw[2], 0.529999, 2.800000);
	TextDrawColor(NoticeTxtdraw[2], -1);
	TextDrawSetOutline(NoticeTxtdraw[2], 1);
	TextDrawSetProportional(NoticeTxtdraw[2], 1);

	// Description.
	NoticeTxtdraw[3] = TextDrawCreate(322.000000, 221.000000, " ");
	TextDrawAlignment(NoticeTxtdraw[3], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[3], 255);
	TextDrawFont(NoticeTxtdraw[3], 1);
	TextDrawLetterSize(NoticeTxtdraw[3], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[3], -1);
	TextDrawSetOutline(NoticeTxtdraw[3], 1);
	TextDrawSetProportional(NoticeTxtdraw[3], 1);

	
	CRPTD = TextDrawCreate(285.000000, 432.000000, "~b~CasCade ~w~City~r~:RP");
	TextDrawFont(CRPTD, 3);
	TextDrawLetterSize(CRPTD, 0.250000, 1.000000);
	TextDrawTextSize(CRPTD, 400.000000, 17.000000);
	TextDrawSetOutline(CRPTD, 1);
	TextDrawSetShadow(CRPTD, 0);
	TextDrawAlignment(CRPTD, 1);
	TextDrawColor(CRPTD, -1);
	TextDrawBackgroundColor(CRPTD, 255);
	TextDrawBoxColor(CRPTD, 50);
	TextDrawUseBox(CRPTD, 0);
	TextDrawSetProportional(CRPTD, 1);
	TextDrawSetSelectable(CRPTD, 0);
	SetTimer("TDUpdates", 8000, true);

TurfCountTD[0] = TextDrawCreate(478.000000, 238.000000, "ld_bum:blkdot");
TextDrawFont(TurfCountTD[0], 4);
TextDrawLetterSize(TurfCountTD[0], 0.600000, 2.000000);
TextDrawTextSize(TurfCountTD[0], 28.000000, 25.000000);
TextDrawSetOutline(TurfCountTD[0], 1);
TextDrawSetShadow(TurfCountTD[0], 0);
TextDrawAlignment(TurfCountTD[0], 1);
TextDrawColor(TurfCountTD[0], -3841);
TextDrawBackgroundColor(TurfCountTD[0], 255);
TextDrawBoxColor(TurfCountTD[0], 50);
TextDrawUseBox(TurfCountTD[0], 1);
TextDrawSetProportional(TurfCountTD[0], 1);
TextDrawSetSelectable(TurfCountTD[0], 0);

TurfCountTD[1] = TextDrawCreate(480.000000, 241.000000, "ld_bum:blkdot");
TextDrawFont(TurfCountTD[1], 4);
TextDrawLetterSize(TurfCountTD[1], 0.600000, 2.000000);
TextDrawTextSize(TurfCountTD[1], 24.500000, 19.000000);
TextDrawSetOutline(TurfCountTD[1], 1);
TextDrawSetShadow(TurfCountTD[1], 0);
TextDrawAlignment(TurfCountTD[1], 1);
TextDrawColor(TurfCountTD[1], 16777215);
TextDrawBackgroundColor(TurfCountTD[1], 255);
TextDrawBoxColor(TurfCountTD[1], 50);
TextDrawUseBox(TurfCountTD[1], 1);
TextDrawSetProportional(TurfCountTD[1], 1);
TextDrawSetSelectable(TurfCountTD[1], 0);

TurfCountTD[2] = TextDrawCreate(478.000000, 270.000000, "ld_bum:blkdot");
TextDrawFont(TurfCountTD[2], 4);
TextDrawLetterSize(TurfCountTD[2], 0.600000, 2.000000);
TextDrawTextSize(TurfCountTD[2], 28.000000, 25.000000);
TextDrawSetOutline(TurfCountTD[2], 1);
TextDrawSetShadow(TurfCountTD[2], 0);
TextDrawAlignment(TurfCountTD[2], 1);
TextDrawColor(TurfCountTD[2], -3841);
TextDrawBackgroundColor(TurfCountTD[2], 255);
TextDrawBoxColor(TurfCountTD[2], 50);
TextDrawUseBox(TurfCountTD[2], 1);
TextDrawSetProportional(TurfCountTD[2], 1);
TextDrawSetSelectable(TurfCountTD[2], 0);

TurfCountTD[3] = TextDrawCreate(480.000000, 273.000000, "ld_bum:blkdot");
TextDrawFont(TurfCountTD[3], 4);
TextDrawLetterSize(TurfCountTD[3], 0.600000, 2.000000);
TextDrawTextSize(TurfCountTD[3], 24.000000, 19.000000);
TextDrawSetOutline(TurfCountTD[3], 1);
TextDrawSetShadow(TurfCountTD[3], 0);
TextDrawAlignment(TurfCountTD[3], 1);
TextDrawColor(TurfCountTD[3], 16777215);
TextDrawBackgroundColor(TurfCountTD[3], 255);
TextDrawBoxColor(TurfCountTD[3], 50);
TextDrawUseBox(TurfCountTD[3], 1);
TextDrawSetProportional(TurfCountTD[3], 1);
TextDrawSetSelectable(TurfCountTD[3], 0);

TurfCountTD[4] = TextDrawCreate(485.000000, 240.000000, "10");
TextDrawFont(TurfCountTD[4], 2);
TextDrawLetterSize(TurfCountTD[4], 0.358333, 1.850000);
TextDrawTextSize(TurfCountTD[4], 400.000000, 17.000000);
TextDrawSetOutline(TurfCountTD[4], 0);
TextDrawSetShadow(TurfCountTD[4], 0);
TextDrawAlignment(TurfCountTD[4], 1);
TextDrawColor(TurfCountTD[4], -16776961);
TextDrawBackgroundColor(TurfCountTD[4], 255);
TextDrawBoxColor(TurfCountTD[4], 50);
TextDrawUseBox(TurfCountTD[4], 0);
TextDrawSetProportional(TurfCountTD[4], 1);
TextDrawSetSelectable(TurfCountTD[4], 0);

TurfCountTD[5] = TextDrawCreate(485.000000, 273.000000, "10");
TextDrawFont(TurfCountTD[5], 2);
TextDrawLetterSize(TurfCountTD[5], 0.358333, 1.850000);
TextDrawTextSize(TurfCountTD[5], 400.000000, 17.000000);
TextDrawSetOutline(TurfCountTD[5], 0);
TextDrawSetShadow(TurfCountTD[5], 0);
TextDrawAlignment(TurfCountTD[5], 1);
TextDrawColor(TurfCountTD[5], -16776961);
TextDrawBackgroundColor(TurfCountTD[5], 255);
TextDrawBoxColor(TurfCountTD[5], 50);
TextDrawUseBox(TurfCountTD[5], 0);
TextDrawSetProportional(TurfCountTD[5], 1);
TextDrawSetSelectable(TurfCountTD[5], 0);

TurfCountTD[6] = TextDrawCreate(589.000000, 242.000000, "EASTSIDE BALLAS");
TextDrawFont(TurfCountTD[6], 2);
TextDrawLetterSize(TurfCountTD[6], 0.195833, 1.550000);
TextDrawTextSize(TurfCountTD[6], 400.000000, 17.000000);
TextDrawSetOutline(TurfCountTD[6], 1);
TextDrawSetShadow(TurfCountTD[6], 0);
TextDrawAlignment(TurfCountTD[6], 3);
TextDrawColor(TurfCountTD[6], -1);
TextDrawBackgroundColor(TurfCountTD[6], 255);
TextDrawBoxColor(TurfCountTD[6], 50);
TextDrawUseBox(TurfCountTD[6], 0);
TextDrawSetProportional(TurfCountTD[6], 1);
TextDrawSetSelectable(TurfCountTD[6], 0);

TurfCountTD[7] = TextDrawCreate(589.000000, 275.000000, "POLICE");
TextDrawFont(TurfCountTD[7], 2);
TextDrawLetterSize(TurfCountTD[7], 0.283333, 1.400000);
TextDrawTextSize(TurfCountTD[7], 400.000000, 17.000000);
TextDrawSetOutline(TurfCountTD[7], 1);
TextDrawSetShadow(TurfCountTD[7], 0);
TextDrawAlignment(TurfCountTD[7], 3);
TextDrawColor(TurfCountTD[7], -1);
TextDrawBackgroundColor(TurfCountTD[7], 255);
TextDrawBoxColor(TurfCountTD[7], 50);
TextDrawUseBox(TurfCountTD[7], 0);
TextDrawSetProportional(TurfCountTD[7], 1);
TextDrawSetSelectable(TurfCountTD[7], 0);
	
    PrioTD[0] = TextDrawCreate(428.000000, 9.000000, "Priority_Cooldown:");
	TextDrawFont(PrioTD[0], 2);
	TextDrawLetterSize(PrioTD[0], 0.162499, 1.449998);
	TextDrawTextSize(PrioTD[0], 400.000000, 17.000000);
	TextDrawSetOutline(PrioTD[0], 1);
	TextDrawSetShadow(PrioTD[0], 0);
	TextDrawAlignment(PrioTD[0], 1);
	TextDrawColor(PrioTD[0], -1);
	TextDrawBackgroundColor(PrioTD[0], 255);
	TextDrawBoxColor(PrioTD[0], 50);
	TextDrawUseBox(PrioTD[0], 0);
	TextDrawSetProportional(PrioTD[0], 1);
	TextDrawSetSelectable(PrioTD[0], 0);

	PrioTD[1] = TextDrawCreate(503.000000, 9.000000, "");
	TextDrawFont(PrioTD[1], 2);
	TextDrawLetterSize(PrioTD[1], 0.162499, 1.449998);
	TextDrawTextSize(PrioTD[1], 400.000000, 17.000000);
	TextDrawSetOutline(PrioTD[1], 1);
	TextDrawSetShadow(PrioTD[1], 0);
	TextDrawAlignment(PrioTD[1], 1);
	TextDrawColor(PrioTD[1], -1);
	TextDrawBackgroundColor(PrioTD[1], 255);
	TextDrawBoxColor(PrioTD[1], 50);
	TextDrawUseBox(PrioTD[1], 0);
	TextDrawSetProportional(PrioTD[1], 1);
	TextDrawSetSelectable(PrioTD[1], 0);
	
	PublicTD[0] = TextDrawCreate(421.000000, 110.000000, "_");
	TextDrawFont(PublicTD[0], 2);
	TextDrawLetterSize(PublicTD[0], 0.366665, 1.350000);
	TextDrawTextSize(PublicTD[0], 400.000000, 17.000000);
	TextDrawSetOutline(PublicTD[0], 1);
	TextDrawSetShadow(PublicTD[0], 0);
	TextDrawAlignment(PublicTD[0], 3);
	TextDrawColor(PublicTD[0], 9109759);
	TextDrawBackgroundColor(PublicTD[0], 255);
	TextDrawBoxColor(PublicTD[0], 50);
	TextDrawUseBox(PublicTD[0], 0);
	TextDrawSetProportional(PublicTD[0], 1);
	TextDrawSetSelectable(PublicTD[0], 0);

	PublicTD[1] = TextDrawCreate(421.000000, 135.000000, "_");
	TextDrawFont(PublicTD[1], 2);
	TextDrawLetterSize(PublicTD[1], 0.365999, -1.699998);
	TextDrawTextSize(PublicTD[1], 400.000000, 17.000000);
	TextDrawSetOutline(PublicTD[1], 1);
	TextDrawSetShadow(PublicTD[1], 0);
	TextDrawAlignment(PublicTD[1], 3);
	TextDrawColor(PublicTD[1], -16776961);
	TextDrawBackgroundColor(PublicTD[1], 255);
	TextDrawBoxColor(PublicTD[1], 50);
	TextDrawUseBox(PublicTD[1], 0);
	TextDrawSetProportional(PublicTD[1], 1);
	TextDrawSetSelectable(PublicTD[1], 0);

	TimeTD = TextDrawCreate(138.000000, 390.000000, "00:00");
	TextDrawFont(TimeTD, 2);
	TextDrawLetterSize(TimeTD, 0.287497, 1.149996);
	TextDrawTextSize(TimeTD, 400.000000, 17.000000);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetShadow(TimeTD, 0);
	TextDrawAlignment(TimeTD, 1);
	TextDrawColor(TimeTD, -1);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawBoxColor(TimeTD, 50);
	TextDrawUseBox(TimeTD, 0);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetSelectable(TimeTD, 0);

	// Unknwon Command Error textdraw
	UnknownTD[0] = TextDrawCreate(26.000000, 260.000000, "Error:");
	TextDrawBackgroundColor(UnknownTD[0], 255);
	TextDrawFont(UnknownTD[0], 2);
	TextDrawLetterSize(UnknownTD[0], 0.159999, 1.000000);
	TextDrawColor(UnknownTD[0], SERVER_COLOR);
	TextDrawSetOutline(UnknownTD[0], 0);
	TextDrawSetProportional(UnknownTD[0], 1);
	TextDrawSetShadow(UnknownTD[0], 1);
	TextDrawSetSelectable(UnknownTD[0], 0);

	UnknownTD[1] = TextDrawCreate(26.000000, 269.000000, "Unknown Command, please check /help");
	TextDrawBackgroundColor(UnknownTD[1], 255);
	TextDrawFont(UnknownTD[1], 2);
	TextDrawLetterSize(UnknownTD[1], 0.149999, 0.899999);
	TextDrawColor(UnknownTD[1], -1);
	TextDrawSetOutline(UnknownTD[1], 0);
	TextDrawSetProportional(UnknownTD[1], 1);
	TextDrawSetShadow(UnknownTD[1], 1);
	TextDrawSetSelectable(UnknownTD[1], 0);

	UnknownTD[2] = TextDrawCreate(167.000000, 261.000000, "New Textdraw");
	TextDrawBackgroundColor(UnknownTD[2], 255);
	TextDrawFont(UnknownTD[2], 1);
	TextDrawLetterSize(UnknownTD[2], 0.000000, 1.000000);
	TextDrawColor(UnknownTD[2], -1);
	TextDrawSetOutline(UnknownTD[2], 0);
	TextDrawSetProportional(UnknownTD[2], 1);
	TextDrawSetShadow(UnknownTD[2], 1);
	TextDrawUseBox(UnknownTD[2], 1);
	TextDrawBoxColor(UnknownTD[2], 96);
	TextDrawTextSize(UnknownTD[2], -3.000000, 0.000000);
	TextDrawSetSelectable(UnknownTD[2], 0);

	UnknownTD[3] = TextDrawCreate(7.000000, 258.000000, "?");
	TextDrawBackgroundColor(UnknownTD[3], 255);
	TextDrawFont(UnknownTD[3], 2);
	TextDrawLetterSize(UnknownTD[3], 0.620000, 2.499999);
	TextDrawColor(UnknownTD[3], -1);
	TextDrawSetOutline(UnknownTD[3], 0);
	TextDrawSetProportional(UnknownTD[3], 1);
	TextDrawSetShadow(UnknownTD[3], 1);
	TextDrawSetSelectable(UnknownTD[3], 0);

	// Blood Effects
    Blood[0] = TextDrawCreate(86.666648, 121.814811, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[0], 0.000000, 0.000000);
    TextDrawTextSize(Blood[0], 24.000000, 34.000000);
    TextDrawAlignment(Blood[0], 1);
    TextDrawColor(Blood[0], -1);
    TextDrawSetShadow(Blood[0], 0);
    TextDrawSetOutline(Blood[0], 0);
    TextDrawBackgroundColor(Blood[0], 255);
    TextDrawFont(Blood[0], 4);
    TextDrawSetProportional(Blood[0], 0);
    TextDrawSetShadow(Blood[0], 0);

    Blood[1] = TextDrawCreate(477.333312, 246.674102, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[1], 0.000000, 0.000000);
    TextDrawTextSize(Blood[1], 36.000000, 41.000000);
    TextDrawAlignment(Blood[1], 1);
    TextDrawColor(Blood[1], -1);
    TextDrawSetShadow(Blood[1], 0);
    TextDrawSetOutline(Blood[1], 0);
    TextDrawBackgroundColor(Blood[1], 255);
    TextDrawFont(Blood[1], 4);
    TextDrawSetProportional(Blood[1], 0);
    TextDrawSetShadow(Blood[1], 0);

    Blood[2] = TextDrawCreate(24.000041, 249.992660, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[2], 0.000000, 0.000000);
    TextDrawTextSize(Blood[2], 70.000000, 57.000000);
    TextDrawAlignment(Blood[2], 1);
    TextDrawColor(Blood[2], -1);
    TextDrawSetShadow(Blood[2], 0);
    TextDrawSetOutline(Blood[2], 0);
    TextDrawBackgroundColor(Blood[2], 255);
    TextDrawFont(Blood[2], 4);
    TextDrawSetProportional(Blood[2], 0);
    TextDrawSetShadow(Blood[2], 0);

    Blood[3] = TextDrawCreate(546.333374, 323.414916, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[3], 0.000000, 0.000000);
    TextDrawTextSize(Blood[3], 70.000000, 57.000000);
    TextDrawAlignment(Blood[3], 1);
    TextDrawColor(Blood[3], -1);
    TextDrawSetShadow(Blood[3], 0);
    TextDrawSetOutline(Blood[3], 0);
    TextDrawBackgroundColor(Blood[3], 255);
    TextDrawFont(Blood[3], 4);
    TextDrawSetProportional(Blood[3], 0);
    TextDrawSetShadow(Blood[3], 0);

    Blood[4] = TextDrawCreate(276.666717, 340.007568, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[4], 0.000000, 0.000000);
    TextDrawTextSize(Blood[4], 70.000000, 57.000000);
    TextDrawAlignment(Blood[4], 1);
    TextDrawColor(Blood[4], -1);
    TextDrawSetShadow(Blood[4], 0);
    TextDrawSetOutline(Blood[4], 0);
    TextDrawBackgroundColor(Blood[4], 255);
    TextDrawFont(Blood[4], 4);
    TextDrawSetProportional(Blood[4], 0);
    TextDrawSetShadow(Blood[4], 0);

    Blood[5] = TextDrawCreate(442.666748, 12.718672, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[5], 0.000000, 0.000000);
    TextDrawTextSize(Blood[5], 17.000000, 25.000000);
    TextDrawAlignment(Blood[5], 1);
    TextDrawColor(Blood[5], -1);
    TextDrawSetShadow(Blood[5], 0);
    TextDrawSetOutline(Blood[5], 0);
    TextDrawBackgroundColor(Blood[5], 255);
    TextDrawFont(Blood[5], 4);
    TextDrawSetProportional(Blood[5], 0);
    TextDrawSetShadow(Blood[5], 0);

    Blood[6] = TextDrawCreate(201.666732, 16.866807, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[6], 0.000000, 0.000000);
    TextDrawTextSize(Blood[6], 48.000000, 49.000000);
    TextDrawAlignment(Blood[6], 1);
    TextDrawColor(Blood[6], -1);
    TextDrawSetShadow(Blood[6], 0);
    TextDrawSetOutline(Blood[6], 0);
    TextDrawBackgroundColor(Blood[6], 255);
    TextDrawFont(Blood[6], 4);
    TextDrawSetProportional(Blood[6], 0);
    TextDrawSetShadow(Blood[6], 0);

    Blood[7] = TextDrawCreate(117.000106, 148.777893, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[7], 0.000000, 0.000000);
    TextDrawTextSize(Blood[7], 127.000000, 70.000000);
    TextDrawAlignment(Blood[7], 1);
    TextDrawColor(Blood[7], -1);
    TextDrawSetShadow(Blood[7], 0);
    TextDrawSetOutline(Blood[7], 0);
    TextDrawBackgroundColor(Blood[7], 255);
    TextDrawFont(Blood[7], 4);
    TextDrawSetProportional(Blood[7], 0);
    TextDrawSetShadow(Blood[7], 0);

    Blood[8] = TextDrawCreate(428.666717, 118.911254, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[8], 0.000000, 0.000000);
    TextDrawTextSize(Blood[8], 59.000000, 50.000000);
    TextDrawAlignment(Blood[8], 1);
    TextDrawColor(Blood[8], -1);
    TextDrawSetShadow(Blood[8], 0);
    TextDrawSetOutline(Blood[8], 0);
    TextDrawBackgroundColor(Blood[8], 255);
    TextDrawFont(Blood[8], 4);
    TextDrawSetProportional(Blood[8], 0);
    TextDrawSetShadow(Blood[8], 0);

	Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
    Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
    Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
    Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
    Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
    Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
    Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
    Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
	Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);
	Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);

    CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 52.789,-1538.231,5.003,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 56.351,-1526.141,4.884,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 1809.4454,811.5417,10.8997,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 1783.6510,803.8441,11.0599,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 50.1882,-1282.9015,14.0709,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 68.1923,-1304.1959,12.4487,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 517.2233,472.0292,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, 523.5045,473.5910,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, -169.2154,374.7297,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Type '/pass' to open the toll gate. ))",COLOR_GREY, -163.9199,370.8330,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
    
    CreateDynamic3DTextLabel("[Jewelry]\n/robjew To Start The Heist.", COLOR_YELLOW, 1833.0172, -1396.1160, 13.4345, 3.0);
    CreateDynamic3DTextLabel("[Jewelry]\n/dlock To Destroy The Lock.", COLOR_YELLOW, 1828.9672, -1392.7148, 13.4416, 3.0);
    CreateDynamic3DTextLabel("[Jewelry]\n/lootjewbox To Start Loot.", COLOR_YELLOW, 1819.4634, -1395.6161, 13.4565, 3.0);
    
    CreateDynamic3DTextLabel("[CCTV]\n/hackcctv To Start The Hacking The CCTV Footage.", COLOR_YELLOW, 288.643737, 1333.807250, 2023.838012, 3.0);
    
    CreateDynamic3DTextLabel("[Fleeca]\n/robfleeca To Start The Heist.", COLOR_YELLOW, 693.968872, -1183.180541, 15.950567, 3.0);
    CreateDynamic3DTextLabel("[Fleeca]\n/flock To Destroy The Lock.", COLOR_YELLOW, 697.270263, -1187.651855, 15.980570, 3.0);
    
   	CreateDynamic3DTextLabel("KayoPeriko Shop\n"SVRCLR"(( Type '/kshop' to Use Kayoperiko Shop. ))", COLOR_GREEN, 870.425903, -24.951305, 63.982223, 10.0);
	CreateDynamicPickup(1239, 1, 870.425903, -24.951305, 63.982223);
	
	CreateDynamic3DTextLabel("Yacht Robbery\n"SVRCLR"(( Type '/Robyacht' to Rob The Yacht. ))", COLOR_GREEN, 267.896453, -2154.955322, 2.272335, 10.0);
	CreateDynamicPickup(1550, 1, 267.896453, -2154.955322, 2.272335);
    
   	CreateDynamic3DTextLabel("Self Repair Points\n"SVRCLR"(( Type '/selfrepair' to selfrepair. ))", COLOR_GREEN, 589.505859, -1494.062011, 15.382656, 10.0);
	CreateDynamicPickup(1239, 1, 589.505859, -1494.062011, 15.382656);
	
    CreateDynamic3DTextLabel("Self Repair Points\n"SVRCLR"(( Type '/selfrepair' to selfrepair. ))", COLOR_GREEN, 386.922851, -1522.228149, 32.278041, 10.0);
	CreateDynamicPickup(1239, 1, 386.922851, -1522.228149, 32.278041);

	CreateDynamic3DTextLabel("Self Repair Points\n"SVRCLR"(( Type '/selfrepair' to selfrepair. ))", COLOR_GREEN, 1933.960449, -1857.269653, 13.561939, 10.0);
	CreateDynamicPickup(1239, 1, 1933.960449, -1857.269653, 13.561939);
	
	   	CreateDynamic3DTextLabel("Faction Repair Points\n"SVRCLR"(( Type '/facrepair' to selfrepair. ))", COLOR_GREEN, 1599.714843, -1621.765502, 13.462455, 10.0);
	CreateDynamicPickup(1239, 1, 1599.714843, -1621.765502, 13.462455);

    CreateDynamic3DTextLabel("Faction Repair Points\n"SVRCLR"(( Type '/facrepair' to selfrepair. ))", COLOR_GREEN, 1135.154663, -1325.867919, 13.617612, 10.0);
	CreateDynamicPickup(1239, 1, 1135.154663, -1325.867919, 13.617612);

	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades and '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 963.934387, -1656.234375, 13.635804,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades and '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 957.266540, -1669.904907, 13.635804,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamicPickup(19131, 1, 963.934387, -1656.234375, 13.635804);
	CreateDynamicPickup(19131, 1, 957.266540, -1669.904907, 13.635804);
	
	CreateDynamic3DTextLabel("Bank Robbery\n"SVRCLR"(( Type '/robbank' to do Bank Robbery. ))", COLOR_GREEN, 288.942382, 1331.250000,  2023.838012, 10.0);
	CreateDynamicPickup(1239, 1, 288.942382, 1331.250000,  2023.838012);

    CreateDynamic3DTextLabel("Pawnshop\n"SVRCLR"[Type '/exchange' to exchange your diamonds.]",COLOR_GREY, 81.8814, 2503.2380, 2001.1209,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	CreateDynamic3DTextLabel("'/viplocker'\n"SVRCLR"(( To open the donator's locker.\nFor Platinum Donator type /vweapons ))",COLOR_GREY, 1991.625488, 1017.629516, 994.890625,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	gPrisonCells[0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);

	for(new i = 0; i < 24; i ++)
	{
		SetDynamicObjectMaterial(gPrisonCells[i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	}
	// Hospital Garage Doors (Main)
	CreateDynamicObject(10149, 1150.004394, -1345.316284, 14.201147, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(10149, 2007.520874, -1408.116088, 16.992187, 0.000000, 0.000000, 0.000000);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1141.6477, -1326.3889, 13.6398, 10.0);
    CreateDynamicPickup(1240, 1, 1141.6477, -1326.3889, 13.6398);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2007.6256, -1410.2455, 16.9922, 10.0);
    CreateDynamicPickup(1240, 1, 2007.6256, -1410.2455, 16.9922);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1159.8816, -1312.7484, 25.6864, 10.0);
    CreateDynamicPickup(1240, 1, 1159.8816, -1312.7484, 25.6864);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1158.471557, -1367.879028, 26.632408, 10.0);
    CreateDynamicPickup(1240, 1, 1158.471557, -1367.879028, 26.632408);

    CreateDynamic3DTextLabel("/getpaper\nto start your job.", COLOR_DOCTOR, 645.2584, -1341.5248, 13.5544, 10.0);
    CreateDynamicPickup(11736, 1, 645.2584, -1341.5248, 13.5544);
    
    CreateVehicle(519, 1992.9642, -2387.8728, 14.5682, 0.0000, -1, -1, 100);

	// Job Vehicles (Main)
	pizzaVehicles[0] = AddStaticVehicleEx(586, 978.7726, -1308.4243, 12.9222, 0.0000, 5, 1, 300); // bike 1
	pizzaVehicles[1] = AddStaticVehicleEx(586, 984.3414, -1308.1840, 12.9222, 0.0000, 5, 1, 300); // bike 2
	pizzaVehicles[2] = AddStaticVehicleEx(586, 1008.2693, -1308.2881, 12.9222, 0.0000, 5, 1, 300); // bike 3
	pizzaVehicles[3] = AddStaticVehicleEx(586, 1002.0175, -1308.2839, 12.9222, 0.0000, 5, 1, 300); // bike 4
	pizzaVehicles[4] = AddStaticVehicleEx(586, 989.5507, -1308.3434, 12.9222, 0.0000, 5, 1, 300); // bike 5
	pizzaVehicles[5] = AddStaticVehicleEx(586, 996.0358, -1308.3828, 12.9222, 3.0000, 5, 1, 300); // bike 6

	forkliftVehicles[0] = AddStaticVehicleEx(530, 2778.5310, -2425.0867, 13.3935, 0.0000, 6, 6, 600); // forklift 1
	forkliftVehicles[1] = AddStaticVehicleEx(530, 2778.6404, -2410.1257, 13.4024, 180.0000, 6, 6, 600); // forklift 2
	forkliftVehicles[2] = AddStaticVehicleEx(530, 2787.8252, -2425.3438, 13.3990, 0.0000, 6, 6, 600); // forklift 3
	forkliftVehicles[3] = AddStaticVehicleEx(530, 2788.1560, -2410.3755, 13.3962, 180.0000, 6, 6, 600); // forklift 4
	forkliftVehicles[4] = AddStaticVehicleEx(530, 2795.1589, -2425.3408, 13.3954, 0.0000, 6, 6, 600); // forklift 5
	forkliftVehicles[5] = AddStaticVehicleEx(530, 2795.1826, -2409.9617, 13.3972, 180.0000, 6, 6, 600); // forklift 6

	NewsVehicles[0] = AddStaticVehicleEx(586, 620.0983, -1351.3011, 13.5476, 138.3199, 271, 1, 5000); // bike 1
	NewsVehicles[1] = AddStaticVehicleEx(586, 620.3137, -1356.1976, 13.5665,120.1370, 271, 1, 5000); // bike 2
	NewsVehicles[2] = AddStaticVehicleEx(586, 620.3210, -1360.3698, 13.5899, 270.6175, 271, 1, 5000); // bike 3
	NewsVehicles[3] = AddStaticVehicleEx(586, 619.5326, -1364.3438 ,13.6122, 276.4736, 271, 1, 5000); // bike 4
	NewsVehicles[4] = AddStaticVehicleEx(586, 619.8687, -1369.6686, 13.6421, 269.5457, 271, 1, 5000); // bike 5
	NewsVehicles[5] = AddStaticVehicleEx(586, 619.4922, -1373.5175, 13.6687, 266.0341, 271, 1, 5000); // bike 6

/*	towtruck[0] = AddStaticVehicleEx(525,1927.4314,-1598.9816,13.4271,270.1710,0,3,300); // 1
	towtruck[1] = AddStaticVehicleEx(525,1927.5105,-1594.0903,13.4275,271.5917,0,3,300); // 2
	towtruck[2] = AddStaticVehicleEx(525,1927.3196,-1589.0690,13.4458,271.8348,0,3,300); // 3
*/
	policevehicles[0] = AddStaticVehicleEx(497,1564.6361,-1648.9003,28.5652,89.8603,0,1,5000); // 1
	policevehicles[1] = AddStaticVehicleEx(497,1564.5629,-1702.0688,28.5541,91.3096,0,1,5000); // 2

	courierVehicles[0] = AddStaticVehicleEx(414, 2428.4609, -2079.6228, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[1] = AddStaticVehicleEx(414, 2435.7002, -2079.4829, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[2] = AddStaticVehicleEx(414, 2440.4299, -2079.9658, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[3] = AddStaticVehicleEx(499, 2445.4907, -2079.4810, 13.6144, 180.0, 11,11, 300); // benson
	courierVehicles[4] = AddStaticVehicleEx(499, 2450.9763, -2079.6001, 13.6142, 180.0, 11,11, 300); // benson
	courierVehicles[5] = AddStaticVehicleEx(498, 2428.3293, -2102.2959, 13.6132, 270.0, 11,11, 300); // boxville
	courierVehicles[6] = AddStaticVehicleEx(498, 2428.3030, -2107.6719, 13.6155, 270.0, 11,11, 300); // boxville
    courierVehicles[7] = AddStaticVehicleEx(499, 2455.4595, -2079.3115, 13.6159, 180.0, 11,11, 300); // benson
    courierVehicles[8] = AddStaticVehicleEx(499, 2461.5056, -2079.6157, 13.6145, 180.0, 11,11, 300); // benson

    taxiVehicles[0] = AddStaticVehicleEx(420, 1775.6141, -1860.0100, 13.2745, 269.2006, 6, 1, 300); // taxi 1
	taxiVehicles[1] = AddStaticVehicleEx(420, 1763.0121, -1860.0037, 13.2723, 271.2998, 6, 1, 300); // taxi 2
	taxiVehicles[2] = AddStaticVehicleEx(420, 1748.9358, -1859.9502, 13.2721, 270.3943, 6, 1, 300); // taxi 3
	taxiVehicles[3] = AddStaticVehicleEx(420, 1734.6754, -1859.9305, 13.2740, 270.5646, 6, 1, 300); // taxi 4

	// Driving Test (Main)
    testVehicles[0] = AddStaticVehicleEx(400, 2476.4719, -1953.1958, 13.2648, 0.4908, 1,1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(400, 2479.5574, -1953.6589,13.2601, 359.4827, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(400, 2482.9072, -1953.8733, 13.2582, 358.4310, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(400, 2486.1072, -1953.9399, 13.2576, 0.4410, 1, 1, 10); // test car 4
	testVehicles[4] = AddStaticVehicleEx(400, 2489.2273, -1953.8726, 13.2582, 1.1470, 1, 1, 10); // test car 5
	testVehicles[5] = AddStaticVehicleEx(400, 2492.3347, -1953.9076 ,13.2579, 359.0074, 1, 1, 10); // test car 6
	testVehicles[6] = AddStaticVehicleEx(400, 2495.4458, -1954.0710, 13.2564, 0.1837, 1, 1, 10); // test car 7
	testVehicles[7] = AddStaticVehicleEx(400, 2498.9976, -1953.9149, 13.2578, 358.1912, 1, 1, 10); // test car 8
	testVehicles[8] = AddStaticVehicleEx(400, 2502.0669, -1953.5017,13.2621, 359.2635, 1, 1, 10); // test car 9


	gettime(.hour = gHour);
 	gettime(.hour = gWorldTime);
	SetWorldTime(gWorldTime);

	for(new i = 0; i < MAX_LANDS; i ++)
	{
	    ReloadAllLandObjects(i);
	    ReloadLand(i);
	}
	// Timers
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("TDUpdates", 8000, true);
	SetTimer("FuelTimer", 75000, true);
	SetTimer("InjuredTimer", 5000, true);
	SetTimer("LotteryUpdate", 2700000, true);
	SetTimerEx("RandomFire", 7200000, true, "i", 1);

	// Misc
    LoadServerInfo();
    RefreshTime();
    ResetEvent();
    ResetRobbery();
	gLastSave = 0;
	gLastFix = 0;

	SendRconCommand("hostname \t      Mallu Gamers Mobile Community V3.0[REBORN]");
	SendRconCommand("weburl \t"SERVER_URL"");
	SetGameModeText(REVISION);
	print(SERVER_NAME);
	// Border BG-ZG 2
	new tmpobjid;
	tmpobjid = CreateDynamicObject(18766,70.748,-1306.056,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.956,-1288.669,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,45.729,-1276.558,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,46.969,-1281.114,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,42.827,-1278.711,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,72.016,-1310.522,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,52.047,-1290.854,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,51.033,-1286.384,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,63.031,-1298.765,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,66.926,-1301.117,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,65.597,-1296.385,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,74.939,-1308.251,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,71.390,-1305.729,11.374,0.000,0.000,-49.339);
	tmpobjid = CreateDynamicObject(4642,45.687,-1279.371,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,72.817,-1307.641,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,52.394,-1288.195,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,65.381,-1298.697,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(966,50.972,-1286.448,12.811,0.000,0.000,305.521);
	// Border BG-SA 2
	tmpobjid = CreateDynamicObject(18762,528.709,472.548,21.722,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.149,478.753,24.532,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.488,472.244,21.551,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,515.241,475.290,24.558,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,518.088,471.233,24.573,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.479,472.262,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.911,467.199,24.579,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,517.779,464.663,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,517.768,464.680,21.783,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.539,480.218,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,528.709,472.528,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.525,480.231,21.913,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,525.837,470.665,24.565,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,522.995,474.713,24.559,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(4642,526.546,475.264,19.328,0.000,0.000,127.839);
	tmpobjid = CreateDynamicObject(4642,513.856,470.669,19.328,0.000,0.000,307.676);
	tmpobjid = CreateDynamicObject(966,514.699,468.479,17.927,0.000,0.000,218.256);
	tmpobjid = CreateDynamicObject(966,525.697,477.131,17.927,0.000,0.000,38.170);
	tmpobjid = CreateDynamicObject(3785,529.058,472.096,20.172,0.000,0.000,311.995);
	tmpobjid = CreateDynamicObject(3785,518.181,464.204,20.172,0.000,0.000,314.744);
	tmpobjid = CreateDynamicObject(14699,527.491,469.917,22.644,0.000,0.000,31.781);
	tmpobjid = CreateDynamicObject(14699,519.045,471.209,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,521.971,466.295,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,523.986,475.240,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(19121,524.896,478.571,18.432,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,516.247,466.653,18.432,0.000,0.000,0.000);
	// Border BG-SA 3
	tmpobjid = CreateDynamicObject(18762,-174.415,369.180,15.000,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-162.478,368.772,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-159.026,375.341,14.732,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-174.413,369.160,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-167.718,377.790,17.106,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-167.272,370.147,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-172.066,371.521,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-162.906,376.464,17.086,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-161.526,365.598,14.111,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-161.545,365.605,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.902,378.478,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-159.028,375.315,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.907,378.506,14.881,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4642,-173.404,372.267,12.282,0.000,0.000,256.216);
	tmpobjid = CreateDynamicObject(966,-173.223,374.666,10.971,0.000,0.000,164.770);
	tmpobjid = CreateDynamicObject(4642,-160.784,369.254,12.282,0.000,0.000,74.593);
	tmpobjid = CreateDynamicObject(966,-159.701,371.221,10.971,0.000,0.000,346.603);
	tmpobjid = CreateDynamicObject(19121,-173.342,368.963,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,-162.446,366.341,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(14680,-162.359,366.875,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-168.301,367.673,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-167.511,372.740,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-160.851,371.996,15.100,0.000,0.000,349.729);
	// Border BG-ZG
	tmpobjid = CreateDynamicObject(18766,65.275,-1525.567,11.132,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,64.275,-1532.036,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,40.683,-1538.132,11.085,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,56.121,-1530.577,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,42.118,-1528.339,11.079,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,43.076,-1522.761,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,45.581,-1538.900,11.081,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,50.323,-1539.604,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,46.863,-1529.010,11.080,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,51.274,-1529.712,11.021,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,55.144,-1540.337,11.048,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.101,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,47.993,-1523.542,11.060,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,52.668,-1524.232,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,57.179,-1524.975,11.142,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,61.017,-1525.462,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,55.337,-1521.070,5.615,0.000,0.000,171.834);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,53.546,-1543.133,5.615,0.000,0.000,358.505);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,55.991,-1540.373,11.038,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.050,-1540.918,11.088,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,62.963,-1541.336,11.200,90.000,90.000,352.731);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.889,-1532.820,8.426,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.015,-1531.875,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.869,-1532.820,6.620,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.995,-1531.873,8.517,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,8.936,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,53.604,-1541.573,4.054,0.000,0.000,263.574);
	tmpobjid = CreateDynamicObject(966,55.162,-1522.364,4.054,0.000,0.000,90.000);
	tmpobjid = CreateDynamicObject(1237,55.022,-1529.924,4.251,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(1237,54.654,-1534.033,4.251,0.000,0.000,0.000);
	//======================
	Create3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}1\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-20.4854,1574.7264,12.7500,30,0,1);
	Create3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}2\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-16.1826,1575.7219,12.7500,30,0,1);
	Create3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}3\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-9.6513,1574.4042,12.7500,30,0,1);
	Create3DTextLabel("Chop: {C1C1C1}Average sized {FFFFFF}meat {00FF00}4\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-3.8314,1573.5138,12.7500,30,0,1);
	Create3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}5\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,0.9510,1571.9641,19.6841,30,0,1);
	Create3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}6\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-0.3898,1564.7903,19.6841,30,0,1);
	Create3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}7\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-1.7840,1557.8475,19.6841,30,0,1);
	Create3DTextLabel("Chop: {FFFF00}Big sized {FFFFFF}meat {00FF00}8\n{C1C1C1}To start chopping meats, just press 'N'.",0xFFFFFFFF,-3.0651,1551.0083,19.6841,30,0,1);
    Create3DTextLabel("Meat Chopper Job\nType [/meatchop] to get this job.",0x00FF00FF,-16.9641,1543.6111,12.7560,20.0,0);
    CreateDynamicPickup(1275, 23, -16.9641,1543.6111,12.7560, 0);

    	/* Custom Coding JM */

/*	// MY HOUSE
	CreateDynamicObject(19599, 2387.04688, -1790.08301, 15.01500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19598, 2387.04858, -1790.08813, 15.01500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19855, 2348.75977, -1784.58557, 12.55650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19854, 2348.74976, -1784.58582, 12.55650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19863, 2366.72046, -1776.08105, 15.07270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19856, 2348.74976, -1784.58582, 12.55650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19857, 2343.92676, -1774.72900, 14.53410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(5837, 2376.64014, -1764.64160, 14.19200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(5837, 2365.91089, -1764.47253, 14.19200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19912, 2379.87793, -1759.50330, 15.31070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2403.94702, -1759.19043, 12.51710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2391.90674, -1759.14404, 12.52310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2379.92603, -1759.16394, 12.52310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2356.36987, -1759.16394, 12.52310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2344.41797, -1759.16394, 12.52310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2338.40991, -1759.16394, 12.52310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2338.36304, -1771.19031, 12.51710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2338.36304, -1783.12830, 12.51710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2338.36304, -1795.05725, 12.51710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2338.36304, -1806.98633, 12.51710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2338.36304, -1818.91528, 12.51710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2350.41797, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2362.34692, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2374.27588, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2386.20483, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2398.13379, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2403.94702, -1771.11938, 12.51710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2403.94702, -1783.04834, 12.51710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2403.94702, -1794.97742, 12.51710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2403.94702, -1806.90637, 12.51710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2404.13770, -1818.96692, 12.52310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19786, 2348.69946, -1780.43274, 15.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2090, 2348.76978, -1785.43115, 13.20770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, 2344.18237, -1788.36926, 13.25570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2205, 2344.81323, -1785.34241, 13.25570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19893, 2344.85938, -1784.68591, 14.18790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11706, 2344.86816, -1783.02258, 13.25570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2738, 2348.33374, -1779.87646, 13.82610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2517, 2343.93091, -1779.61597, 13.22610,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2523, 2349.20239, -1777.00781, 13.26380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 2344.78857, -1797.28284, 13.90380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 2344.54248, -1789.68408, 13.27350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2339, 2344.73926, -1790.75073, 13.25830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 2344.65381, -1791.64722, 13.25060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1594, 2347.20532, -1794.64160, 13.74500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 2349.95703, -1795.42249, 13.74500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 2351.15063, -1793.01038, 13.74500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2364.17065, -1793.88940, 13.27640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19787, 2363.07983, -1789.07495, 15.40380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2360.20874, -1792.50745, 13.27640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1728, 2365.55420, -1790.71252, 13.27640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2126, 2362.54834, -1791.81897, 13.25320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2353.55713, -1791.05212, 13.27860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2353.55713, -1782.53613, 13.27860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2353.55713, -1779.95410, 13.27860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2359.22314, -1780.44409, 13.27860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2359.37622, -1785.92505, 13.27860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19815, 2359.29224, -1774.25586, 14.04910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19899, 2359.74927, -1777.35693, 12.53310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(936, 2359.93750, -1774.37659, 13.02090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2957, 2382.49390, -1787.78735, 14.19640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2957, 2382.49390, -1782.47742, 14.19640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(714, 2388.07886, -1808.27588, 10.91680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(669, 2351.40552, -1806.61890, 12.89844,   3.14159, -0.03491, -3.14159);
	CreateDynamicObject(3651, 2290.26855, -1771.00696, 15.38670,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3655, 2317.72266, -1777.25244, 15.37480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3655, 2271.38330, -1814.88464, 15.44000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10847, 2247.87061, -1801.62219, 18.97210,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3517, 2330.93530, -1820.35828, 23.41990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 2319.70923, -1823.58044, 23.41990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 2324.24609, -1817.06616, 23.41990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(671, 2329.47168, -1802.98560, 12.63090,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(673, 2289.52197, -1828.98608, 12.63090,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(673, 2272.03003, -1831.51721, 12.63090,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(673, 2252.80884, -1834.45044, 12.63090,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(673, 2235.08838, -1836.57434, 12.63090,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(4100, 2326.25708, -1759.62122, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(4100, 2312.53198, -1759.58618, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(4100, 2287.80908, -1759.58618, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(4100, 2274.94189, -1759.58618, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(4100, 2250.34399, -1759.58618, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(4100, 2238.65771, -1759.58618, 15.13190,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(19869, 2231.40649, -1762.15796, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1767.32605, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1772.49402, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1777.66199, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2229.59741, -1782.15356, 12.54600,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(19869, 2229.59741, -1788.92957, 12.54600,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(19869, 2231.40649, -1793.37000, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1798.54395, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1803.73792, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2231.40649, -1808.93188, 12.54600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18762, 2231.92188, -1811.94885, 13.06150,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18765, 2236.99878, -1764.94312, 10.06690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 2236.99658, -1774.92322, 10.06690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 2246.99878, -1764.94312, 10.06690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 2246.99023, -1774.90515, 10.06690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19467, 2259.15991, -1759.60754, 11.96510,   -54.97800, 180.00000, 0.00000);
	CreateDynamicObject(19467, 2265.57178, -1759.60754, 11.96510,   -54.97800, 180.00000, 0.00000);
	CreateDynamicObject(8041, 2262.41357, -1758.33643, 18.18060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18765, 2262.34180, -1764.87512, 10.07110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 2254.84521, -1764.87512, 7.57210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19467, 2252.17822, -1762.12988, 11.98510,   -54.97800, 180.00000, 90.00000);
	CreateDynamicObject(19467, 2252.17822, -1766.40088, 11.98510,   -54.97800, 180.00000, 90.00000);
	CreateDynamicObject(4641, 2252.14429, -1770.27905, 13.41630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2267.07349, -1759.49060, 11.76950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2263.43555, -1759.49060, 11.76950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19467, 2262.37573, -1759.60754, 11.96710,   -54.97800, 180.00000, 0.00000);
	CreateDynamicObject(3578, 2261.30542, -1759.49060, 11.76950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2257.59351, -1759.49060, 11.76950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19126, 2262.30444, -1760.71545, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2262.30444, -1762.26245, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2261.93896, -1763.94360, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2260.90332, -1765.11914, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2259.25732, -1765.16760, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2257.46680, -1765.16760, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3005, 2259.37695, -1797.91028, 12.55410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1334, 2242.49951, -1792.00964, 13.32640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1334, 2247.39551, -1792.00964, 13.32640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 2233.61011, -1776.67004, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2233.61011, -1773.33801, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2233.61011, -1769.90796, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2233.61011, -1766.67395, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2233.61011, -1763.04797, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2250.36816, -1776.67004, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2250.36816, -1773.33801, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2241.74414, -1776.67004, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2241.74414, -1773.33801, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2241.74414, -1769.90796, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2241.74414, -1766.67395, 10.82250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19126, 2253.81421, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2255.98071, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2258.52710, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2261.03223, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2263.25610, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2265.61255, -1769.76453, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2267.17578, -1768.60876, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2267.17578, -1766.50684, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2267.17578, -1764.40466, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2267.17578, -1762.09497, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2267.17578, -1760.02271, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(856, 2283.39380, -1820.01343, 12.76160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2272.46851, -1815.93140, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2274.33057, -1818.24048, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2272.15723, -1823.79688, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2275.98682, -1829.50940, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2284.47192, -1816.35547, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2282.45264, -1818.89819, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19839, 2288.87036, -1829.12805, 12.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 2251.98462, -1774.67346, 12.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2251.98462, -1777.27356, 12.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2249.45483, -1779.87024, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 2244.18066, -1779.87024, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 2234.63647, -1779.87024, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 2239.38379, -1779.87024, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2227.60400, -1786.93896, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2227.60400, -1784.17712, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2227.60400, -1785.55493, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2299.61621, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2302.14136, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2297.09595, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 2255.67065, -1834.06982, 12.80250,   0.00000, 0.00000, -80.60800);
	CreateDynamicObject(1280, 2249.81885, -1834.99036, 12.80250,   0.00000, 0.00000, -80.60800);
	CreateDynamicObject(1280, 2237.93018, -1836.30066, 12.80250,   0.00000, 0.00000, -80.60800);
	CreateDynamicObject(1280, 2232.21191, -1837.16760, 12.80250,   0.00000, 0.00000, -80.60800);
	CreateDynamicObject(16335, 2262.75977, -1828.05554, -42.79670,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(712, 2331.99463, -1761.14124, 21.89210,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 2320.81982, -1761.14124, 21.89210,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 2310.36426, -1761.14124, 21.89210,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 2288.62134, -1761.14124, 21.89210,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 2277.18311, -1761.14124, 21.89210,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(19838, 2273.81274, -1829.24963, 12.53990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2334.79761, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2338.10620, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2336.45996, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(922, 2236.42285, -1794.89868, 13.41310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(922, 2236.42480, -1796.45081, 13.41310,   0.00000, 0.00000, 5.00000);
	CreateDynamicObject(922, 2236.48218, -1799.26306, 13.41310,   0.00000, 0.00000, 39.00000);
	CreateDynamicObject(1558, 2241.81348, -1812.29504, 13.11390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14449, 2306.85425, -1776.24365, 12.83600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18236, 2274.63794, -1789.48828, 12.40240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18066, 2278.81519, -1786.97473, 14.75110,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(832, 2256.15747, -1775.40576, 14.21550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(837, 2284.30908, -1789.78320, 12.98350,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(737, 2266.01367, -1783.34814, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 2266.01367, -1770.52209, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 2384.98096, -1791.93994, 13.22640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 2392.01709, -1791.93994, 13.22640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12940, 2298.61987, -1809.97375, 16.36970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1334, 2299.56323, -1808.94690, 13.32640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2296.14160, -1798.42041, 13.34630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2303.00952, -1798.42041, 13.34630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2303.94336, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 2295.59180, -1759.40881, 13.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2593, 2344.51343, -1772.12573, 14.11600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11707, 2347.16919, -1780.29492, 14.32200,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2519, 2344.71387, -1778.31653, 13.27690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19873, 2349.02295, -1780.19336, 13.33840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19173, 2359.14551, -1782.43677, 14.76090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 2356.31812, -1776.52014, 16.72680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1661, 2356.29834, -1788.92065, 17.37180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1659, 2356.29834, -1788.92065, 17.37180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19899, 2386.30786, -1779.36951, 12.53970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19815, 2389.67798, -1785.81067, 13.95610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(936, 2389.10010, -1785.81067, 12.93610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 2389.53979, -1778.73755, 12.56460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2565, 2384.43970, -1775.41504, 16.39080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2565, 2389.34570, -1775.41309, 16.39080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 2382.48413, -1790.58936, 15.95310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2078, 2390.39014, -1789.41541, 12.51540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 2389.82007, -1781.22144, 14.43810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19786, 2381.47925, -1774.29443, 14.40690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1760, 2384.97021, -1773.41309, 12.51410,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1817, 2383.37158, -1774.85791, 12.53010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1432, 2392.79248, -1773.59985, 12.55240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19933, 2394.19824, -1777.85718, 12.99550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 2393.96167, -1776.02576, 12.41650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18066, 2265.63062, -1789.48425, 15.37010,   0.00000, 0.00000, -90.00000);*/

    /* CHURCH INTERIOR */
	CreateDynamicObject(9931,1947.54003906,-368.51269531,1108.01086426,0.00000000,0.00000000,90.00000000); //object(church_sfe) (1)
	CreateDynamicObject(3976,1970.65722656,-341.23883057,1100.22949219,0.00000000,0.00000000,0.00000000); //object(policest02_lan) (1)
	CreateDynamicObject(9931,1980.55761719,-368.51562500,1108.01086426,0.00000000,0.00000000,90.00000000); //object(church_sfe) (2)
	CreateDynamicObject(3976,1962.70117188,-400.46679688,1109.52941895,0.00000000,0.00000000,90.00000000); //object(policest02_lan) (2)
	CreateDynamicObject(11472,1964.78710938,-372.02050781,1089.22351074,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (1)
	CreateDynamicObject(11472,1963.28967285,-372.02139282,1089.22351074,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (2)
	CreateDynamicObject(11472,1964.04479980,-372.98049927,1089.46386719,0.00000000,0.00000000,0.00000000); //object(des_swtstairs1) (3)
	CreateDynamicObject(2896,1959.29248047,-370.91723633,1093.34313965,0.00000000,0.00000000,90.00000000); //object(casket_law) (1)
	CreateDynamicObject(11472,1962.66918945,-373.82989502,1087.66955566,90.00000000,180.00000000,270.00000000); //object(des_swtstairs1) (4)
	CreateDynamicObject(11472,1965.41259766,-373.81991577,1087.66992188,90.00000000,180.00000000,90.00000000); //object(des_swtstairs1) (5)
	CreateDynamicObject(970,1970.61437988,-368.20404053,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1968.51074219,-368.20703125,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1957.52185059,-368.25833130,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1959.61914062,-368.25585938,1093.28039551,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(6959,1963.97839355,-368.12149048,1072.75439453,90.00000000,0.00000000,0.25000000); //object(vegasnbball1) (2)
	CreateDynamicObject(2960,1964.05883789,-348.98986816,1101.36645508,0.00000000,90.00000000,89.99450684); //object(kmb_beam) (1)
	CreateDynamicObject(2960,1963.98291016,-349.00000000,1101.70666504,90.00000000,0.00000000,179.99450684); //object(kmb_beam) (2)
	CreateDynamicObject(2960,1964.05871582,-348.99044800,1100.00585938,0.00000000,90.00000000,90.00000000); //object(kmb_beam) (3)
	CreateDynamicObject(3872,1964.02685547,-346.40850830,1102.33020020,0.00000000,155.25000000,90.27026367); //object(ws_floodbeams) (1)
	CreateDynamicObject(1667,1962.98828125,-370.41271973,1093.62292480,0.00000000,0.00000000,0.00000000); //object(propwineglass1) (1)
	CreateDynamicObject(1664,1962.83520508,-370.42520142,1093.70104980,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (1)
	CreateDynamicObject(2868,1965.95605469,-370.30142212,1093.53430176,0.00000000,0.00000000,0.00000000); //object(gb_ornament03) (1)
	CreateDynamicObject(2869,1964.02185059,-373.78527832,1093.66992188,0.00000000,0.00000000,323.75000000); //object(gb_ornament04) (1)
	CreateDynamicObject(2870,1965.26269531,-373.64062500,1093.66992188,0.00000000,0.00000000,350.03002930); //object(gb_ornament05) (1)
	CreateDynamicObject(2270,1965.47998047,-352.47622681,1093.48364258,0.00000000,0.00000000,270.00000000); //object(frame_wood_6) (1)
	CreateDynamicObject(2257,1964.05615234,-373.94995117,1095.86132812,0.00000000,0.00000000,180.00000000); //object(frame_clip_4) (1)
	CreateDynamicObject(2271,1962.60437012,-352.58059692,1093.48803711,0.00000000,0.00000000,90.00000000); //object(frame_wood_1) (1)
	CreateDynamicObject(2357,1964.05090332,-370.68905640,1093.12402344,0.00000000,0.00000000,0.00000000); //object(dunc_dinning) (1)
	CreateDynamicObject(2808,1957.51367188,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (1)
	CreateDynamicObject(2808,1959.68164062,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (2)
	CreateDynamicObject(2808,1970.61328125,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (3)
	CreateDynamicObject(2808,1968.44238281,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (4)
	CreateDynamicObject(2808,1961.85546875,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (5)
	CreateDynamicObject(2808,1966.27246094,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2868,1962.14697266,-370.30624390,1093.53430176,0.00000000,0.00000000,0.00000000); //object(gb_ornament03) (4)
	CreateDynamicObject(948,1966.09277344,-374.17285156,1092.72888184,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
	CreateDynamicObject(948,1961.96313477,-374.22888184,1092.72888184,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (2)
	CreateDynamicObject(2894,1963.95080566,-370.94277954,1093.53430176,0.00000000,0.00000000,0.00000000); //object(kmb_rhymesbook) (1)
	CreateDynamicObject(3462,1959.30407715,-374.06838989,1094.24255371,0.00000000,0.00000000,270.00000000); //object(csrangel_lvs) (1)
	CreateDynamicObject(3462,1968.78125000,-374.06835938,1094.24255371,0.00000000,0.00000000,270.00000000); //object(csrangel_lvs) (2)
	CreateDynamicObject(949,1956.02258301,-353.46194458,1095.83190918,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (1)
	CreateDynamicObject(2946,1965.59985352,-349.21301270,1091.94543457,0.00000000,0.00000000,90.00000000); //object(cr_door_03) (2)
	CreateDynamicObject(2946,1962.47033691,-349.19955444,1091.94543457,0.00000000,0.00000000,270.00000000); //object(cr_door_03) (3)
	CreateDynamicObject(2808,1970.60681152,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1968.43054199,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1966.25378418,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1957.52233887,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1959.69580078,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1961.86865234,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1957.51660156,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1959.69250488,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1961.86779785,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1970.61279297,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1968.43701172,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1966.26782227,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(14705,1962.68139648,-373.67498779,1093.91894531,0.00000000,0.00000000,0.00000000); //object(int2vase) (1)
	CreateDynamicObject(14410,1968.61401367,-349.16000366,1092.01757812,0.00000000,0.00000000,270.00000000); //object(carter-stairs03) (1)
	CreateDynamicObject(11472,1971.98046875,-351.97091675,1092.19567871,0.00000000,0.00000000,90.00000000); //object(des_swtstairs1) (6)
	CreateDynamicObject(11472,1971.98046875,-353.19616699,1092.19567871,0.00000000,0.00000000,90.00000000); //object(des_swtstairs1) (7)
	CreateDynamicObject(14410,1959.47412109,-349.41287231,1092.01660156,0.00000000,0.00000000,90.00000000); //object(carter-stairs03) (2)
	CreateDynamicObject(11472,1956.10046387,-351.96487427,1092.19567871,0.00000000,0.00000000,270.00000000); //object(des_swtstairs1) (8)
	CreateDynamicObject(11472,1956.10046387,-353.19616699,1092.19567871,0.00000000,0.00000000,270.00000000); //object(des_swtstairs1) (9)
	CreateDynamicObject(11472,1965.10974121,-347.94531250,1095.44091797,0.00000000,90.00000000,180.00000000); //object(des_swtstairs1) (10)
	CreateDynamicObject(11472,1962.98315430,-347.94104004,1095.44018555,0.00000000,270.00000000,179.99450684); //object(des_swtstairs1) (11)
	CreateDynamicObject(1698,1962.46606445,-352.53399658,1095.31420898,0.00000000,0.00000000,270.27026367); //object(esc_step8) (1)
	CreateDynamicObject(1698,1962.87316895,-352.53399658,1095.53918457,0.00000000,0.00000000,270.26916504); //object(esc_step8) (2)
	CreateDynamicObject(1698,1963.24682617,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504); //object(esc_step8) (3)
	CreateDynamicObject(1698,1965.60021973,-352.53399658,1095.31420898,0.00000000,0.00000000,90.00000000); //object(esc_step8) (4)
	CreateDynamicObject(1698,1965.20434570,-352.53399658,1095.53918457,0.00000000,0.00000000,90.00000000); //object(esc_step8) (5)
	CreateDynamicObject(1698,1964.72375488,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504); //object(esc_step8) (6)
	CreateDynamicObject(970,1964.05688477,-353.88497925,1096.74243164,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1959.94470215,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1955.77246094,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1968.17297363,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1972.25000000,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1959.97607422,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1968.10302734,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1965.96203613,-349.21618652,1096.74169922,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1962.13757324,-349.21618652,1096.74243164,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(2887,1964.04821777,-349.34906006,1094.78955078,90.00000000,0.00000000,0.00000000); //object(a51_spotbulb) (1)
	CreateDynamicObject(949,1971.95068359,-353.46038818,1095.83190918,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (2)
	CreateDynamicObject(948,1965.68554688,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
	CreateDynamicObject(948,1962.38427734,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000); //object(plant_pot_10) (1)
	CreateDynamicObject(1742,1955.84399414,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1957.28173828,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1958.71166992,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1960.15112305,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1971.77673340,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1970.34277344,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (6)
	CreateDynamicObject(1742,1968.90930176,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1967.47534180,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (8)
	CreateDynamicObject(949,1961.60729980,-354.34103394,1092.58166504,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (3)
	CreateDynamicObject(949,1966.46325684,-354.34805298,1092.58166504,0.00000000,0.00000000,0.00000000); //object(plant_pot_4) (4)
	CreateDynamicObject(1720,1970.09338379,-373.59497070,1092.72888184,0.00000000,0.00000000,180.00000000); //object(rest_chair) (1)
	CreateDynamicObject(1720,1970.91198730,-373.58316040,1092.72888184,0.00000000,0.00000000,179.99450684); //object(rest_chair) (2)
	CreateDynamicObject(741,1969.29675293,-369.22723389,1093.71252441,0.00000000,0.00000000,0.00000000); //object(pot_01) (1)
	CreateDynamicObject(3440,1969.29125977,-370.86264038,1091.08007812,0.00000000,0.00000000,0.00000000); //object(ARPtpillar01_lvs) (1)
	CreateDynamicObject(14455,1955.32812500,-348.54144287,1096.87585449,0.00000000,0.00000000,270.00000000); //object(gs_bookcase) (1)
	CreateDynamicObject(14455,1972.78356934,-352.90487671,1096.86743164,0.00000000,0.00000000,90.00000000); //object(gs_bookcase) (2)
	CreateDynamicObject(2842,1964.51916504,-365.60891724,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (1)
	CreateDynamicObject(2842,1964.51843262,-363.77880859,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (2)
	CreateDynamicObject(2842,1964.51867676,-361.94879150,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (3)
	CreateDynamicObject(2842,1964.52172852,-360.12713623,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (4)
	CreateDynamicObject(2842,1964.52636719,-358.30560303,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (5)
	CreateDynamicObject(2842,1964.52600098,-356.47940063,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (6)
	CreateDynamicObject(2842,1964.52343750,-354.64611816,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (7)
	CreateDynamicObject(2842,1964.52136230,-352.82815552,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (8)
	CreateDynamicObject(2842,1964.51867676,-350.99310303,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (9)
	CreateDynamicObject(2842,1964.52026367,-349.16046143,1091.94543457,0.00000000,0.00000000,90.00000000); //object(gb_bedrug04) (10)
	CreateDynamicObject(2833,1963.55749512,-369.65057373,1092.72888184,0.00000000,0.00000000,0.00000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2834,1968.81579590,-372.52481079,1092.72888184,0.00000000,0.00000000,0.00000000); //object(gb_livingrug03) (1)
	CreateDynamicObject(6959,1951.26586914,-360.22650146,1095.56030273,310.00000000,180.00000000,90.00000000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,1976.87695312,-356.75421143,1095.51965332,310.00000000,180.00000000,270.00000000); //object(vegasnbball1) (3)
	CreateDynamicObject(6959,1958.95715332,-378.23306274,1096.33813477,309.99572754,179.99450684,180.00000000); //object(vegasnbball1) (4)

     // VIP Garage
	StaticObject[198] = CreateDynamicObject(10010,-4398.91894531,871.42370605,985.81781006,0.00000000,0.00000000,356.03002930); //object(ugcARPark_sfe) (1)
	CreateDynamicObject(7891,-4432.70019531,906.73614502,988.49066162,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (2)
	CreateDynamicObject(7891,-4425.47021484,906.73535156,988.49066162,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (4)
	CreateDynamicObject(7891,-4432.70019531,906.73535156,993.03997803,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (5)
	CreateDynamicObject(7891,-4425.46972656,906.73535156,993.03997803,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (6)

	//New VIP Lounge
/*
   	CreateDynamicObject(14614,2533.68457031,1416.85351562,7705.11816406,0.00000000,0.00000000,0.00000000); //object(triad_main3) (1)
	CreateDynamicObject(14607,2533.54492188,1417.93652344,7705.11572266,0.00000000,0.00000000,359.74731445); //object(triad_main2) (2)
	CreateDynamicObject(14563,2533.70019531,1419.26757812,7705.11376953,0.00000000,0.00000000,0.00000000); //object(triad_main) (1)
	CreateDynamicObject(3533,2544.49926758,1432.28100586,7702.83007812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(3533,2544.46289062,1403.82421875,7702.83007812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(14561,2584.83007812,1417.66503906,7704.10937500,0.00000000,0.00000000,179.74731445); //object(triad_neon) (2)
	CreateDynamicObject(3533,2569.09399414,1406.85668945,7705.23632812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2569.12109375,1428.65820312,7705.23632812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(1846,2502.62304688,1391.47949219,7699.94970703,90.00000000,90.00000000,269.98901367); //object(shop_shelf04) (1)
	CreateDynamicObject(8664,2470.62500000,1449.24902344,7707.08886719,0.00000000,179.99450684,269.98901367); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(3534,2522.69213867,1427.96093750,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (1)
	CreateDynamicObject(3534,2520.36645508,1407.96240234,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (2)
	CreateDynamicObject(3534,2505.93945312,1408.00488281,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (3)
	CreateDynamicObject(3534,2507.41162109,1428.69897461,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (4)
	CreateDynamicObject(14537,2555.20019531,1417.82421875,7700.75244141,0.00000000,0.00000000,269.74731445); //object(pdomesbar) (1)
	CreateDynamicObject(1703,2561.78857422,1430.46569824,7698.58447266,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (1)
	CreateDynamicObject(1703,2565.56933594,1429.20166016,7698.58447266,0.00000000,0.00000000,269.75000000); //object(kb_couch02) (2)
	CreateDynamicObject(1703,2560.29028320,1427.15185547,7698.58447266,0.00000000,0.00000000,89.49731445); //object(kb_couch02) (3)
	CreateDynamicObject(2126,2562.40576172,1427.81384277,7698.58447266,0.00000000,0.00000000,0.00000000); //object(coffee_swank_5) (1)
	CreateDynamicObject(644,2565.03710938,1431.16113281,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (1)
	CreateDynamicObject(1703,2549.62744141,1430.27490234,7698.58447266,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (4)
	CreateDynamicObject(1703,2548.02905273,1427.33349609,7698.58447266,0.00000000,0.00000000,89.49462891); //object(kb_couch02) (5)
	CreateDynamicObject(1703,2553.11743164,1429.18188477,7698.58447266,0.00000000,0.00000000,269.74731445); //object(kb_couch02) (6)
	CreateDynamicObject(2126,2550.10009766,1427.68005371,7698.58447266,0.00000000,0.00000000,0.00000000); //object(coffee_swank_5) (2)
	CreateDynamicObject(2208,2556.58935547,1430.02514648,7698.58447266,0.00000000,0.00000000,269.99996948); //object(med_office7_unit_1) (1)
	CreateDynamicObject(644,2556.64257812,1432.07714844,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (3)
	CreateDynamicObject(644,2545.51367188,1430.76379395,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (4)
	CreateDynamicObject(3528,2542.58496094,1414.42236328,7707.52832031,0.00000000,0.00000000,81.75000000); //object(vgsedragon) (1)
	CreateDynamicObject(13656,2549.15917969,1425.01318359,7691.92236328,0.00000000,0.00000000,0.00000000); //object(fuckknows) (1)
	CreateDynamicObject(1702,2500.81054688,1398.09545898,7696.57470703,0.00000000,0.00000000,0.00000000); //object(kb_couch06) (1)
	CreateDynamicObject(1702,2497.05859375,1398.17089844,7696.57470703,0.00000000,0.00000000,0.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1822,2499.40185547,1397.70947266,7696.57470703,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (1)
	CreateDynamicObject(1705,2496.42871094,1395.96105957,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_chair04) (1)
	CreateDynamicObject(1702,2508.76733398,1398.05688477,7696.57470703,0.00000000,0.00000000,269.99996948); //object(kb_couch06) (3)
	CreateDynamicObject(1702,2508.77172852,1391.88793945,7696.57470703,0.00000000,0.00000000,269.99450684); //object(kb_couch06) (4)
	CreateDynamicObject(1705,2508.75927734,1394.53845215,7696.57470703,0.00000000,0.00000000,269.74996948); //object(kb_chair04) (2)
	CreateDynamicObject(2010,2496.33740234,1398.38879395,7696.60791016,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(3528,2541.61718750,1421.13610840,7707.52832031,0.00000000,0.00000000,284.00000000); //object(vgsedragon) (1)
	CreateDynamicObject(1557,2581.77954102,1416.19738770,7700.99072266,0.00000000,0.00000000,89.75000000); //object(gen_doorext19) (1)
	CreateDynamicObject(1557,2581.77709961,1419.24938965,7700.99072266,0.00000000,0.00000000,269.74731445); //object(gen_doorext19) (2)
	CreateDynamicObject(3533,2525.58374023,1403.63500977,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2525.65917969,1433.01574707,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2502.09692383,1403.54077148,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2502.05957031,1432.68359375,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(2232,2502.62475586,1404.12939453,7701.62158203,29.99816895,0.00000000,137.49841309); //object(med_speaker_4) (2)
	CreateDynamicObject(2232,2502.66284180,1432.12524414,7701.79736328,29.99267578,0.00000000,49.99328613); //object(med_speaker_4) (3)
	CreateDynamicObject(2232,2525.13916016,1432.33178711,7703.54345703,29.98718262,0.00000000,319.73925781); //object(med_speaker_4) (4)
	CreateDynamicObject(2232,2524.96215820,1404.17626953,7703.54345703,29.98168945,0.00000000,225.48889160); //object(med_speaker_4) (5)
	CreateDynamicObject(14434,2511.20556641,1425.14147949,7706.56093750,0.00000000,0.00000000,0.00000000); //object(carter-spotlight42) (1)
	CreateDynamicObject(14434,2517.55908203,1412.60461426,7706.56103516,0.00000000,0.00000000,179.74731445); //object(carter-spotlight42) (2)
	CreateDynamicObject(2802,2496.60351562,1452.96240234,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (1)
	CreateDynamicObject(2802,2500.60888672,1455.75598145,7696.91699219,0.00000000,0.00000000,83.75000000); //object(castable1) (2)
	CreateDynamicObject(2802,2505.04809570,1455.83142090,7696.91699219,0.00000000,0.00000000,83.74877930); //object(castable1) (3)
	CreateDynamicObject(2802,2508.61010742,1453.67211914,7696.91699219,0.00000000,0.00000000,185.49877930); //object(castable1) (4)
	CreateDynamicObject(2802,2508.56738281,1444.14099121,7696.91699219,0.00000000,0.00000000,185.49865723); //object(castable1) (5)
	CreateDynamicObject(2802,2508.53784180,1439.81018066,7696.91699219,0.00000000,0.00000000,10.24865723); //object(castable1) (6)
	CreateDynamicObject(2802,2496.62451172,1448.15747070,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (7)
	CreateDynamicObject(2802,2496.67675781,1443.45410156,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (8)
	CreateDynamicObject(2802,2496.61523438,1438.70251465,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (9)
	CreateDynamicObject(2802,2500.53320312,1452.66955566,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (10)
	CreateDynamicObject(2802,2504.76513672,1452.47546387,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (11)
	CreateDynamicObject(2802,2504.43212891,1447.91577148,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (12)
	CreateDynamicObject(2802,2504.61816406,1442.34155273,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (13)
	CreateDynamicObject(2802,2500.46679688,1442.34082031,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (14)
	CreateDynamicObject(2802,2500.64111328,1447.44116211,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (15)
	CreateDynamicObject(8664,2460.33349609,1334.99987793,7705.18896484,0.00000000,179.99450684,358.98901367); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(8664,2466.37988281,1506.99414062,7705.18896484,0.00000000,179.99450684,269.98352051); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(1702,2496.41601562,1392.63623047,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2496.45556641,1388.72924805,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2496.42236328,1382.17553711,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2499.56835938,1379.86389160,7696.57470703,0.00000000,0.00000000,180.25000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2503.86328125,1379.84350586,7696.57470703,0.00000000,0.00000000,180.24719238); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2508.63720703,1379.85156250,7696.57470703,0.00000000,0.00000000,180.24719238); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2508.78320312,1384.55676270,7696.57470703,0.00000000,0.00000000,270.24722290); //object(kb_couch06) (2)
	CreateDynamicObject(1822,2495.96850586,1391.05432129,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (2)
	CreateDynamicObject(1822,2500.17749023,1379.41052246,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (4)
	CreateDynamicObject(1822,2504.73486328,1379.36376953,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (5)
	CreateDynamicObject(1822,2508.29492188,1381.23937988,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (6)
	CreateDynamicObject(2592,2502.65625000,1385.34570312,7697.48876953,0.00000000,0.00000000,0.00000000); //object(ab_slottable) (1)
	CreateDynamicObject(14391,2518.39965820,1395.66064453,7697.63281250,0.00000000,0.00000000,137.75000000); //object(dr_gsnew07) (1)
	CreateDynamicObject(2773,2513.80834961,1391.35119629,7697.49023438,0.00000000,0.00000000,287.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,2511.01782227,1390.83972168,7697.49023438,0.00000000,0.00000000,273.74584961); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,2511.01586914,1398.82482910,7697.49023438,0.00000000,0.00000000,285.49584961); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,2513.54321289,1400.46667480,7697.47998047,0.00000000,0.00000000,322.49072266); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,2514.37133789,1402.14062500,7697.49023438,0.00000000,0.00000000,345.23721313); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2516.00585938,1403.10449219,7697.49023438,0.00000000,358.50000000,270.74584961); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,2518.39916992,1403.09533691,7697.49023438,0.00000000,358.49487305,269.99157715); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2773,2521.51806641,1403.08837891,7697.49023438,0.00000000,358.49487305,269.98901367); //object(cj_airprt_bar) (8)
	CreateDynamicObject(2773,2522.30200195,1401.77014160,7697.49023438,0.00000000,358.49487305,173.23901367); //object(cj_airprt_bar) (9)
	CreateDynamicObject(2773,2521.81201172,1399.49047852,7697.49023438,0.00000000,358.49487305,163.23791504); //object(cj_airprt_bar) (10)
	CreateDynamicObject(1541,2503.42236328,1385.51770020,7698.08593750,0.00000000,0.00000000,179.75000000); //object(cj_beer_taps_1) (1)
	CreateDynamicObject(1545,2501.91772461,1385.48803711,7698.16455078,0.00000000,0.00000000,0.00000000); //object(cj_b_optic1) (1)
	CreateDynamicObject(14562,2487.84570312,1418.30541992,7699.85156250,0.00000000,0.00000000,0.00000000); //object(triad_lion) (1)
	CreateDynamicObject(16101,2517.80395508,1435.93750000,7696.97753906,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (1)
	CreateDynamicObject(3533,2511.56665039,1388.92163086,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(1703,2533.08276367,1399.54919434,7696.58251953,0.00000000,0.00000000,259.00000000); //object(kb_couch02) (7)
	CreateDynamicObject(1703,2529.77880859,1391.14709473,7696.58251953,0.00000000,0.00000000,234.99719238); //object(kb_couch02) (8)
	CreateDynamicObject(1753,2518.78100586,1441.38500977,7696.97753906,0.00000000,0.49987793,308.24658203); //object(swank_couch_1) (3)
	CreateDynamicObject(1753,2521.59692383,1436.83740234,7696.97753906,0.00000000,0.49987793,283.99334717); //object(swank_couch_1) (4)
	CreateDynamicObject(14809,2514.50146484,1439.01867676,7698.00341797,0.00000000,0.00000000,269.75000000); //object(strip2_platforms) (1)
	CreateDynamicObject(16101,2517.80371094,1435.93750000,7705.97753906,0.00000000,180.00000000,0.00000000); //object(des_windsockpole) (3)
	CreateDynamicObject(2004,2547.08203125,1402.87194824,7700.60693359,0.00000000,0.00000000,180.75000000); //object(cr_safe_door) (1)
	CreateDynamicObject(18648,2574.30322266,1430.06726074,7705.38964844,0.00000000,0.00000000,90.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18648,2574.33300781,1405.45104980,7705.39013672,0.00000000,0.00000000,90.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2523.20751953,1431.59301758,7696.54589844,0.00000000,0.00000000,50.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2502.90087891,1404.33312988,7696.14160156,0.00000000,0.00000000,210.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2523.31250000,1404.46948242,7696.14160156,0.00000000,0.00000000,310.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(18655,2502.92797852,1431.71264648,7696.14599609,0.00000000,0.00000000,150.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18648,2514.53857422,1431.92138672,7706.11523438,0.00000000,0.00000000,264.49768066); //object(whiten) (1)
	CreateDynamicObject(18648,2502.94531250,1418.95727539,7705.86865234,0.00000000,0.00000000,358.25000000); //object(whiten) (1)
	CreateDynamicObject(18648,2512.54833984,1404.22753906,7706.46093750,0.00000000,0.00000000,88.24768066); //object(pinkn) (1)
	CreateDynamicObject(18648,2524.80029297,1417.05432129,7705.85693359,0.00000000,0.00000000,175.49768066); //object(pinkn) (1)
	CreateDynamicObject(19129,2513.15600586,1418.46594238,7696.64794922,0.00000000,0.00000000,0.00000000); //object(dancefloor) (1)
	CreateDynamicObject(18885,2561.32519531,1403.24609375,7699.56640625,0.00000000,0.00000000,179.50000000); //object(gunlocker) (1)
	CreateDynamicObject(14782,2555.62255859,1403.19152832,7699.47363281,0.00000000,0.00000000,179.49462891); //object(pdomesbar) (1)
	CreateDynamicObject(18885,2549.56079102,1403.30615234,7699.56640625,0.00000000,0.00000000,179.49462891); //object(gunlocker) (1)
	CreateDynamicObject(18646,2524.76708984,1404.45544434,7706.96542969,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2524.73706055,1431.57739258,7706.96777344,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2503.03784180,1431.67236328,7706.96777344,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2503.04516602,1404.47290039,7706.96337891,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2555.37280273,1413.67517090,7702.10400391,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2555.36938477,1421.85681152,7702.10400391,0.00000000,0.00000000,0.00000000); //object(pd light) (2)*/

	// Material House
	CreateDynamicObject(19378, 2192.13, -1243.15, 1528.02,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 2202.63, -1243.15, 1528.02,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 2192.13, -1252.78, 1528.02,   0.00, 90.00, 0.00);
	CreateDynamicObject(19365, 2189.04, -1243.50, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19394, 2192.25, -1243.50, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19394, 2194.93, -1244.61, 1529.87,   0.00, 0.00, 45.00);
	CreateDynamicObject(19378, 2202.63, -1252.78, 1528.02,   0.00, 90.00, 0.00);
	CreateDynamicObject(19365, 2187.54, -1246.20, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19394, 2190.75, -1246.20, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19438, 2192.86, -1246.74, 1529.87,   0.00, 0.00, 45.00);
	CreateDynamicObject(19394, 2193.40, -1248.85, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19365, 2193.40, -1252.05, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19394, 2193.40, -1255.24, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19365, 2187.37, -1244.63, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19365, 2196.04, -1247.29, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19459, 2193.80, -1238.64, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19456, 2188.62, -1253.65, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19395, 2190.74, -1246.21, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19367, 2187.54, -1246.21, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19440, 2192.85, -1246.75, 1529.87,   0.00, 0.00, 45.00);
	CreateDynamicObject(19395, 2193.39, -1248.84, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19367, 2193.39, -1252.05, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19459, 2187.21, -1248.87, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(17969, 2190.30, -1253.53, 1530.12,   0.00, 0.00, -90.00);
	CreateDynamicObject(1502, 2189.97, -1246.23, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 2193.38, -1248.07, 1528.10,   0.00, 0.00, -90.00);
	CreateDynamicObject(1502, 2194.36, -1244.07, 1528.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1502, 2191.46, -1243.52, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2236, 2190.15, -1251.21, 1528.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1756, 2187.86, -1251.45, 1528.11,   0.00, 0.00, 90.00);
	CreateDynamicObject(1711, 2189.14, -1248.59, 1528.10,   0.00, 0.00, 7.00);
	CreateDynamicObject(1712, 2191.43, -1249.81, 1528.10,   0.00, 0.00, -94.00);
	CreateDynamicObject(2313, 2190.14, -1253.22, 1528.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2648, 2189.13, -1253.24, 1528.86,   0.00, 0.00, 176.00);
	CreateDynamicObject(1719, 2189.85, -1253.18, 1528.62,   0.00, 0.00, 183.00);
	CreateDynamicObject(1510, 2189.85, -1251.06, 1528.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2959, 2193.46, -1255.98, 1528.11,   0.00, 0.00, 80.00);
	CreateDynamicObject(2104, 2188.79, -1246.22, 1528.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(2229, 2189.78, -1246.30, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2229, 2187.98, -1246.30, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(14840, 2189.74, -1243.59, 1529.76,   0.00, 0.00, -90.00);
	CreateDynamicObject(18661, 2195.94, -1247.10, 1530.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19365, 2194.81, -1256.77, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19365, 2196.04, -1256.91, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19394, 2196.04, -1250.50, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19354, 2197.73, -1249.40, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19354, 2197.73, -1251.54, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19384, 2200.94, -1249.40, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19354, 2200.94, -1251.54, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19354, 2204.15, -1251.54, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19354, 2204.15, -1249.40, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19354, 2204.27, -1250.27, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19384, 2196.05, -1250.51, 1529.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(19365, 2197.56, -1245.67, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19457, 2198.66, -1238.41, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19397, 2200.93, -1249.39, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19369, 2197.73, -1249.39, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19369, 2204.14, -1249.39, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19369, 2196.06, -1247.70, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19369, 2197.73, -1246.01, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19369, 2199.25, -1244.49, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19461, 2203.99, -1242.89, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19461, 2204.26, -1244.52, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 2200.14, -1249.42, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19459, 2187.40, -1238.64, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19456, 2189.05, -1238.39, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(4227, 2198.12, -1251.54, 1529.86,   0.00, 0.00, 180.00);
	CreateDynamicObject(18663, 2193.50, -1250.91, 1529.76,   0.00, 0.00, 180.00);
	CreateDynamicObject(19393, 2193.39, -1255.23, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19456, 2188.62, -1256.76, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19364, 2187.21, -1255.30, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19457, 2199.06, -1240.91, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19457, 2193.81, -1238.64, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19367, 2189.03, -1243.49, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19395, 2192.24, -1243.49, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(4227, 2201.61, -1238.39, 1529.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(14880, 2197.68, -1244.10, 1528.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(14556, 2197.76, -1239.53, 1529.62,   0.00, 0.00, 180.00);
	CreateDynamicObject(2394, 2197.94, -1238.92, 1529.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(2372, 2198.60, -1239.12, 1530.99,   0.00, 180.00, 90.00);
	CreateDynamicObject(2323, 2194.86, -1239.99, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2835, 2195.82, -1242.01, 1528.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2845, 2197.76, -1242.08, 1528.11,   0.00, 0.00, 20.00);
	CreateDynamicObject(2659, 2198.98, -1243.71, 1530.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(2693, 2197.20, -1245.76, 1530.29,   10.00, 4.00, 180.00);
	CreateDynamicObject(2695, 2193.92, -1241.09, 1530.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1529, 2193.90, -1240.34, 1530.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(2691, 2193.32, -1251.48, 1529.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(2270, 2192.46, -1247.18, 1530.39,   0.00, 0.00, -45.00);
	CreateDynamicObject(2069, 2192.76, -1253.01, 1528.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(3034, 2187.30, -1249.91, 1530.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(3034, 2187.49, -1240.76, 1530.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(3034, 2196.93, -1238.50, 1530.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(19394, 2196.04, -1253.71, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19459, 2200.91, -1255.60, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19367, 2196.05, -1256.90, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19395, 2196.05, -1253.70, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19459, 2200.91, -1252.03, 1529.87,   0.00, 0.00, 90.00);
	CreateDynamicObject(19459, 2200.38, -1256.59, 1529.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 2201.30, -1256.80, 1528.03,   0.00, 90.00, 0.00);
	CreateDynamicObject(1502, 2196.02, -1252.92, 1528.10,   0.00, 0.00, -90.00);
	CreateDynamicObject(3034, 2198.16, -1255.51, 1530.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(2525, 2196.84, -1254.97, 1528.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(2526, 2199.88, -1255.05, 1528.11,   0.00, 0.00, 180.00);
	CreateDynamicObject(2518, 2198.35, -1252.63, 1528.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(2836, 2198.72, -1254.45, 1528.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(2846, 2197.42, -1254.21, 1528.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(2414, 2196.61, -1252.43, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2306, 2199.74, -1253.62, 1528.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(14840, 2199.40, -1257.07, 1530.18,   0.00, 0.00, 180.00);
	CreateDynamicObject(2135, 2201.70, -1243.48, 1528.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2138, 2202.69, -1243.49, 1528.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2303, 2200.70, -1243.48, 1528.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2305, 2203.67, -1243.49, 1528.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2305, 2199.75, -1243.49, 1528.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2136, 2199.75, -1245.48, 1528.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2138, 2203.67, -1244.46, 1528.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(2138, 2203.67, -1245.44, 1528.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(5375, 1993.91, -2064.35, 18.53,   356.86, 0.00, 3.14);
	CreateDynamicObject(5375, 2121.32, -1272.82, 1534.87,   0.00, 0.00, -90.00);
	CreateDynamicObject(1575, 2187.60, -1253.95, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, 2188.15, -1253.95, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, 2187.50, -1254.40, 1528.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1575, 2187.50, -1254.94, 1528.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1575, 2188.69, -1253.95, 1528.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, 2187.91, -1253.95, 1528.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, 2188.47, -1253.95, 1528.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, 2187.50, -1254.16, 1528.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(1575, 2187.50, -1254.72, 1528.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(1575, 2187.95, -1254.80, 1528.10,   0.00, 0.00, 50.00);
	CreateDynamicObject(1575, 2188.08, -1254.35, 1528.10,   0.00, 0.00, 5.00);
	CreateDynamicObject(1829, 2190.13, -1256.13, 1528.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(2332, 2189.31, -1256.44, 1528.59,   0.00, 0.00, 180.00);
	CreateDynamicObject(355, 2188.71, -1256.38, 1528.34,   10.00, -90.00, 90.00);
	CreateDynamicObject(372, 2189.18, -1256.38, 1529.05,   90.00, 0.00, -20.00);
	CreateDynamicObject(2836, 2190.99, -1247.78, 1528.11,   0.00, 0.00, -42.00);
	CreateDynamicObject(2109, 2198.31, -1247.66, 1528.49,   0.00, 0.00, 40.00);
	CreateDynamicObject(2121, 2199.22, -1246.65, 1528.61,   0.00, 0.00, -30.00);
	CreateDynamicObject(2121, 2199.53, -1248.43, 1528.61,   0.00, 0.00, -120.00);
	CreateDynamicObject(2121, 2197.60, -1248.82, 1528.61,   0.00, 0.00, 1230.00);
	CreateDynamicObject(2121, 2196.78, -1247.87, 1528.61,   0.00, 0.00, 94.00);
	CreateDynamicObject(2121, 2196.98, -1246.60, 1528.61,   0.00, 0.00, 50.00);
	CreateDynamicObject(2103, 2203.94, -1245.36, 1529.14,   0.00, 0.00, -86.00);
	CreateDynamicObject(2829, 2199.75, -1243.67, 1529.14,   0.00, 0.00, 80.00);
	CreateDynamicObject(2830, 2199.63, -1245.53, 1529.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(2831, 2203.72, -1243.47, 1529.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(2254, 2196.16, -1247.80, 1530.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(18665, 2198.42, -1249.29, 1529.96,   0.00, 0.00, -90.00);
	CreateDynamicObject(2189, 2198.31, -1247.66, 1528.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1510, 2199.04, -1247.56, 1528.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1510, 2197.62, -1248.11, 1528.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1510, 2197.61, -1247.25, 1528.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1485, 2199.08, -1247.38, 1529.02,   0.00, 30.00, -90.00);
	CreateDynamicObject(3027, 2199.08, -1247.61, 1528.98,   0.00, 120.00, 120.00);
	CreateDynamicObject(3034, 2204.17, -1247.60, 1530.12,   0.00, 0.00, -90.00);
	CreateDynamicObject(2131, 2203.70, -1248.80, 1528.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2627, 2189.23, -1239.84, 1528.08,   0.00, 0.00, -120.00);
	CreateDynamicObject(2628, 2189.43, -1242.06, 1528.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1985, 2192.43, -1240.30, 1531.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 2202.63, -1252.78, 1531.48,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 2202.63, -1243.15, 1531.48,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 2192.13, -1243.15, 1531.48,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 2192.13, -1252.78, 1531.48,   0.00, 90.00, 0.00);
	CreateDynamicObject(1485, 2190.03, -1251.05, 1528.70,   0.00, 30.00, 180.00);
	CreateDynamicObject(1486, 2189.87, -1250.41, 1528.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(1486, 2189.40, -1250.87, 1528.75,   0.00, 0.00, 134.00);
	CreateDynamicObject(1543, 2189.39, -1250.36, 1528.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1543, 2189.54, -1250.22, 1528.60,   0.00, 0.00, 40.00);
	CreateDynamicObject(1544, 2189.84, -1250.79, 1528.60,   0.00, 0.00, 30.00);
	CreateDynamicObject(1544, 2189.78, -1250.18, 1528.60,   0.00, 0.00, 30.00);
	CreateDynamicObject(2074, 2189.59, -1250.62, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2190.13, -1244.92, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2194.67, -1250.48, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2200.61, -1250.48, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2201.70, -1244.85, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2073, 2198.25, -1247.66, 1530.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2190.85, -1240.86, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2198.12, -1253.75, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(2074, 2196.36, -1242.72, 1531.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1498, 2187.42, -1245.61, 1528.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(1498, 2204.24, -1251.24, 1528.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 2196.02, -1249.72, 1528.10,   0.00, 0.00, -90.00);
	
    // DMV Exterior
   	CreateDynamicObject(966, 2492.61890, -1942.99854, 12.50944,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(1257, 2476.90771, -1939.77905, 13.68558,   0.00000, 0.00000, -89.51996);
	CreateDynamicObject(1216, 2481.38989, -1942.05225, 13.19924,   0.00000, 0.00000, 176.94005);
	CreateDynamicObject(1216, 2482.00586, -1942.09033, 13.19924,   0.00000, 0.00000, 176.94005);
	CreateDynamicObject(1258, 2483.81543, -1941.97961, 13.15389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2474.78857, -1956.27100, 11.67242,   0.00000, 0.00000, 89.99999);
	CreateDynamicObject(3578, 2477.87988, -1956.44983, 11.68405,   0.00000, 0.00000, 88.85999);
	CreateDynamicObject(3578, 2481.18970, -1956.43445, 11.66829,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2484.32715, -1956.45801, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2487.58618, -1956.39050, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2490.77368, -1956.34521, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2494.00732, -1956.45984, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2497.12256, -1956.34546, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2500.35889, -1956.38721, 11.73250,   0.00000, 0.00000, 89.39999);
	CreateDynamicObject(3578, 2503.54053, -1956.33069, 11.73250,   0.00000, 0.00000, 89.39999);

    //New Prison Country - 08/01/2012 - Brian_William
	StaticObject[156] = CreateObject(5184, 1820.77, 419.05, 37.17,   0.00, 0.00, 353.50);
	StaticObject[157] = CreateObject(5184, 1828.16, 481.43, 36.96,   0.00, 0.00, 174.01);
	StaticObject[158] = CreateObject(5184, 1825.82, 457.78, 37.11,   0.00, 0.00, 354.15);
	StaticObject[159] = CreateObject(4079, 1848.79, 432.05, 31.02,   0.00, 0.00, 307.92);
	CreateDynamicObject(8210, 1765.23999, 480.01001, 20.61000,   0.00000, 0.00000, 82.60000);
	CreateDynamicObject(8210, 1785.71997, 409.85999, 20.55000,   0.00000, 0.00000, 354.39999);
	CreateDynamicObject(8210, 1791.00000, 461.69250, 20.50410,   0.00000, 0.00000, 175.00000);
	CreateDynamicObject(3293, 1819.27002, 433.10999, 21.49000,   0.00000, 0.00000, 80.82000);
	CreateDynamicObject(19377, 1884.06995, 426.34000, 17.79000,   0.00000, 0.00000, 355.13000);
	CreateDynamicObject(3928, 1847.81006, 426.10001, 27.72000,   0.00000, 0.00000, 84.51000);
	CreateDynamicObject(3279, 1880.64001, 446.60999, 18.01000,   0.00000, 0.00000, 83.02000);
	CreateDynamicObject(2889, 1773.72998, 460.09000, 37.78000,   0.00000, 0.00000, 357.60001);
	CreateDynamicObject(2888, 1771.77002, 426.70999, 37.69000,   340.00000, 0.00000, 266.14999);
	CreateDynamicObject(2887, 1773.80005, 460.07001, 37.89000,   340.00000, 0.00000, 331.82999);
	CreateDynamicObject(2985, 1775.83997, 426.89001, 25.71000,   0.00000, 0.00000, 353.42001);
	CreateDynamicObject(2985, 1775.56995, 424.69000, 25.71000,   0.00000, 0.00000, 353.42001);
	CreateDynamicObject(8210, 1793.10999, 399.82001, 20.55000,   0.00000, 0.00000, 354.39999);
	CreateDynamicObject(8210, 1848.38000, 393.64999, 20.55000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(2990, 1879.37000, 394.69000, 22.22000,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(16093, 1749.85999, 417.32001, 21.85000,   0.00000, 0.00000, -5.00000);
	CreateDynamicObject(16638, 1749.89001, 416.26001, 20.06000,   0.00000, 0.00000, -6.00000);
	CreateDynamicObject(2990, 1753.75000, 426.56000, 22.22000,   0.00000, 0.00000, -5.00000);
	CreateDynamicObject(2990, 1745.60999, 427.17999, 22.22000,   0.00000, 0.00000, -5.00000);
	CreateDynamicObject(2990, 1740.17004, 422.67999, 22.22000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2990, 1739.02002, 412.64001, 22.22000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(8210, 1773.19995, 401.51999, 20.55000,   0.00000, 0.00000, 354.39999);
	CreateDynamicObject(8210, 1885.76001, 425.81000, 20.61000,   0.00000, 0.00000, 83.18000);
	CreateDynamicObject(8210, 1890.93994, 466.95999, 20.61000,   0.00000, 0.00000, 263.63000);
	CreateDynamicObject(8210, 1761.91003, 453.70999, 20.61000,   0.00000, 0.00000, 82.70000);
	CreateDynamicObject(2990, 1759.18994, 427.44000, 22.22000,   0.00000, 0.00000, 85.73000);
	CreateDynamicObject(2990, 1758.56006, 417.39001, 22.22000,   0.00000, 0.00000, 87.22000);
	CreateDynamicObject(8150, 1831.31995, 501.03000, 20.68000,   0.00000, 0.00000, 174.36000);
	CreateDynamicObject(947, 1876.47998, 460.42999, 20.14000,   0.00000, 0.00000, 355.73999);
	CreateDynamicObject(947, 1880.52002, 490.35001, 20.24000,   0.00000, 0.00000, 173.72000);
	CreateDynamicObject(1946, 1876.51001, 469.92001, 18.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1849.55005, 493.29001, 18.23000,   0.00000, 0.00000, 354.92001);
	CreateDynamicObject(2628, 1852.46997, 492.95001, 18.23000,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(2628, 1855.40002, 492.67999, 18.23000,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(2629, 1843.93994, 493.92999, 18.20000,   0.00000, 0.00000, 353.56000);
	CreateDynamicObject(2629, 1838.26001, 494.64001, 18.20000,   0.00000, 0.00000, 353.56000);
	CreateDynamicObject(2629, 1834.38000, 495.01999, 18.20000,   0.00000, 0.00000, 353.56000);
	CreateDynamicObject(2629, 1830.91003, 495.34000, 18.23000,   0.00000, 0.00000, 353.56000);
	CreateDynamicObject(2628, 1858.59998, 492.31000, 18.23000,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(5812, 1815.47998, 480.67001, 18.47000,   0.00000, 0.00000, 84.17000);
	CreateDynamicObject(13367, 1764.45996, 444.04999, 29.87000,   0.00000, 0.00000, 352.70999);
	CreateDynamicObject(3279, 1771.59998, 426.34000, 18.01000,   0.00000, 0.00000, 353.76999);
	CreateDynamicObject(2889, 1771.68994, 426.57001, 37.78000,   0.00000, 0.00000, 357.60001);
	CreateDynamicObject(2887, 1771.70996, 426.79001, 37.89000,   340.00000, 0.00000, 268.51999);
	CreateDynamicObject(2888, 1773.79004, 460.14999, 37.69000,   340.00000, 0.00000, 330.78000);
	CreateDynamicObject(3279, 1772.55042, 456.95660, 18.01000,   0.00000, 0.00000, 353.76999);
	CreateDynamicObject(1290, 1841.39001, 492.72000, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(1290, 1861.96997, 476.59000, 24.13000,   0.00000, 0.00000, 83.62000);
	CreateDynamicObject(1290, 1769.06995, 485.35001, 24.13000,   0.00000, 0.00000, 264.54999);
	CreateDynamicObject(1290, 1837.32996, 463.69000, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(1290, 1811.80005, 466.34000, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(1290, 1813.00000, 495.35999, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(1290, 1791.68994, 497.64999, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(1290, 1789.13000, 468.84000, 24.13000,   0.00000, 0.00000, 354.03000);
	CreateDynamicObject(14401, 1859.54004, 474.53000, 18.59000,   0.00000, 0.00000, 353.81000);
	CreateDynamicObject(14401, 1787.27002, 484.95999, 18.43000,   0.00000, 0.00000, 174.48000);
	CreateDynamicObject(14401, 1835.76001, 468.72000, 18.59000,   0.00000, 0.00000, 264.32999);
	CreateDynamicObject(14401, 1788.44995, 494.50000, 18.59000,   0.00000, 0.00000, 83.93000);
	CreateDynamicObject(8210, 1785.71997, 409.85999, 20.55000,   0.00000, 0.00000, 354.39999);
	CreateDynamicObject(8210, 1785.71997, 409.85999, 20.55000,   0.00000, 0.00000, 354.39999);
	CreateDynamicObject(5184, 1817.06433, 422.33151, 37.17000,   0.00000, 0.00000, 353.50000);
	CreateDynamicObject(5184, 1828.16003, 481.42999, 36.96000,   0.00000, 0.00000, 174.00999);
	CreateDynamicObject(5184, 1825.81995, 457.78000, 37.11000,   0.00000, 0.00000, 354.14999);
	CreateDynamicObject(4079, 1848.79004, 432.04999, 31.02000,   0.00000, 0.00000, 307.92001);
	CreateDynamicObject(8210, 1861.52002, 455.14639, 20.50410,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(1497, 1852.25391, 456.74371, 18.28110,   0.00000, 0.00000, 174.52000);
	CreateDynamicObject(8210, 1849.97095, 456.34491, 20.50410,   0.00000, 0.00000, 174.00000);

	//PRISON INTERIOR V3.0 - SUMMERS - 1/3/2013
	StaticObject[94] = CreateObject(10795, 1812.52, -1721.29, 5200.79,   0.00, 180.00, 0.00);
	StaticObject[95] = CreateObject(19377, 1840.30, -1731.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[96] = CreateObject(19377, 1842.10, -1711.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[97] = CreateObject(19377, 1840.30, -1712.00, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[98] = CreateObject(19377, 1840.30, -1721.60, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[99] = CreateObject(19377, 1840.30, -1731.20, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[100] = CreateObject(19377, 1829.80, -1731.20, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[101] = CreateObject(19377, 1829.80, -1721.60, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[102] = CreateObject(19377, 1829.80, -1712.00, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[103] = CreateObject(19377, 1822.80, -1721.30, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[104] = CreateObject(19377, 1829.80, -1731.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[105] = CreateObject(19377, 1852.60, -1731.90, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[106] = CreateObject(19377, 1840.30, -1711.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[107] = CreateObject(19377, 1831.60, -1711.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[108] = CreateObject(19377, 1829.80, -1711.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[109] = CreateObject(19377, 1822.80, -1730.90, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[110] = CreateObject(19377, 1821.10, -1711.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[111] = CreateObject(19377, 1852.60, -1711.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[112] = CreateObject(19377, 1852.60, -1721.30, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[113] = CreateObject(19377, 1850.80, -1721.60, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[114] = CreateObject(19377, 1850.80, -1712.00, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[115] = CreateObject(19377, 1852.60, -1730.90, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[116] = CreateObject(19377, 1829.80, -1731.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[117] = CreateObject(19377, 1840.30, -1731.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[118] = CreateObject(19377, 1850.80, -1731.20, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[119] = CreateObject(19377, 1861.30, -1721.60, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[120] = CreateObject(19377, 1849.20, -1730.90, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[121] = CreateObject(19377, 1852.60, -1702.40, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[123] = CreateObject(19377, 1850.50, -1746.10, 5205.00,   0.00, 90.00, 0.00);
	StaticObject[124] = CreateObject(19377, 1861.00, -1746.10, 5205.00,   0.00, 90.00, 0.00);
	StaticObject[125] = CreateObject(19377, 1863.10, -1706.70, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[126] = CreateObject(19377, 1863.10, -1697.10, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[127] = CreateObject(19377, 1867.70, -1735.40, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[128] = CreateObject(19377, 1872.40, -1717.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[129] = CreateObject(19377, 1859.70, -1732.20, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[130] = CreateObject(19377, 1850.20, -1740.50, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[131] = CreateObject(19377, 1850.20, -1750.10, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[132] = CreateObject(19377, 1860.60, -1746.40, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[133] = CreateObject(19377, 1871.10, -1746.40, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[134] = CreateObject(19377, 1864.60, -1736.80, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[135] = CreateObject(19377, 1864.60, -1732.20, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[136] = CreateObject(19377, 1863.10, -1725.90, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[137] = CreateObject(19377, 1863.10, -1716.30, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[138] = CreateObject(19377, 1861.90, -1722.70, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[139] = CreateObject(19377, 1873.60, -1717.40, 5205.10,   0.00, 90.00, 0.00);
	StaticObject[140] = CreateObject(19377, 1861.90, -1713.10, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[141] = CreateObject(19377, 1850.50, -1740.80, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[142] = CreateObject(19377, 1850.50, -1750.40, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[143] = CreateObject(19377, 1861.00, -1750.40, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[126] = CreateObject(19377, 1871.50, -1750.40, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[144] = CreateObject(19377, 1861.00, -1740.80, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[145] = CreateObject(19377, 1871.50, -1740.80, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[146] = CreateObject(19377, 1861.30, -1731.20, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[147] = CreateObject(19377, 1871.80, -1731.20, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[148] = CreateObject(19377, 1871.80, -1721.60, 5212.10,   0.00, 90.00, 0.00);
	StaticObject[149] = CreateObject(19377, 1871.50, -1746.10, 5205.00,   0.00, 90.00, 0.00);
	StaticObject[150] = CreateObject(19377, 1812.39, -1730.87, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[151] = CreateObject(19377, 1808.83, -1730.95, 5212.21,   0.00, 90.00, 0.00);
	StaticObject[152] = CreateObject(19377, 1819.31, -1721.31, 5212.21,   0.00, 90.00, 0.00);
	StaticObject[153] = CreateObject(19377, 1808.80, -1721.34, 5212.21,   0.00, 90.00, 0.00);
	StaticObject[154] = CreateObject(19377, 1812.31, -1721.24, 5208.60,   0.00, 90.00, 0.00);
	StaticObject[155] = CreateObject(19377, 1819.30, -1730.93, 5212.21,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1840.32, -1721.60, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1840.30, -1731.20, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1840.30, -1712.00, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1829.80, -1712.00, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1829.80, -1721.60, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1829.80, -1731.20, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1819.30, -1721.60, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1850.80, -1712.00, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1850.80, -1721.60, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1861.30, -1712.00, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1852.60, -1702.40, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1850.80, -1731.20, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1863.10, -1702.40, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1850.80, -1740.80, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1861.30, -1721.60, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1861.30, -1731.20, 5201.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19396, 1827.70, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19441, 1824.50, -1721.50, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(14877, 1823.00, -1719.20, 5203.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 1826.24, -1724.10, 5205.10,   0.00, 90.00, 180.00);
	CreateDynamicObject(19362, 1826.24, -1720.90, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1826.24, -1717.70, 5205.10,   0.00, 90.00, 180.00);
	CreateDynamicObject(19362, 1819.70, -1719.10, 5203.50,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1819.70, -1722.30, 5203.50,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1819.70, -1725.40, 5203.50,   0.00, 90.00, 179.99);
	CreateDynamicObject(19441, 1821.40, -1721.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1822.90, -1725.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1819.70, -1725.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1818.10, -1723.70, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1818.10, -1720.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1818.10, -1717.30, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1819.70, -1717.70, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1717.70, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1824.50, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1720.70, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1720.70, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1722.30, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1725.30, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1819.70, -1725.30, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1818.10, -1723.70, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1818.10, -1720.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1818.10, -1717.30, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1819.70, -1717.70, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1822.90, -1717.70, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19441, 1821.40, -1721.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 1825.50, -1719.30, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19368, 1824.50, -1716.10, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1824.50, -1712.90, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1827.90, -1725.20, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1827.90, -1721.70, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1832.70, -1716.40, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 1826.24, -1727.30, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19368, 1822.90, -1722.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1709.40, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1824.50, -1717.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1824.50, -1730.10, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1827.70, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1824.50, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1709.40, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1830.90, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1837.30, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1840.50, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1843.70, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1845.30, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1845.30, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1843.70, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1850.10, -1714.30, 5203.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19396, 1837.30, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1830.90, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1843.70, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1845.30, -1709.50, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1840.50, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1837.30, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1830.90, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1827.70, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1824.50, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1829.70, -1707.60, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1709.40, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1709.50, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1709.50, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.70, -1709.50, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1709.50, 5210.30,   0.00, 0.00, 0.25);
	CreateDynamicObject(19460, 1842.10, -1709.50, 5210.30,   0.00, 0.00, 0.25);
	CreateDynamicObject(19460, 1852.20, -1717.60, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1848.90, -1707.60, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1824.50, -1719.20, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1824.56, -1730.98, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1846.90, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1847.30, -1715.40, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1840.50, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1845.70, -1718.10, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(14877, 1849.20, -1722.20, 5206.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(14877, 1822.20, -1723.80, 5201.50,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1847.40, -1712.80, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1839.30, -1707.60, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1846.90, -1714.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1852.40, -1717.60, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1847.30, -1714.90, 5208.60,   0.00, 90.00, 179.99);
	CreateDynamicObject(19460, 1847.50, -1715.90, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1846.90, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1845.70, -1724.50, 5208.60,   0.00, 90.00, 179.99);
	CreateDynamicObject(19368, 1849.10, -1720.70, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1845.70, -1721.30, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1845.70, -1724.50, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1845.70, -1727.70, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19460, 1847.50, -1725.50, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1852.30, -1723.70, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1856.70, -1720.40, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1856.70, -1720.30, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1852.30, -1723.70, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1845.70, -1721.30, 5208.60,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1845.70, -1718.10, 5208.60,   0.00, 90.00, 179.99);
	CreateDynamicObject(19368, 1849.10, -1720.70, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1831.00, -1736.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1829.70, -1707.60, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1839.30, -1707.60, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1839.30, -1707.60, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1848.90, -1707.60, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1845.70, -1707.60, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1824.50, -1727.10, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1845.30, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1824.50, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1827.70, -1714.30, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1830.90, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1837.30, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1840.50, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1843.70, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1846.90, -1729.20, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1734.10, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1847.50, -1728.50, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.70, -1707.60, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1840.60, -1736.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19304, 1844.00, -1718.10, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1836.00, -1716.40, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1839.10, -1716.40, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1842.20, -1716.40, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1829.60, -1716.40, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1824.50, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1827.70, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1830.90, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1837.30, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1840.50, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1843.70, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1846.90, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1734.10, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1831.00, -1736.00, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1840.60, -1736.00, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1845.30, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1824.50, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1826.10, -1734.10, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1827.70, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1830.90, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1834.10, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1837.30, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1840.50, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1843.70, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1846.90, -1729.20, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1831.00, -1736.00, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1840.60, -1736.00, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1845.30, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1847.30, -1728.20, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1827.90, -1718.20, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1844.00, -1721.60, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1844.00, -1725.10, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1842.20, -1726.90, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1839.10, -1726.90, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1836.20, -1726.90, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1832.70, -1726.90, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1829.70, -1726.90, 5205.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1827.90, -1718.20, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1827.90, -1721.70, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1827.90, -1725.20, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1844.00, -1725.10, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1844.00, -1721.60, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19304, 1844.00, -1718.10, 5209.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1842.10, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.70, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1734.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.70, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1842.10, -1734.00, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1842.10, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.70, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1734.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.70, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1842.10, -1709.50, 5206.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1842.10, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1838.90, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1835.80, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1832.50, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1829.30, -1709.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1847.30, -1721.80, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1853.30, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1847.30, -1705.80, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1856.50, -1714.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1852.30, -1720.70, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1852.30, -1720.70, 5210.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19362, 1846.70, -1722.30, 5208.60,   0.00, 90.00, 179.99);
	CreateDynamicObject(19304, 1829.60, -1716.40, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1832.70, -1716.40, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1836.00, -1716.40, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1839.10, -1716.40, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1842.20, -1716.40, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1842.20, -1726.90, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1839.10, -1726.90, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1868.00, -1733.10, 5210.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1832.70, -1726.90, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1829.70, -1726.90, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1858.00, -1712.30, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19414, 1851.40, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19414, 1848.90, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19414, 1853.90, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19414, 1856.40, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1853.20, -1719.10, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1854.80, -1719.10, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19441, 1848.30, -1740.70, 5206.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(19460, 1853.20, -1701.00, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1854.00, -1725.50, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1854.00, -1727.10, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1854.80, -1731.90, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1853.20, -1731.90, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19396, 1850.00, -1729.20, 5203.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19368, 1853.20, -1729.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(14416, 1857.40, -1738.60, 5205.40,   0.00, 0.00, 359.99);
	CreateDynamicObject(19368, 1846.70, -1736.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1853.80, -1741.50, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1848.30, -1741.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1852.20, -1741.00, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1847.30, -1734.60, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1848.30, -1738.30, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1854.00, -1723.90, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19441, 1852.20, -1740.70, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1843.50, -1741.50, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1852.20, -1738.30, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1853.80, -1736.20, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1856.40, -1717.10, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1845.60, -1746.30, 5206.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(14416, 1850.20, -1739.40, 5201.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1855.40, -1740.80, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1866.20, -1749.40, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1859.40, -1740.80, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1850.30, -1751.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1864.20, -1741.60, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1859.90, -1751.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1869.50, -1751.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1866.20, -1746.30, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1855.40, -1738.40, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1866.20, -1743.20, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1859.40, -1738.40, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1845.30, -1743.60, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1850.10, -1751.20, 5210.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1845.30, -1753.20, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1859.70, -1751.20, 5210.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1869.30, -1751.20, 5210.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1855.40, -1740.00, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1869.80, -1736.90, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(14416, 1869.10, -1725.10, 5205.40,   0.00, 0.00, 179.99);
	CreateDynamicObject(14416, 1859.70, -1732.50, 5201.90,   0.00, 0.00, 89.99);
	CreateDynamicObject(19460, 1869.80, -1724.50, 5206.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(19460, 1858.10, -1730.60, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19441, 1863.00, -1721.80, 5203.30,   0.00, 0.00, 180.00);
	CreateDynamicObject(19460, 1867.80, -1721.00, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1867.10, -1726.90, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1862.30, -1727.50, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1869.80, -1724.10, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1869.80, -1730.50, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1868.30, -1722.40, 5210.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1852.70, -1727.50, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1869.80, -1714.90, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1861.80, -1717.60, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1871.40, -1717.60, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1867.10, -1722.70, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1848.50, -1727.60, 5210.40,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1862.60, -1730.60, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1867.80, -1722.60, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1862.10, -1733.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1862.10, -1733.30, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1849.60, -1731.80, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1849.60, -1725.40, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1854.40, -1727.40, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1859.20, -1722.60, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1855.70, -1730.40, 5210.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1850.60, -1737.20, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1841.00, -1737.20, 5210.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19368, 1857.30, -1734.90, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1862.60, -1732.20, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1853.10, -1736.60, 5206.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1866.50, -1728.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1866.50, -1718.90, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1866.50, -1709.30, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1866.50, -1699.70, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1858.00, -1696.30, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1843.60, -1701.00, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1862.50, -1698.30, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1868.00, -1742.50, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1869.60, -1737.70, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19368, 1859.40, -1738.40, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1859.40, -1740.80, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1857.00, -1741.60, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19368, 1860.20, -1741.60, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19368, 1857.00, -1744.80, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19368, 1858.60, -1743.20, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1859.20, -1713.00, 5206.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(19368, 1861.80, -1738.40, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1861.80, -1740.80, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19460, 1873.80, -1741.60, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1879.10, -1751.00, 5206.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19460, 1876.40, -1746.50, 5206.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(19396, 1857.80, -1729.00, 5206.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(19396, 1862.80, -1710.90, 5203.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19362, 1860.80, -1734.80, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19362, 1859.50, -1734.80, 5205.10,   0.00, 90.00, 179.99);
	CreateDynamicObject(19441, 1858.00, -1706.70, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19441, 1858.00, -1701.90, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19442, 1854.74, -1710.23, 5269.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(19442, 1855.20, -1707.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19442, 1852.70, -1707.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19442, 1850.10, -1707.50, 5203.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19466, 1851.40, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19466, 1853.90, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19466, 1856.40, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19466, 1848.90, -1707.50, 5203.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(19396, 1858.00, -1704.30, 5203.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1859.60, -1710.90, 5203.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19368, 1866.00, -1710.90, 5203.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(1569, 1860.80, -1698.40, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1863.80, -1698.40, 5201.60,   0.00, 0.00, 179.80);
	CreateDynamicObject(19370, 1859.70, -1706.00, 5200.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19370, 1864.80, -1706.00, 5200.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19435, 1859.80, -1706.70, 5202.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1864.70, -1706.70, 5202.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(19443, 1861.20, -1706.70, 5200.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19370, 1859.70, -1707.40, 5200.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(19443, 1863.30, -1706.70, 5200.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19370, 1864.80, -1707.40, 5200.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2008, 1859.10, -1707.10, 5201.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1864.10, -1707.10, 5201.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(19462, 1862.80, -1706.00, 5205.50,   0.00, 0.00, 270.00);
	CreateDynamicObject(19435, 1859.80, -1706.70, 5203.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1863.30, -1706.70, 5203.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1866.80, -1706.70, 5203.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(2606, 1863.80, -1707.20, 5204.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2606, 1863.80, -1707.20, 5204.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 1861.20, -1707.40, 5204.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 1859.32, -1707.40, 5204.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(16101, 1863.30, -1707.40, 5192.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(16101, 1861.20, -1707.30, 5192.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(16101, 1858.30, -1707.40, 5192.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(16101, 1866.10, -1707.40, 5192.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1860.00, -1708.40, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1865.00, -1708.40, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1865.90, -1700.90, 5202.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1865.90, -1701.70, 5202.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1865.90, -1702.50, 5202.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1865.90, -1703.30, 5202.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1848.90, -1706.50, 5202.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1811, 1851.40, -1706.50, 5202.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1811, 1854.00, -1706.50, 5202.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1811, 1856.60, -1706.50, 5202.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2007, 1855.40, -1727.20, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1856.40, -1727.20, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1857.40, -1727.20, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1858.40, -1730.00, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1858.40, -1727.20, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(19370, 1857.30, -1727.80, 5202.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2007, 1857.40, -1728.40, 5201.60,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1856.40, -1728.40, 5201.60,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1855.40, -1728.40, 5201.60,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1858.40, -1727.20, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1857.40, -1727.20, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1856.40, -1727.20, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1855.40, -1727.20, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1858.40, -1728.40, 5203.00,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1857.40, -1728.40, 5203.00,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1856.40, -1728.40, 5203.00,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1855.40, -1728.40, 5203.00,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1858.40, -1728.40, 5201.60,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1857.40, -1730.00, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1856.40, -1730.00, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1855.40, -1730.00, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1855.40, -1730.00, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1856.40, -1730.00, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1857.40, -1730.00, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1858.40, -1730.00, 5203.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(19370, 1854.80, -1727.80, 5202.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1724.00, 5201.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1725.00, 5201.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1726.00, 5201.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1726.00, 5202.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1725.00, 5202.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2303, 1865.90, -1724.00, 5202.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(1892, 1862.60, -1699.10, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1892, 1861.00, -1699.10, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1856.70, -1721.70, 5201.60,   0.00, 0.00, 180.00);
	CreateDynamicObject(2008, 1856.70, -1718.90, 5201.60,   0.00, 0.00, 179.99);
	CreateDynamicObject(1671, 1864.50, -1719.00, 5202.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1671, 1855.80, -1717.90, 5202.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2846, 1864.40, -1724.40, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2713, 1865.90, -1723.00, 5201.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1863.50, -1719.90, 5201.60,   0.00, 0.00, 89.99);
	CreateDynamicObject(2008, 1863.50, -1716.60, 5201.60,   0.00, 0.00, 89.99);
	CreateDynamicObject(2008, 1864.90, -1711.60, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1671, 1855.80, -1720.70, 5202.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1671, 1864.50, -1715.60, 5202.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1671, 1858.80, -1712.50, 5202.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(2186, 1866.00, -1714.40, 5201.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2008, 1860.00, -1711.70, 5201.60,   0.00, 0.00, 269.99);
	CreateDynamicObject(2008, 1860.00, -1715.60, 5201.60,   0.00, 0.00, 269.99);
	CreateDynamicObject(1671, 1865.80, -1712.40, 5202.00,   0.00, 0.00, 179.99);
	CreateDynamicObject(1671, 1858.90, -1716.60, 5202.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(14401, 1853.90, -1705.40, 5205.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(19368, 1859.10, -1723.10, 5206.90,   0.00, 0.00, 89.99);
	CreateDynamicObject(14782, 1862.40, -1718.10, 5206.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(14401, 1853.90, -1706.50, 5205.50,   0.00, 0.00, 179.99);
	CreateDynamicObject(19368, 1862.30, -1723.10, 5206.90,   0.00, 0.00, 89.99);
	CreateDynamicObject(14782, 1860.60, -1722.64, 5206.20,   0.00, 0.00, 179.99);
	CreateDynamicObject(2007, 1859.90, -1723.70, 5205.20,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1860.90, -1723.70, 5205.20,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1861.90, -1723.70, 5205.20,   0.00, 0.00, 359.99);
	CreateDynamicObject(2007, 1862.90, -1723.70, 5205.20,   0.00, 0.00, 359.99);
	CreateDynamicObject(14791, 1871.60, -1745.90, 5206.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2290, 1853.40, -1733.90, 5205.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2290, 1850.30, -1735.90, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 1851.90, -1734.20, 5205.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1754, 1856.40, -1735.70, 5205.20,   0.00, 0.00, 220.00);
	CreateDynamicObject(2964, 1863.30, -1727.50, 5205.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(19441, 1860.20, -1736.80, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(19441, 1861.00, -1736.80, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(18059, 1847.30, -1739.30, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(18059, 1847.30, -1744.20, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(18059, 1853.60, -1749.20, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(18059, 1869.30, -1749.20, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1746, 1850.40, -1732.50, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2140, 1855.00, -1728.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1851.15, -1728.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2135, 1850.20, -1728.98, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2136, 1853.05, -1727.99, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2305, 1850.20, -1728.00, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2137, 1852.11, -1728.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1850.21, -1729.95, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2638, 1848.80, -1739.20, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1852.00, -1739.20, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1852.00, -1744.20, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1848.80, -1744.20, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1848.90, -1749.20, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1852.00, -1749.30, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1855.10, -1749.40, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1858.30, -1749.40, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1861.40, -1749.40, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2638, 1864.60, -1749.40, 5209.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2639, 1867.40, -1749.40, 5209.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2639, 1846.00, -1744.20, 5209.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2639, 1854.90, -1739.30, 5209.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2639, 1845.90, -1739.10, 5209.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2639, 1854.80, -1744.20, 5209.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2639, 1864.90, -1745.40, 5209.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(18059, 1872.40, -1745.40, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(18059, 1872.40, -1741.10, 5209.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1868.00, -1752.10, 5210.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(2639, 1867.40, -1745.40, 5209.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2639, 1867.40, -1741.20, 5209.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2639, 1845.90, -1749.10, 5209.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2639, 1864.90, -1741.10, 5209.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2357, 1853.70, -1730.70, 5205.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2120, 1855.10, -1731.80, 5205.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2120, 1854.20, -1731.80, 5205.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2120, 1853.30, -1731.80, 5205.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2120, 1852.40, -1731.80, 5205.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2120, 1852.40, -1729.60, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(2120, 1853.30, -1729.60, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(2120, 1854.20, -1729.60, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(2120, 1855.10, -1729.60, 5205.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(2441, 1869.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1868.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1867.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1866.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1865.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1864.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1863.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1862.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1861.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1860.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1859.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1858.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1857.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1856.30, -1732.90, 5212.30,   0.00, 180.00, 0.00);
	CreateDynamicObject(19368, 1854.18, -1735.20, 5210.30,   0.00, 0.00, 89.99);
	CreateDynamicObject(2441, 1856.20, -1732.90, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2441, 1857.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1858.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1859.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1860.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1861.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1862.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1863.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1864.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1865.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1866.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1867.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1868.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(2441, 1869.30, -1732.90, 5212.30,   0.00, 179.99, 0.00);
	CreateDynamicObject(19304, 1836.20, -1726.90, 5209.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1864.50, -1733.10, 5210.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1861.00, -1733.10, 5210.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19304, 1857.50, -1733.10, 5210.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1856.30, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2140, 1858.24, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1857.27, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2140, 1859.20, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2136, 1860.20, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2135, 1864.10, -1728.10, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1862.16, -1728.11, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2137, 1863.12, -1728.11, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, 1865.20, -1742.90, 5205.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, 1863.90, -1742.90, 5205.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, 1862.60, -1742.90, 5205.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2628, 1864.90, -1749.50, 5205.10,   0.00, 0.00, 230.00);
	CreateDynamicObject(2628, 1863.20, -1749.90, 5205.10,   0.00, 0.00, 230.00);
	CreateDynamicObject(2630, 1858.80, -1749.90, 5205.10,   0.00, 0.00, 150.00);
	CreateDynamicObject(2630, 1857.40, -1749.70, 5205.10,   0.00, 0.00, 150.00);
	CreateDynamicObject(2630, 1859.10, -1747.80, 5205.10,   0.00, 0.00, 150.00);
	CreateDynamicObject(2416, 1863.10, -1730.50, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2416, 1860.80, -1730.50, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2451, 1865.40, -1728.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1330, 1869.10, -1737.10, 5209.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1330, 1861.00, -1742.20, 5209.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2994, 1859.10, -1744.10, 5209.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2994, 1859.10, -1742.60, 5209.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(14401, 1857.80, -1760.60, 5205.40,   0.00, 0.00, 359.99);
	CreateDynamicObject(14401, 1857.80, -1762.50, 5205.40,   0.00, 0.00, 359.99);
	CreateDynamicObject(2700, 1849.30, -1750.60, 5207.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(1811, 1848.80, -1708.70, 5202.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1811, 1851.40, -1708.70, 5202.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1811, 1854.00, -1708.70, 5202.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1811, 1856.60, -1708.80, 5202.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(19435, 1856.00, -1707.40, 5202.60,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1852.50, -1707.40, 5202.60,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1849.00, -1707.40, 5202.60,   0.00, 90.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1711.30, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1711.30, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.40, -1711.20, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1711.20, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1711.20, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1711.20, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.30, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1711.20, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1711.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1711.30, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.30, -1711.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1711.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1711.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1711.20, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.30, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1737.00, 5208.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.30, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1737.00, 5205.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1826.70, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1829.90, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1833.10, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1836.30, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1839.50, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, 1842.70, -1737.00, 5201.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2000, 1826.70, -1711.30, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1829.90, -1711.40, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1833.10, -1711.40, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1836.30, -1711.40, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1839.50, -1711.40, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1842.70, -1711.40, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1842.70, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1839.50, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1836.30, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1833.10, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1829.90, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1826.70, -1711.40, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1826.70, -1732.10, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1829.90, -1732.10, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1833.10, -1732.00, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1836.30, -1732.00, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1839.50, -1732.00, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1842.70, -1732.00, 5205.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1842.70, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1839.50, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1836.30, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1833.10, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1829.90, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2000, 1826.70, -1732.00, 5208.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(1886, 1857.40, -1713.70, 5205.10,   9.75, 0.00, 220.50);
	CreateDynamicObject(1886, 1858.40, -1698.80, 5205.00,   9.74, 0.00, 20.49);
	CreateDynamicObject(1886, 1848.00, -1701.80, 5205.10,   9.74, 0.00, 20.49);
	CreateDynamicObject(1886, 1852.60, -1715.00, 5205.00,   9.74, 0.00, 320.50);
	CreateDynamicObject(1886, 1865.70, -1723.10, 5205.10,   9.74, 0.00, 270.49);
	CreateDynamicObject(1886, 1846.60, -1728.70, 5205.00,   13.99, 0.00, 236.49);
	CreateDynamicObject(1886, 1846.60, -1728.70, 5208.50,   13.99, 0.00, 236.49);
	CreateDynamicObject(1886, 1846.60, -1728.70, 5212.10,   13.99, 0.00, 236.49);
	CreateDynamicObject(1886, 1865.40, -1742.30, 5208.60,   13.99, 0.00, 308.74);
	CreateDynamicObject(1886, 1846.20, -1750.40, 5208.60,   13.99, 0.00, 128.73);
	CreateDynamicObject(1886, 1869.10, -1733.80, 5212.20,   13.99, 0.00, 294.73);
	CreateDynamicObject(1886, 1866.80, -1742.20, 5208.60,   13.99, 0.00, 46.73);
	CreateDynamicObject(1886, 1867.50, -1750.60, 5212.10,   13.99, 0.00, 224.73);
	CreateDynamicObject(1886, 1845.80, -1750.60, 5212.20,   13.99, 0.00, 146.73);
	CreateDynamicObject(10675, 1814.92, -1707.88, 5211.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(2343, 1815.06, -1718.19, 5209.26,   0.00, 0.00, 271.44);
	CreateDynamicObject(2639, 1815.93, -1732.11, 5209.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2639, 1813.80, -1732.11, 5209.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2639, 1818.10, -1732.14, 5209.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1649, 1818.09, -1728.31, 5210.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(1649, 1813.72, -1728.31, 5210.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(1649, 1809.34, -1728.32, 5210.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1819.75, -1735.67, 5210.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(1501, 1822.96, -1729.31, 5208.75,   0.00, 0.00, 225.86);
	CreateDynamicObject(19460, 1824.60, -1728.09, 5213.26,   0.00, 0.00, 1.46);
	CreateDynamicObject(19460, 1820.04, -1716.43, 5210.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1810.41, -1716.43, 5210.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1810.12, -1735.67, 5210.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(19460, 1807.20, -1730.95, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1807.20, -1721.33, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(19460, 1822.01, -1735.16, 5210.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2596, 1823.18, -1735.28, 5210.92,   0.00, 0.00, 179.69);
	CreateDynamicObject(1622, 1823.74, -1728.80, 5211.67,   0.00, 0.00, 274.67);
	CreateDynamicObject(1497, 1824.57007, -1718.43030, 5201.51563,   0.00000, 0.00000, 90.00000);


	/////////////////EXTRA/////////////
	CreateDynamicObject(19355, 1084.08838, -1362.50000, 14.53580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1087.00000, -1362.50000, 14.53580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1087.78003, -1362.50000, 14.53580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1087.78003, -1362.50000, 14.97580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1084.59998, -1362.50000, 14.97580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1083.62000, -1362.50000, 14.95580,   0.00000, 0.00000, 90.00000);

	//NEWS Exterior
    CreateDynamicObject(1595, 780.78998, -1344.77002, 17.61000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1595, 780.63000, -1360.08997, 17.61000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1595, 780.58002, -1373.30005, 17.61000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3763, 699.78998, -1355.90002, 60.89000,   0.00000, 0.00000, 269.70999);
    CreateDynamicObject(3851, 647.50000, -1373.59998, 17.40000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 647.50000, -1379.00000, 17.40000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 647.59998, -1354.90002, 18.60000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 647.59998, -1360.59998, 18.60000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 647.70001, -1342.19995, 17.40000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 647.70001, -1336.50000, 17.40000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3578, 776.90002, -1329.80005, 11.92000,   35.24000, 0.00000, 359.69000);
    CreateDynamicObject(8661, 767.00000, -1374.80005, 12.70000,   359.25000, 0.00000, 0.00000);
    CreateDynamicObject(8661, 737.50000, -1349.80005, 12.70000,   0.00000, 0.00000, 89.75000);
    CreateDynamicObject(14387, 648.40002, -1363.59998, 12.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(14387, 648.40002, -1359.19995, 12.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(14387, 648.40002, -1354.69995, 12.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(14387, 648.40002, -1350.30005, 12.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(16501, 768.40002, -1329.81995, 14.40000,   0.00000, 0.00000, 88.49000);
    CreateDynamicObject(16501, 761.59998, -1329.69995, 14.40000,   0.00000, 0.00000, 89.52000);
    CreateDynamicObject(16501, 754.70001, -1329.59998, 14.40000,   0.00000, 0.00000, 88.85000);
    CreateDynamicObject(16501, 747.79999, -1329.52002, 14.40000,   0.00000, 0.00000, 89.84000);
    CreateDynamicObject(16501, 741.00000, -1329.51001, 14.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 734.29999, -1329.51001, 14.40000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(16501, 784.20001, -1330.09998, 13.10000,   90.00000, 180.69000, 270.00000);
    CreateDynamicObject(16501, 785.29999, -1330.09998, 13.10000,   90.00000, 180.69000, 270.50000);
    CreateDynamicObject(16501, 787.40002, -1333.50000, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1340.50000, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1346.69995, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1353.00000, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1359.69995, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1366.40002, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1373.09998, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1379.09998, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 787.40002, -1381.50000, 14.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 770.40002, -1385.00000, 14.50000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(16501, 763.59998, -1385.00000, 14.50000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(16501, 757.79999, -1385.00000, 14.50000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(16501, 741.00000, -1359.69995, 22.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(16501, 757.79999, -1384.19995, 22.10000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(16501, 757.79999, -1384.19995, 18.40000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(16501, 757.79999, -1384.19995, 14.40000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(16501, 761.20001, -1380.69995, 14.40000,   0.00000, 0.00000, 359.98999);
    CreateDynamicObject(16501, 761.20001, -1380.69995, 18.60000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1380.69995, 22.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1374.09998, 14.40000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1367.50000, 14.40000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1365.59998, 14.40000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 753.90002, -1356.30005, 14.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 747.29999, -1356.30005, 14.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 744.40002, -1356.30005, 14.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 744.40002, -1356.30005, 18.50000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 744.40002, -1356.30005, 22.10000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 747.29999, -1356.30005, 18.50000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 747.29999, -1356.30005, 22.10000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 753.90002, -1356.30005, 18.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 753.90002, -1356.30005, 22.10000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 761.20001, -1365.59998, 18.50000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1365.59998, 22.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1367.50000, 18.60000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1367.50000, 22.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1374.09998, 18.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1374.09998, 22.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 757.70001, -1382.00000, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1377.90002, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1373.69995, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1369.50000, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1365.50000, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1364.40002, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 753.90002, -1358.59998, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 748.59998, -1358.59998, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 744.59998, -1358.59998, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(3851, 761.40002, -1378.59998, 16.80000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 761.40002, -1367.59998, 16.80000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 748.50000, -1356.09998, 21.10000,   0.00000, 0.00000, 89.99000);
    CreateDynamicObject(3851, 748.40002, -1356.09998, 16.70000,   0.00000, 0.00000, 89.99000);
    CreateDynamicObject(3660, 761.90002, -1374.80005, 14.40000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(736, 763.00000, -1368.40002, 24.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 740.70001, -1353.80005, 14.40000,   0.00000, 0.00000, 39.98000);
    CreateDynamicObject(16501, 735.50000, -1349.30005, 14.40000,   0.00000, 0.00000, 57.98000);
    CreateDynamicObject(16501, 734.09998, -1348.40002, 14.20000,   0.00000, 0.00000, 57.97000);
    CreateDynamicObject(16501, 740.70001, -1353.80005, 18.50000,   0.00000, 0.00000, 39.98000);
    CreateDynamicObject(16501, 740.70001, -1353.80005, 22.10000,   0.00000, 0.00000, 39.98000);
    CreateDynamicObject(16501, 735.50000, -1349.30005, 18.40000,   0.00000, 0.00000, 57.97000);
    CreateDynamicObject(16501, 735.50000, -1349.30005, 22.10000,   0.00000, 0.00000, 57.97000);
    CreateDynamicObject(16501, 734.09998, -1348.40002, 18.20000,   0.00000, 0.00000, 57.97000);
    CreateDynamicObject(16501, 734.09998, -1348.40002, 22.10000,   0.00000, 0.00000, 57.97000);
    CreateDynamicObject(16501, 737.70001, -1357.80005, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 735.00000, -1357.50000, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 734.29999, -1354.40002, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 733.90002, -1351.00000, 24.40000,   0.00000, 270.00000, 237.97000);
    CreateDynamicObject(16501, 738.79999, -1355.00000, 24.40000,   0.00000, 270.00000, 219.72000);
    CreateDynamicObject(3660, 738.40002, -1351.00000, 14.10000,   0.00000, 0.00000, 140.00000);
    CreateDynamicObject(3660, 752.46997, -1366.51001, 14.40000,   0.00000, 0.00000, 212.11000);
    CreateDynamicObject(3660, 764.29999, -1374.80005, 14.40000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(3660, 763.79999, -1371.69995, 14.40000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3934, 741.90002, -1370.30005, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(16501, 734.79999, -1358.09998, 25.00000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(16501, 738.40002, -1354.59998, 25.00000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 731.29999, -1354.59998, 25.00000,   0.00000, 0.00000, 180.99001);
    CreateDynamicObject(16501, 734.79999, -1355.90002, 27.10000,   0.00000, 270.00000, 269.95999);
    CreateDynamicObject(16501, 734.79999, -1353.19995, 27.10000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 734.79999, -1351.09998, 25.00000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(3851, 742.09998, -1355.30005, 21.10000,   0.00000, 0.00000, 39.99000);
    CreateDynamicObject(3851, 742.09998, -1355.30005, 16.70000,   0.00000, 0.00000, 39.99000);
    CreateDynamicObject(3851, 733.70001, -1348.00000, 16.70000,   0.00000, 0.00000, 57.99000);
    CreateDynamicObject(3851, 733.70001, -1348.00000, 21.10000,   0.00000, 0.00000, 57.99000);
    CreateDynamicObject(16501, 757.70001, -1356.30005, 19.40000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 757.70001, -1356.30005, 22.10000,   0.00000, 0.00000, 89.98000);
    CreateDynamicObject(16501, 761.20001, -1359.80005, 19.40000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 761.20001, -1359.80005, 22.10000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 757.70001, -1358.40002, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(16501, 757.70001, -1360.69995, 24.40000,   0.00000, 270.00000, 269.98001);
    CreateDynamicObject(3851, 755.79999, -1356.09998, 21.10000,   0.00000, 0.00000, 89.99000);
    CreateDynamicObject(3851, 761.40002, -1361.69995, 21.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 759.38000, -1359.21997, 15.10000,   0.00000, 0.00000, 31.98000);
    CreateDynamicObject(3851, 751.70001, -1356.09998, 16.70000,   0.00000, 0.00000, 89.99000);
    CreateDynamicObject(16501, 757.50000, -1358.59998, 17.30000,   0.00000, 270.00000, 271.22000);
    CreateDynamicObject(16501, 757.70001, -1362.90002, 17.30000,   0.00000, 270.00000, 269.97000);
    CreateDynamicObject(3851, 761.40002, -1372.90002, 21.10000,   0.00000, 0.00000, 359.75000);
    CreateDynamicObject(3851, 761.40002, -1378.59998, 21.10000,   0.00000, 0.00000, 360.00000);
    CreateDynamicObject(3851, 755.79999, -1384.40002, 21.10000,   0.00000, 0.00000, 271.00000);
    CreateDynamicObject(3851, 755.79999, -1384.40002, 16.80000,   0.00000, 0.00000, 270.98999);
    CreateDynamicObject(1569, 758.54999, -1357.79004, 12.90000,   0.00000, 0.00000, 302.32001);
    CreateDynamicObject(1569, 760.13000, -1360.27002, 12.90000,   0.00000, 0.00000, 122.38000);
    CreateDynamicObject(16501, 783.91998, -1385.01001, 14.50000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(736, 763.00000, -1378.59998, 24.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(736, 741.79999, -1353.59998, 23.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(736, 734.50000, -1347.40002, 23.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3660, 747.79999, -1354.90002, 14.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(736, 751.09998, -1355.19995, 23.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 732.09998, -1340.09998, 18.00000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1333.09998, 18.00000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1333.09998, 22.30000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1340.09998, 22.30000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1344.19995, 22.30000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1344.19995, 18.00000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1333.09998, 13.70000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1340.19995, 13.70000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(16501, 732.09998, -1346.19995, 13.70000,   0.00000, 0.00000, 359.98001);
    CreateDynamicObject(3851, 732.29999, -1346.50000, 16.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3851, 732.29999, -1335.19995, 16.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3851, 732.29999, -1335.19995, 21.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3851, 732.29999, -1346.50000, 21.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3660, 732.90002, -1339.30005, 14.10000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(736, 732.90002, -1341.50000, 23.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(736, 732.79999, -1334.40002, 23.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 734.29999, -1330.19995, 12.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16501, 770.40002, -1329.90002, 14.40000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1569, 733.50000, -1358.19995, 24.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1569, 736.40002, -1358.19995, 24.50000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(16501, 772.10999, -1330.16003, 14.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(11547, 747.09998, -1333.90002, 15.51000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(11547, 763.70001, -1334.00000, 15.50000,   0.00000, 0.00000, 269.25000);
    CreateDynamicObject(983, 771.90002, -1333.50000, 13.40000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(983, 738.79999, -1333.30005, 13.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3851, 766.20001, -1330.30005, 11.70000,   0.00000, 0.00000, 88.74000);
    CreateDynamicObject(3851, 754.90002, -1330.09998, 11.70000,   0.00000, 0.00000, 88.74000);
    CreateDynamicObject(3851, 746.50000, -1330.09998, 11.60000,   0.00000, 0.00000, 90.48000);
    CreateDynamicObject(3851, 744.50000, -1330.09998, 11.70000,   0.00000, 0.00000, 90.48000);
    CreateDynamicObject(982, 758.90002, -1330.30005, 13.40000,   0.00000, 0.00000, 89.25000);
    CreateDynamicObject(984, 745.40002, -1330.09998, 13.30000,   0.00000, 0.00000, 270.50000);
    CreateDynamicObject(1232, 647.50000, -1349.69995, 13.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1232, 647.50000, -1365.59998, 13.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1439, 736.59998, -1330.50000, 12.70000,   0.00000, 0.00000, 1.14000);
    CreateDynamicObject(3851, 735.00000, -1350.98999, 21.40000,   90.00000, 180.67999, 269.06000);
    CreateDynamicObject(3851, 738.50000, -1354.59998, 21.50000,   90.00000, 179.32001, 180.66000);
    CreateDynamicObject(8168, 784.50000, -1334.00000, 14.50000,   0.00000, 0.00000, 287.73999);
    CreateDynamicObject(1411, 787.40002, -1332.80005, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1338.09998, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1343.40002, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1348.80005, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1354.19995, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1359.50000, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1364.80005, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1370.09998, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.40002, -1375.50000, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 787.29999, -1381.19995, 15.70000,   0.00000, 0.00000, 269.98999);
    CreateDynamicObject(1411, 784.20001, -1385.09998, 15.70000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1411, 769.70001, -1385.09998, 15.70000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1411, 764.29999, -1385.00000, 15.70000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1411, 758.29999, -1384.90002, 15.70000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1411, 784.70001, -1330.09998, 15.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1411, 735.00000, -1329.59998, 15.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1411, 771.29999, -1330.00000, 15.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3526, 737.09998, -1365.50000, 24.70000,   0.00000, 0.00000, 270.98999);
    CreateDynamicObject(3526, 746.79999, -1365.50000, 24.80000,   0.00000, 0.00000, 270.98001);
    CreateDynamicObject(3526, 737.09998, -1375.40002, 24.80000,   0.00000, 0.00000, 90.98000);
    CreateDynamicObject(3526, 746.79999, -1375.40002, 24.80000,   0.00000, 0.00000, 90.98000);
    CreateDynamicObject(16501, 779.19000, -1330.13000, 14.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3660, 762.40002, -1371.69995, 14.40000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(3660, 751.40997, -1364.81006, 14.40000,   0.00000, 0.00000, 212.11000);
    CreateDynamicObject(3660, 750.44000, -1363.26001, 14.40000,   0.00000, 0.00000, 212.11000);
    CreateDynamicObject(3660, 749.95001, -1362.44995, 14.40000,   0.00000, 0.00000, 212.11000);

    //FLAP GANG HQ
	CreateDynamicObject(8210, 690.85938, -1443.62402, 15.58000,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(8210, 689.49469, -1498.84070, 15.58000,   0.00000, 0.00000, -91.84000);
	CreateDynamicObject(8210, 770.27130, -1443.59753, 15.50000,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(8210, 770.27130, -1461.00000, 15.50000,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(8210, 716.21472, -1526.04407, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8210, 728.29999, -1526.04407, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11697, 725.86267, -1449.02478, 21.84000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11698, 725.86267, -1444.21057, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11698, 725.86267, -1441.19995, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11698, 725.86267, -1438.19995, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11698, 725.86267, -1435.19995, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11697, 725.86267, -1426.18250, 21.80400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11698, 725.86267, -1432.23999, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11698, 725.86267, -1431.00000, 21.45510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 728.49469, -1416.90918, 19.77060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 761.70282, -1416.90918, 19.77060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 716.81372, -1416.90918, 19.77060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 746.11383, -1416.90918, 19.77060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 761.63617, -1430.27051, 19.77060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 702.85999, -1416.14758, 12.46000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 705.82001, -1416.14758, 12.46000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(9131, 714.48077, -1416.31567, 13.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 714.48077, -1416.31567, 15.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 714.48077, -1416.31567, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.22101, -1416.29565, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.22101, -1416.29565, 15.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.22101, -1416.29565, 13.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.98102, -1416.29565, 13.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.98102, -1416.29565, 15.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.98102, -1416.29565, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8615, 711.15833, -1467.77136, 19.78590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 764.28845, -1418.48755, 12.46000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19125, 738.27893, -1472.76794, 22.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 738.22797, -1450.91064, 22.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 712.69849, -1450.92871, 22.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 712.75873, -1472.85901, 22.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(921, 725.69519, -1451.26978, 19.23950,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1226, 714.00000, -1422.54370, 16.31250,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(1226, 700.99060, -1473.93909, 7.97270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1226, 696.47369, -1455.36096, 12.35280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1231, 762.48425, -1426.61230, 14.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9131, 715.96552, -1417.01880, 13.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.96552, -1417.01880, 15.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 715.96552, -1417.01880, 18.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 730.75018, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 734.90002, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 739.00000, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 743.09998, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 747.20001, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 751.29999, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 755.40002, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 759.29999, -1417.36304, 20.10310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 761.35999, -1419.43994, 20.10310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 761.35999, -1423.54004, 20.10310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 761.35999, -1427.66003, 20.10310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 726.59998, -1417.54297, 21.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 722.46002, -1417.54297, 21.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 718.29999, -1417.54297, 21.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19129, 722.15417, -1462.10706, 21.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19129, 728.24194, -1462.09973, 21.18800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 729.09198, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 726.50879, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 731.64001, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 734.17999, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 736.71997, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 737.97998, -1452.75024, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1455.28003, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1457.81995, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1460.35999, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1465.45996, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1462.90002, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1468.00000, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1468.00000, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1468.00000, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 737.97998, -1468.00000, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 736.71997, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 737.97998, -1470.52002, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 734.17999, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 731.64001, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 729.09198, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 723.97998, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 719.00000, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 721.50000, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 716.46002, -1472.00000, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 713.53290, -1468.00354, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1452.75024, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1455.28003, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1457.81995, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1460.35999, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1462.90002, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 713.53290, -1465.45996, 22.93340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 717.53998, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 720.09998, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 722.64001, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2755, 715.00000, -1451.49023, 22.93340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3463, 723.36139, -1486.12451, 0.69430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 752.16351, -1423.72083, 19.40200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 716.25232, -1419.60364, 21.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 716.25232, -1423.00000, 21.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 764.58240, -1469.81909, 13.42000,   0.00000, 0.00000, -97.00000);
	CreateDynamicObject(14781, 758.70160, -1468.89697, 13.09962,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2413, 735.65149, -1462.43262, 21.24380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 758.34875, -1460.42102, 13.18000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 747.80023, -1465.55896, 8.37088,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1468.60107, 8.37090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1471.72302, 8.37090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1474.17505, 8.37090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1474.17517, 5.38380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1471.86011, 5.38380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1469.00000, 5.38380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 749.31708, -1475.69263, 8.37090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 747.80017, -1462.50000, 9.18390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1465.55896, 8.37090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1465.55896, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 768.41467, -1455.78687, 12.50000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1468.60107, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1471.00000, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1474.00000, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 749.55292, -1475.69263, 5.38380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 749.31708, -1475.69263, 10.76000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 752.00000, -1475.69263, 10.76000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 752.00000, -1475.69263, 8.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 758.00000, -1475.69263, 10.76000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 754.96002, -1475.69263, 10.76000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 747.81763, -1462.52002, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1459.40002, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1456.26001, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1453.07996, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 747.81763, -1450.04004, 10.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14820, 735.74451, -1462.67651, 22.36110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2413, 736.10352, -1462.66553, 18.90400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2413, 735.65149, -1463.59595, 21.24380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 737.33087, -1464.97754, 21.83150,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2232, 737.33087, -1460.49890, 21.83150,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 737.90900, -1464.11780, 23.71900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 737.87201, -1461.84302, 23.71900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18654, 737.07092, -1459.61658, 21.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18654, 737.06189, -1465.83228, 21.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18655, 734.58698, -1452.12793, 21.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18655, 734.54510, -1471.31885, 21.20000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 764.13318, -1475.81848, 12.11460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 759.67999, -1475.81848, 12.11460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 748.33990, -1475.65186, 12.11460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 748.33990, -1463.69995, 12.11460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 748.33990, -1451.78003, 12.11460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19280, 757.73212, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19280, 755.00000, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19280, 760.00000, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19280, 763.00000, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19280, 752.00000, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(19280, 749.00000, -1475.58228, 17.00000,   -45.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 768.41467, -1455.78687, 12.46000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 768.41467, -1455.78687, 12.48000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 727.47552, -1470.76868, 21.54000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2350, 717.71625, -1467.16724, 21.57998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 717.75275, -1470.22949, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 722.50385, -1470.24878, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 720.71472, -1470.23914, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 719.67383, -1467.11389, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 720.73389, -1467.08801, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 722.59741, -1467.11267, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 719.49005, -1470.26758, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2725, 721.62543, -1470.33264, 21.65441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2725, 718.63220, -1467.18677, 21.65442,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2725, 721.71094, -1467.03052, 21.65442,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2725, 718.61389, -1470.33569, 21.65442,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 726.67139, -1468.96069, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 725.66199, -1468.93689, 21.58530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 769.87396, -1442.05151, 15.42530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 748.93585, -1440.69214, 15.42530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1566, 724.83948, -1475.84961, 5.97080,   -1.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 721.12469, -1496.79785, 1.24670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 725.12549, -1496.89783, 1.24670,   0.00000, 0.00000, 0.00000);

	//BLOCK PAY N SPRAYS AND TRANSFENDER
	CreateDynamicObject(2957, 719.97, -462.62, 16.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(2957, 1040.97, -1026.15, 32.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2957, 1041.71, -1026.15, 32.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2957, 488.28, -1734.51, 12.00,   0.00, 0.00, 349.64);
	CreateDynamicObject(2957, 488.28, -1734.57, 13.02,   0.00, 0.00, 349.64);
	CreateDynamicObject(2957, 2071.56, -1831.41, 14.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(2957, 2071.52, -1831.39, 14.14,   0.00, 0.00, 90.00);
	CreateDynamicObject(2957, 1843.35, -1856.26, 13.99,   0.00, 0.00, 90.00);

	// Border BG-SA
	CreateDynamicObject(1569, 1798.83069, 801.99518, 10.99730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(1569, 1798.83069, 803.33319, 11.13330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1795.80859, 802.65051, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.47681, 808.06641, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.47852, 808.06842, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(2208, 1800.49890, 809.39258, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1794.76489, 807.90405, 11.16100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1793.50171, 809.28235, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1799.16028, 808.10992, 11.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1794.12524, 813.07373, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1795.89136, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1797.22144, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1798.55725, 813.07172, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, 1795.71606, 812.93738, 12.95650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2249, 1797.67432, 812.87671, 13.17230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2196, 1800.72632, 808.66833, 12.02570,   0.00000, 0.00000, 234.06738);
	CreateDynamicObject(2167, 1800.32825, 813.07520, 11.16140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1797.01111, 804.32043, 11.16080,   0.00000, 0.00000, 207.18959);
	CreateDynamicObject(2291, 1794.41711, 804.03638, 11.16080,   0.00000, 0.00000, 139.95801);
	CreateDynamicObject(1822, 1794.75635, 803.27527, 11.16040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1797.86804, 803.28003, 13.02330,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(19893, 1793.61072, 807.93860, 12.02560,   0.00000, 0.00000, -268.15701);
	CreateDynamicObject(19893, 1800.46680, 808.13391, 12.02560,   0.00000, 0.00000, 268.15695);
	CreateDynamicObject(2261, 1793.54199, 812.59583, 13.11710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 1799.81006, 812.59583, 13.59590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.51172, 810.36987, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.37708, 805.81140, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 1793.90881, 812.88220, 12.99409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19821, 1794.59070, 812.90698, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19822, 1795.24365, 812.90179, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19624, 1793.60681, 809.12292, 12.11340,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19786, 1796.78467, 813.14948, 14.70290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1793.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1795.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1796.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1797.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1799.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1786.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1803.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1791.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1794.80493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2813, 1795.27014, 803.76202, 11.63821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2824, 1800.36816, 806.95227, 12.02553,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2825, 1793.44287, 806.80835, 12.02590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2966, 1793.53369, 808.50897, 12.05570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1813.42493, 813.62769, 9.85020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(967, 1789.18030, 802.35437, 9.85930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1780.07898, 802.22949, 9.85020,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(967, 1804.39075, 813.58795, 9.85930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(957, 1818.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1813.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1808.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1803.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1798.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1793.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1788.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1783.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1778.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1774.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1794.17053, 802.16858, 10.93660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.96130, 807.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1794.46436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.96436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1808.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);

	// PAWNSHOP MAPPING //
    CreateDynamicObject(19379, 78.83000, 2500.87500, 2000.00000,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19379, 89.25200, 2499.59497, 2000.00000,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(1522, 80.42300, 2496.07690, 2000.08398,   0.00000, 0.00000, -7.00000);
    CreateDynamicObject(1522, 81.91100, 2495.89502, 2000.08398,   0.00000, 0.00000, -7.00000);
    CreateDynamicObject(2000, 74.80300, 2497.11011, 2000.08801,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 80.24100, 2496.38306, 2000.08801,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(19325, 76.93700, 2496.46289, 2001.76599,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19325, 87.11200, 2495.17700, 2001.74304,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(2000, 83.67900, 2495.96802, 2000.08801,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 88.39100, 2495.38501, 2000.08801,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 74.80300, 2497.11011, 2001.48596,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 74.80300, 2497.11011, 2002.88098,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 80.24100, 2496.38306, 2001.48596,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 80.24100, 2496.38306, 2002.88599,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(19450, 88.66500, 2495.06201, 1999.46997,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19450, 75.27700, 2496.70898, 1999.46997,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19450, 88.70400, 2499.74609, 2001.84094,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 88.70500, 2509.37695, 2001.84094,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 74.42800, 2501.59009, 2001.84094,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19379, 79.43900, 2501.91406, 1999.99805,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 89.93900, 2501.91504, 1999.99805,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19450, 79.06800, 2506.33008, 2001.84094,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 88.69100, 2506.33105, 2001.84094,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2497.09497, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2498.49292, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2499.89307, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2501.29199, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2502.69092, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2504.09009, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2505.48901, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2497.09497, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2498.49292, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2499.89307, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2501.29199, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2502.69092, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2504.08911, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2505.48804, 2000.95105,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2499.89307, 2001.41602,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.37500, 2502.69092, 2001.41602,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.85900, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.25700, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 77.65700, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05800, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 80.45900, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 81.85800, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.25800, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 84.65700, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 86.05600, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 87.45400, 2506.37305, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2000, 88.39100, 2495.38501, 2001.48706,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 88.39100, 2495.38501, 2002.88599,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2229, 74.85900, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.25700, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 77.65700, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05800, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 80.45900, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 81.85800, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 84.65700, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.25800, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 86.05600, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 87.45400, 2506.37305, 2000.95105,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05800, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05600, 2506.37305, 2001.87903,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05800, 2506.37305, 2002.34204,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05600, 2506.37305, 2002.80603,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05800, 2506.37305, 2003.27100,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 79.05600, 2506.37305, 2003.73401,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.25800, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.26000, 2506.37305, 2001.87903,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.25800, 2506.37305, 2002.34204,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.26000, 2506.37305, 2002.80603,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.25800, 2506.37305, 2003.27100,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 83.26000, 2506.37305, 2003.73401,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 88.13700, 2495.41089, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2496.81104, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2498.21094, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2499.60791, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2501.00806, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2502.40796, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2503.80591, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2505.20410, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2495.41089, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2496.81104, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2498.21094, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2499.60791, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2501.00806, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2502.40796, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2503.80591, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2505.20410, 2000.94897,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2498.21094, 2001.41296,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.13700, 2502.40796, 2001.41296,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27400, 2495.90210, 2000.94897,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 88.27400, 2495.90210, 2002.34802,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 74.85100, 2496.97412, 2000.94897,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 74.85100, 2496.97412, 2002.34705,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2505.75610, 2000.94897,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2505.75610, 2002.34802,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 88.27200, 2506.37207, 2000.94897,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 88.27200, 2506.37207, 2002.34705,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 77.60600, 2505.60693, 2000.48706,   90.00000, 90.00000, 30.00000);
    CreateDynamicObject(2229, 76.50600, 2506.30688, 2000.48706,   90.00000, 90.00000, -30.00000);
    CreateDynamicObject(2229, 76.96600, 2505.59692, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.50600, 2506.30688, 2000.94995,   90.00000, 90.00000, -30.00000);
    CreateDynamicObject(2229, 77.60600, 2505.60693, 2000.94995,   90.00000, 90.00000, 30.00000);
    CreateDynamicObject(2229, 76.96400, 2505.59692, 2000.95203,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 74.85900, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.25700, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 77.65700, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 80.45900, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 81.85800, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 84.65700, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 86.05600, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 87.45400, 2506.37305, 2001.41602,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 86.00700, 2505.60596, 2000.48706,   90.00000, 90.00000, 30.00000);
    CreateDynamicObject(2229, 84.90800, 2506.30811, 2000.48706,   90.00000, 90.00000, -30.00000);
    CreateDynamicObject(2229, 85.36800, 2505.59692, 2000.48706,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 84.90800, 2506.30811, 2000.94995,   90.00000, 90.00000, -30.00000);
    CreateDynamicObject(2229, 86.00700, 2505.60596, 2000.94995,   90.00000, 90.00000, 30.00000);
    CreateDynamicObject(2229, 85.36600, 2505.59692, 2000.95203,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.96500, 2505.99194, 2001.48206,   120.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 76.96600, 2505.96509, 2000.95203,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 85.36600, 2505.99609, 2001.48206,   120.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 85.36700, 2505.96704, 2000.95203,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 74.74700, 2497.09302, 2000.99695,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.74900, 2498.49292, 2000.99695,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.74700, 2501.29395, 2000.99695,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.74800, 2504.09009, 2000.99695,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.74700, 2499.89111, 2001.46106,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 74.74700, 2502.69092, 2001.46106,   110.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80200, 2495.40991, 2000.77905,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80200, 2496.80811, 2000.77905,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80200, 2499.60596, 2000.77905,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80200, 2501.00610, 2000.77905,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80200, 2503.80591, 2000.77905,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.74000, 2501.20190, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 82.39300, 2503.16895, 2000.94202,   180.00000, 0.00000, 0.00000);
    CreateDynamicObject(2229, 80.92300, 2503.26904, 2000.94202,   180.00000, 0.00000, -30.00000);
    CreateDynamicObject(2229, 82.02200, 2503.16992, 2000.94397,   180.00000, 0.00000, 0.00000);
    CreateDynamicObject(2229, 82.75200, 2503.25610, 2000.94397,   180.00000, 0.00000, 10.00000);
    CreateDynamicObject(2229, 81.65400, 2503.14893, 2000.94202,   180.00000, 0.00000, -10.00000);
    CreateDynamicObject(2229, 83.10600, 2503.36304, 2000.94202,   180.00000, 0.00000, 15.00000);
    CreateDynamicObject(2229, 83.41100, 2503.57593, 2000.94397,   180.00000, 0.00000, 30.00000);
    CreateDynamicObject(2229, 81.29000, 2503.20288, 2000.94397,   180.00000, 0.00000, -15.00000);
    CreateDynamicObject(2229, 81.20300, 2503.41895, 2000.92639,   90.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 81.68200, 2503.72192, 2000.28406,   -20.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 80.72100, 2503.72095, 2000.28406,   -20.00000, 90.00000, 0.00000);
    CreateDynamicObject(2229, 81.86000, 2502.93994, 2000.71997,   180.00000, -25.00000, 0.00000);
    CreateDynamicObject(2229, 82.62500, 2502.93994, 2000.71997,   180.00000, 25.00000, 0.00000);
    CreateDynamicObject(2229, 77.37000, 2501.20093, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.73500, 2498.02100, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.36600, 2498.02002, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.55400, 2500.98901, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.92300, 2500.98804, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.49900, 2497.62012, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.86700, 2497.62109, 2000.48706,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.55400, 2500.98706, 2000.94800,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.92200, 2500.98608, 2000.94800,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.86700, 2497.61890, 2000.94800,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 85.49900, 2497.61792, 2000.94800,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.73500, 2498.01904, 2000.94995,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.36600, 2498.01904, 2000.94800,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.74000, 2501.19995, 2000.95203,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 77.37000, 2501.19897, 2000.95203,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(19325, 87.16400, 2495.31299, 2001.69104,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(2000, 83.67900, 2495.96802, 2001.48596,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2000, 83.67900, 2495.96802, 2002.88599,   0.00000, 0.00000, 173.00000);
    CreateDynamicObject(2229, 77.40300, 2498.99902, 1999.81201,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 78.30400, 2498.38403, 1999.81396,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 78.30300, 2501.61206, 1999.81396,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 77.40000, 2502.22705, 1999.81201,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 86.44400, 2497.98706, 1999.81396,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 85.54900, 2498.60400, 1999.81201,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 86.49200, 2501.37207, 1999.81396,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2229, 85.59000, 2501.98706, 1999.81201,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2229, 74.84900, 2498.86206, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2500.26099, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2501.66089, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2503.06006, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2504.45898, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2505.85693, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 74.84900, 2507.25610, 2003.25305,   0.00000, 90.00000, -90.00000);
    CreateDynamicObject(2229, 76.26200, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 77.66100, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 79.06000, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 80.45900, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 81.85800, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 83.25700, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 84.65500, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 86.05400, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 87.45200, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 88.85000, 2505.86792, 2003.25305,   0.00000, 90.00000, 180.00000);
    CreateDynamicObject(2229, 88.27500, 2495.77490, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2497.17310, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2498.57202, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2499.97095, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2501.37012, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2502.76807, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2504.16406, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 88.27500, 2505.56299, 2003.25305,   0.00000, 90.00000, 90.00000);
    CreateDynamicObject(19447, 74.93300, 2501.79102, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19447, 79.83900, 2505.80298, 1998.34302,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19447, 89.47300, 2505.80396, 1998.34302,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19447, 88.22500, 2500.18994, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19447, 88.22500, 2509.82495, 1998.34497,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19447, 88.60500, 2495.24512, 1998.34302,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19447, 75.33800, 2496.87109, 1998.34302,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19325, 76.90100, 2496.59302, 2001.81995,   0.00000, 0.00000, 83.00000);
    CreateDynamicObject(19425, 81.94700, 2495.81299, 2002.85400,   -90.00000, 0.00000, -6.00000);
    CreateDynamicObject(19425, 81.94700, 2495.81299, 2003.40503,   -90.00000, 0.00000, -6.00000);
    CreateDynamicObject(19425, 81.94700, 2495.81299, 2003.93896,   -90.00000, 0.00000, -6.00000);
    CreateDynamicObject(19425, 81.94100, 2495.82690, 2003.08496,   -90.00000, 0.00000, -6.00000);
    CreateDynamicObject(2230, 77.82900, 2497.97290, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.83000, 2498.16895, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.46100, 2497.97095, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.26900, 2497.97290, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.46000, 2498.16992, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.26800, 2498.16992, 2000.12402,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.83000, 2501.10498, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.83000, 2501.39502, 2000.13306,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.46200, 2501.39502, 2000.13306,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.26200, 2501.39502, 2000.13306,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.46000, 2501.10400, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 77.26400, 2501.10498, 2000.13098,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.41600, 2497.81006, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.41600, 2497.51489, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.77000, 2497.51489, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.96900, 2497.51489, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.78500, 2497.81104, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.96900, 2497.81104, 2000.13000,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.45600, 2501.16406, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.45700, 2500.90308, 2000.12402,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.82700, 2500.90405, 2000.12402,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 86.01700, 2500.90405, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 85.82600, 2501.16602, 2000.12598,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(2230, 86.01700, 2501.16895, 2000.12805,   90.00000, 90.00000, 90.00000);
    CreateDynamicObject(19428, 77.66300, 2505.04102, 1998.34302,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19428, 86.07100, 2505.03101, 1998.34302,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19428, 78.37500, 2505.93091, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19428, 76.94900, 2505.93408, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19428, 76.34100, 2505.73706, 1998.34497,   0.00000, 0.00000, 60.00000);
    CreateDynamicObject(19428, 78.89300, 2505.69897, 1998.34497,   0.00000, 0.00000, -60.00000);
    CreateDynamicObject(19428, 85.35900, 2505.92212, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19428, 86.78600, 2505.92505, 1998.34302,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19428, 87.37800, 2505.75000, 1998.34497,   0.00000, 0.00000, -60.00000);
    CreateDynamicObject(19428, 84.78000, 2505.72412, 1998.34497,   0.00000, 0.00000, 60.00000);
    CreateDynamicObject(2229, 83.16400, 2504.00098, 1999.54004,   0.00000, 0.00000, 30.00000);
    CreateDynamicObject(2229, 82.88600, 2503.80591, 1999.54004,   0.00000, 0.00000, 15.00000);
    CreateDynamicObject(2229, 82.60200, 2503.72095, 1999.54004,   0.00000, 0.00000, 10.00000);
    CreateDynamicObject(2229, 82.32900, 2503.65405, 1999.54004,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2229, 81.96100, 2503.65405, 1999.54004,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2229, 82.75200, 2503.25610, 2000.94397,   180.00000, 0.00000, 10.00000);
    CreateDynamicObject(2229, 81.67500, 2503.63696, 1999.54004,   0.00000, 0.00000, -10.00000);
    CreateDynamicObject(2229, 81.35700, 2503.68701, 1999.54004,   0.00000, 0.00000, -15.00000);
    CreateDynamicObject(2229, 81.16600, 2503.68799, 1999.54004,   0.00000, 0.00000, -30.00000);
    CreateDynamicObject(2229, 81.18600, 2505.99609, 2001.48206,   120.00000, 90.00000, 0.00000);
    CreateDynamicObject(3013, 78.03500, 2502.35400, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.66200, 2502.35400, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 78.03300, 2501.49097, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.66500, 2501.49512, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 78.03200, 2499.15796, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.66400, 2499.15601, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.66600, 2498.27905, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 78.02700, 2498.27905, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.84700, 2501.25708, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.21400, 2501.25488, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.21900, 2502.13892, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.85100, 2502.13892, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.79600, 2498.74292, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.16200, 2498.74292, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.79600, 2497.88599, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.16500, 2497.88599, 2000.85205,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 78.07000, 2498.70093, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.61100, 2498.69800, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 78.04900, 2501.92896, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.60800, 2501.92798, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.80100, 2501.68506, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.24500, 2501.68896, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.21100, 2498.30103, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 85.75200, 2498.30396, 2001.10400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2040, 75.06400, 2497.83105, 2000.79199,   0.00000, 9.00000, 0.00000);
    CreateDynamicObject(2040, 75.06100, 2499.20996, 2000.79199,   0.00000, 9.00000, 0.00000);
    CreateDynamicObject(2040, 75.05700, 2501.97998, 2000.79199,   0.00000, 9.00000, 0.00000);
    CreateDynamicObject(2040, 75.05600, 2504.81201, 2000.79199,   0.00000, 9.00000, 0.00000);
    CreateDynamicObject(2040, 88.02000, 2497.47412, 2000.79199,   0.00000, -9.00000, 0.00000);
    CreateDynamicObject(2040, 88.04000, 2496.06299, 2000.79199,   0.00000, -9.00000, 0.00000);
    CreateDynamicObject(2040, 88.02700, 2500.26392, 2000.79199,   0.00000, -9.00000, 0.00000);
    CreateDynamicObject(2040, 88.03200, 2501.67603, 2000.79199,   0.00000, -9.00000, 0.00000);
    CreateDynamicObject(2040, 88.01900, 2504.48706, 2000.79199,   0.00000, -9.00000, 0.00000);
    CreateDynamicObject(2229, 87.80000, 2498.20898, 2001.24695,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2229, 87.80300, 2502.40601, 2001.24695,   70.00000, 90.00000, 90.00000);
    CreateDynamicObject(2041, 75.05700, 2500.20801, 2001.42798,   20.00000, 0.00000, 90.00000);
    CreateDynamicObject(2041, 75.05600, 2500.88794, 2001.42798,   20.00000, 0.00000, 90.00000);
    CreateDynamicObject(2041, 75.05700, 2503.05200, 2001.42798,   20.00000, 0.00000, 90.00000);
    CreateDynamicObject(2041, 75.05800, 2503.67310, 2001.42798,   20.00000, 0.00000, 90.00000);
    CreateDynamicObject(2041, 88.07400, 2503.47412, 2001.42798,   20.00000, 0.00000, -90.00000);
    CreateDynamicObject(2041, 88.07200, 2502.78809, 2001.42798,   20.00000, 0.00000, -90.00000);
    CreateDynamicObject(2041, 88.07100, 2499.26099, 2001.42798,   20.00000, 0.00000, -90.00000);
    CreateDynamicObject(2041, 88.06800, 2498.62012, 2001.42798,   20.00000, 0.00000, -90.00000);
    CreateDynamicObject(2006, 81.40000, 2505.74902, 2001.40100,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2006, 81.85600, 2505.74805, 2001.40100,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(2006, 82.35500, 2505.75708, 2001.40100,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(1627, 77.34800, 2505.29590, 2000.83997,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1627, 77.96900, 2505.29907, 2000.84204,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1627, 85.74700, 2505.29492, 2000.84204,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1627, 86.37200, 2505.29712, 2000.84204,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(3013, 85.76200, 2505.77002, 2001.25000,   30.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 86.36900, 2505.77490, 2001.25000,   30.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.30200, 2505.76709, 2001.25000,   30.00000, 0.00000, 0.00000);
    CreateDynamicObject(3013, 77.95700, 2505.76611, 2001.25000,   30.00000, 0.00000, 0.00000);
    CreateDynamicObject(2267, 81.83000, 2506.21997, 2002.34802,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2267, 88.57800, 2503.08911, 2002.34802,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2267, 88.58300, 2498.96704, 2002.34802,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2267, 74.56300, 2503.36890, 2002.34802,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2267, 74.54000, 2500.56201, 2002.34802,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19378, 78.15100, 2501.06201, 2003.80896,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19378, 88.57300, 2499.78101, 2003.80896,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(2040, 81.91600, 2495.83301, 2002.81396,   0.00000, 90.00000, 83.00000);
    CreateDynamicObject(18873, 81.89400, 2495.84912, 2002.75696,   0.00000, 0.00000, -7.00000);
    CreateDynamicObject(19378, 79.32500, 2510.62305, 2003.80896,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19378, 89.74700, 2509.34302, 2003.80896,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(2000, 76.43300, 2496.91211, 2003.55603,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 77.82200, 2496.73999, 2003.55603,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 79.21000, 2496.56812, 2003.55603,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 80.28100, 2496.43604, 2003.55396,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 85.31200, 2495.76807, 2003.55396,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 86.69900, 2495.59595, 2003.55396,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 88.08700, 2495.42798, 2003.55396,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2000, 89.47500, 2495.25610, 2003.55396,   0.00000, 90.00000, 173.00000);
    CreateDynamicObject(2961, 82.83100, 2503.51489, 2000.94104,   90.00000, 90.00000, 129.95900);
    CreateDynamicObject(2277, 82.52170, 2503.85767, 2001.06897,   -15.00000, 0.00000, 220.00000);
    CreateDynamicObject(19089, 81.94400, 2495.95898, 2002.58899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 81.92700, 2495.84497, 2002.58899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 80.11100, 2496.08301, 2001.21704,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 80.07500, 2496.19702, 2001.21704,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 80.07500, 2496.19702, 2003.30103,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 80.11100, 2496.08301, 2003.29297,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 91.16400, 2494.67603, 2001.21704,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 91.18000, 2494.82007, 2001.21704,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 91.18000, 2494.82007, 2003.29797,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 91.18400, 2494.66504, 2003.29797,   0.00000, 90.00000, -7.00000);
    CreateDynamicObject(19089, 79.95500, 2496.20288, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 79.95600, 2496.09912, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 75.01300, 2496.69507, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 75.01400, 2496.81104, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 83.89300, 2495.70605, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 83.87500, 2495.58008, 2003.33899,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19089, 88.10900, 2495.19092, 2003.33899,   0.00000, 0.00000, 0.05900);
    CreateDynamicObject(19089, 88.07900, 2495.05005, 2003.33899,   0.00000, 0.00000, 0.05900);
    CreateDynamicObject(19039, 78.04400, 2501.48901, 2000.99097,   0.00000, 0.00000, -73.55900);
    CreateDynamicObject(19039, 78.03900, 2498.28101, 2000.99097,   0.00000, 0.00000, -73.55900);
    CreateDynamicObject(19040, 77.68700, 2499.13892, 2000.99304,   0.00000, 0.00000, 102.59900);
    CreateDynamicObject(19040, 77.66100, 2502.36401, 2000.99304,   0.00000, 0.00000, 102.59900);
    CreateDynamicObject(19041, 77.65600, 2498.27808, 2000.99097,   0.00000, 0.00000, 106.31900);
    CreateDynamicObject(19041, 77.68800, 2501.49390, 2000.99097,   0.00000, 0.00000, 106.31900);
    CreateDynamicObject(19042, 78.04000, 2499.15796, 2000.99097,   0.00000, 0.00000, -73.98000);
    CreateDynamicObject(19042, 78.05700, 2502.35400, 2000.99097,   0.00000, 0.00000, -73.98000);
    CreateDynamicObject(2710, 78.03700, 2501.91211, 2001.31604,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2710, 77.66400, 2501.92798, 2001.31604,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2710, 77.62900, 2498.70190, 2001.31604,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2710, 78.08800, 2498.67993, 2001.31604,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2710, 85.79200, 2501.68701, 2001.31604,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2710, 86.26800, 2501.66406, 2001.31604,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2710, 85.76800, 2498.30298, 2001.31604,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2710, 86.24400, 2498.28394, 2001.31604,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19043, 85.80800, 2497.88599, 2000.99402,   0.00000, 0.00000, 109.31900);
    CreateDynamicObject(19043, 85.85000, 2502.12695, 2000.99402,   0.00000, 0.00000, 109.31900);
    CreateDynamicObject(19045, 85.87700, 2501.24609, 2000.98999,   0.00000, 0.00000, 107.45900);
    CreateDynamicObject(19046, 86.21500, 2502.12402, 2000.99097,   0.00000, 0.00000, -72.96000);
    CreateDynamicObject(19047, 86.21200, 2501.26001, 2000.98901,   0.00000, 0.00000, -73.62000);
    CreateDynamicObject(19048, 85.79500, 2498.72607, 2000.99097,   0.00000, 0.00000, 100.68000);
    CreateDynamicObject(19049, 86.15500, 2497.88989, 2000.99097,   0.00000, 0.00000, -72.24000);
    CreateDynamicObject(19050, 86.17100, 2498.73291, 2000.98901,   0.00000, 0.00000, -75.83900);
    CreateDynamicObject(19140, 77.24100, 2505.31592, 2001.06799,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19139, 77.44600, 2505.32202, 2001.06799,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19035, 77.86600, 2505.32690, 2001.07202,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19033, 78.06900, 2505.33691, 2001.07300,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19139, 85.64600, 2505.34399, 2001.06799,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19140, 86.27200, 2505.36304, 2001.06799,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19024, 86.47500, 2505.36011, 2001.07703,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19028, 85.86200, 2505.27490, 2001.13501,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19140, 85.76900, 2505.66895, 2001.36597,   0.00000, 30.00000, -90.00000);
    CreateDynamicObject(19035, 86.37100, 2505.66602, 2001.36597,   0.00000, 30.00000, -90.00000);
    CreateDynamicObject(19140, 77.97500, 2505.65698, 2001.36597,   0.00000, 30.00000, -90.00000);
    CreateDynamicObject(19035, 77.30000, 2505.65698, 2001.36597,   0.00000, 30.00000, -90.00000);
    CreateDynamicObject(19042, 75.08900, 2499.21509, 2000.92700,   -9.00000, 0.00000, -74.00000);
    CreateDynamicObject(19040, 75.09500, 2497.82495, 2000.92505,   -8.00000, 0.00000, 285.00000);
    CreateDynamicObject(19042, 75.08400, 2501.98193, 2000.92200,   -14.00000, 0.00000, -74.00000);
    CreateDynamicObject(19040, 75.09100, 2504.81494, 2000.92700,   -8.00000, 0.00000, 284.00000);
    CreateDynamicObject(19048, 87.99400, 2504.48608, 2000.92798,   -14.00000, 0.00000, 100.00000);
    CreateDynamicObject(19043, 88.02500, 2497.47412, 2000.93298,   -9.00000, 0.00000, 104.00000);
    CreateDynamicObject(19043, 88.02500, 2500.26904, 2000.92798,   -9.00000, 0.00000, 109.00000);
    CreateDynamicObject(19049, 88.03200, 2496.06592, 2000.92603,   -8.00000, 0.00000, -257.00000);
    CreateDynamicObject(19050, 88.03100, 2501.67700, 2000.92102,   -9.00000, 0.00000, -258.00000);
    CreateDynamicObject(19042, 75.12500, 2500.89795, 2001.37305,   -116.00000, -84.00000, 13.81900);
    CreateDynamicObject(19040, 75.13200, 2500.21899, 2001.37500,   -116.00000, -84.00000, 13.81900);
    CreateDynamicObject(19040, 75.07200, 2500.21899, 2001.39905,   -116.00000, -84.00000, 13.81900);
    CreateDynamicObject(19042, 75.06100, 2500.90210, 2001.40002,   -116.00000, -84.00000, 13.81900);
    CreateDynamicObject(19043, 75.12200, 2503.06494, 2001.37805,   -70.00000, 82.00000, -185.16000);
    CreateDynamicObject(19043, 75.05800, 2503.06396, 2001.40198,   -70.00000, 82.00000, -185.16000);
    CreateDynamicObject(19043, 75.13500, 2503.68604, 2001.37598,   -70.00000, 82.00000, -185.16000);
    CreateDynamicObject(19043, 75.07400, 2503.68799, 2001.39600,   -70.00000, 82.00000, -185.16000);
    CreateDynamicObject(19042, 87.99600, 2503.45996, 2001.36597,   -92.00000, -2.00000, 259.00000);
    CreateDynamicObject(19042, 88.06000, 2503.45801, 2001.36597,   -92.00000, -2.00000, 259.00000);
    CreateDynamicObject(19043, 87.97400, 2502.77002, 2001.36206,   -90.00000, 0.00000, -93.83900);
    CreateDynamicObject(19043, 88.04100, 2502.76196, 2001.38599,   -90.00000, 0.00000, -93.83900);
    CreateDynamicObject(19042, 87.97800, 2499.24512, 2001.36206,   -92.00000, -2.00000, 259.00000);
    CreateDynamicObject(19042, 88.03800, 2499.23999, 2001.38403,   -92.00000, -2.00000, 259.00000);
    CreateDynamicObject(19043, 87.97200, 2498.60303, 2001.36206,   -90.00000, 0.00000, -93.83900);
    CreateDynamicObject(19043, 88.03400, 2498.60303, 2001.38403,   -90.00000, 0.00000, -93.83900);
    CreateDynamicObject(2707, 74.69000, 2498.11890, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 74.67500, 2499.60400, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 74.69000, 2500.95898, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 74.77200, 2502.42896, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 74.63600, 2503.83496, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 74.75500, 2505.11890, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 75.61200, 2506.08398, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 76.97200, 2506.05908, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 78.33900, 2506.01392, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 81.20300, 2506.04102, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 82.54900, 2506.09009, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 85.12000, 2506.15503, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 86.40900, 2506.13403, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 87.83800, 2506.08008, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.41100, 2504.95996, 2003.37305,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.41300, 2503.43799, 2003.37305,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.33900, 2502.02490, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.46200, 2500.65698, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.44700, 2499.25195, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.49200, 2497.84790, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2707, 88.45900, 2496.43701, 2003.37402,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19807, 81.24010, 2503.50317, 2001.01074,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2010, 80.80737, 2503.08008, 2000.08765,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2010, 82.98990, 2503.02222, 2000.08765,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19173, 77.05320, 2506.22461, 2002.34082,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19174, 86.48050, 2506.23267, 2002.35156,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14438, 84.92000, 2501.09888, 2005.68005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17521, 1173.58289, -1480.98096, 17.80290,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1522, 1163.60559, -1489.88159, 14.32000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1522, 1163.60559, -1491.20166, 14.32000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2921, 1163.23035, -1496.40381, 18.03490,   -10.00000, 0.00000, -45.00000);


	// Texture //
	new bsa = CreateDynamicObjectEx(4238, 1797.1707, 797.2317, 22.4085, 0.0000, 0.0000, 30.2910);
	SetObjectMaterialText(bsa, "LS - LV", 0, 140, "Arial Black", 65, 1, -16777216, 0, 1);
	new nagranicu = CreateDynamicObject(18981, 1796.92712, 806.85156, -1.49230,   -1.50000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu1 = CreateDynamicObject(18980, 1797.24255, 819.80359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu2 = CreateDynamicObject(18980, 1796.63855, 795.05359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu3 = CreateDynamicObject(18981, 1778.29114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu4 = CreateDynamicObject(18980, 1778.01648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu5 = CreateDynamicObject(18980, 1778.59009, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu6 = CreateDynamicObject(18981, 1815.79114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu7 = CreateDynamicObject(18980, 1815.51648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu8 = CreateDynamicObject(18980, 1816.08850, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu9 = CreateDynamicObject(18981, 1786.04749, 808.31702, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu10 = CreateDynamicObject(18981, 1808.04749, 808.31897, 16.79960,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu11 = CreateDynamicObject(18981, 1786.04956, 804.31702, 16.79560,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu12 = CreateDynamicObject(18981, 1808.04553, 804.31500, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu13 = CreateDynamicObject(18762, 1787.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu13, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu14 = CreateDynamicObject(18762, 1792.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu14, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu15 = CreateDynamicObject(18762, 1797.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu15, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu16 = CreateDynamicObject(18762, 1802.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu16, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu17 = CreateDynamicObject(18762, 1807.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu17, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new belatextura = CreateDynamicObject(18762, 1799.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura1 = CreateDynamicObject(18762, 1792.56580, 810.61511, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura2 = CreateDynamicObject(18762, 1794.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura3 = CreateDynamicObject(18762, 1794.30371, 802.66937, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura4 = CreateDynamicObject(18762, 1799.30408, 802.67108, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura5 = CreateDynamicObject(18762, 1792.39111, 805.61981, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura6 = CreateDynamicObject(18762, 1801.56628, 810.65088, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura7 = CreateDynamicObject(18762, 1801.39221, 805.65552, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura8 = CreateDynamicObject(18762, 1794.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura9 = CreateDynamicObject(18762, 1799.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura10 = CreateDynamicObject(18762, 1792.56580, 810.61511, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura11 = CreateDynamicObject(18762, 1792.39111, 805.61981, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura12 = CreateDynamicObject(18762, 1794.30371, 802.66937, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura13 = CreateDynamicObject(18762, 1799.30408, 802.66913, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura13, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura14 = CreateDynamicObject(18762, 1801.39221, 805.65552, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura14, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura15 = CreateDynamicObject(18762, 1799.30408, 802.66913, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura15, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura16 = CreateDynamicObject(18762, 1799.30408, 802.66913, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura16, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura17 = CreateDynamicObject(18762, 1799.30408, 802.66913, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura17, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura18 = CreateDynamicObject(18762, 1799.30408, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura18, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura19 = CreateDynamicObject(18762, 1792.30212, 802.66772, 13.27290,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura19, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura20 = CreateDynamicObject(18762, 1794.30371, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura20, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura21 = CreateDynamicObject(18762, 1797.79712, 801.65271, 9.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura21, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura22 = CreateDynamicObject(18762, 1801.30408, 801.68268, 9.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura22, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura23 = CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura23, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura24 = CreateDynamicObject(18762, 1801.30408, 800.68268, 8.89690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura24, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura25 = CreateDynamicObject(18762, 1797.77112, 800.65271, 8.89690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura25, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura26 = CreateDynamicObject(18762, 1797.74707, 799.65271, 8.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura26, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura27 = CreateDynamicObject(18762, 1801.30408, 799.68268, 8.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura27, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura28 = CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(belatextura28, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura29 = CreateDynamicObject(18762, 1801.56628, 810.65088, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura29, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura30 = CreateDynamicObject(18762, 1799.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura30, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura31 = CreateDynamicObject(18762, 1799.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura31, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura32 = CreateDynamicObject(18762, 1799.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura32, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura33 = CreateDynamicObject(18762, 1799.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura33, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura34 = CreateDynamicObject(18762, 1794.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura34, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura35 = CreateDynamicObject(18762, 1794.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura35, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura36 = CreateDynamicObject(18762, 1794.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura36, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura37 = CreateDynamicObject(18762, 1794.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura37, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura38 = CreateDynamicObject(18762, 1792.56580, 810.61511, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura38, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura39 = CreateDynamicObject(18762, 1792.39111, 805.61981, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura39, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura40 = CreateDynamicObject(18762, 1801.56628, 810.65088, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura40, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura41 = CreateDynamicObject(18762, 1794.57971, 808.16913, 15.27550,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura41, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura42 = CreateDynamicObject(18762, 1799.30371, 808.16913, 15.27350,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura42, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura43 = CreateDynamicObject(18762, 1801.39221, 805.65552, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura43, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new podunutra = CreateDynamicObject(19377, 1797.13623, 808.20093, 11.07260,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(podunutra, 0, 13007, "sw_bankint", "woodfloor1", 0xFFFFFFFF);
	new plafon = CreateDynamicObject(19377, 1797.13623, 808.20093, 15.64960,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(plafon, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new gorevelikozanatpis = CreateDynamicObject(19378, 1792.00879, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new gorevelikozanatpis1 = CreateDynamicObject(19378, 1801.64282, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new ovdedrugaboja = CreateDynamicObject(19461, 1797.27893, 797.40369, 22.29540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(ovdedrugaboja, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new okvirzavrataa = CreateDynamicObject(19429, 1799.57825, 802.12469, 11.79630,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataa, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new okvirzavrataar = CreateDynamicObject(19429, 1799.57825, 803.19470, 11.89830,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataar, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis = CreateDynamicObject(11737, 1798.97925, 802.16919, 14.34610,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis1 = CreateDynamicObject(11737, 1799.99622, 802.16919, 14.35010,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm = CreateDynamicObject(19366, 1801.57080, 810.76837, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm1 = CreateDynamicObject(19366, 1801.63086, 812.45038, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm2 = CreateDynamicObject(19366, 1801.38440, 805.35760, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm3 = CreateDynamicObject(19366, 1801.35840, 804.66162, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm4 = CreateDynamicObject(19366, 1792.39514, 805.38019, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm5 = CreateDynamicObject(19366, 1792.36292, 804.41882, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm6 = CreateDynamicObject(19366, 1792.56824, 810.75220, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm7 = CreateDynamicObject(19366, 1792.60315, 811.81732, 10.08680,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new dugackalinijag = CreateDynamicObject(19089, 1801.51819, 809.19092, 12.93160,   0.00000, 0.00000, 0.00000);
   	SetDynamicObjectMaterial(dugackalinijag, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag1 = CreateDynamicObject(19089, 1801.43555, 806.93030, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag2 = CreateDynamicObject(19089, 1792.51770, 809.18988, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag3 = CreateDynamicObject(19089, 1792.43811, 806.95740, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag4 = CreateDynamicObject(19089, 1792.68616, 813.96399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag5 = CreateDynamicObject(19089, 1801.54578, 810.16998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag6 = CreateDynamicObject(19089, 1792.56226, 810.46399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag7 = CreateDynamicObject(19089, 1801.66797, 813.66998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);

	// Small garage
	new objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1512.922851, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1512.932983, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1516.615600, -1638.889160, 1125.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1520.439941, -1638.885986, 1123.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1649.707275, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1125.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1123.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.888671, -1649.152709, 1123.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1124.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1517.034545, -1649.131347, 1123.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1124.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1515.315185, -1649.160888, 1124.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1124.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1124.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1124.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1127.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1513.752319, -1649.391357, 1124.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1649.170898, 1125.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1513.130737, -1647.329101, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130737, -1646.249023, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130981, -1647.329101, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130371, -1646.268554, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1513.152221, -1642.557250, 1125.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1513.028320, -1640.495727, 1124.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1513.311157, -1643.594726, 1124.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1513.027954, -1639.594482, 1125.194580, 0.000000, 0.000000, 91.062004);

    // Medium garage
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1511.712158, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1511.712280, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1515.464721, -1638.889160, 1375.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1519.789550, -1638.885986, 1373.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1375.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1373.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.668579, -1650.662597, 1373.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1374.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1516.784301, -1650.541381, 1373.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1374.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1514.635620, -1650.671386, 1374.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1374.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1374.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1374.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1377.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1512.762207, -1651.041992, 1374.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1650.722290, 1375.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1512.062988, -1643.247314, 1375.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1511.827880, -1640.815917, 1374.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1512.140991, -1644.314697, 1374.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1511.774658, -1639.957275, 1375.194580, 0.000000, 0.000000, 91.062004);
    objectid = CreateObjectEx(19377, 1507.614990, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.614990, -1654.158447, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1654.168457, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1507.531738, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1507.661621, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);

	// Large garage
	CreateObjectEx(11389, 1665.187500, -2352.026367, 1537.641723, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19377, 1668.767822, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2350.427001, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2360.037597, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2369.637939, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2350.467041, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2360.087646, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2369.697265, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1661.437255, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.437988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.527465, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.509521, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    CreateObjectEx(2885, 1674.234375, -2340.028320, 1541.174072, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(2885, 1674.234375, -2348.668212, 1541.174072, 0.000000, 0.000000, 270.000000);
    objectid = CreateObjectEx(19377, 1679.248168, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1679.248168, -2350.476562, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    CreateObjectEx(2885, 1660.494262, -2368.226806, 1541.143798, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(11390, 1665.046875, -2351.977050, 1538.903198, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11391, 1657.228515, -2360.088378, 1535.773193, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11393, 1669.819946, -2357.343994, 1536.022583, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19817, 1662.070068, -2340.035888, 1533.891967, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19872, 1659.912719, -2348.421630, 1533.882324, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19903, 1658.435546, -2345.552978, 1534.542480, 0.000000, 0.000000, -47.000000);
    CreateObjectEx(19377, 1656.129028, -2362.886718, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2352.425048, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2341.955322, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2331.505126, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1661.448364, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.927612, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.157470, -2368.107421, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.139404, -2363.225585, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.149414, -2359.344726, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.590942, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.300659, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2363.697021, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2367.177734, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1667.490478, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1669.050048, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1670.640380, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1672.190063, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1674.090454, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.367797, -2348.886474, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.367797, -2338.387207, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1660.698242, -2368.378906, 1539.123413, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1660.257812, -2368.418945, 1539.123413, 90.000000, 0.000000, 90.000000);
    objectid = CreateObjectEx(19369, 1666.348266, -2366.564208, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2363.353759, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2362.022460, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1667.818969, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1670.998901, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.869873, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.898559, -2359.502197, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2362.103515, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2365.273437, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2368.443115, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19377, 1671.468505, -2363.267089, 1537.988037, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(9131, 1666.443969, -2358.310058, 1535.482910, 0.000000, 0.000000, 270.520568);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
 
// Mat Turf
tmpobjid = CreateDynamicObjectEx(16287, -2738.806640, 111.912544, 3.539062, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "gz_vicdoor1", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 9902, "coastground", "coasty_bit4_sfe", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1502, -2741.114746, 119.278808, 3.519062, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 4, 1340, "foodkarts", "gashob", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1502, -2740.322509, 104.455764, 3.519062, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 4, 1340, "foodkarts", "gashob", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1502, -2737.301025, 104.538391, 3.510668, 0.000000, 0.000000, -177.600067, 300.00, 300.00); 
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1502, -2738.111572, 119.285980, 3.520668, 0.000000, 0.000000, 179.899902, 300.00, 300.00); 
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tmpobjid = CreateDynamicObjectEx(1308, -2696.498046, -13.382800, 3.640630, 0.000000, 0.000000, -0.000006, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2749.603271, 89.025619, 9.619522, -0.399999, 0.099982, 0.100000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2752.640625, 89.041267, 9.599874, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(2359, -2736.228759, 106.010246, 4.679061, 0.000000, 0.000000, -141.600143, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2758.945800, 96.058784, 9.599688, 0.000000, 0.000000, 85.099945, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2757.320556, 109.915130, 9.587742, 0.000000, 0.000000, 81.099983, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(3576, -2737.064697, 117.435569, 4.989129, 0.000000, 0.000000, 3.000054, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2755.287597, 123.770149, 9.595215, 0.000000, -0.199999, 82.099945, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2753.839599, 137.715652, 9.624258, 0.000000, 0.000000, 85.899993, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2754.943359, 107.366279, 12.914327, 90.499923, -89.699989, -7.499998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2753.614990, 140.634262, 9.507316, 0.000000, 0.000000, -92.999954, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2754.182617, 113.758895, 12.887523, -89.900001, 0.000000, 84.199951, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2749.473144, 106.675758, 12.914566, 90.499923, -89.699989, -7.499998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2748.718994, 113.201850, 12.891911, 89.399932, -88.599998, -7.499998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2743.210693, 112.613143, 12.890499, 89.399932, -88.599998, -7.499998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2743.982910, 106.048286, 12.899723, 90.399971, -88.600006, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2738.857666, 105.697502, 12.902656, 90.399971, -82.400016, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2737.992187, 112.293197, 12.949081, 90.399971, -82.400016, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2737.545410, 105.684669, 12.903931, 90.399971, -82.400016, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2753.469482, 120.436317, 12.897225, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2742.464843, 119.221672, 12.907445, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2747.932128, 119.825149, 12.902366, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2737.075195, 118.807693, 12.913680, 90.399971, -82.400016, -10.999996, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2747.229248, 126.196609, 12.896709, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2741.743164, 125.590805, 12.901793, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2736.395507, 125.000503, 12.876754, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2735.689941, 131.491043, 12.921918, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2740.927490, 132.069290, 12.917056, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2752.656005, 126.940673, 12.948409, 90.399971, -82.400016, -16.099998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2746.452148, 132.679534, 12.911929, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2751.412353, 133.227172, 12.907326, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2752.131347, 126.697052, 12.861861, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2750.689941, 139.787139, 12.952989, 90.399971, -82.400016, -13.899997, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2750.608398, 144.301589, 12.963917, 90.399971, -82.400016, -7.099990, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2754.943359, 107.366279, 12.914327, 90.499923, -89.699989, -7.499998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2737.792968, 99.198104, 12.858909, 90.399971, -82.400016, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2743.302246, 99.464294, 12.855005, 90.399971, -82.400016, -8.599998, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2748.752929, 99.569389, 12.870043, 90.399971, -82.400016, -9.599989, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(1431, -2736.161621, 106.103981, 3.924278, 0.000000, 0.000000, -145.100006, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2748.345214, 101.486534, 12.853716, 90.399971, -82.400016, -9.599989, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2754.103515, 100.486755, 12.850124, 90.399971, -82.400016, -9.599989, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2755.812011, 100.562164, 12.848544, 90.399971, -82.400016, -13.899988, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2756.532226, 94.031982, 12.803084, 90.399971, -82.400016, -13.899988, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2751.145751, 93.437133, 12.808088, 90.399971, -82.400016, -13.899988, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2745.729248, 92.839080, 12.803113, 90.399971, -82.400016, -7.999985, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2750.835205, 92.324707, 12.794601, 90.399971, -82.400016, -7.999985, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2756.215087, 92.362258, 12.789635, 90.399971, -82.400016, -7.999985, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2756.695556, 92.365608, 12.789194, 90.399971, -82.400016, -12.199989, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2740.281250, 92.676452, 12.815711, 90.399971, -82.400016, -8.899992, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(3066, -2741.542968, 109.517303, 4.529067, 0.000000, 0.000000, 0.300000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(974, -2737.990722, 92.624504, 12.817826, 90.399971, -82.400016, -8.899992, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(355, -2738.773925, 118.451072, 3.941454, -89.000015, -33.799999, -121.499977, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(356, -2737.043701, 116.209297, 5.229929, -36.000003, -89.099983, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(349, -2735.016845, 114.145675, 5.661994, -1.299998, 0.899999, -81.999984, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(349, -2735.631591, 115.942085, 3.758486, -4.900001, -84.900016, 1.100031, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(2035, -2738.400878, 116.362319, 3.551815, 0.000000, 0.000000, -92.900001, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(2036, -2736.396972, 106.687416, 3.478508, 0.000000, 0.000000, 36.199996, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(366, -2737.092285, 104.940376, 4.092152, -5.099999, 40.999980, -138.500015, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(362, -2742.150878, 109.086700, 5.886751, 0.000000, 30.399976, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(356, -2737.043701, 116.209297, 5.229929, -36.000003, -89.099983, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(356, -2737.454101, 116.213050, 5.235144, -36.000003, -89.099983, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(351, -2735.200439, 111.396621, 3.210880, -17.699998, -79.399971, -97.699943, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(351, -2735.181884, 111.095321, 3.198002, -17.699998, -79.399971, -97.699943, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(1654, -2735.909667, 116.169731, 5.204262, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(1654, -2735.729492, 116.169731, 5.204262, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(1654, -2736.223632, 116.171775, 5.041076, 0.299999, -92.099998, -0.799999, 300.00, 300.00); 
tmpobjid = CreateDynamicObjectEx(19313, -2746.327392, 147.085647, 9.388738, 0.000000, 0.000000, 0.000000, 300.00, 300.00);    

    	//VINEWOOD////////////////////////////////////////////////////////////////////////////////////////////////////////
tmpobjid = CreateDynamicObject(18981, 1439.427368, -812.932861, 67.582397, 0.000000, 0.000000, 87.421920, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
tmpobjid = CreateDynamicObject(18981, 1422.053710, -812.151184, 67.582397, 0.000000, 0.000000, 87.421920, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
tmpobjid = CreateDynamicObject(18981, 1419.174438, -812.022216, 67.582397, 0.000000, 0.000000, 87.421920, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 11150, "ab_acc_control", "ws_shipmetal5", 0x00000000);
tmpobjid = CreateDynamicObject(19482, 1420.892333, -812.610839, 75.947097, 0.000000, 0.000000, -92.500038, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{FF0000} I", 20, "Calibri", 22, 1, 0x00000000, 0x00000001, 1);
tmpobjid = CreateDynamicObject(19482, 1426.417968, -812.910522, 75.944793, 0.000000, 0.000000, -93.100059, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{3399FF} LOVE", 50, "Calibri", 38, 1, 0x00000000, 0x00000001, 1);
tmpobjid = CreateDynamicObject(19482, 1431.257080, -813.126098, 75.944046, 0.000000, 0.000000, -93.099990, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFF00} MGMC", 20, "Calibri", 22, 1, 0x00000000, 0x00000001, 1);
tmpobjid = CreateDynamicObject(19482, 1435.586547, -813.320007, 75.935340, 0.000000, 0.000000, -92.599952, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFF00} RP", 20, "Calibri", 22, 1, 0x00000000, 0x00000001, 1);
tmpobjid = CreateDynamicObject(1226, 1419.311889, -812.817871, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "I LOVE MGMC", 20, "Webdings", 20, 1, 0x00000000, 0x00000000, 1);
tmpobjid = CreateDynamicObject(879, 1428.711791, -808.217346, 70.421310, 0.000000, 0.000000, 102.344741, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "I LOVE MGMC", 20, "Calibri", 60, 0, 0x00000000, 0x00000000, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tmpobjid = CreateDynamicObject(19840, 1412.781860, -820.179077, 65.040863, 20.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(7916, 1420.324340, -832.008178, 54.031898, 20.000000, 0.000000, 355.487396, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(19841, 1434.668579, -826.164489, 53.975471, -20.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(7916, 1420.180541, -833.107299, 55.542140, 20.000000, 0.000000, 354.856414, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(7916, 1415.600585, -830.595092, 56.920539, 20.000000, 0.000000, 351.992401, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(7916, 1418.808471, -823.657897, 63.501499, 20.000000, 0.000000, 357.814239, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(19841, 1433.769409, -824.473510, 59.462398, -20.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1416.806762, -823.676879, 57.051750, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1399.694824, -836.239685, 49.209949, 0.000000, 0.000000, 150.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1418.004760, -840.750122, 47.120021, 0.000000, 0.000000, 117.417686, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1453.524291, -839.806945, 56.641288, 0.000000, 0.000000, 116.526618, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1442.292724, -815.303161, 71.722259, 0.000000, 0.000000, 359.797088, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1433.932373, -842.326049, 50.250888, 0.000000, 0.000000, 6.077020, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1415.752807, -813.882934, 70.845970, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1420.201782, -840.308349, 48.031330, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1413.135986, -835.523742, 46.753650, 0.000000, 0.000000, 100.882476, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1416.185546, -810.262084, 70.421310, 0.000000, 0.000000, 102.344741, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1441.813232, -808.900085, 69.894653, 0.000000, 0.000000, 122.483657, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1404.767578, -839.825866, 46.127868, 0.000000, 0.000000, 150.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1406.121215, -839.286926, 46.819030, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1439.600830, -843.773437, 50.853298, 0.000000, 0.000000, 7.334547, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1412.820678, -837.534301, 45.992740, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1447.333740, -840.842041, 50.917869, 0.000000, 0.000000, 0.100000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1419.242309, -813.465942, 67.671783, 0.000000, 0.000000, 0.100000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1444.111206, -843.724182, 52.034568, 0.000000, 0.000000, 116.907592, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1399.693603, -838.284851, 47.843441, 0.000000, 0.000000, 359.182708, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1450.739624, -840.136535, 55.916080, 0.000000, 0.000000, 358.934509, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1414.087402, -840.846923, 46.910839, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1432.121704, -813.820312, 70.859626, 0.000000, 0.000000, 359.452728, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1419.317382, -836.369689, 46.712020, 0.000000, 0.000000, 0.713230, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1433.304321, -839.602966, 48.569309, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(6298, 1431.403808, -795.672302, 81.131797, 0.000000, 0.000000, -10.200001, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1402.807739, -835.150695, 46.299629, 0.000000, 0.000000, 0.713230, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1399.401000, -839.778808, 43.389980, 0.000000, 0.000000, 0.713230, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1440.767089, -842.168212, 48.705139, 0.000000, 0.000000, 0.789749, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(7916, 1419.687377, -819.908203, 65.647552, 20.000000, 0.000000, 355.487396, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1450.688964, -845.825195, 53.909358, 0.000000, 0.000000, 116.907592, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1445.537475, -842.117004, 53.275188, 0.000000, 0.000000, 358.934509, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(820, 1425.659057, -840.446472, 46.712020, 0.000000, 0.000000, 0.713230, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1436.540039, -813.683959, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1442.445312, -813.908935, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1431.065917, -813.399108, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1424.812500, -813.126708, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1458.459716, -830.497924, 59.890312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1426.549194, -835.873901, 49.663539, 0.000000, 0.000000, 100.982482, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1437.873046, -841.009216, 48.956390, 0.000000, 0.000000, 0.100000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1397.934814, -840.371032, 46.069850, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1427.917968, -842.197753, 49.691600, 0.000000, 0.000000, 2.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1449.769165, -815.269714, 68.943298, 0.000000, 0.000000, 43.100013, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(880, 1426.270263, -812.990539, 71.291236, 0.000000, 0.000000, 359.797088, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(744, 1434.596435, -814.207824, 66.843223, 0.000000, 0.000000, 0.100000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1422.573852, -813.864440, 70.845970, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1431.639892, -813.512634, 70.845970, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1430.355957, -815.200927, 70.124618, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1438.156372, -815.194152, 70.124618, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1424.409301, -815.359985, 69.704078, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(879, 1437.402954, -842.316955, 51.266719, 0.000000, 0.000000, 218.786941, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(748, 1427.688354, -815.368286, 70.124618, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(19840, 1443.206665, -836.665039, 54.503669, 20.000000, 0.000000, 352.364440, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1427.696411, -839.420166, 49.774108, 0.000000, 0.000000, 359.452728, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(624, 1480.234619, -837.953247, 59.313018, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(624, 1407.933471, -789.343688, 82.782890, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(822, 1427.724121, -814.986206, 68.601417, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(822, 1439.926635, -814.597290, 68.490951, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(806, 1429.426391, -838.733825, 50.428489, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1467.379150, -821.667785, 63.590324, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(806, 1435.859741, -839.873962, 50.428489, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1457.178955, -803.597595, 77.210334, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(806, 1404.322753, -837.418212, 49.707130, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1463.656738, -844.945739, 54.513385, 0.000000, 0.000000, 359.779052, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(624, 1447.588012, -799.145019, 82.195381, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1394.026245, -839.923706, 46.049301, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(822, 1418.756835, -814.273193, 68.601417, 0.000000, 0.000000, 0.201000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(647, 1416.514770, -814.111083, 70.859626, 0.000000, 0.000000, 359.452728, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1430.567138, -840.540771, 50.353244, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1433.828002, -840.540771, 50.353244, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1437.418090, -842.140869, 51.363239, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1441.148437, -842.140869, 52.733234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1441.148437, -842.140869, 52.733234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1445.108764, -842.140869, 54.923225, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1416.267089, -840.720642, 49.513221, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1416.267089, -840.720642, 49.513221, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1408.516967, -839.900024, 48.323234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(18747, 1408.516967, -841.360351, 48.083240, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1398.447998, -803.597595, 76.870346, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1442.445312, -813.908935, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1436.540039, -813.683959, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1431.065917, -813.399108, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1424.812500, -813.126708, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1419.311889, -812.817871, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(620, 1398.447998, -819.247863, 67.630348, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1413.098999, -812.491699, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1413.098999, -812.491699, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1451.220581, -814.239135, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1451.220581, -814.239135, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1446.716186, -814.002929, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1226, 1446.716186, -814.002929, 76.781799, 0.000000, 0.000000, 87.000000, -1, -1, -1, 300.00, 300.00);


//we love mgmc
tmpobjid = CreateDynamicObjectEx(7093, 1660.551879, -2258.234375, 14.738138, 0.000000, 0.000000, 0.000000, 3000.00, 3000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "white", 0xEEFF0000);
SetDynamicObjectMaterialText(tmpobjid, 0, "None", 10, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.676025, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.727294, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.727294, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.727294, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.727294, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.737304, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.747314, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.757324, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.767333, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.777343, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.787353, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.797363, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.807373, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.817382, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.817382, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.817382, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.817382, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.827392, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.837402, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.847412, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.857421, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.867431, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.877441, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.887451, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1667.023315, -2261.897460, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "WE", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.686035, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.696044, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.706054, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.716064, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.726074, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.736083, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.746093, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.756103, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.766113, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.776123, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.786132, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.796142, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.806152, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.816162, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.826171, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.836181, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.846191, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.856201, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.866210, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.876220, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.886230, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19481, 1650.223022, -2261.886230, 14.744778, 0.000000, 0.000000, 90.700012, 3000.00, 3000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC", 120, "Ariel", 80, 1, 0xFFFFFFFF, 0x00000000, 1);

    //jewellery robbery mapping
tmpobjid = CreateDynamicObject(19380, 1835.895996, -1405.907958, 12.982000, 0.000000, 0.000000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1836.024047, -1393.797973, 12.961997, 0.000000, 0.000000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19392, 1835.931030, -1399.907958, 14.001997, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19360, 1835.958007, -1399.795043, 16.482000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(2164, 1818.157470, -1405.582153, 12.426485, 0.000000, 0.000000, 89.199996, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1831.355957, -1388.975952, 12.862000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1822.965942, -1388.946044, 12.862000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1830.994995, -1406.305053, 12.982000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1822.834960, -1406.276000, 12.982000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1818.173950, -1393.680053, 12.961997, 0.000000, 0.000000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1818.058959, -1403.119018, 12.961997, 0.000000, 0.000000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1822.958007, -1391.225952, 12.862000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1831.218017, -1391.255004, 12.862000, 0.000000, 0.000000, -90.198997, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1818.058959, -1403.119018, 12.961997, 0.000000, 0.000000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1823.250000, -1403.182983, 18.117000, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "wood02S", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1823.337280, -1396.013061, 18.106998, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "wood02S", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1830.655883, -1396.161865, 18.052999, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "wood02S", 0x00000000);
tmpobjid = CreateDynamicObject(1523, 1836.005249, -1400.667114, 12.348354, 0.000000, 0.000000, 91.599975, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1830.582763, -1402.151000, 18.042997, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "wood02S", 0x00000000);
tmpobjid = CreateDynamicObject(2571, 1824.824707, -1404.620117, 12.429685, 0.000000, 0.000000, 175.800003, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(2571, 1831.502075, -1404.769409, 12.429685, 0.000000, 0.000000, 175.800003, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1819.790893, -1398.255249, 12.975662, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.879760, -1396.449951, 12.835663, 0.000000, 0.000000, -0.599956, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.879760, -1396.449951, 16.285663, 0.000000, 0.000000, -0.599956, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(1829, 1819.001464, -1395.675292, 13.784049, 0.000000, 0.000000, 89.099929, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(2332, 1818.689697, -1394.811767, 13.782167, 0.000000, 0.000000, 89.700027, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(1550, 1818.585815, -1396.369384, 12.792276, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1823.199829, -1403.182983, 12.357224, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1823.286743, -1396.032714, 12.337224, 0.000000, 90.499000, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1830.736572, -1396.123657, 12.352498, 0.000000, 90.099006, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1830.671386, -1401.463256, 12.342496, 0.000000, 90.099006, -0.699998, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "wood01", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1819.790649, -1398.245239, 16.475656, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1826.206787, -1398.033935, 12.835663, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1826.206665, -1398.034545, 16.315652, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1822.988281, -1398.135253, 16.315652, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 8680, "chnatwnfnce", "ctmallfence", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1822.988281, -1398.135253, 12.835639, 0.000000, 0.000000, -88.199958, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 8680, "chnatwnfnce", "ctmallfence", 0x00000000);
tmpobjid = CreateDynamicObject(2167, 1835.864257, -1392.816406, 12.437404, 0.000000, 0.000000, -89.799942, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(2184, 1832.350708, -1394.713623, 12.436223, 0.000000, 0.000000, -0.300002, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(2356, 1833.328979, -1392.484863, 12.435099, 0.000000, 0.000000, -177.199981, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4833, "airprtrunway_las", "tuntest1las", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.816772, -1393.309936, 16.237035, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.786743, -1392.909667, 16.237035, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.816772, -1390.629150, 12.747025, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19370, 1827.886840, -1395.850219, 12.747025, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2772, "airp_prop", "CJ_GALVANISED", 0x00000000);
tmpobjid = CreateDynamicObject(19372, 1836.042968, -1393.891113, 16.280628, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "{B7FF00} MGMC JEWELS", 40, "Calibri", 22, 1, 0x00000000, 0x00000000, 1);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tmpobjid = CreateDynamicObject(4594, 1825.000000, -1413.930053, 12.553997, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2164, 1818.182128, -1403.832153, 12.426485, 0.000000, 0.000000, 89.199996, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2286, 1822.992797, -1406.147705, 14.876300, 0.000000, 0.000000, 179.800125, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2286, 1829.394042, -1406.170043, 14.876300, 0.000000, 0.000000, 179.800125, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2605, 1833.331787, -1404.250854, 12.739682, 0.000000, 0.000000, 88.999984, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1712, 1834.768920, -1403.639038, 12.429685, 0.000000, 0.000000, -91.899978, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2436, 1820.767578, -1397.010009, 12.425972, 0.000000, 0.000000, -179.199996, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2436, 1820.137084, -1393.066894, 12.425972, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2436, 1822.907226, -1393.027832, 12.425972, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2436, 1823.427490, -1397.030761, 12.425972, 0.000000, 0.000000, 178.599975, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2436, 1825.878051, -1397.022705, 12.425972, 0.000000, 0.000000, 179.299865, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1829, 1819.001464, -1395.674194, 12.904047, 0.000000, 0.000000, 89.099929, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2332, 1818.689697, -1394.811767, 12.902166, 0.000000, 0.000000, 89.700027, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1550, 1818.585815, -1393.820434, 12.792276, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(1550, 1818.585815, -1394.180541, 12.792276, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
tmpobjid = CreateDynamicObject(2167, 1835.860839, -1391.926269, 12.437404, 0.000000, 0.000000, -89.799942, -1, -1, -1, 300.00, 300.00);
RobberyInfo[jObjects] = CreateDynamicObject(19799, 1827.678100, -1393.198120, 12.475486, 0.000000, 90.299972, 90.399948, -1, -1, -1, 300.00, 300.00);
RobberyInfo[fObjects] = CreateDynamicObject(19799, 697.013427, -1186.141113, 16.210567, 0.000000, -0.000000, 151.400024, -1, -1, -1, 300.00, 300.00);
    // Prison & SASD Interior (Main)
    CreateDynamicObject(8419,1219.29980469,-1342.50000000,784.02398682,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(8419,1219.39941406,-1342.50000000,814.40002441,179.99450684,0.00000000,0.00000000);
	CreateDynamicObject(19377,1200.59997559,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1220.40002441,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.29980469,-1328.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1220.39941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69921875,-1337.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1200.59960938,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3280,1206.59997559,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1212.80004883,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1211.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1209.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1208.09997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1210.50000000,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1321.89941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,807.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1215.29980469,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,790.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(8572,1204.50000000,-1346.69995117,798.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1199.19921875,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.19921875,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09960938,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(16645,1198.09997559,-1328.40002441,799.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1341.30004883,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1341.29980469,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1328.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1222.90002441,-1343.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1334.19995117,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1334.19921875,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1343.79980469,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1205.69995117,-1321.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1215.30004883,-1321.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1215.19921875,-1316.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1312.29980469,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1205.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1214.59960938,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1219.39941406,-1353.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1219.39941406,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1219.40002441,-1347.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1218.40002441,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1195.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.59960938,-1359.09960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09997559,-1359.09997559,799.20300293,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1223.50000000,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19355,1221.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1224.19921875,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1227.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09960938,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1331.39941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1224.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1215.19921875,-1310.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59960938,-1355.19921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1230.56250000,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1235.19995117,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59997559,-1360.09997559,795.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59960938,-1360.09960938,799.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1226.59960938,-1360.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1227.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.30004883,-1345.70104980,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1232.19921875,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.09960938,-1350.39941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.89941406,-1345.59960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1347.30004883,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59960938,-1337.69921875,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19995117,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59997559,-1345.40002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1216.79980469,-1312.91210938,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1220.00000000,-1312.91210938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1223.20104980,-1312.91296387,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1314.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1317.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1314.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1317.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.39941406,-1326.50000000,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.19995117,-1326.50097656,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.90002441,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.40002441,-1316.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1225.59997559,-1316.90100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1216.89941406,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1220.09960938,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1223.30004883,-1319.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1216.90100098,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1220.10095215,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1223.30102539,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1227.43652344,-1316.80078125,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19431,1225.59997559,-1316.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09960938,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1324.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1312.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1229.09960938,-1316.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1220.09960938,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.69921875,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1230.59960938,-1326.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1224.90002441,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1224.90002441,-1324.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.90002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1312.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1312.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.09997559,-1360.09997559,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1220.89941406,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1211.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1201.69921875,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1204.59997559,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09997559,-1360.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1205.59997559,-1368.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09960938,-1368.69921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1210.40002441,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1210.50000000,-1320.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.90002441,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1232.19995117,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1355.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1227.09997559,-1350.59997559,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(14877,1236.30004883,-1353.59997559,797.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1242.40002441,-1356.90002441,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1232.19921875,-1347.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1237.09997559,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1240.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.80004883,-1356.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1232.30004883,-1350.40002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.69995117,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09997559,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1227.50000000,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1224.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1222.69995117,-1349.59997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19401,1208.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1213.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1210.59997559,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1216.30004883,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1219.50000000,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1201.69995117,-1354.40002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1221.09997559,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1217.90002441,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1222.69995117,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1217.80004883,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1208.19995117,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1198.59960938,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1225.90002441,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1200.30004883,-1359.19995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19404,1213.09960938,-1354.60058594,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1210.59960938,-1354.59960938,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1208.09997559,-1354.60095215,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1354.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19450,1201.69995117,-1354.59997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.69995117,-1346.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.29980469,-1346.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1206.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1206.50000000,-1347.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.70104980,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.30102539,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1350.39941406,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1331.19921875,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1321.59997559,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1350.40002441,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1331.19995117,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.89941406,-1321.59960938,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.89941406,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1219.59997559,-1314.50000000,795.70098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1210.00000000,-1316.00000000,795.70202637,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1239.29980469,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.90002441,-1336.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1326.40002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.89941406,-1316.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1307.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1328.09997559,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1318.50000000,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1308.90002441,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1242.40100098,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1227.09997559,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.59997559,-1357.00000000,799.30102539,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.09960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.59960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1235.40002441,-1360.09997559,799.30200195,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1205.79980469,-1315.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1210.50000000,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1205.79980469,-1306.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19466,1210.69995117,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1213.09960938,-1354.59960938,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1208.09997559,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1207.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1210.19995117,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(1892,1212.59997559,-1310.50000000,795.76000977,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1315.80004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1312.80004883,795.79998779,0.00000000,0.00000000,269.79992676);
	CreateDynamicObject(19379,1210.30004883,-1308.09997559,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1309.90002441,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1311.50000000,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1313.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1314.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1316.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1317.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1319.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.69995117,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80395508,-1315.90002441,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1306.30004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1315.80004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1306.19995117,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1308.02001953,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80297852,-1308.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1316.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.79003906,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1215.18994141,-1315.90002441,790.65100098,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.19201660,-1315.54199219,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.18994141,-1304.42004395,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1209.59997559,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1228.50000000,-1330.19995117,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1335.80004883,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1341.39941406,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3055,1212.09997559,-1316.90002441,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.10058594,-1314.89941406,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.09997559,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1312.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1314.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1316.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1318.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1320.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1314.90002441,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00097656,-1317.00000000,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.18005371,795.40002441,0.00000000,270.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1311.77502441,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(19388,1215.19995117,-1306.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1315.90002441,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17199707,-1315.79003906,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1304.16894531,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1212.59997559,-1313.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1315.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1317.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1319.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2165,1212.61914062,-1314.59960938,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2165,1212.59997559,-1318.50000000,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.90002441,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.19995117,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1206.40002441,-1318.19995117,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2111,1206.80004883,-1319.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1206.40002441,-1317.50000000,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1206.40002441,-1316.80004883,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1208.69995117,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1209.39941406,-1320.29980469,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1210.09997559,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2186,1214.69995117,-1319.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.69995117,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1314.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.00000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(948,1206.19995117,-1316.09997559,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1206.19921875,-1312.50000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2852,1207.00000000,-1319.59997559,796.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1201.09997559,-1315.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1201.09997559,-1312.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(18613,1204.19995117,-1315.09997559,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(18613,1204.19995117,-1313.50000000,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19466,1223.50000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1220.19995117,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1217.00000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.20104980,-1320.30004883,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1320.30102539,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1216.80004883,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1220.09997559,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1223.40002441,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1218.50000000,-1320.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1221.69921875,-1320.19921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1318.50097656,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.30004883,-1318.50000000,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1221.69995117,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1218.50000000,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1223.40002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1220.09997559,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.90002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1269,1220.09997559,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1220.09997559,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2230,1220.95996094,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.76000977,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.16003418,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.15917969,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1220.95996094,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.75976562,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1319.69995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1322.19995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.40002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.09997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.80004883,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.90002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.19995117,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1223.59997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(948,1218.59997559,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1221.30004883,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1310.19995117,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1224.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1226.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1228.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1230.69995117,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1311.09997559,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1225.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59960938,-1308.59960938,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2186,1225.00000000,-1308.59960938,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1231.59997559,-1310.69995117,795.90002441,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1227.79980469,-1310.69921875,795.90002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2117,1227.09960938,-1310.69921875,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1229.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1231.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(16101,1224.80004883,-1312.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19921875,-1345.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19995117,-1345.80004883,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1347.59960938,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1347.59997559,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1345.69921875,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1345.69995117,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.40002441,-1328.09997559,799.20001221,0.00000000,180.00000000,0.00000000);
	CreateDynamicObject(16101,1213.59997559,-1328.09997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1213.69995117,-1345.59997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1205.79980469,-1345.79980469,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1221.09960938,-1309.09960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1219.00000000,-1309.30004883,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1220.09997559,-1309.69995117,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1233.69995117,-1340.19995117,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2138,1239.52929688,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2140,1232.80004883,-1338.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2305,1234.69995117,-1355.80004883,795.80102539,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2135,1238.56933594,-1340.20605469,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2136,1234.60803223,-1362.31396484,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1232.79980469,-1339.29980469,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1234.67968750,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.03198242,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2140,1232.80004883,-1337.32995605,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1240.50000000,-1340.19995117,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.02197266,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.00000000,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.02734375,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.05004883,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.05859375,-1336.27539062,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(3383,1236.69995117,-1335.30004883,800.40002441,320.00000000,179.99450684,0.00000000);
	CreateDynamicObject(3383,1237.30004883,-1338.40002441,800.40002441,319.99877930,179.99450684,180.00000000);
	CreateDynamicObject(1723,1241.19995117,-1324.09997559,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1724,1237.80004883,-1323.09997559,795.79998779,0.00000000,0.00000000,89.99572754);
	CreateDynamicObject(2357,1237.90002441,-1332.30004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2357,1237.90002441,-1328.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1239.30004883,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1239.30004883,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1236.50000000,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.80004883,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1240.19995117,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1243.40002441,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2964,1236.79980469,-1311.59960938,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1723,1239.19995117,-1320.90002441,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1737,1239.69995117,-1322.59997559,795.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2297,1241.50000000,-1315.50000000,795.79998779,0.00000000,0.00000000,225.00000000);
	CreateDynamicObject(1723,1237.90002441,-1317.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1737,1239.59997559,-1316.80004883,795.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1325.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.09997559,-1340.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1237.59960938,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1502,1229.81494141,-1345.43005371,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1229.81640625,-1326.81933594,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1226.65002441,-1316.88000488,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1232.80004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1236.69995117,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1240.30004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1236.69995117,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1232.80004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1240.30004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2166,1241.30004883,-1341.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1239.30004883,-1342.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2186,1234.90002441,-1341.50000000,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1671,1233.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1671,1237.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1349.80004883,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1237.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1233.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1238.80004883,-1341.80004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2612,1237.30004883,-1341.00000000,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2611,1241.69995117,-1344.50000000,797.70001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2616,1235.09997559,-1350.19995117,797.70001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2400,1232.30004883,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2400,1236.00000000,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1240.09997559,-1373.19995117,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1247.50000000,-1373.19921875,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14782,1232.29980469,-1361.19921875,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(14782,1238.50000000,-1361.19995117,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2689,1238.90002441,-1355.69995117,800.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2704,1238.26000977,-1355.59997559,800.92999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2843,1236.50000000,-1360.69995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2846,1233.00000000,-1360.50000000,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2705,1236.50000000,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2706,1237.09997559,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2844,1235.59997559,-1355.30004883,799.40002441,0.00000000,0.00000000,250.00000000);
	CreateDynamicObject(2165,1220.19995117,-1358.30004883,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2166,1215.69995117,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1360.09997559,799.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2166,1210.30004883,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1208.30004883,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1215.69995117,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1213.69995117,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1210.30004883,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1207.69995117,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1208.30004883,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1207.80004883,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2186,1217.40002441,-1358.19995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1213.69921875,-1357.19921875,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1969,1220.80004883,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1220.80004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.40002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.40002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.30004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2441,1228.00000000,-1355.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1356.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1357.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1358.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1359.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1360.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1361.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1362.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1363.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1364.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1212.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1227.59997559,-1365.30004883,798.79998779,90.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2136,1236.63964844,-1340.20703125,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2135,1234.60900879,-1358.35705566,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1364.30004883,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1361.32702637,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1360.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1359.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2135,1234.60900879,-1357.36999512,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1356.40002441,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2305,1232.79980469,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(19447,1227.59997559,-1369.69995117,797.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1227.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1230.50000000,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1228.40002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1232.90002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1227.90002441,-1369.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1230.09997559,-1372.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1847,1228.80004883,-1367.50000000,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2012,1232.19995117,-1366.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2012,1232.19995117,-1369.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1232.30004883,-1371.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1523,1229.73999023,-1364.93005371,795.72998047,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1232.02404785,-1361.62902832,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1360.66003418,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1359.68505859,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1358.72998047,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1231.00000000,-1361.59997559,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1360.64001465,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1359.67004395,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1358.69995117,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.19995117,-1361.80004883,797.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.09997559,-1361.19995117,797.00000000,0.00000000,0.00000000,287.00000000);
	CreateDynamicObject(2866,1231.40002441,-1359.80004883,796.85998535,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2867,1234.69995117,-1362.19995117,796.84997559,0.00000000,0.00000000,60.00000000);
	CreateDynamicObject(19447,1224.90002441,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.39941406,-1358.59960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3657,1210.09997559,-1343.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1343.00000000,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1210.09997559,-1331.90002441,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1331.90002441,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,795.59997559,0.00000000,0.00000000,90.00000000);

    objectid = CreateDynamicObject(19304,1213.59997559,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
    SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1211.90002441,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1209.09997559,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1215.30004883,-1345.69995117,799.79998779,0.00000000,0.00000000,0.00000000);
	
	//hpmorp
    tmpobjid = CreateDynamicObject(5402, 2049.870117, -1400.890014, 20.679700, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 5, 18646, "matcolours", "grey-80-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(5403, 2050.070068, -1401.209960, 33.679698, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-30-percent", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 18646, "matcolours", "grey-80-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2038.548461, -1438.317138, 26.869735, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2038.548461, -1438.317138, 16.369747, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2012.557983, -1408.046875, 26.829759, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2012.557983, -1408.046875, 16.369758, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2044.198608, -1424.752075, 26.869735, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2044.198608, -1415.132080, 26.869735, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2044.198608, -1424.752075, 16.379737, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2044.198608, -1415.101318, 16.379737, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2026.857543, -1401.250122, 27.389759, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2032.447631, -1401.290161, 27.389759, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2037.724853, -1399.394409, 22.400783, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2015.843872, -1399.394409, 22.400783, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2047.893798, -1423.985595, 22.400783, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(2774, 2039.159423, -1444.422607, 22.379964, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-80-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(2774, 2039.159423, -1442.932006, 22.379964, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-80-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(2774, 2004.777832, -1408.190673, 22.379964, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-80-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(2774, 2006.297851, -1408.190673, 22.379964, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-80-percent", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    tmpobjid = CreateDynamicObject(19482, 2009.899047, -1446.031494, 12.738721, 0.000000, -78.299903, 179.999984, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff}EMERGENCY", 50, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19482, 2001.834350, -1438.071655, 12.724830, 0.000000, -78.299903, -90.699974, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff}EMERGENCY", 50, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(1215, 2007.902832, -1450.768920, 13.022914, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 1997.332397, -1440.408325, 13.022914, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2038.683837, -1429.368530, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2038.683837, -1425.477783, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2038.683837, -1421.677856, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2038.683837, -1418.107543, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2038.283447, -1413.806640, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2035.342529, -1409.795532, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2030.142822, -1407.545776, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2025.541503, -1407.545776, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2021.370849, -1407.545776, 16.702920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2029.783447, -1401.314331, 14.479438, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 8391, "ballys01", "vgncorpdoor1_512", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2025.608398, -1401.236694, 19.369758, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 2035.218627, -1401.236694, 19.369758, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2037.724853, -1399.394409, 23.240802, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2015.746704, -1399.394409, 23.240802, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 2048.067382, -1424.243896, 23.240802, 0.000000, 90.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-20-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19482, 2013.012329, -1450.924804, 16.230634, 0.000000, 0.000000, -90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}MIDN", 50, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19482, 2016.692993, -1450.924804, 16.230634, 0.000000, 0.000000, -90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}IGHT", 50, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19482, 2014.842407, -1450.924804, 15.140631, 0.000000, 0.000000, -90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}OUTLAW", 90, "Ariel", 50, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19482, 2014.842407, -1450.924804, 14.440624, 0.000000, 0.000000, -90.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}MEDICAL CENTER", 130, "Ariel", 35, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19360, 2049.138916, -1405.668212, 48.906967, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 6284, "bev_law2", "lasjmposh2", 0x00000000);
    tmpobjid = CreateDynamicObject(19360, 2045.805175, -1396.629028, 48.906967, 0.000000, 0.000000, 90.300033, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 6284, "bev_law2", "lasjmposh2", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2008.443237, -1441.698608, 13.022914, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2016.777954, -1427.439941, 13.022914, 0.000000, 0.000000, -40.600002, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2006.223266, -1439.398193, 13.022914, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(1215, 2021.135375, -1431.622680, 13.022914, 0.000000, 0.000000, -40.600002, -1, -1, -1, 450.00, 450.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18631, "nomodelfile", "hazardtile6", 0x00000000);
    tmpobjid = CreateDynamicObject(5661, 2050.070068, -1401.209960, 33.679698, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 2004.597656, -1438.921997, 12.562191, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 2001.287841, -1438.921997, 12.562191, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 1998.618164, -1438.921997, 12.562191, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 2008.978637, -1443.402465, 12.562191, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 2008.978637, -1446.682250, 12.562191, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19425, 2008.978637, -1449.612548, 12.562191, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1256, 2043.619262, -1428.266357, 16.700798, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1256, 2043.619262, -1411.713500, 16.700798, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1256, 2043.619262, -1420.063720, 16.700798, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2038.224365, -1434.451049, 16.665466, -1.899999, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2038.224365, -1439.718139, 16.840190, -1.899999, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2038.224365, -1442.646728, 16.937349, -1.899999, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(932, 2021.551269, -1401.674194, 16.231773, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(932, 2022.441650, -1401.674194, 16.231773, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(932, 2023.401855, -1401.674194, 16.231773, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2018.201171, -1408.297241, 16.602214, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2012.891113, -1408.297241, 16.602214, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(640, 2009.580810, -1408.297241, 16.602214, 0.000000, 0.000000, 90.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19279, 2010.741821, -1451.959228, 12.770627, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19279, 2013.662841, -1451.959228, 12.770627, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19279, 2016.482788, -1451.959228, 12.770627, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(19279, 2019.113403, -1451.959228, 12.910631, 0.000000, 0.000000, 0.000000, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(3928, 2016.274780, -1386.778686, 47.335948, 0.000000, 0.000000, -92.999969, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(3928, 2059.722656, -1422.519165, 47.335948, 0.000000, 0.000000, -90.700012, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(3928, 2077.403076, -1422.734985, 47.335948, 0.000000, 0.000000, -90.700012, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(3928, 2031.244995, -1386.961425, 47.335948, 0.000000, 0.000000, -90.699966, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2019.219482, -1432.869995, 12.854702, 0.000000, 0.000000, -47.900012, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2016.303344, -1435.504638, 12.854702, 0.000000, 0.000000, -47.900012, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2012.963745, -1438.521972, 12.854702, 0.000000, 0.000000, -47.900012, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2009.080322, -1434.900634, 12.984704, 0.000000, 0.000000, 133.399978, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2015.692993, -1428.648193, 12.984704, 0.000000, 0.000000, 133.399978, -1, -1, -1, 450.00, 450.00);
    tmpobjid = CreateDynamicObject(1280, 2012.378784, -1431.781005, 12.984704, 0.000000, 0.000000, 133.399978, -1, -1, -1, 450.00, 450.00);


	// FMD HQ Interior (Main)
	CreateDynamicObject(19377,303.0083300,1734.1710200,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0080000,1724.5380900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5455600,1724.5650600,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4708300,1724.5512700,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5817000,1715.0184300,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0470000,1715.0092800,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4521500,1714.9982900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,297.3785100,1729.4550800,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,308.5267000,1728.9681400,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,303.4111000,1705.4381100,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,309.0299700,1710.0831300,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,298.6503300,1710.3720700,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,318.1890900,1718.8968500,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,319.7799400,1713.8325200,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,316.9845300,1715.6378200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,320.0360100,1724.4752200,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,312.7421900,1707.2959000,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,303.8535200,1700.6272000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,294.3555900,1700.6307400,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,308.5528300,1698.6328100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,313.6304900,1731.1495400,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19377,305.1874400,1738.8909900,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,311.5968900,1733.2728300,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,308.2782600,1741.4941400,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,302.6104100,1739.0069600,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0647900,1741.1154800,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0326500,1739.0101300,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0677800,1705.3768300,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0751600,1732.9126000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0678100,1720.1391600,2041.1999500,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19450,297.9874900,1720.1200000,2045.9899900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0652800,1713.7240000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0574600,1707.6444100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0677200,1726.5491900,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,294.5946700,1733.3363000,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,287.7799100,1726.8686500,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,294.7457600,1706.9888900,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19450,288.1676300,1713.8525400,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19377,282.1066300,1721.7541500,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,282.0834000,1712.1453900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19388,284.8420100,1720.6792000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8418300,1714.3811000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8419200,1726.8408200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14407,281.7731900,1720.7354700,2042.0200200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,279.6451400,1714.6911600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6397700,1726.6131600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,280.0779100,1719.4262700,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,280.0210600,1721.8717000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1523,284.8919100,1719.9190700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,284.8293500,1714.7106900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8281600,1723.9847400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3952000,1721.4533700,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3851600,1712.4227300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3986800,1730.7562300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8342900,1733.5362500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,281.2565600,1731.1449000,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(19450,282.0049100,1709.9862100,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(14407,275.6328100,1720.4567900,2042.0200200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,280.9892000,1710.3958700,2046.1999500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7666,280.9354900,1712.4360400,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9292900,1716.9151600,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9714100,1724.3070100,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9681100,1728.7729500,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5637800,1714.7343800,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5276200,1716.6062000,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,284.6994600,1714.3702400,2047.0437000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14657,278.1170300,1726.4295700,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2125,279.1882600,1726.5440700,2045.5206300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14657,272.9628000,1729.6212200,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6451100,1714.6911600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6086400,1724.2756300,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.9444600,1733.7408400,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1523,298.1099900,1712.9699700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,298.1211900,1725.7973600,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10009,303.2358100,1705.9794900,2041.9799800,0.0000000,0.0000000,-540.0000000); //
	CreateDynamicObject(10009,303.5607000,1732.9459200,2041.9799800,0.0000000,0.0000000,360.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,311.0549900,1710.1577100,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.8494600,1710.1633300,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,310.5050400,1729.3501000,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.7391700,1729.3544900,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,316.9876100,1725.2434100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,303.6236900,1716.8908700,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,310.9368000,1716.9149200,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,303.6769100,1723.0781300,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,310.9479100,1723.0629900,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,307.3017900,1709.1022900,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.3015400,1700.4470200,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2967200,1730.8836700,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2979700,1740.0156300,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19353,307.7066000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,306.9244100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3072500,1720.2406000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1711400,1723.0136700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,318.1921100,1716.9775400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.3361500,1723.0107400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.2648000,1716.8167700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,292.6272000,1709.0062300,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19450,292.7041300,1730.8332500,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,308.6773100,1730.8216600,2041.7044700,0.0000000,0.0000000,41.9999900); //
	CreateDynamicObject(1723,313.7042200,1728.3630400,2041.7044700,0.0000000,0.0000000,220.7999600); //
	CreateDynamicObject(2311,310.7790200,1729.1409900,2041.6988500,0.0000000,0.0000000,41.5200000); //
	CreateDynamicObject(1723,313.0018900,1712.7968800,2041.7044700,0.0000000,0.0000000,309.6599700); //
	CreateDynamicObject(2311,311.1241500,1710.7445100,2041.6988500,0.0000000,0.0000000,-49.3800000); //
	CreateDynamicObject(1723,310.4335300,1708.0306400,2041.7044700,0.0000000,0.0000000,132.7200000); //
	CreateDynamicObject(640,298.4453400,1706.9301800,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,298.4982900,1736.0760500,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,303.3941700,1738.7117900,2042.3800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(640,312.7133500,1731.4224900,2042.3800000,0.0000000,0.0000000,43.3800000); //
	CreateDynamicObject(640,312.7117900,1707.9856000,2042.3800000,0.0000000,0.0000000,132.0000200); //
	CreateDynamicObject(640,303.1869800,1701.0753200,2042.3800000,0.0000000,0.0000000,89.9399900); //
	CreateDynamicObject(644,314.9457100,1726.9716800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,315.3387800,1712.7454800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.3248300,1702.6160900,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.7919000,1737.4272500,2041.5446800,0.0000000,0.0000000,-5.2800000); //
	CreateDynamicObject(1569,316.9355500,1718.5216100,2041.6999500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1569,316.9151300,1721.5231900,2041.6999500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,303.2263500,1712.0775100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6807900,1708.2077600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,311.0804400,1699.3798800,2045.1200000,0.0000000,90.0000000,-36.2400000); //
	CreateDynamicObject(19377,308.4107100,1697.4563000,2045.1230500,0.0000000,90.0000000,-59.1000000); //
	CreateDynamicObject(19377,302.8421000,1695.6449000,2045.1209700,0.0000000,90.0000000,-79.2600000); //
	CreateDynamicObject(19377,297.8151900,1697.5302700,2045.1212200,0.0000000,90.0000000,-114.2400000); //
	CreateDynamicObject(19377,296.8037100,1698.1572300,2045.1200000,0.0000000,90.0000000,-143.3999900); //
	CreateDynamicObject(19377,292.9220900,1708.3493700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.7083100,1698.5462600,2045.1230500,0.0000000,90.0000000,-87.4800000); //
	CreateDynamicObject(19377,313.6958300,1717.8597400,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6943700,1727.4685100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6927800,1737.0770300,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2968100,1721.6835900,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3432000,1727.2338900,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,302.0692100,1728.4289600,2045.1219500,0.0000000,90.0000000,28.8600000); //
	CreateDynamicObject(19377,295.0835000,1737.5714100,2045.1200000,0.0000000,90.0000000,-13.7400100); //
	CreateDynamicObject(19377,298.4128100,1741.1560100,2045.1221900,0.0000000,90.0000000,-50.2200000); //
	CreateDynamicObject(19377,305.4567900,1743.0904500,2045.1203600,0.0000000,90.0000000,-89.7000000); //
	CreateDynamicObject(19377,309.9078100,1740.4078400,2045.1219500,0.0000000,90.0000000,-129.6601000); //
	CreateDynamicObject(19377,292.9037500,1717.9871800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8598000,1727.5999800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.6563100,1737.2166700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.8685900,1712.4522700,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.9446100,1722.0578600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4538900,1728.1084000,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4736900,1726.3780500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.1796300,1734.2570800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,313.4704300,1721.9592300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4807400,1710.5251500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4460800,1721.4744900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,308.7316000,1707.4411600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,302.7797900,1707.4355500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.8255900,1704.6713900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.9139400,1709.3995400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.7136200,1714.1364700,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,291.1931500,1714.1359900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2765200,1728.1485600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2850300,1713.7363300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1975100,1719.3842800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.9658500,1716.0202600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,318.9632000,1732.6717500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,322.5897500,1734.2519500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,305.4509900,1715.6485600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.6244200,1723.7197300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,299.9090000,1718.9587400,2046.9499500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19388,313.4637800,1716.2133800,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,313.4800100,1732.7696500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(941,318.2278100,1716.5438200,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1369,316.9319800,1718.6926300,2045.7873500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2792,313.4563000,1715.7637900,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2794,313.4670100,1732.3862300,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11709,316.3952300,1714.0858200,2045.8800000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11707,314.9844100,1713.8917200,2046.0000000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11738,318.2623300,1717.4075900,2046.0575000,0.0000000,0.0000000,-71.7600000); //
	CreateDynamicObject(11738,318.4575500,1716.3659700,2046.0575000,0.0000000,0.0000000,-88.3800000); //
	CreateDynamicObject(11738,318.1898200,1715.9495800,2046.0575000,0.0000000,0.0000000,-174.7199700); //
	CreateDynamicObject(11736,318.1078500,1716.9252900,2046.0178200,0.0000000,0.0000000,-129.8399800); //
	CreateDynamicObject(19339,318.3839100,1731.3282500,2046.3800000,0.0000000,0.0000000,89.2200000); //
	CreateDynamicObject(941,318.3655700,1731.0390600,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(941,316.1153000,1728.7944300,2045.5439500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(303,316.7699900,1728.6137700,2046.0169700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2905,316.9830300,1728.8640100,2046.0177000,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2906,316.5119600,1729.0598100,2046.0777600,0.0000000,84.0000000,-85.0000000); //
	CreateDynamicObject(2906,316.1318400,1728.6934800,2046.0777600,0.0000000,84.0000000,-48.6399900); //
	CreateDynamicObject(2907,315.5983900,1728.8242200,2046.0577400,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2908,316.3945000,1728.5428500,2046.1176800,-76.0000000,48.0000000,-30.0000000); //
	CreateDynamicObject(2905,317.2831100,1728.6457500,2046.0777600,-11.0000000,178.0000000,-46.8000000); //
	CreateDynamicObject(1523,313.5266100,1732.0133100,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,313.4849900,1715.4639900,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1491,305.4775100,1714.9050300,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2184,301.6876200,1720.8125000,2045.1866500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,302.7992600,1722.6538100,2045.1678500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1736,302.8185100,1723.3610800,2048.0793500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,300.4746400,1723.1483200,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,303.9538300,1723.0762900,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11712,302.8305700,1723.6319600,2047.4000200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19893,302.2153000,1721.3055400,2045.9595900,0.0000000,0.0000000,136.9200000); //
	CreateDynamicObject(19810,305.5448600,1716.7041000,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19810,305.5567300,1714.5617700,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19806,302.4137900,1718.9931600,2048.0346700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19172,300.0974100,1718.6551500,2047.3912400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1828,302.7713600,1718.1806600,2045.1829800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2131,301.5134300,1714.6702900,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2131,303.4942300,1714.6665000,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19431,307.9731400,1734.8695100,2046.9499500,0.0000000,0.0000000,34.6199700); //
	CreateDynamicObject(19431,306.9825400,1736.1022900,2046.9499500,0.0000000,0.0000000,43.5599700); //
	CreateDynamicObject(19431,305.7912600,1737.1112100,2046.9499500,0.0000000,0.0000000,55.6799800); //
	CreateDynamicObject(19431,304.3605300,1737.7225300,2046.9499500,0.0000000,0.0000000,79.0800000); //
	CreateDynamicObject(19431,303.0155300,1737.8642600,2046.9499500,0.0000000,0.0000000,90.0000200); //
	CreateDynamicObject(19431,302.0553900,1737.3988000,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,300.8975200,1736.3724400,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,299.9442100,1735.1096200,2046.9499500,0.0000000,0.0000000,157.5600000); //
	CreateDynamicObject(19431,299.4621300,1733.7148400,2046.9499500,0.0000000,0.0000000,163.9799300); //
	CreateDynamicObject(19431,299.2149400,1732.7229000,2046.9499500,0.0000000,0.0000000,171.5999500); //
	CreateDynamicObject(19450,298.9913900,1732.2845500,2046.9499500,0.0000000,0.0000000,117.5400200); //
	CreateDynamicObject(19431,303.9959700,1734.3811000,2046.9499500,0.0000000,0.0000000,261.0598400); //
	CreateDynamicObject(19431,305.0911300,1733.5955800,2046.9499500,0.0000000,0.0000000,207.4798700); //
	CreateDynamicObject(19431,298.9092100,1703.9245600,2046.9499500,0.0000000,0.0000000,28.9800300); //
	CreateDynamicObject(19431,299.7147800,1702.8237300,2046.9499500,0.0000000,0.0000000,41.9400300); //
	CreateDynamicObject(19431,300.8793300,1701.8411900,2046.9499500,0.0000000,0.0000000,58.3200300); //
	CreateDynamicObject(19431,302.2331800,1701.2249800,2046.9499500,0.0000000,0.0000000,73.3800300); //
	CreateDynamicObject(19431,303.7749300,1701.1378200,2046.9499500,0.0000000,0.0000000,99.3600500); //
	CreateDynamicObject(19431,305.2196000,1701.6594200,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,306.5421100,1702.4554400,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,307.6550300,1703.4969500,2046.9499500,0.0000000,0.0000000,145.3200700); //
	CreateDynamicObject(19431,308.4859900,1704.8344700,2046.9499500,0.0000000,0.0000000,150.6601100); //
	CreateDynamicObject(19431,308.4835500,1705.3800000,2046.9499500,0.0000000,0.0000000,178.1400500); //
	CreateDynamicObject(19431,308.4970400,1706.6167000,2046.9499500,0.0000000,0.0000000,181.7400700); //
	CreateDynamicObject(19353,307.5458100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.4046000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.2399000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.0947900,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.4580100,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.6187700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.7796600,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.9500700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1720.1167000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.3175000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(2008,297.5231900,1724.2286400,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2008,297.5220300,1716.8732900,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3397,297.4426000,1719.0638400,2041.7071500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1937,270.6657700,1727.5871600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2018100,1702.7998000,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8327900,1709.2722200,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3310500,1712.3391100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6891800,1711.8839100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.7886700,1721.4311500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3681900,1721.8647500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,314.2639500,1730.9770500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.9994500,1730.9475100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.1025400,1740.3638900,2048.6298800,0.0000000,90.0000000,0.0000000); //

	// Idlewood Gas Station (Main)
    CreateDynamicObject(970, 1942.256469, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095825, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096191, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096679, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095703, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1215, 1941.625610, -1780.841918, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1215, 1941.636230, -1765.047241, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1291, 1928.692382, -1767.511352, 13.032809, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1287, 1928.503662, -1768.784423, 13.076869, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1289, 1928.507202, -1769.368896, 13.092813, 0.000000, 0.000000, -90.228660);
    CreateDynamicObject(1250, 1908.817138, -1782.609863, 13.582806, 0.000000, 0.000000, 90.000000);

	// LSPD HQ
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

	// Prison (Main)
	CreateDynamicObject(7191, 1759.3388671875, -1602.4755859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1757.1634521484, -1588.1893310547, 1735.8120117188, 0, 0, 182);
	CreateDynamicObject(8661, 1775.4768066406, -1555.7030029297, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1775.5107421875, -1575.599609375, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1773.916015625, -1585.5395507813, 1743.4429931641, 271.99951171875, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1769.3701171875, -1560.263671875, 1743.8931884766, 90, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1755.54296875, -1565.8349609375, 1743.8681640625, 90, 164.49871826172, 285.49029541016);
	CreateDynamicObject(8661, 1780.4873046875, -1566.796875, 1743.9184570313, 271.99401855469, 179.99450683594, 270.74157714844);
	CreateDynamicObject(7191, 1763.6158447266, -1602.3254394531, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.837890625, -1602.2255859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1779.0579833984, -1587.5596923828, 1735.8120117188, 0, 0, 1.24951171875);
	CreateDynamicObject(7191, 1772.0864257813, -1602.0699462891, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3354492188, -1601.9881591797, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6092529297, -1601.9577636719, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6083984375, -1601.95703125, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3553466797, -1601.9653320313, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1772.1040039063, -1602.0228271484, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.8559570313, -1602.2055664063, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1763.6304931641, -1602.2875976563, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1759.3823242188, -1602.4952392578, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(8661, 1774.9119873047, -1585.8381347656, 1737.7172851563, 0, 0, 0);
	CreateDynamicObject(8661, 1774.90625, -1586.212890625, 1737.7172851563, 0, 179.99993896484, 0);
	CreateDynamicObject(14856, 1757.1630859375, -1588.1884765625, 1739.5620117188, 0, 0, 181.99951171875);
	CreateDynamicObject(14856, 1779.0576171875, -1587.5595703125, 1739.5625, 0, 0, 1.2469482421875);
	CreateDynamicObject(14856, 1756.6878662109, -1558.7972412109, 1735.8120117188, 0, 0, 181.49700927734);
	CreateDynamicObject(7191, 1759.470703125, -1544.4438476563, 1734.9488525391, 0, 359.24743652344, 359.99450683594);
	CreateDynamicObject(7191, 1763.7202148438, -1544.3764648438, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1767.9682617188, -1544.2838134766, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(14856, 1778.7756347656, -1558.3518066406, 1735.8120117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(7191, 1772.2685546875, -1544.3099365234, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1776.5231933594, -1544.2121582031, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1780.5192871094, -1544.1015625, 1734.9488525391, 0, 359.24194335938, 0.489013671875);
	CreateDynamicObject(8661, 1775.4921875, -1559.5787353516, 1737.6934814453, 0, 0, 0);
	CreateDynamicObject(7191, 1780.4685058594, -1544.1010742188, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1776.2663574219, -1544.2237548828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1772.0139160156, -1544.3225097656, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1767.7136230469, -1544.3187255859, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1763.4619140625, -1544.3909912109, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1759.2349853516, -1544.4659423828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(14856, 1756.6875, -1558.796875, 1739.5617675781, 0, 0, 181.494140625);
	CreateDynamicObject(14856, 1778.775390625, -1558.3515625, 1739.5620117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(8661, 1775.4921875, -1559.578125, 1737.6934814453, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1758.60546875, -1576.8515625, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 0, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 180, 0);
	CreateDynamicObject(8614, 1759.4495849609, -1570.4389648438, 1736.4675292969, 0, 0, 0);
	CreateDynamicObject(970, 1774.7596435547, -1569.5825195313, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1770.6550292969, -1569.5819091797, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1766.5239257813, -1569.5954589844, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1764.4404296875, -1569.5966796875, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1760.3516845703, -1569.6000976563, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1776.8194580078, -1571.7288818359, 1738.26953125, 0, 0, 90.5);
	CreateDynamicObject(970, 1776.8634033203, -1573.791015625, 1738.2449951172, 0, 0, 90.499877929688);
	CreateDynamicObject(970, 1774.8477783203, -1575.8577880859, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1770.7470703125, -1575.8815917969, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1766.6242675781, -1575.9301757813, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1762.4991455078, -1575.9755859375, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1758.3935546875, -1576.0017089844, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1754.2669677734, -1576.0084228516, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1753.4927978516, -1576.0433349609, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(8661, 1757.4633789063, -1557.0551757813, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1761.17578125, -1557.2333984375, 1741.4466552734, 0, 359.74182128906, 0);
	CreateDynamicObject(8661, 1760.8068847656, -1557.2219238281, 1741.3715820313, 0, 180.24169921875, 0);
	CreateDynamicObject(8661, 1758.5277099609, -1574.4494628906, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1763.0654296875, -1589.0302734375, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1761.8243408203, -1589.0578613281, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(14387, 1780.9128417969, -1577.6300048828, 1740.5070800781, 0, 0, 92);
	CreateDynamicObject(14387, 1780.7963867188, -1574.7548828125, 1738.7320556641, 0, 0, 91.99951171875);
	CreateDynamicObject(14387, 1780.697265625, -1574.7872314453, 1738.7320556641, 0, 113.99996948242, 269.99963378906);
	CreateDynamicObject(14387, 1780.6909179688, -1577.2197265625, 1740.2563476563, 0, 113.99963378906, 269.99450683594);
	CreateDynamicObject(970, 1778.5164794922, -1577.0081787109, 1742.0205078125, 0, 0, 90.494384765625);
	CreateDynamicObject(8661, 1775.048828125, -1576.234375, 1744.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1775.404296875, -1562.490234375, 1746.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8614, 1754.3951416016, -1570.4387207031, 1732.7175292969, 0, 179.25, 0);
	CreateDynamicObject(2205, 1778.9362792969, -1571.5363769531, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(2205, 1778.0222167969, -1572.8785400391, 1733.9429931641, 0, 0, 89.5);
	CreateDynamicObject(2205, 1779.3442382813, -1573.8327636719, 1733.9429931641, 0, 0, 178.99462890625);
	CreateDynamicObject(2190, 1779.5219726563, -1571.4400634766, 1734.8795166016, 0, 0, 0);
	CreateDynamicObject(2190, 1777.921875, -1572.6606445313, 1734.8795166016, 0, 0, 89.25);
	CreateDynamicObject(2776, 1779.9310302734, -1572.2644042969, 1734.4404296875, 0, 0, 232);
	CreateDynamicObject(14819, 1780.7757568359, -1575.8271484375, 1735.0928955078, 358.25003051758, 0.2501220703125, 91.257659912109);
	CreateDynamicObject(14401, 1767.8037109375, -1573.5908203125, 1734.2686767578, 0, 0, 91.994018554688);
	CreateDynamicObject(3858, 1760.9343261719, -1571.0079345703, 1744.4094238281, 0, 0, 260);
	CreateDynamicObject(8661, 1778.7847900391, -1553.5157470703, 1751.2926025391, 90, 180.00549316406, 269.23352050781);
	CreateDynamicObject(8661, 1778.3208007813, -1567.1134033203, 1751.2425537109, 89.249816894531, 269.99981689453, 89.236633300781);
	CreateDynamicObject(970, 1778.4766845703, -1572.8826904297, 1742.0205078125, 0, 0, 90.994384765625);
	CreateDynamicObject(3858, 1760.93359375, -1571.0078125, 1744.4094238281, 0, 0, 79.996948242188);
	CreateDynamicObject(3089, 1764.1071777344, -1568.7672119141, 1742.8266601563, 0, 0, 34);
	CreateDynamicObject(2173, 1758.0897216797, -1572.2486572266, 1741.5235595703, 0, 0, 216);
	CreateDynamicObject(2173, 1760.3353271484, -1570.6602783203, 1741.5235595703, 0, 0, 215.99670410156);
	CreateDynamicObject(2173, 1762.6174316406, -1569.1575927734, 1741.5235595703, 0, 0, 215.24670410156);
	CreateDynamicObject(2173, 1762.4538574219, -1570.6696777344, 1741.5235595703, 0, 0, 35.494140625);
	CreateDynamicObject(2173, 1760.2321777344, -1572.2497558594, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(2173, 1757.98828125, -1573.8432617188, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(1671, 1763.5197753906, -1571.3277587891, 1741.9614257813, 0, 0, 218);
	CreateDynamicObject(1671, 1761.2962646484, -1572.9020996094, 1741.9614257813, 0, 0, 215.4962310791);
	CreateDynamicObject(1671, 1759.0114746094, -1574.51953125, 1741.9614257813, 0, 0, 215.49133300781);
	CreateDynamicObject(1671, 1757.0166015625, -1571.6016845703, 1741.9614257813, 0, 0, 31.491333007813);
	CreateDynamicObject(1671, 1759.2440185547, -1569.9787597656, 1741.9614257813, 0, 0, 35.48681640625);
	CreateDynamicObject(1671, 1761.5261230469, -1568.5364990234, 1741.9614257813, 0, 0, 35.48583984375);
	CreateDynamicObject(2187, 1760.5855712891, -1570.3542480469, 1741.5122070313, 0, 0, 214);
	CreateDynamicObject(2187, 1760.5849609375, -1570.353515625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1760.8128662109, -1569.0754394531, 1742.2379150391, 0, 0, 36.497161865234);
	CreateDynamicObject(2187, 1760.8125, -1569.0751953125, 1741.4381103516, 0, 0, 36.49658203125);
	CreateDynamicObject(2187, 1758.2767333984, -1571.8021240234, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.2763671875, -1571.8017578125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.5090332031, -1570.4970703125, 1741.412109375, 0, 0, 34.247161865234);
	CreateDynamicObject(2187, 1758.5087890625, -1570.4970703125, 1742.2366943359, 0, 0, 34.244384765625);
	CreateDynamicObject(2187, 1762.1694335938, -1571.0229492188, 1741.5061035156, 0, 0, 34);
	CreateDynamicObject(2187, 1762.1689453125, -1571.0224609375, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9272460938, -1572.5755615234, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9267578125, -1572.5751953125, 1741.4060058594, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.6702880859, -1573.84765625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1759.669921875, -1573.84765625, 1741.4621582031, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3258056641, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3251953125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(8661, 1766.4588623047, -1559.2015380859, 1751.267578125, 271.26885986328, 168.62805175781, 259.37780761719);
	CreateDynamicObject(8661, 1766.9233398438, -1559.1123046875, 1751.267578125, 271.26345825195, 168.62365722656, 78.876129150391);
	CreateDynamicObject(2136, 1767.3325195313, -1569.9263916016, 1741.4822998047, 0, 0, 90);
	CreateDynamicObject(2135, 1767.3481445313, -1570.8608398438, 1741.4837646484, 0, 0, 90);
	CreateDynamicObject(2828, 1778.9792480469, -1573.7318115234, 1734.8795166016, 0, 0, 326);
	CreateDynamicObject(2139, 1767.3896484375, -1571.8475341797, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2139, 1767.3603515625, -1567.9683837891, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2140, 1767.4088134766, -1572.8157958984, 1741.4838867188, 0, 0, 87);
	CreateDynamicObject(2164, 1776.0461425781, -1567.0831298828, 1741.4696044922, 0, 0, 359.25);
	CreateDynamicObject(2163, 1774.255859375, -1567.1708984375, 1741.5002441406, 0, 0, 0);
	CreateDynamicObject(2208, 1767.0778808594, -1585.1064453125, 1741.5029296875, 0, 0, 91.5);
	CreateDynamicObject(2208, 1767.0032958984, -1582.4022216797, 1741.5029296875, 0, 0, 153.49963378906);
	CreateDynamicObject(2208, 1764.4655761719, -1581.1422119141, 1741.5029296875, 0, 0, 153.49548339844);
	CreateDynamicObject(2208, 1762.1202392578, -1579.9860839844, 1741.5029296875, 0, 0, 183.49548339844);
	CreateDynamicObject(2208, 1759.5886230469, -1580.1437988281, 1741.5029296875, 0, 0, 183.49365234375);
	CreateDynamicObject(2637, 1770.8051757813, -1570.4884033203, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2637, 1770.8111572266, -1572.3884277344, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2776, 1771.9637451172, -1572.65625, 1741.9592285156, 0, 0, 272);
	CreateDynamicObject(2776, 1771.9259033203, -1571.4854736328, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1771.9973144531, -1570.2535400391, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1770.2476806641, -1572.9060058594, 1741.9592285156, 0, 0, 91.99951171875);
	CreateDynamicObject(2776, 1769.6883544922, -1571.5091552734, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1769.7230224609, -1570.2498779297, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1770.0451660156, -1567.3060302734, 1741.9592285156, 0, 0, 1.7440185546875);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.109375, 0, 0, 1.7413330078125);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.2845458984, 0, 0, 1.7413330078125);
	CreateDynamicObject(1713, 1777.7474365234, -1571.4503173828, 1741.4388427734, 0, 0, 272);
	CreateDynamicObject(1713, 1776.7827148438, -1574.2749023438, 1741.4388427734, 0, 0, 178.99951171875);
	CreateDynamicObject(3962, 1775.3117675781, -1571.7060546875, 1741.5023193359, 0.03924560546875, 90.49853515625, 359.7497253418);
	CreateDynamicObject(8661, 1778.1085205078, -1554.0021972656, 1751.2926025391, 90, 179.99450683594, 90.991943359375);
	CreateDynamicObject(1429, 1774.6732177734, -1567.4151611328, 1742.6916503906, 0, 0, 0);
	CreateDynamicObject(2964, 1773.1020507813, -1578.4581298828, 1741.46484375, 0, 0, 180);
	CreateDynamicObject(2008, 1756.0985107422, -1583.4029541016, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1759.1009521484, -1583.3901367188, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1762.0266113281, -1583.3752441406, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2190, 1760.8291015625, -1580.0938720703, 1742.3681640625, 0, 0, 342);
	CreateDynamicObject(2190, 1767.2740478516, -1584.0732421875, 1742.3681640625, 0, 0, 259.99890136719);
	CreateDynamicObject(2776, 1762.8975830078, -1584.4860839844, 1742.0198974609, 0, 0, 184);
	CreateDynamicObject(2776, 1759.9997558594, -1584.62109375, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1756.9647216797, -1584.6823730469, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1760.1267089844, -1581.2440185547, 1742.0198974609, 0, 0, 135.9990234375);
	CreateDynamicObject(2776, 1765.6030273438, -1584.4368896484, 1742.0198974609, 0, 0, 147.99426269531);
	CreateDynamicObject(2602, 1758.9934082031, -1561.9260253906, 1734.4664306641, 0, 0, 268);
	CreateDynamicObject(2602, 1763.2186279297, -1561.8996582031, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.5178222656, -1561.8721923828, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.8062744141, -1561.8575439453, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1776.0793457031, -1561.9962158203, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.0523681641, -1561.7204589844, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.1115722656, -1582.5888671875, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1775.8510742188, -1583.1767578125, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.5657958984, -1583.7680664063, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.330078125, -1584.3520507813, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1762.9997558594, -1584.0653076172, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1758.8037109375, -1584.3908691406, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(1800, 1756.0372314453, -1585.6010742188, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1759.9868164063, -1585.6198730469, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.2355957031, -1585.6398925781, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.4360351563, -1585.66015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.6612548828, -1585.6807861328, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1776.9354248047, -1585.7015380859, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1777.1528320313, -1565.1075439453, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.9020996094, -1565.1015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.6270751953, -1565.1192626953, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.3767089844, -1565.11328125, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1760.1014404297, -1565.1063232422, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1756.1010742188, -1565.0988769531, 1733.9429931641, 0, 0, 0);

	// Hitman HQ (Main)
	CreateDynamicObject(14597, 275.64441, 1826.99341, 628.99384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 288.81924, 1825.74548, 626.96436,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(1536, 288.80136, 1828.71216, 626.96436,   0.00000, 0.00000, -90.36001);
	CreateDynamicObject(19379, 288.86429, 1826.14209, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 291.75934, 1830.28406, 629.01538,   0.00000, 0.00000, 89.52004);
	CreateDynamicObject(19379, 291.91187, 1823.81567, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.91748, 1835.06750, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 286.93823, 1844.54004, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41287, 1835.07727, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41388, 1838.62573, 629.01538,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19379, 282.36877, 1840.65002, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 283.33542, 1813.37573, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.93030, 1819.05054, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 286.93228, 1809.85938, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.43765, 1819.04675, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.41653, 1810.32458, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 274.22406, 1840.65576, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 279.14267, 1835.07861, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 271.61826, 1835.09875, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 271.60031, 1842.01025, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 279.17969, 1844.41699, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 279.13852, 1819.03809, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 279.17059, 1813.16370, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.63040, 1819.04517, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.65027, 1809.74463, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 275.84720, 1813.41479, 629.01538,   0.00000, 0.00000, 269.93973);
	CreateDynamicObject(19379, 262.44925, 1825.40088, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 266.61258, 1824.12939, 629.01538,   0.00000, 0.00000, 270.30005);
	CreateDynamicObject(19379, 266.59171, 1829.97729, 629.01538,   0.00000, 0.00000, 269.88007);
	CreateDynamicObject(1491, 283.21112, 1823.78418, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 273.84842, 1823.79272, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 271.31128, 1827.82324, 625.52020,   0.00000, 0.00000, -89.58004);
	CreateDynamicObject(1491, 275.37140, 1830.35193, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(1491, 284.73337, 1830.35266, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(19462, 285.09583, 1825.82971, 626.92224,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19462, 287.73550, 1828.19556, 626.91974,   0.36000, 89.94003, 89.94000);
	CreateDynamicObject(19462, 276.50281, 1828.20459, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 276.50085, 1825.88928, 626.89667,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.89731, 1828.21509, 626.92352,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.73828, 1825.93396, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 277.57834, 1825.90930, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 291.66397, 1825.83826, 626.90472,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19305, 288.78735, 1825.45801, 628.32080,   0.00000, 0.00000, -95.40001);
	CreateDynamicObject(2207, 266.32962, 1826.05859, 626.94104,   0.00000, 0.00000, 89.40002);
	CreateDynamicObject(1714, 264.16104, 1827.07581, 626.98358,   0.00000, 0.00000, 81.17999);
	CreateDynamicObject(1715, 266.85654, 1828.96912, 627.02209,   0.00000, 0.00000, -55.79997);
	CreateDynamicObject(1715, 267.69156, 1828.07922, 627.02209,   0.00000, 0.00000, -69.65997);
	CreateDynamicObject(1715, 267.94534, 1826.71545, 627.02209,   0.00000, 0.00000, -97.37999);
	CreateDynamicObject(1715, 267.54315, 1825.56836, 627.02209,   0.00000, 0.00000, -122.09998);
	CreateDynamicObject(1715, 266.51468, 1824.85925, 627.02209,   0.00000, 0.00000, -151.07993);
	CreateDynamicObject(11712, 266.77585, 1826.97229, 627.84235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 270.48907, 1829.81360, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 264.72067, 1829.81323, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 266.14948, 1824.36328, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(14455, 260.36832, 1824.32751, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(3017, 265.81439, 1826.19275, 627.73700,   1.26000, 0.60000, 35.87999);
	CreateDynamicObject(2257, 262.59427, 1827.12500, 629.11652,   0.00000, 0.00000, 91.32000);
	CreateDynamicObject(16780, 286.56949, 1826.89038, 631.20435,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 279.50092, 1826.84827, 631.20984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 273.23172, 1826.90674, 631.18280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 265.88730, 1828.10400, 627.85144,   -87.12004, -33.29999, -102.24001);
	CreateDynamicObject(347, 265.95154, 1827.14893, 627.75305,   -76.79999, -103.68000, -112.74001);
	CreateDynamicObject(347, 265.99887, 1826.85461, 627.75305,   78.24003, 69.00000, -50.22001);
	CreateDynamicObject(19450, 266.59207, 1829.76587, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(19450, 266.65073, 1824.33875, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(2509, 284.80246, 1840.55920, 628.68848,   -1.32001, 89.87998, -0.18000);
	CreateDynamicObject(2509, 282.97931, 1840.53882, 628.68628,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(2509, 281.29443, 1840.51746, 628.68848,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(351, 280.59906, 1840.43591, 628.20160,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(351, 280.57559, 1840.39575, 628.78198,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(356, 282.17032, 1840.40027, 628.88879,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(356, 282.11331, 1840.35693, 628.30231,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(349, 283.77316, 1840.47314, 628.80200,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(349, 283.86072, 1840.33728, 628.32251,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(358, 285.21771, 1840.42090, 628.41858,   -6.90002, -68.69999, 1.74000);
	CreateDynamicObject(2475, 279.67560, 1838.40454, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.63931, 1836.94141, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.59842, 1835.44250, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(350, 279.72568, 1838.82483, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(350, 279.72464, 1838.36121, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(348, 279.71594, 1837.97144, 627.81323,   -84.78011, -36.30000, 0.00000);
	CreateDynamicObject(348, 279.71124, 1837.61096, 627.81323,   -83.22009, -31.91998, 0.00000);
	CreateDynamicObject(353, 279.77527, 1837.09546, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(353, 279.73547, 1836.65857, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(355, 279.74847, 1835.58032, 627.82135,   -95.39997, -68.16000, 9.36001);
	CreateDynamicObject(1279, 279.86230, 1838.77759, 627.08112,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(1580, 279.94742, 1837.89893, 627.08124,   0.00000, 0.00000, 87.18000);
	CreateDynamicObject(1579, 279.88538, 1837.22656, 627.05701,   0.00000, 0.00000, 91.97999);
	CreateDynamicObject(1576, 279.94363, 1836.55835, 627.11060,   0.00000, 0.00000, 92.63999);
	CreateDynamicObject(1577, 279.84671, 1835.84253, 627.08331,   0.00000, 0.00000, 90.35999);
	CreateDynamicObject(1578, 279.79156, 1835.21411, 627.05389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19515, 279.91925, 1839.07544, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.94498, 1838.63428, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.93002, 1838.17432, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.95566, 1837.73303, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.97009, 1837.25146, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.96347, 1836.77075, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.91864, 1836.31274, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.86850, 1835.79431, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.87714, 1835.25232, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(14455, 286.80310, 1831.14087, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(14455, 286.84018, 1836.94104, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(19450, 262.53137, 1829.18469, 632.13080,   0.00000, 0.00000, 1.56002);
	CreateDynamicObject(19450, 262.42844, 1830.82629, 628.40839,   -89.69999, 48.36001, 51.24001);
	CreateDynamicObject(19450, 262.56412, 1823.42273, 628.40839,   -90.66002, 228.48022, 51.24001);
	CreateDynamicObject(19450, 262.50177, 1828.81726, 625.43805,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19450, 286.79767, 1835.04956, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(19450, 286.71075, 1844.44080, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(2357, 276.91580, 1820.17407, 627.39197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 273.93591, 1820.17859, 627.39197,   0.00000, 0.00000, -0.78000);
	CreateDynamicObject(19443, 274.08453, 1819.93799, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 276.73926, 1819.93604, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 273.30402, 1820.15967, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 276.54266, 1820.34338, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 277.12000, 1820.36536, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(356, 272.28125, 1820.62097, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(356, 273.06094, 1820.58777, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(355, 274.59283, 1820.50684, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(355, 275.45190, 1820.58069, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(351, 277.04422, 1820.59619, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(351, 278.00427, 1820.58130, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(11729, 279.90778, 1834.39880, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.83923, 1833.74304, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11730, 279.89355, 1833.13574, 626.97687,   0.00000, 0.00000, 89.22001);
	CreateDynamicObject(11729, 279.86880, 1832.48120, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.78595, 1831.81274, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(2049, 278.01779, 1814.59387, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 275.31180, 1814.51392, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 272.42874, 1814.45544, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2492, 279.02441, 1822.89270, 627.62097,   0.00000, 0.00000, 85.92001);
	CreateDynamicObject(2496, 279.04617, 1822.33655, 627.61859,   0.00000, 0.00000, 87.65999);
	CreateDynamicObject(1584, 271.65628, 1823.02283, 626.97076,   0.00000, 0.00000, 89.04001);
	CreateDynamicObject(1586, 271.66867, 1821.62720, 627.02698,   0.00000, 0.00000, 91.02007);
	CreateDynamicObject(2614, 288.71237, 1827.24341, 629.95099,   5.22000, -1.08000, -90.05998);
	CreateDynamicObject(3041, 285.01663, 1840.02014, 626.81726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 286.44254, 1822.62744, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.40881, 1820.66394, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.35272, 1818.69165, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.30466, 1816.72205, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(9819, 282.84299, 1814.69299, 627.87048,   0.00000, 0.00000, -90.54003);
	CreateDynamicObject(3384, 280.26987, 1823.07727, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(3384, 280.22034, 1822.05127, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(16782, 283.22870, 1813.69727, 629.63525,   359.79831, -1.74000, 90.44164);
	CreateDynamicObject(3389, 279.92990, 1820.97363, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3389, 279.93481, 1819.97095, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3393, 280.20773, 1817.66760, 626.96606,   180.63899, 180.72025, -1.33073);
	CreateDynamicObject(1715, 285.32742, 1822.87622, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.25467, 1820.72791, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.18314, 1818.68127, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.22665, 1816.84045, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.15604, 1815.22534, 627.02209,   0.00000, 0.00000, 32.76000);
	CreateDynamicObject(1715, 281.81738, 1815.07031, 627.02209,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1715, 281.60178, 1818.24536, 627.02209,   0.00000, 0.00000, -40.25999);
	CreateDynamicObject(2183, 274.15054, 1832.20190, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.79785, 1832.14087, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.80884, 1836.10291, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 274.16022, 1836.15601, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(1715, 271.91638, 1832.78735, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.89224, 1836.76465, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.90628, 1834.37329, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.93652, 1838.45679, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 275.13080, 1838.51025, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.21179, 1836.78259, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.03906, 1834.53723, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.10657, 1832.76453, 626.98901,   0.00000, 0.00000, -97.80000);
	CreateDynamicObject(1715, 275.56760, 1838.47485, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.63116, 1836.78271, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.55618, 1834.47998, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 275.63583, 1832.76062, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 278.81256, 1838.60022, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.80820, 1836.65076, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.81665, 1834.42883, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.68353, 1832.64136, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(626, 278.88507, 1831.08875, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(626, 272.25906, 1830.85364, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(2614, 275.44586, 1840.48157, 629.95099,   5.22000, -1.08000, 1.14002);
	CreateDynamicObject(2606, 286.98727, 1822.12085, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 286.99945, 1817.47034, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 279.44882, 1817.66797, 629.59949,   0.00000, 0.00000, 89.51999);
	CreateDynamicObject(1736, 275.47827, 1840.22925, 629.60272,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 277.71344, 1833.34302, 627.80664,   0.00000, 0.00000, 23.28000);
	CreateDynamicObject(2190, 277.20346, 1834.27527, 627.80664,   0.00000, 0.00000, 101.70000);
	CreateDynamicObject(2190, 277.44531, 1837.54785, 627.80664,   0.00000, 0.00000, 59.52002);
	CreateDynamicObject(2190, 277.23032, 1838.18481, 627.80664,   0.00000, 0.00000, 101.22002);
	CreateDynamicObject(2190, 276.81677, 1837.67346, 627.80664,   0.00000, 0.00000, 232.98003);
	CreateDynamicObject(2190, 277.08719, 1837.09705, 627.80664,   0.00000, 0.00000, 288.36011);
	CreateDynamicObject(2190, 276.75189, 1833.68726, 627.80664,   0.00000, 0.00000, 217.92012);
	CreateDynamicObject(2190, 276.96661, 1833.05676, 627.80664,   0.00000, 0.00000, 274.14008);
	CreateDynamicObject(2190, 273.74396, 1833.59338, 627.80664,   0.00000, 0.00000, 422.22012);
	CreateDynamicObject(2190, 273.52472, 1833.10938, 627.80664,   0.00000, 0.00000, 634.68005);
	CreateDynamicObject(2190, 273.05789, 1833.82080, 627.80664,   0.00000, 0.00000, 570.66016);
	CreateDynamicObject(2190, 273.56238, 1834.27576, 627.80664,   0.00000, 0.00000, 449.34018);
	CreateDynamicObject(2190, 273.89996, 1837.54175, 627.80664,   0.00000, 0.00000, 397.86026);
	CreateDynamicObject(2190, 273.59732, 1838.17798, 627.80664,   0.00000, 0.00000, 453.72025);
	CreateDynamicObject(2190, 273.25378, 1837.75330, 627.80664,   0.00000, 0.00000, 604.62012);
	CreateDynamicObject(2190, 273.47760, 1837.20313, 627.80664,   0.00000, 0.00000, 642.59985);
	CreateDynamicObject(11705, 273.16312, 1836.14502, 627.75458,   0.00000, 0.00000, -96.89999);
	CreateDynamicObject(11705, 273.19928, 1835.20264, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.16156, 1831.93091, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.86328, 1831.95642, 627.75458,   0.00000, 0.00000, 103.92000);
	CreateDynamicObject(11705, 273.90021, 1835.38184, 627.75458,   0.00000, 0.00000, 69.60000);
	CreateDynamicObject(11705, 273.81116, 1836.09033, 627.75458,   0.00000, 0.00000, 108.42001);
	CreateDynamicObject(11705, 273.91794, 1839.36047, 627.75458,   0.00000, 0.00000, 67.68002);
	CreateDynamicObject(11705, 273.17206, 1839.46204, 627.75458,   0.00000, 0.00000, 273.60001);
	CreateDynamicObject(11705, 276.80173, 1839.32568, 627.75458,   0.00000, 0.00000, -69.89997);
	CreateDynamicObject(11705, 277.53796, 1839.33496, 627.75458,   0.00000, 0.00000, 67.50003);
	CreateDynamicObject(11705, 277.51724, 1836.02673, 627.75458,   0.00000, 0.00000, 111.54005);
	CreateDynamicObject(11705, 277.56387, 1835.24426, 627.75458,   0.00000, 0.00000, 68.70005);
	CreateDynamicObject(11705, 277.50598, 1831.95239, 627.75458,   0.00000, 0.00000, 112.08005);
	CreateDynamicObject(11705, 276.78943, 1835.92676, 627.75458,   0.00000, 0.00000, -103.49996);
	CreateDynamicObject(11705, 276.82678, 1835.20142, 627.75458,   0.00000, 0.00000, -66.17997);
	CreateDynamicObject(11705, 276.73422, 1831.87964, 627.75458,   0.00000, 0.00000, -129.23999);
	CreateDynamicObject(2168, 276.75681, 1835.17102, 627.23627,   0.00000, 0.00000, -91.14001);
	CreateDynamicObject(2168, 277.60321, 1836.06091, 627.23627,   0.00000, 0.00000, 88.92003);
	CreateDynamicObject(2168, 273.11954, 1835.23975, 627.23627,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2168, 273.91693, 1836.15112, 627.23627,   0.00000, 0.00000, 89.28003);
	CreateDynamicObject(19379, 274.62427, 1814.24890, 629.01538,   0.00000, 0.00000, 272.51987);

	// Casino (Main)
	CreateDynamicObject(1557, 1049.28479, -76.50269, 1002.84723,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1049.27722, -73.47843, 1002.84723,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11711, 1049.26843, -74.97846, 1005.84076,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1049.17200, -80.08165, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(955, 1049.57031, -69.65048, 1003.22736,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1049.16455, -69.60130, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1052.55493, -80.15146, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1051.67957, -67.46523, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1049.42346, -82.58302, 1006.00201,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.50073, -71.68658, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1052.54602, -66.83293, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1052.49121, -83.27089, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1056.43115, -81.58074, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19943, 1059.17468, -75.06314, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1054.38281, -81.30837, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1895, 1055.28455, -67.05891, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.42690, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1053.90857, -85.45072, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2785, 1058.76489, -67.35265, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1060.49585, -81.48005, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.45952, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.66992, -66.09094, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1050.53711, -87.73021, 1000.20319,   0.00000, 0.00000, -88.02001);
	CreateDynamicObject(744, 1055.06592, -87.88472, 1000.20319,   0.00000, 0.00000, -123.06002);
	CreateDynamicObject(19325, 1059.56897, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.65369, -86.06802, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1052.91284, -89.64304, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1062.63525, -67.08700, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1049.17139, -90.54007, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1063.00928, -66.82363, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1059.56775, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(744, 1058.59192, -87.70292, 1000.20319,   0.00000, 0.00000, -163.74005);
	CreateDynamicObject(1978, 1064.40173, -81.47494, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19377, 1064.78821, -71.74110, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(824, 1057.93359, -89.78098, 1004.39825,   0.00000, 0.00000, -41.46000);
	CreateDynamicObject(19458, 1063.48389, -85.45838, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1064.78748, -81.32116, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19842, 1056.09424, -91.35799, 1002.94366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.36804, -90.94196, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2785, 1066.15649, -67.35699, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1062.71936, -88.59658, 1000.62305,   0.00000, 0.00000, -7.80000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19840, 1052.37085, -94.48434, 1006.55182,   0.00000, 0.00000, -214.97990);
	CreateDynamicObject(14394, 1069.94507, -75.97780, 1003.45190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1059.96484, -92.44523, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19943, 1069.43970, -69.47334, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1052.67725, -95.81470, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19842, 1050.95508, -95.68379, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19943, 1069.34216, -83.02602, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1070.92676, -72.47041, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1066.74768, -87.95781, 1000.95239,   0.00000, 0.00000, 57.18000);
	CreateDynamicObject(3461, 1071.02527, -71.86362, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.94910, -70.23013, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3461, 1071.04065, -80.04420, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92883, -81.81020, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1070.94629, -82.09011, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1071.88232, -71.39160, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(19377, 1064.77710, -90.93395, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19304, 1070.95679, -66.76436, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1071.84558, -67.76514, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92126, -85.31362, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1073.55359, -70.93554, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.67297, -71.88052, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1068.41040, -90.65974, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19840, 1065.40649, -93.70704, 1004.76331,   0.00000, 0.00000, -139.13992);
	CreateDynamicObject(19458, 1070.90747, -62.84904, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.61438, -80.06390, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1073.18176, -68.06664, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1073.81592, -70.19453, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1072.56494, -84.31914, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1074.01709, -70.56737, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19842, 1062.57043, -95.70599, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1063.15796, -95.81058, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1074.16980, -70.19215, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1073.40186, -66.84618, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1073.57214, -85.48295, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1075.28967, -71.59889, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1076.16064, -79.09118, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1075.29041, -81.21085, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1076.19983, -69.31850, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2188, 1076.96106, -75.76588, 1005.15912,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1077.40503, -71.31926, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(2811, 1076.91614, -67.76842, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1078.38660, -75.62801, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1076.78857, -85.19331, 1004.28461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19943, 1078.75525, -75.90584, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1079.08167, -70.75925, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1077.90771, -84.48042, 1004.62244,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1078.63892, -67.94370, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.46423, -70.17117, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.58691, -70.56429, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1079.85364, -70.23563, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2188, 1080.50037, -75.72617, 1005.15912,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1080.68262, -79.02571, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1080.88770, -75.67596, 1001.79138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1081.72754, -69.13873, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1082.03308, -67.59252, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1082.96082, -71.13293, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(1723, 1084.06470, -67.93970, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1083.82178, -66.84474, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1084.61304, -70.55933, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1084.95911, -69.98113, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1083.99902, -85.26949, 1004.28571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1084.00586, -85.47746, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1085.24097, -69.95586, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1085.71973, -71.60077, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1085.72229, -81.18897, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1087.34619, -69.00988, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1895, 1087.90710, -76.66120, 1007.54187,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1557, 1087.01648, -85.26563, 1004.28571,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1088.08508, -80.18764, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1088.08765, -69.71519, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 968.70294, -56.50698, 1005.57806,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 968.44470, -53.15002, 1003.11096,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2948, 968.48669, -53.18999, 1000.12457,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 968.48633, -53.18945, 1000.12457,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2885, 963.42554, -56.52645, 1003.82831,   270.00000, 180.69543, 270.69543);
	CreateDynamicObject(1828, 961.39844, -54.04688, 1000.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(2811, 1152.46912, -148.43152, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1153.26563, -147.46700, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1153.86011, -148.27446, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.21411, -151.61507, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.71851, -150.41545, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1151.47559, -152.66190, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(2811, 1152.41138, -152.83882, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.27686, -151.04385, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.59180, -150.60863, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1155.03674, -150.77731, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.31323, -155.28352, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19324, 1157.67542, -147.91064, 1061.54370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1153.76672, -155.33855, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.82874, -153.10989, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2640, 1159.68567, -148.02785, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.28894, -158.99973, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.65222, -158.20490, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2640, 1160.82532, -148.06580, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.16870, -160.42035, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.25488, -158.55658, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.49341, -158.05815, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.79346, -158.38660, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1163.03796, -147.62897, 1060.90613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1156.77161, -152.37300, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1160.25024, -152.34012, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1162.61633, -147.87120, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1151.47595, -163.11476, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(1665, 1160.45410, -152.72057, 1061.80542,   0.00000, 0.00000, -203.03998);
	CreateDynamicObject(19378, 1163.75012, -147.46709, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19897, 1160.48279, -152.97374, 1061.80603,   0.00000, 0.00000, -45.42001);
	CreateDynamicObject(18783, 1159.24707, -157.10338, 1058.39575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1153.00671, -163.66307, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.81384, -160.75337, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18655, 1153.40063, -163.88226, 1060.89111,   0.00000, 0.00000, -126.84000);
	CreateDynamicObject(11711, 1164.50049, -147.60214, 1063.77197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1166.06104, -147.61790, 1060.90613,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1153.22485, -164.83400, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1166.33887, -148.01964, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1167.30139, -147.98822, 1060.89282,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1160.27869, -158.50061, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1156.77502, -161.96141, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89551, -152.69249, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(19842, 1160.07361, -164.63982, 1062.64233,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1167.24097, -152.34738, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16151, 1167.90784, -156.78714, 1061.28101,   0.00000, 0.00000, -360.00000);
	CreateDynamicObject(19378, 1163.60840, -164.82945, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1167.44360, -163.91403, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18655, 1168.12109, -163.84752, 1060.89111,   0.00000, 0.00000, -48.12000);
	CreateDynamicObject(19377, 1167.22681, -161.97363, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89685, -163.11745, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(14808, 1211.28125, -32.67188, 1001.37500,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19324, 1212.77856, 2.45176, 1000.56476,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 846.31873, -127.50880, 1006.30292,   0.00000, 0.00000, 0.00000);
	
   // REGISTRATION SCREEN
  tmpobjid = CreateDynamicObject(19380, 1944.959472, 1909.675170, 3000.000000, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1944.959472, 1900.115844, 3000.000000, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.520507, 1900.115844, 3000.000000, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.520507, 1909.676147, 3000.000000, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1929.351562, 1909.676147, 3000.500000, 0.000000, 180.000000, 360.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1929.351562, 1900.057250, 3000.500000, 0.000000, 180.000000, 360.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.120605, 1895.237548, 3000.500000, 180.000000, 360.000000, 450.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1943.700195, 1895.237548, 3000.500000, 180.000000, 360.000000, 450.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1953.289306, 1895.237548, 3000.500000, 180.000000, 360.000000, 630.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1950.128173, 1900.056396, 3000.500000, 180.000000, 360.000000, 720.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1950.128173, 1909.656127, 3000.500000, 180.000000, 360.000000, 720.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1945.269042, 1914.426025, 3000.500000, 180.000000, 360.000000, 810.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1935.660034, 1914.426025, 3000.500000, 180.000000, 360.000000, 810.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1926.060546, 1914.426025, 3000.500000, 180.000000, 360.000000, 810.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1940.140258, 1913.646362, 3000.730224, 0.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
SetDynamicObjectMaterial(tmpobjid, 0, 1598, "beachball", "beachball", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1945.311035, 1913.666503, 2995.562744, 0.000000, 180.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "red-4", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.890502, 1913.666503, 2995.562744, 0.000000, 180.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "red-4", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1940.150390, 1908.817382, 2996.012695, 270.000000, 450.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "red-4", 0x00000000);
tmpobjid = CreateDynamicObject(19482, 1940.041381, 1914.333374, 3003.486328, 0.000000, 0.000000, 270.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "MGMC Roleplay", 120, "Calibri", 60, 1, 0xFF0080FF, 0x00000000, 1);
tmpobjid = CreateDynamicObject(19380, 1944.959472, 1900.115844, 3005.649658, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.500488, 1900.115844, 3005.649658, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1934.500488, 1909.714965, 3005.649658, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);
tmpobjid = CreateDynamicObject(19380, 1944.980224, 1909.714965, 3005.649658, 0.000000, 90.000000, 180.000000, -1, -1, -1, 1000.00, 1000.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampwhite", 0x00000000);

	// Black Market (Main)
	CreateDynamicObject(3050, 2785.17896, -1420.67981, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(3050, 2785.38257, -1425.31738, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(941, 2784.54907, -1422.18640, 15.72698,   0.00000, 0.00000, 92.15999);
	CreateDynamicObject(941, 2784.68530, -1425.38696, 15.72698,   0.00000, 0.00000, 91.31999);
	CreateDynamicObject(14782, 2776.36450, -1421.06738, 16.19847,   0.00000, 0.00000, 0.90001);
	CreateDynamicObject(2068, 2775.30469, -1423.29199, 18.73224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, 2774.43311, -1423.61218, 15.32481,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2846, 2775.42310, -1425.35010, 15.37114,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2843, 2777.74414, -1424.74170, 15.49002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 2776.11279, -1422.61035, 15.55225,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 2783.21973, -1420.21558, 15.24498,   0.00000, 0.00000, 88.91997);
	CreateDynamicObject(3386, 2782.23804, -1420.23340, 15.24243,   0.00000, 0.00000, 89.27999);
	CreateDynamicObject(3389, 2781.25098, -1420.24231, 15.24498,   0.00000, 0.00000, 89.81996);
	CreateDynamicObject(3384, 2780.31348, -1420.70850, 16.65611,   0.00000, 0.00000, 91.25999);
	CreateDynamicObject(14779, 2779.56616, -1428.45410, 17.95450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16782, 2780.96167, -1426.17175, 17.58850,   0.00000, 0.00000, 90.06001);
	CreateDynamicObject(941, 2781.27368, -1425.70081, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(941, 2778.51343, -1425.77747, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(2778, 2768.37524, -1420.99133, 15.24588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2779, 2767.60352, -1421.03662, 15.25062,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1574, 2784.64819, -1423.56519, 15.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1766, 2770.01514, -1421.02344, 15.23388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2769, 2771.76880, -1421.18457, 15.76980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1421, 2775.85913, -1425.86621, 15.96340,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(4100, 2766.85449, -1417.02002, 16.43014,   0.00000, 0.00000, 54.30001);
	CreateDynamicObject(2928, 2773.53052, -1426.45825, 15.72148,   0.00000, 0.00000, 180.35999);
	CreateDynamicObject(2041, 2777.25464, -1426.00000, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.55591, -1426.00903, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.89429, -1426.00439, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2778.21460, -1425.99426, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(3013, 2779.17383, -1425.99878, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 2778.75391, -1425.99121, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2042, 2781.80396, -1425.82996, 16.28370,   0.00000, 0.00000, 102.83997);
	CreateDynamicObject(2358, 2780.16162, -1425.72729, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(2358, 2781.16016, -1425.74036, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(1575, 2780.61353, -1425.74365, 16.15221,   0.00000, 0.00000, 86.57999);
	CreateDynamicObject(2036, 2784.81958, -1422.04883, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2036, 2784.24683, -1422.03345, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2047, 2785.28198, -1423.45715, 17.65787,   0.00000, 0.00000, -87.65999);
	CreateDynamicObject(2044, 2784.90063, -1424.19385, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.91455, -1424.49402, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74609, -1426.11743, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74072, -1425.83655, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2619, 2783.16162, -1426.21814, 16.94985,   0.00000, 0.00000, -91.07999);
	CreateDynamicObject(964, 2771.59082, -1425.69568, 15.15549,   0.00000, 0.00000, 360.29990);
	CreateDynamicObject(1431, 2769.77979, -1425.92554, 15.77326,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.37158, -1424.51526, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.38159, -1424.15662, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.67651, -1425.04993, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.68896, -1425.43152, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2772.15161, -1422.83081, 15.54213,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2770.38525, -1422.73682, 15.35979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2744, 2766.53540, -1421.53345, 17.08466,   0.00000, 0.00000, -88.31999);
	CreateDynamicObject(1413, 2655.89014, -1447.56409, 16.51389,   0.00000, 0.00000, -27.71999);
	CreateDynamicObject(1413, 2651.29199, -1445.01392, 16.51389,   0.00000, 0.00000, -27.71999);

	// Fixed Trailer (Main)
 	CreateDynamicObject(11015, 4.2412109375, -0.25, 1002.3616333008, 0, 90, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(11015, -3.7464447021484, -0.46751827001572, 1002.3616333008, 0, 90, 0, .interiorid = 2);
    CreateDynamicObject(11015, -2.0341796875, -0.2255859375, 996.58734130859, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(11015, -1.7412109375, -8.029296875, 1002.3616333008, 0, 90, 89.994506835938, .interiorid = 2);
    CreateDynamicObject(11015, 2.349609375, 9.3095703125, 1002.3616333008, 0, 90, 270, .interiorid = 2);
    CreateDynamicObject(976, -8.3762712478638, 5.4238820075989, 998.02801513672, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(976, 10.326154708862, 5.4526047706604, 998.02801513672, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(976, -0.78860986232758, 4.5294494628906, 998.02801513672, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(976, -9.4923362731934, 2.8067343235016, 998.30328369141, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(968, -0.78987210988998, 3.085230588913, 996.65313720703, 0, 0, 88.375030517578, .interiorid = 2);
    CreateDynamicObject(2424, -1.1989899873734, 2.1414895057678, 998.20440673828, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(2424, -1.4444495439529, 1.2195072174072, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2420085668564, 0.15943863987923, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2046113014221, -0.27639570832253, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6594306230545, -1.5798351764679, 998.40460205078, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6048280000687, -3.7030065059662, 998.50469970703, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3431304693222, -4.7396554946899, 997.82904052734, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3272333145142, -5.6384997367859, 997.85406494141, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -0.82665449380875, -5.819974899292, 997.82904052734, 0, 0, 0.07452392578125, .interiorid = 2);
    CreateDynamicObject(2424, 0.90103495121002, -5.7934393882751, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.8007507324219, -5.7772388458252, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 2.0067005157471, -4.656822681427, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0016891956329, -5.5176014900208, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.095220312476158, -5.8064684867859, 997.85406494141, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.9964281320572, -1.4732304811478, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0242736339569, -0.59229171276093, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.105211853981, -0.25799462199211, 997.82904052734, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(2424, 0.85449481010437, -0.25893545150757, 997.82904052734, 0, 0, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, 0.94933843612671, 0.93138349056244, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.9278947114944, 1.8640511035919, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.912776350975, 2.7815411090851, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.9282813072205, 3.7311086654663, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.94268548488617, 0.38233369588852, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.8336682319641, 0.42996874451637, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(1814, -0.070350080728531, -4.9489212036133, 998.45343017578, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2108, 0.87250107526779, -1.5103777647018, 997.35357666016, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2738, -1.3212617635727, 5.0136914253235, 998.98120117188, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2558, -0.45861941576004, 3.3949182033539, 999.67913818359, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2558, -1.1560896635056, 4.4181189537048, 999.70416259766, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(1745, 2.4512000083923, 6.3230948448181, 998.07806396484, 0, 0, 90, .interiorid = 2);

	// Crack Lab Fixes (Main)
    CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Hospital Interior (Main)
    CreateDynamicObject(19449,-207.3999939,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-202.6000061,-1734.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.1999969,-1734.8010254,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1569,-206.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1569,-203.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19387,-196.6992188,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-201.3994141,-1736.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4003906,-1736.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1734.7998047,678.4000244,270.0000000,180.0000000,180.0000000);
	CreateDynamicObject(17038,-199.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1738.0159912,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6719971,-1738.0169678,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-195.3994141,-1742.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1742.9000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-201.1000061,-1739.6999512,674.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.1005859,-1739.6992188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-199.8837891,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8849945,-1744.4980469,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.0989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3999939,-1755.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-199.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-206.1999969,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.4010010,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1753.3249512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1764.4370117,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-206.3000031,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-207.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-207.3994141,-1758.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-207.3999939,-1762.0999756,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-196.5996094,-1758.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.0000000,-1733.2998047,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-203.0000000,-1733.3000488,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19441,-203.7140045,-1733.3010254,677.3980244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(19441,-205.2870026,-1733.3010254,677.3970244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(2885,-200.8994141,-1734.7998047,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1741.5000000,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1741.5000000,678.4000244,270.0000000,179.9945068,179.9945068);
	CreateDynamicObject(2885,-211.7998047,-1748.1992188,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1748.1999512,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1754.8994141,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.5996094,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-212.1992188,-1734.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8000031,-1744.5010986,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.3979950,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3970032,-1753.3242188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3979950,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1752.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4003906,-1762.0996094,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.7988281,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.3979950,-1740.5140381,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3990021,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3979950,-1764.4000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1758.8000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5980072,-1749.1999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-215.8000031,-1734.8011475,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.4010010,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4013672,-1740.5136719,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4011993,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4010010,-1764.3994141,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3034,-204.3994141,-1763.5996094,676.7000122,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1523,-201.3699951,-1756.4499512,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3691406,-1750.0498047,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3699951,-1762.8499756,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2686,-201.5130005,-1744.9000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2685,-201.5130005,-1745.4000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2688,-207.2998047,-1747.5996094,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-201.5000000,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3291016,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.8000031,-1751.5000000,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.7998047,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.5996094,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1754.3000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1753.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8999939,-1735.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1731.6992188,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1523,-207.3691406,-1746.8496094,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-207.3699951,-1759.6500244,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-207.3291016,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1746.8199463,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1759.6199951,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1759.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1746.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1999,-200.5000000,-1740.3994141,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2009,-199.5000000,-1743.7998047,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-199.2998047,-1743.0000000,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19387,-213.0000000,-1742.6992188,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.7998047,-1742.6992188,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.0000000,-1742.7001953,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1742.6989746,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.5000000,-1742.6999512,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.7402344,-1742.6992188,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.6979980,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3739929,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1742.7001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.7011719,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.7021484,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890625,-1742.7294922,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.2998047,-1742.7998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1742.6992188,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-213.8999939,-1745.6999512,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3394,-213.7998047,-1739.0000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1992188,-1737.0000000,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-208.1992188,-1740.8994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1731.8000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-213.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-212.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2132,-211.0996094,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-211.3994141,-1737.0996094,675.7800293,0.0000000,0.0000000,194.7491455);
	CreateDynamicObject(2146,-211.0996094,-1738.7998047,675.2700195,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1754.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-201.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,139.9932861);
	CreateDynamicObject(2811,-201.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,219.9957275);
	CreateDynamicObject(2811,-206.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,149.9957275);
	CreateDynamicObject(3657,-206.8999939,-1739.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-206.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,221.9897461);
	CreateDynamicObject(2688,-201.5000000,-1760.5000000,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-201.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-204.8000031,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-206.3999939,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-214.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.3999939,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.8000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.4000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1738.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-195.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19357,-209.0000000,-1748.8010254,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-207.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4010010,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4019928,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3979950,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1750.4000244,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-213.0000000,-1748.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1748.8010254,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.8000031,-1748.8000488,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.6000061,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.8404999,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1756.1999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890015,-1748.8299561,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.3000031,-1756.1989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.7990000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6629944,-1748.7980000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6621094,-1748.8027344,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.8017578,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.7989502,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3397,-208.1999969,-1750.8000488,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3396,-208.1999969,-1754.4000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(2132,-209.8999939,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-212.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-213.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3394,-213.8000031,-1752.1999512,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2146,-211.1000061,-1751.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-210.6999969,-1753.5000000,675.7999878,0.0000000,0.0000000,14.0000000);
	CreateDynamicObject(19460,-212.2998047,-1756.2001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3657,-201.8994141,-1746.5000000,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-214.0000000,-1743.4000244,674.7999878,0.0000000,0.0000000,251.9897461);
	CreateDynamicObject(2811,-214.0000000,-1748.0999756,674.7999878,0.0000000,0.0000000,295.9879761);
	CreateDynamicObject(16101,-207.5000000,-1748.8000488,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3394,-213.8000031,-1761.5000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2007,-214.0000000,-1758.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2007,-214.0000000,-1757.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2132,-210.1000061,-1763.0999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1999969,-1761.6999512,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-210.8000031,-1756.6999512,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2146,-211.1999969,-1759.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(11237,-230.0000000,-1760.4000244,698.9000244,0.0000000,180.0000000,180.0000000);
	CreateDynamicObject(3053,-211.1999969,-1760.4000244,678.4000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-211.1999969,-1760.4000244,688.0999756,0.0000000,180.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2885,-211.8000031,-1754.9000244,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-222.6000061,-1760.4000244,677.9000244,0.0000000,90.0000000,0.0000000);
	CreateDynamicObject(16101,-214.5000000,-1760.4000244,666.19387220,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-207.2500000,-1757.8000488,676.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-212.0000000,-1742.8499756,676.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(3808,-212.0000000,-1748.6600342,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.3000031,-1749.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1759.0999756,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(2009,-199.5000000,-1747.8000488,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-200.5000000,-1746.0999756,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.3999939,-1746.9000244,675.2000122,0.0000000,0.0000000,264.0000000);
	CreateDynamicObject(1671,-199.3999939,-1745.0999756,675.2000122,0.0000000,0.0000000,278.0000000);
	CreateDynamicObject(2009,-196.8000031,-1753.8000488,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-197.8000031,-1752.0999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-198.6999969,-1752.8000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2009,-199.6999969,-1751.0999756,674.8010254,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-197.6000061,-1753.0000000,675.2000122,0.0000000,0.0000000,282.0000000);
	CreateDynamicObject(1671,-196.8000031,-1751.3000488,675.2000122,0.0000000,0.0000000,260.0000000);
	CreateDynamicObject(1671,-199.8000031,-1752.0999756,675.2000122,0.0000000,0.0000000,84.0000000);
	CreateDynamicObject(1671,-199.8000031,-1753.8000488,675.2000122,0.0000000,0.0000000,104.0000000);
	CreateDynamicObject(2009,-196.0000000,-1757.1999512,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1999,-197.6999969,-1758.1999512,674.8010254,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1671,-196.8999939,-1757.3000488,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1671,-198.6999969,-1758.0000000,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2202,-196.0000000,-1746.1999512,674.7800293,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-195.8999939,-1745.0999756,674.7999878,0.0000000,0.0000000,115.9932861);
	CreateDynamicObject(2007,-196.0000000,-1748.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2007,-196.0000000,-1749.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-200.8999939,-1758.3000488,674.7999878,0.0000000,0.0000000,141.9881592);
	CreateDynamicObject(2611,-198.1999969,-1758.6700439,676.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2611,-201.2700043,-1746.4000244,676.5999756,0.0000000,0.0000000,89.9945068);
	CreateDynamicObject(19449,-215.8000031,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-201.3999939,-1768.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3999939,-1771.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1768.3000488,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.3990021,-1767.5799561,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1771.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1768.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1768.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1772.4000244,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3990479,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(14487,-190.8999939,-1778.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-211.8000031,-1753.0999756,675.2999878,0.0000000,0.0000000,290.0000000);
	CreateDynamicObject(1789,-211.8994141,-1759.1992188,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1789,-210.1999969,-1737.6999512,675.2999878,0.0000000,0.0000000,99.9951172);
	CreateDynamicObject(1800,-199.0000000,-1759.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1771.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1767.5999756,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1763.6999512,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-200.6999969,-1766.9000244,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1800,-200.6999969,-1773.3000488,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-196.1999969,-1770.6999512,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1789,-196.1999969,-1766.6999512,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.1999969,-1762.9000244,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.3000031,-1760.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1766.1999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1769.4000244,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19460,-216.0000000,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(1999,-197.5000000,-1740.4000244,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-196.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-215.8999939,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2852,-206.8000031,-1742.8000488,675.2800293,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2315,-206.8000031,-1742.4000244,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2855,-206.6999969,-1743.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	//
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1745.0999756,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1752.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1758.8000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1764.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1769.1999512,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1756.3000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1749.9000244,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
    SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180.0), 0, "HOSPITAL", 140, "Cambria", 130, 1, -1, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180), 0, "BLACK", 140, "Cambria", 55, 1, -584707328, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);

    // House Objects (Main)
	CreateDynamicObject(14707, 911.334106, -484.425170, 847.481384, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14711, 1312.136840, -175.075073, 1088.675659, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1321.403198, -166.876174, 1087.131591, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(14700, 1437.169189, -1832.845703, 1314.057250, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1433.098266, -1833.567993, 1312.596801, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14748, 1365.361694, -2141.651611, 1051.588623, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1364.546875, -2146.731689, 1049.618652, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14718, 2005.202270, -1701.831054, 1164.692260, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1506, 2010.115234, -1698.054321, 1164.701660, 0.000000, 0.000000, -90.000000);
	CreateDynamicObject(14754, 1284.700317, -1132.096679, 982.990844, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1282.763061, -1141.286621, 979.051940, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14713, 1183.433837, -422.981140, 1235.509155, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 1177.512084, -418.100250, 1233.734375, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(14750, 1752.987548, -1814.000000, 1005.840515, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1750.443969, -1823.364013, 999.340454, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14712, 2190.703125, -1127.359619, 1129.335815, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 2183.202392, -1131.089599, 1127.785400, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(14701, 2654.076171, -1032.999389, 930.996948, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 2653.683593, -1022.535644, 928.926269, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(14710, 836.976257, -1017.067077, 800.481994, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 827.483337, -1014.606506, 798.996154, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14706, 1834.514404, -1290.143066, 834.363037, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(19359, 2262.502929, -1143.025146, 1051.293334, 0.000000, 0.000000, 90.000000);

	// SAN Interior (Main)
	CreateDynamicObject(19376, 247.74, 1783.13, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.24, 1783.14, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 247.74, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.23, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 250.44, 1784.44, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 245.63, 1779.94, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.91, 1780.12, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.03, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19404, 252.33, 1778.41, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 249.65, 1777.30, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19388, 246.66, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 252.38, 1778.39, 702.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 249.13, 1776.76, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(2165, 251.81, 1777.85, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 248.54, 1774.62, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 252.63, 1777.00, 700.09,   0.00, 0.00, 230.00);
	CreateDynamicObject(2007, 253.70, 1776.70, 700.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1961, 250.82, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1962, 251.55, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1960, 252.27, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 247.05, 1784.39, 700.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 250.03, 1784.39, 700.02,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 251.10, 1783.84, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1703, 246.23, 1779.16, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 247.52, 1779.46, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 251.39, 1782.50, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 251.42, 1782.51, 701.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 247.52, 1780.31, 701.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(2852, 252.61, 1782.49, 700.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 247.42, 1779.67, 700.58,   0.00, 0.00, 39.00);
	CreateDynamicObject(2011, 246.21, 1783.97, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2011, 253.24, 1779.07, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 245.88, 1775.81, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 245.63, 1770.30, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 250.13, 1773.12, 701.65,   0.00, 0.00, 90.40);
	CreateDynamicObject(19388, 252.80, 1774.23, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(1502, 252.29, 1773.69, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(1265, 250.63, 1775.49, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 250.35, 1774.87, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1778, 253.53, 1775.81, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2712, 253.57, 1775.32, 700.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.31, 1773.68, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 250.27, 1773.94, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.56, 1775.12, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 249.18, 1774.36, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 249.18, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 246.30, 1770.17, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 247.85, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(1705, 251.83, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2315, 248.60, 1769.55, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2855, 248.78, 1769.55, 700.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 249.67, 1769.36, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 249.91, 1769.75, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 250.08, 1769.65, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2817, 248.02, 1783.18, 700.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 254.81, 1780.65, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(14393, 255.23, 1759.95, 702.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 249.19, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(14391, 256.13, 1760.86, 701.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 257.11, 1767.64, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1705, 258.68, 1767.02, 700.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(2332, 259.63, 1764.36, 700.38,   0.00, 0.00, -90.00);
	CreateDynamicObject(638, 254.72, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(638, 258.07, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 256.40, 1765.18, 701.10,   0.00, 0.00, 80.00);
	CreateDynamicObject(1714, 257.11, 1762.81, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 254.18, 1762.77, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 251.40, 1759.68, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 250.95, 1759.82, 700.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 252.48, 1759.82, 702.46,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 249.79, 1759.59, 702.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 248.19, 1759.58, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1704, 254.31, 1753.90, 700.09,   0.00, 0.00, 135.00);
	CreateDynamicObject(1704, 256.22, 1754.49, 700.09,   0.00, 0.00, -135.00);
	CreateDynamicObject(1815, 254.42, 1754.73, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2247, 254.89, 1755.32, 700.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 253.33, 1754.95, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 256.59, 1754.91, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19466, 253.95, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 256.17, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 258.40, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19376, 259.00, 1763.90, 699.99,   0.00, 90.00, 0.00);
	CreateDynamicObject(1502, 254.53, 1768.96, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 262.61, 1772.18, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19450, 263.67, 1770.76, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 257.75, 1783.82, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 257.75, 1777.43, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 259.37, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 265.76, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 268.40, 1775.63, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 256.17, 1781.31, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(2606, 256.21, 1781.15, 702.56,   13.50, 0.00, 0.00);
	CreateDynamicObject(2165, 255.78, 1780.60, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 256.45, 1779.59, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2078, 255.16, 1777.82, 700.11,   0.00, 0.00, 90.00);
	CreateDynamicObject(2462, 257.00, 1776.04, 700.26,   0.00, 0.00, 180.00);
	CreateDynamicObject(19418, 257.25, 1776.20, 701.06,   90.00, 90.00, 90.00);
	CreateDynamicObject(19418, 256.93, 1776.10, 701.06,   90.00, 90.00, 324233.00);
	CreateDynamicObject(19418, 257.04, 1776.30, 701.06,   90.00, 90.00, 342.00);
	CreateDynamicObject(334, 257.00, 1776.08, 701.41,   90.00, 0.00, 90.00);
	CreateDynamicObject(2037, 257.28, 1776.14, 701.81,   0.00, 0.00, 180.00);
	CreateDynamicObject(348, 256.86, 1776.16, 701.77,   90.00, 0.00, 45.00);
	CreateDynamicObject(19376, 268.68, 1783.12, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 268.71, 1773.53, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 262.09, 1787.45, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 269.72, 1784.41, 701.65,   0.00, 0.00, 45.00);
	CreateDynamicObject(19450, 269.61, 1780.36, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 272.15, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 262.57, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 262.68, 1786.88, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1702, 261.93, 1772.37, 700.08,   0.00, 0.00, 225.00);
	CreateDynamicObject(2315, 259.75, 1772.14, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(2315, 266.10, 1777.95, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(1702, 268.89, 1779.58, 700.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(1702, 267.63, 1776.33, 700.08,   0.00, 0.00, 180.00);
	CreateDynamicObject(2251, 260.10, 1772.71, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 266.94, 1779.01, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 260.76, 1772.73, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.26, 1777.77, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.34, 1777.86, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.20, 1777.88, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 258.59, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 264.98, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2207, 265.49, 1785.14, 700.09,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 267.29, 1785.67, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(330, 266.98, 1784.24, 700.86,   90.00, 0.00, 90.00);
	CreateDynamicObject(2894, 265.87, 1785.33, 700.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 263.00, 1785.07, 701.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1962, 267.85, 1786.13, 701.86,   0.00, 0.00, -45.00);
	CreateDynamicObject(2185, 258.67, 1785.35, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 260.03, 1786.60, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1704, 260.02, 1783.92, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2078, 262.38, 1784.88, 700.11,   0.00, 0.00, -90.00);
	CreateDynamicObject(2007, 257.95, 1786.74, 700.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 257.81, 1776.73, 700.02,   0.00, 0.00, 45.00);
	CreateDynamicObject(2886, 257.82, 1778.48, 701.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 257.82, 1778.51, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(2886, 257.71, 1778.48, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(19378, 247.74, 1783.13, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 247.74, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.23, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.68, 1783.12, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.71, 1773.53, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.24, 1783.14, 703.43,   0.00, 90.00, 0.00);

	new count;
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) count++;
	}

	printf("%i objects loaded.", count);
	
    ConnectNPC("[BOT]PT", "heliauto") ;
    airplane = AddStaticVehicle(577,0,0,0,0,99,99); // plane
	return 1;
}

public OnGameModeExit()
{
   	Discord_EchoC = DCC_FindChannelById(DISCORD_ECHANNEL);
    DCC_SendChannelMessage(Discord_EchoC, ":octagonal_sign: Server Offline");
    for(new o=0; o<MAX_STATIC_OBJECTS; o++)
	{
	    DestroyObject(o);
	}

	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}
	if (gstream) SvDeleteStream(gstream);

/*	TextDrawHideForAll(Textdraw);
    TextDrawDestroy(Textdraw);
*/
	KillTimer(FlashTimer);
	mysql_close(connectionID);

	// CCTV
	TextDrawHideForAll(TD);
	TextDrawDestroy(TD);
	for(new i; i<TotalMenus; i++)
	{
		DestroyMenu(CCTVMenu[i]);
	}
	/*--------------------*/

	if(gDoubleXP)
	{
	    gDoubleXP = 0;
	}

	if(gDoubleSalary)
	{
	    gDoubleSalary = 0;
	}
	return 1;
}

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid)
{
    if(PlayerInfo[playerid][pCallStage] == 2)
    {
    	if (keyid == 0x42 && callstream[playerid]) SvAttachSpeakerToStream(callstream[playerid], playerid);
    }
    if(PlayerInfo[playerid][pFactionRadio] == 1)
    {
    	if(keyid == 0x42 && factionstream[PlayerInfo[playerid][pFaction]]) SvAttachSpeakerToStream(factionstream[PlayerInfo[playerid][pFaction]], playerid);
    }
    if(PlayerInfo[playerid][pGangRadio] == 1)
    {
    	if(keyid == 0x42 && gangstream[PlayerInfo[playerid][pGang]]) SvAttachSpeakerToStream(gangstream[PlayerInfo[playerid][pGang]], playerid);
    }
    if(PlayerInfo[playerid][pPrRadio] == 1)
	{
	    if(keyid == 0x42 && IDStream[playerid] >= 1) SvAttachSpeakerToStream(StreamFreq[IDStream[playerid]], playerid);
	}
    else
    {
    	if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
    }
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
    if(PlayerInfo[playerid][pCallStage] == 2)
    {
    	if (keyid == 0x42 && callstream[playerid]) SvDetachSpeakerFromStream(callstream[playerid], playerid);
    }
    if(PlayerInfo[playerid][pFactionRadio] == 1)
    {
    	if(keyid == 0x42 && factionstream[PlayerInfo[playerid][pFaction]]) SvDetachSpeakerFromStream(factionstream[PlayerInfo[playerid][pFaction]], playerid);
    }
    if(PlayerInfo[playerid][pGangRadio] == 1)
    {
    	if(keyid == 0x42 && gangstream[PlayerInfo[playerid][pGang]]) SvDetachSpeakerFromStream(gangstream[PlayerInfo[playerid][pGang]], playerid);
    }
    if(PlayerInfo[playerid][pPrRadio] == 1)
	{
         if(keyid == 0x42 && IDStream[playerid] >= 1) SvDetachSpeakerFromStream(StreamFreq[IDStream[playerid]], playerid);
	}
    else
    {
    	if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
    }
}

public OnClientCheckResponse(playerid, type, arg, response)
{
    switch(type)
    {       
        case 0x48:
        {
            SetPVarInt(playerid, "NotAndroid", 1);	
        }
    }
    return 1;
}

public OnPlayerConnect(playerid)
{
	TextDrawHideForPlayer(playerid, CasCade1);
	TextDrawHideForPlayer(playerid, CasCade2);
	TextDrawHideForPlayer(playerid, CasCade3);
    TextDrawHideForPlayer(playerid, CasCade4);
	TextDrawHideForPlayer(playerid, CRPTD);
	//TextDrawHideForPlayer(playerid, PriorityTD1);
	
    SendClientCheck(playerid, 0x48, 0, 0, 2);
    statusb++;
	new names[MAX_PLAYER_NAME+1];
	GetPlayerName(playerid, names, MAX_PLAYER_NAME+1);
	UpdateDynamic3DTextLabelText(Radar3DText[playerid], 0xFF0000FF, names);
    if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
    {
    new npcname[64];
    GetPlayerName(playerid,npcname,64);
    if(!strcmp(npcname,"[BOT]PT",true))
    {
         PutPlayerInVehicle(playerid, airplane, 1);
         SetPlayerSkin(playerid, 61);
          printf("\n Airplane NPC Spawned. \n");
         SpawnPlayer(playerid);
	}
	ShowTurfsOnMap(playerid, true);
	}
	    // WHITELIST
    SCM(playerid, COLOR_LIGHTRED, "[System] {84a9ff}Checking Account Details..");
    new name[MAX_PLAYER_NAME+1];
    GetPlayerName(playerid, name, sizeof(name));
    new player[200];
    format(player,sizeof(player),"Whitelist/%s.txt",name);
    if(!dini_Exists(player))
    {
    new string[2500];

        format(string, sizeof(string), ""SVRCLR"[Server Whitelist Info]\n"SVRCLR"[Account Name] "WHITE"%s\n\n"SVRCLR"[Whitelist Status] "RED"You Are Not Whitelisted\n\n"WHITE"If You need Your account to be unlocked POST INGAME Name in INGAME NAMES CHANNEL.", GetRPName(playerid));
	    ShowPlayerDialog(playerid, DIALOG_WHITELIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Mallu Gamers Mobile Community RP Whitelisting System", string, "Submit", "");
	    SM(playerid, COLOR_LIGHTRED, "[System] {84a9ff}Reserved Account Details. Failed To Get Your Account!");
        SetTimerEx("Delay_Kick", 10, false, "i", playerid);
    }
    else
    {
        SendClientMessage(playerid,COLOR_LIGHTRED,"[System] {84a9ff}Your Account is already Registered in the whitelist system.");
        SM(playerid, COLOR_LIGHTRED, "[System] {84a9ff}Reserved Account Details. Account is Whitelisted!");
    }
    /*if(gDisabledVPN)
	{
		new formato[59];
		format(formato, sizeof formato, "www.shroomery.org/ythan/proxycheck.php?ip=%s", GetPlayerIP(playerid));
		HTTP(playerid, HTTP_GET, formato, "", "HTTP_ProxyCheck");
	}*/
	// Checking for plugin availability
    if (SvGetVersion(playerid) == SV_NULL)
    {
        SendClientMessage(playerid, -1, "Could not find plugin sampvoice.");
    }
    // Checking for a microphone
    else if (SvHasMicro(playerid) == SV_FALSE)
    {
        SendClientMessage(playerid, -1, "The microphone could not be found.");
    }
    // Create a local stream with an audibility distance of 40.0, an unlimited number of listeners
    // and the name 'Local' (the name 'Local' will be displayed in red in the players' speakerlist)
    else if ((lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, 0xff0000ff, "Local")))
    {
        SendClientMessage(playerid, -1, "All voice channels activated.");

        // Attach the player to the global stream as a listener
        if (gstream) SvAttachListenerToStream(gstream, playerid);

        // Assign microphone activation keys to the player
        SvAddKey(playerid, 0x42);
    }
	if(IsPlayerNPC(playerid)) return 1;

    ExBJck[playerid] = 0;
    pBlind[playerid] = 0;
    Maskara[playerid] = 0;
    ShowingBounds[playerid] = 0;
	Sliding[playerid] = 0;
    InsideTut[playerid] = 0;
    CurrentCCTV[playerid] = -1;
	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
	PayCheckCode[playerid] = 0;
	PowerSpec[playerid] = 0;

	// Default values are handled via MySQL/PhpMyAdmin. Don't assign default values here.
	PlayerInfo[playerid][pRobbingHouse] = -1;
	PlayerInfo[playerid][pToolkit] = 0;
	KillTimer(PlayerInfo[playerid][pBleedTimer]);
	PlayerInfo[playerid][pBleedTimer] = -1;
    PlayerInfo[playerid][pGraffiti] = -1;
    PlayerInfo[playerid][pChatAnim] = 0;
    PlayerInfo[playerid][pGraffitiTime] = 0;
    PlayerInfo[playerid][pGraffitiColor] = 0;
    PlayerInfo[playerid][pEditGraffiti] = -1;
	PlayerInfo[playerid][pEditGate] = -1;
	PlayerInfo[playerid][pEditmObject] = -1;
	PlayerInfo[playerid][pHurt] = 0;
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pProductChoose] = -1;
	PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDiamonds] = 0;
	PlayerInfo[playerid][pEcoin] = 0;
	PlayerInfo[playerid][pEngine] = 0;
	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pLogged] = 0;
	PlayerInfo[playerid][pKicked] = 0;
	PlayerInfo[playerid][pLoginTries] = 0;
	PlayerInfo[playerid][pSetup] = 0;
	PlayerInfo[playerid][pGender] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pCameraX] = 0;
	PlayerInfo[playerid][pFormerAdmin] = 0;
	PlayerInfo[playerid][pCameraY] = 0;
	PlayerInfo[playerid][pCameraZ] = 0;
	PlayerInfo[playerid][pPosX] = 0;
	PlayerInfo[playerid][pPosY] = 0;
	PlayerInfo[playerid][pPosZ] = 0;
	PlayerInfo[playerid][pPosA] = 0;
	PlayerInfo[playerid][pInterior] = 0;
	PlayerInfo[playerid][pWorld] = 0;
	PlayerInfo[playerid][pCash] = 50000;
	PlayerInfo[playerid][pBank] = 50000;
	PlayerInfo[playerid][pPaycheck] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pAdvertWarnings] = 0;
	PlayerInfo[playerid][pEXP] = 0;
	PlayerInfo[playerid][pMinutes] = 0;
	PlayerInfo[playerid][pHours] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAdminName] = 0;
	PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pHealth] = 100.0;
	PlayerInfo[playerid][pArmor] = 0.0;
	PlayerInfo[playerid][pUpgradePoints] = 0;
	PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pComserv] = 0;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pBrokenLeg] = 0;
	PlayerInfo[playerid][pHospital] = 0;
	PlayerInfo[playerid][pSpawnHealth] = 100.0;
	PlayerInfo[playerid][pSpawnArmor] = 0;
	PlayerInfo[playerid][pJailType] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pNewbieMuted] = 0;
	PlayerInfo[playerid][pHelpMuted] = 0;
	PlayerInfo[playerid][pAdMuted] = 0;
	PlayerInfo[playerid][pLiveMuted] = 0;
	PlayerInfo[playerid][pGlobalMuted] = 0;
	PlayerInfo[playerid][pReportMuted] = 0;
	PlayerInfo[playerid][pReportWarns] = 0;
	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pAccent] = 0;
	PlayerInfo[playerid][pDirtyCash] = 0;
	PlayerInfo[playerid][pInfluenced] = 0;
	gLastCar[playerid] = 0;

	/*#if defined Christmas
	#else
		PlayerInfo[playerid][pCandy] = 0;
	#endif*/

	PlayerInfo[playerid][pPhone] = 0;
	PlayerInfo[playerid][pJob] = JOB_NONE;
	PlayerInfo[playerid][pSecondJob] = JOB_NONE;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pMaterials] = 0;
	PlayerInfo[playerid][pPot] = 0;
	PlayerInfo[playerid][pCrack] = 0;
	PlayerInfo[playerid][pMeth] = 0;
	PlayerInfo[playerid][pPainkillers] = 0;
	PlayerInfo[playerid][pSeeds] = 0;
	PlayerInfo[playerid][pEphedrine] = 0;
	PlayerInfo[playerid][pMuriaticAcid] = 0;
	PlayerInfo[playerid][pBakingSoda] = 0;
	PlayerInfo[playerid][pCigars] = 0;
	PlayerInfo[playerid][pWalkieTalkie] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pRentingHouse] = 0;
	PlayerInfo[playerid][pSpraycans] = 0;
	PlayerInfo[playerid][pBoombox] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pBlindfold] = 0;
	PlayerInfo[playerid][pMP3Player] = 0;
	PlayerInfo[playerid][pPhonebook] = 0;
	PlayerInfo[playerid][pFishingRod] = 0;
	PlayerInfo[playerid][pFishingBait] = 0;
	PlayerInfo[playerid][pFishWeight] = 0;
	PlayerInfo[playerid][pFishingSkill] = 0;
	PlayerInfo[playerid][pCourierSkill] = 0;
	PlayerInfo[playerid][pGuardSkill] = 0;
	PlayerInfo[playerid][pWeaponSkill] = 0;
	PlayerInfo[playerid][pLawyerSkill] = 0;
	PlayerInfo[playerid][pSmugglerSkill] = 0;
	PlayerInfo[playerid][pToggleTextdraws] = 0;
	PlayerInfo[playerid][pToggleAtm] = 0;
	PlayerInfo[playerid][pToggleOOC] = 0;
	PlayerInfo[playerid][pTogglePhone] = 0;
	PlayerInfo[playerid][pToggleAdmin] = 0;
	PlayerInfo[playerid][pToggleHelper] = 0;
	PlayerInfo[playerid][pToggleNewbie] = 0;
	PlayerInfo[playerid][pToggleWT] = 0;
	PlayerInfo[playerid][pToggleRadio] = 0;
	PlayerInfo[playerid][pToggleVIP] = 0;
	PlayerInfo[playerid][pToggleMusic] = 0;
	PlayerInfo[playerid][pToggleFaction] = 0;
	PlayerInfo[playerid][pToggleGang] = 0;
	PlayerInfo[playerid][pToggleNews] = 0;
	PlayerInfo[playerid][pToggleGlobal] = 1;
	PlayerInfo[playerid][pToggleCam] = 0;
	PlayerInfo[playerid][pCarLicense] = 0;
	PlayerInfo[playerid][pWeaponLicense] = 0;
	//PlayerInfo[playerid][pWeaponLicenseTime] = gettime() + (15 * 86400);
	PlayerInfo[playerid][pVIPPackage] = 1;
	PlayerInfo[playerid][pVIPTime] = gettime() + (15 * 86400);
	PlayerInfo[playerid][pVIPCooldown] = 0;
	PlayerInfo[playerid][pWeapons] = 0;
	PlayerInfo[playerid][pAmmo] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pFactionRank] = 0;
	PlayerInfo[playerid][pGang] = 0;
	PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pContracted] = 0;
	PlayerInfo[playerid][pContractBy] = 0;
	PlayerInfo[playerid][pBombs] = 0;
	PlayerInfo[playerid][pCompletedHits] = 0;
	PlayerInfo[playerid][pFailedHits] = 0;
	PlayerInfo[playerid][pReports] = 0;
	PlayerInfo[playerid][pNewbies] = 0;
	PlayerInfo[playerid][pHelpRequests] = 0;
	PlayerInfo[playerid][pSpeedometer] = 0;
	PlayerInfo[playerid][pFactionMod] = 0;
	PlayerInfo[playerid][pGangMod] = 0;
	PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pPotPlanted] = 0;
	PlayerInfo[playerid][pPotTime] = 0;
	PlayerInfo[playerid][pPotGrams] = 0;
	PlayerInfo[playerid][pPotX] = 0;
	PlayerInfo[playerid][pPotY] = 0;
	PlayerInfo[playerid][pPotZ] = 0;
	PlayerInfo[playerid][pPotA] = 0;
	PlayerInfo[playerid][pInventoryUpgrade] = 0;
	PlayerInfo[playerid][pAddictUpgrade] = 0;
	PlayerInfo[playerid][pTraderUpgrade] = 0;
	PlayerInfo[playerid][pAssetUpgrade] = 0;
	PlayerInfo[playerid][pHPAmmo] = 0;
	PlayerInfo[playerid][pPoisonAmmo] = 0;
	PlayerInfo[playerid][pFMJAmmo] = 0;
	PlayerInfo[playerid][pAmmoType] = 0;
	PlayerInfo[playerid][pAmmoWeapon] = 0;
	PlayerInfo[playerid][pLastReport] = 0;
	PlayerInfo[playerid][pLastNewbie] = 0;
	PlayerInfo[playerid][pLastRequest] = 0;
	PlayerInfo[playerid][pLastDamage] = 0;
	PlayerInfo[playerid][pLastPay] = 0;
	PlayerInfo[playerid][pLastRepair] = 0;
	PlayerInfo[playerid][pLastRefuel] = 0;
	PlayerInfo[playerid][pLastDrug] = 0;
	PlayerInfo[playerid][pLastRadar] = 0;
	PlayerInfo[playerid][pLastSell] = 0;
	PlayerInfo[playerid][pLastEnter] = 0;
	PlayerInfo[playerid][pLastPress] = 0;
	PlayerInfo[playerid][pLastDeath] = 0;
	PlayerInfo[playerid][pLastDesync] = 0;
	PlayerInfo[playerid][pLastGlobal] = 0;
	PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAdminDuty] = 0;
	PlayerInfo[playerid][pActiveReport] = -1;
	PlayerInfo[playerid][pHospitalTime] = 0;
	PlayerInfo[playerid][pListen] = 0;
	PlayerInfo[playerid][pPMListen] = 0;
	PlayerInfo[playerid][pJoinedEvent] = 0;
	PlayerInfo[playerid][pPaintball] = 0;
	PlayerInfo[playerid][pPaintballTeam] = -1;
	PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEventTeam] = 0;
	PlayerInfo[playerid][pAwaitingClothing] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pFreezeTimer] = -1;
	PlayerInfo[playerid][pNameChange][0] = 0;
	PlayerInfo[playerid][pHelpRequest][0] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCarryOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLandOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSendRob] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEditType] = 0;
    PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pFurniturePerms] = -1;
    PlayerInfo[playerid][pLandPerms] = -1;
	PlayerInfo[playerid][pPizzas] = 0;
	PlayerInfo[playerid][pLastPizza] = 0;
	PlayerInfo[playerid][pNews] = 0;
	PlayerInfo[playerid][pLastNews] = 0;
	PlayerInfo[playerid][pLastStuck] = 0;
	PlayerInfo[playerid][pLastUpdate] = 0;
	PlayerInfo[playerid][pLastLoad] = 0;
	PlayerInfo[playerid][pLastBet] = 0;
	PlayerInfo[playerid][pLastClean] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pIllegalCargo] = -1;
	PlayerInfo[playerid][pFishTime] = 0;
	PlayerInfo[playerid][pUsedBait] = 0;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleTime] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pAFK] = 0;
    PlayerInfo[playerid][pAFKTime] = 0;
	PlayerInfo[playerid][pLoopAnim] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pConstructionTime] = 0;
	PlayerInfo[playerid][pConstruction] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
	PlayerInfo[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	PlayerInfo[playerid][pTagType] = TAG_NORMAL;
	PlayerInfo[playerid][pVIPColor] = 0;
    PlayerInfo[playerid][pTaxiFare] = 0;
    PlayerInfo[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pTaxiBill] = 0;
    PlayerInfo[playerid][pTaxiTime] = 0;
    PlayerInfo[playerid][pFaction] = -1;
    PlayerInfo[playerid][pFactionRank] = 0;
    PlayerInfo[playerid][pGang] = -1;
    PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDuty] = 0;
	PlayerInfo[playerid][pBackup] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSkinSelected] = -1;
	PlayerInfo[playerid][pFirstAid] = 0;
    PlayerInfo[playerid][pDelivered] = 0;
    PlayerInfo[playerid][pPlantedBomb] = 0;
    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSpamTime] = 0;
    PlayerInfo[playerid][pMuted] = 0;
    PlayerInfo[playerid][pBoomboxPlaced] = 0;
    PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pZonePickups][0] = -1;
    PlayerInfo[playerid][pZonePickups][1] = -1;
    PlayerInfo[playerid][pZonePickups][2] = -1;
    PlayerInfo[playerid][pZonePickups][3] = -1;
    PlayerInfo[playerid][pZoneID] = -1;
    PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pShowLands] = 0;
    PlayerInfo[playerid][pShowTurfs] = 0;
    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
    PlayerInfo[playerid][pFreeNamechange] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    PlayerInfo[playerid][pCurrentWeapon] = 0;
    PlayerInfo[playerid][pCurrentAmmo] = 0;
    PlayerInfo[playerid][pCurrentVehicle] = 0;
    PlayerInfo[playerid][pVehicleCount] = 0;
    PlayerInfo[playerid][pACWarns] = 0;
    PlayerInfo[playerid][pACTime] = 0;
    PlayerInfo[playerid][pArmorTime] = 0;
    PlayerInfo[playerid][pACFired] = 0;
    PlayerInfo[playerid][pPotObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pPickPlant] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pPickTime] = 0;
    PlayerInfo[playerid][pCookMeth] = 0;
    PlayerInfo[playerid][pCookTime] = 0;
    PlayerInfo[playerid][pCookGrams] = 0;
    PlayerInfo[playerid][pDrugsUsed] = 0;
    PlayerInfo[playerid][pDrugsTime] = 0;
    PlayerInfo[playerid][pBandana] = 0;
	PlayerInfo[playerid][pCapturingPoint] = -1;
	PlayerInfo[playerid][pCaptureTime] = 0;
	PlayerInfo[playerid][pWatchingIntro] = 0;
	PlayerInfo[playerid][pLoginCamera] = 0;
	PlayerInfo[playerid][pPoisonTime] = 0;
	PlayerInfo[playerid][pJetpack] = 0;
    PlayerInfo[playerid][pWatchOn] = 0;
    PlayerInfo[playerid][pGPSOn] = 0;
    PlayerInfo[playerid][pTextFrom] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pMechanicCall] = 0;
	PlayerInfo[playerid][pTaxiCall] = 0;
    PlayerInfo[playerid][pEmergencyCall] = 0;
	PlayerInfo[playerid][pClip] = 0;
	PlayerInfo[playerid][pReloading] = 0;
    PlayerInfo[playerid][pFindTime] = 0;
    PlayerInfo[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pLootTime] = 0;
	PlayerInfo[playerid][pRemoveFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRefunded] = 0;
	PlayerInfo[playerid][pTogglePM] = 0;
	PlayerInfo[playerid][pPMFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pToggleWhisper] = 0;
	PlayerInfo[playerid][pRareTime] = 0;
	PlayerInfo[playerid][pVipTimes] = 0;
	PlayerInfo[playerid][pBL] = 0;
	PlayerInfo[playerid][pBackpack] = 0;
	PlayerInfo[playerid][bpWearing] = 0;
	PlayerInfo[playerid][bpCash] = 0;
	PlayerInfo[playerid][bpMaterials] = 0;
	PlayerInfo[playerid][bpPot] = 0;
	PlayerInfo[playerid][bpCrack] = 0;
	PlayerInfo[playerid][bpMeth] = 0;
	PlayerInfo[playerid][bpPainkillers] = 0;
	PlayerInfo[playerid][bpWeapons] = 0;
	PlayerInfo[playerid][bpHPAmmo] = 0;
	PlayerInfo[playerid][bpPoisonAmmo] = 0;
	PlayerInfo[playerid][bpFMJAmmo] = 0;
	PlayerInfo[playerid][pMarriedTo] = -1;
	PlayerInfo[playerid][pHunger] = 100;
	PlayerInfo[playerid][pHungerTimer] = 0;
	PlayerInfo[playerid][pThirst] = 100;
	PlayerInfo[playerid][pThirstTimer] = 0;
	PlayerInfo[playerid][pLottery] = 0;
	PlayerInfo[playerid][pLotteryB] = 0;
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}

	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
	// 						Paintball
	//	Deagle Float:minx, Float:miny, Float:maxx, Float:maxy)
	zone_paintball[0] = GangZoneCreateEx(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	area_paintball[0] = CreateDynamicRectangle(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	// 	Sniper
	zone_paintball[1] = GangZoneCreateEx(-2591.2288, -1814.2455, -2178.9082, -1394.5500);
	area_paintball[1] = CreateDynamicRectangle(-2591.2288, -1814.2455, -2178.9082, -1394.5500);
	
		// GREENZONE
	zone_greenzone[0] = GangZoneCreateEx(1141.7181, -1410.0260, 1257.3652, -1281.1020); // ALLSAINTS
	area_greenzone[0] = CreateDynamicRectangle(1141.7181, -1410.0260, 1257.3652, -1281.1020); // ALLSAINTS

	zone_greenzone[1] = GangZoneCreateEx(1560.6877, -1827.1387, 1400.1429, -1742.5866); // CITYHALL
	area_greenzone[1] = CreateDynamicRectangle(1560.6877, -1827.1387, 1400.1429, -1742.5866); // CITYHALL

	zone_greenzone[2] = GangZoneCreateEx(1303.3764, -851.3274, 1372.7999, -925.8069); // PD
	area_greenzone[2] = CreateDynamicRectangle(1303.3764, -851.3274, 1372.7999, -925.8069); // PD

	zone_greenzone[3] = GangZoneCreateEx(360.4675, -1770.1414, 250.7633, -1858.0473); // MUTHUKE GARAGE
	area_greenzone[3] = CreateDynamicRectangle(360.4675, -1770.1414, 250.7633, -1858.0473); // MUTHUKE GARAGE

	GangZoneShowForPlayer(playerid, zone_greenzone[0], (0xFF149106FF & ~0xff) + 0xAA);
	GangZoneShowForPlayer(playerid, zone_greenzone[1], (0xFF149106FF & ~0xff) + 0xAA);
	GangZoneShowForPlayer(playerid, zone_greenzone[2], (0xFF149106FF & ~0xff) + 0xAA);
	GangZoneShowForPlayer(playerid, zone_greenzone[3], (0xFF149106FF & ~0xff) + 0xAA);
 //===========meatchopper job==========
	meatjob[playerid] = 0;
	onmeat[playerid] = 0;
	meatstartjob[playerid] = 0;
	prinesmeat[playerid] = 0;
	countmeat[playerid] = 0;
	prinesmeatEx[playerid] = 0;
	countmeatEx[playerid] = 0;
	ExtraMeatall[playerid] = 0;

	inharvesterjob[playerid] = 0;
	onplant[playerid] = 0;
	startplant[playerid] = 0;
	prinesplant[playerid] = 0;
	countplant[playerid] = 0;
	prinesplantEx[playerid] = 0;
	countplantEx[playerid] = 0;
	ExtraPlants[playerid] = 0;

/*	TextDrawShowForPlayer(playerid, Textdraw);

	SetTimerEx("UpdateFPS", 500, 1, "i", playerid);

	FPStext[0] = CreatePlayerTextDraw(playerid, 66.000000, 300.000000, "100");
	PlayerTextDrawBackgroundColor(playerid, FPStext[0], 255);
	PlayerTextDrawFont(playerid, FPStext[0], 2);
	PlayerTextDrawLetterSize(playerid, FPStext[0], 0.420000, 1.000000);
	PlayerTextDrawColor(playerid, FPStext[0], -1);
	PlayerTextDrawSetOutline(playerid, FPStext[0], 1);
	PlayerTextDrawSetProportional(playerid, FPStext[0], 1);
	PlayerTextDrawShow(playerid, FPStext[0]);

	FPStext[1] = CreatePlayerTextDraw(playerid, 109.000000, 300.000000, "(GOOD)");
	PlayerTextDrawBackgroundColor(playerid, FPStext[1], 255);
	PlayerTextDrawFont(playerid, FPStext[1], 2);
	PlayerTextDrawLetterSize(playerid, FPStext[1], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, FPStext[1], -65281);
	PlayerTextDrawSetOutline(playerid, FPStext[1], 1);
	PlayerTextDrawSetProportional(playerid, FPStext[1], 1);
*/

	/*#if defined Christmas
	#else
		EventTextdraw[playerid] = CreatePlayerTextDraw(playerid, 608.000000, 97.000000, "C0");
		PlayerTextDrawFont(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawLetterSize(playerid, EventTextdraw[playerid], 0.541665, 2.299998);
		PlayerTextDrawTextSize(playerid, EventTextdraw[playerid], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, EventTextdraw[playerid], 2);
		PlayerTextDrawSetShadow(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawAlignment(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawColor(playerid, EventTextdraw[playerid], SERVER_COLOR);
		PlayerTextDrawBackgroundColor(playerid, EventTextdraw[playerid], 255);
		PlayerTextDrawBoxColor(playerid, EventTextdraw[playerid], 50);
		PlayerTextDrawUseBox(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawSetProportional(playerid, EventTextdraw[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, EventTextdraw[playerid], 0);
	#endif*/

	ShotsFired[playerid][0] = CreatePlayerTextDraw(playerid, 558.000000, 101.000000, "_");
	PlayerTextDrawFont(playerid, ShotsFired[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, ShotsFired[playerid][0], 0.620832, 0.749997);
	PlayerTextDrawTextSize(playerid, ShotsFired[playerid][0], 296.000000, 85.000000);
	PlayerTextDrawSetOutline(playerid, ShotsFired[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ShotsFired[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, ShotsFired[playerid][0], 2);
	PlayerTextDrawColor(playerid, ShotsFired[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, ShotsFired[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, ShotsFired[playerid][0], 65415);
	PlayerTextDrawUseBox(playerid, ShotsFired[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, ShotsFired[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ShotsFired[playerid][0], 0);

	ShotsFired[playerid][1] = CreatePlayerTextDraw(playerid, 558.000000, 111.000000, "_");
	PlayerTextDrawFont(playerid, ShotsFired[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, ShotsFired[playerid][1], 0.620832, 4.949998);
	PlayerTextDrawTextSize(playerid, ShotsFired[playerid][1], 294.500000, 85.000000);
	PlayerTextDrawSetOutline(playerid, ShotsFired[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, ShotsFired[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, ShotsFired[playerid][1], 2);
	PlayerTextDrawColor(playerid, ShotsFired[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, ShotsFired[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, ShotsFired[playerid][1], 135);
	PlayerTextDrawUseBox(playerid, ShotsFired[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, ShotsFired[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ShotsFired[playerid][1], 0);

	ShotsFired[playerid][2] = CreatePlayerTextDraw(playerid, 580.000000, 100.000000, "SHOTS FIRED");
	PlayerTextDrawFont(playerid, ShotsFired[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, ShotsFired[playerid][2], 0.162498, 0.750000);
	PlayerTextDrawTextSize(playerid, ShotsFired[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ShotsFired[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, ShotsFired[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, ShotsFired[playerid][2], 3);
	PlayerTextDrawColor(playerid, ShotsFired[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, ShotsFired[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, ShotsFired[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, ShotsFired[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, ShotsFired[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, ShotsFired[playerid][2], 0);

	ShotsFired[playerid][3] = CreatePlayerTextDraw(playerid, 515.000000, 108.000000, "LOCATION");
	PlayerTextDrawFont(playerid, ShotsFired[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, ShotsFired[playerid][3], 0.154164, 0.899999);
	PlayerTextDrawTextSize(playerid, ShotsFired[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ShotsFired[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, ShotsFired[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, ShotsFired[playerid][3], 1);
	PlayerTextDrawColor(playerid, ShotsFired[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, ShotsFired[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, ShotsFired[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, ShotsFired[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, ShotsFired[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, ShotsFired[playerid][3], 0);

	ShotsFired[playerid][4] = CreatePlayerTextDraw(playerid, 520.000000, 127.000000, "Market");
	PlayerTextDrawFont(playerid, ShotsFired[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, ShotsFired[playerid][4], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, ShotsFired[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ShotsFired[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, ShotsFired[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, ShotsFired[playerid][4], 1);
	PlayerTextDrawColor(playerid, ShotsFired[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, ShotsFired[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, ShotsFired[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, ShotsFired[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, ShotsFired[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, ShotsFired[playerid][4], 0);

	ModernPlayerText[playerid][0] = CreatePlayerTextDraw(playerid, 17.000000, 129.000000, "Don_Marko Turned On The Engine");
	PlayerTextDrawFont(playerid, ModernPlayerText[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][0], 0.170833, 1.149997);
	PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][0], 131.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][0], 1);
	PlayerTextDrawColor(playerid, ModernPlayerText[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][0], 0);
	//548.000000, 153.000000
    PublicTD2[playerid] = CreatePlayerTextDraw(playerid, 322.000000, 355.000000, "John Condenzio~n~~w~Status: ~r~Registered~n~~w~Peak Players: 62~n~Online Players: 23");
    PlayerTextDrawFont(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawLetterSize(playerid, PublicTD2[playerid], 0.237499, 1.299999);
    PlayerTextDrawTextSize(playerid, PublicTD2[playerid], 155.000000, 113.000000);
    PlayerTextDrawSetOutline(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetShadow(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawAlignment(playerid, PublicTD2[playerid], 2);
    PlayerTextDrawColor(playerid, PublicTD2[playerid], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, PublicTD2[playerid], 255);
    PlayerTextDrawBoxColor(playerid, PublicTD2[playerid], 94);
    PlayerTextDrawUseBox(playerid, PublicTD2[playerid], 0);
    PlayerTextDrawSetProportional(playerid, PublicTD2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, PublicTD2[playerid], 0);
    
//Main Screen PHONETD
HOMESCREENTD[playerid][0] = CreatePlayerTextDraw(playerid, 26.000000, 184.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][0], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][0], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][0], 122.000000, 244.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][0], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][0], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][0], 0);

HOMESCREENTD[playerid][1] = CreatePlayerTextDraw(playerid, 38.000000, 167.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][1], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][1], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][1], 94.000000, 273.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][1], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][1], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][1], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][1], 0);

HOMESCREENTD[playerid][2] = CreatePlayerTextDraw(playerid, 20.000000, 162.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][2], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][2], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][2], 35.500000, 36.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][2], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][2], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][2], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][2], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][2], 0);

HOMESCREENTD[playerid][3] = CreatePlayerTextDraw(playerid, 116.000000, 160.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][3], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][3], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][3], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][3], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][3], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][3], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][3], 0);

HOMESCREENTD[playerid][4] = CreatePlayerTextDraw(playerid, 116.000000, 405.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][4], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][4], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][4], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][4], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][4], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][4], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][4], 0);

HOMESCREENTD[playerid][5] = CreatePlayerTextDraw(playerid, 20.000000, 405.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][5], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][5], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][5], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][5], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][5], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][5], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][5], 0);

HOMESCREENTD[playerid][6] = CreatePlayerTextDraw(playerid, 30.000000, 172.000000, "ld_bum:bum2");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][6], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][6], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][6], 113.500000, 261.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][6], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][6], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][6], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][6], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][6], 0);

HOMESCREENTD[playerid][7] = CreatePlayerTextDraw(playerid, 76.000000, 165.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][7], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][7], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][7], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][7], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][7], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][7], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][7], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][7], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][7], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][7], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][7], 0);

HOMESCREENTD[playerid][8] = CreatePlayerTextDraw(playerid, 81.000000, 170.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][8], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][8], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][8], 9.000000, 11.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][8], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][8], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][8], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][8], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][8], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][8], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][8], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][8], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][8], 0);

HOMESCREENTD[playerid][9] = CreatePlayerTextDraw(playerid, 73.000000, 169.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][9], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][9], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][9], 27.500000, 1.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][9], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][9], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][9], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][9], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][9], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][9], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][9], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][9], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][9], 0);

HOMESCREENTD[playerid][10] = CreatePlayerTextDraw(playerid, 45.000000, 417.000000, "<");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][10], 3);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][10], 0.458332, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][10], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][10], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][10], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][10], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][10], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][10], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][10], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][10], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][10], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][10], 1);

HOMESCREENTD[playerid][11] = CreatePlayerTextDraw(playerid, 80.000000, 418.000000, "O");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][11], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][11], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][11], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][11], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][11], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][11], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][11], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][11], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][11], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][11], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][11], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][11], 0);

HOMESCREENTD[playerid][12] = CreatePlayerTextDraw(playerid, 114.000000, 418.000000, "O");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][12], 2);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][12], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][12], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][12], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][12], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][12], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][12], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][12], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][12], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][12], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][12], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][12], 0);

HOMESCREENTD[playerid][13] = CreatePlayerTextDraw(playerid, 124.000000, 423.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][13], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][13], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][13], -8.000000, 7.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][13], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][13], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][13], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][13], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][13], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][13], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][13], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][13], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][13], 1);

HOMESCREENTD[playerid][14] = CreatePlayerTextDraw(playerid, 37.000000, 195.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][14], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][14], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][14], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][14], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][14], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][14], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][14], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][14], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][14], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][14], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][14], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][14], 1);

HOMESCREENTD[playerid][15] = CreatePlayerTextDraw(playerid, 39.000000, 197.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][15], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][15], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][15], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][15], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][15], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][15], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][15], 16711935);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][15], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][15], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][15], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][15], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][15], 0);

HOMESCREENTD[playerid][16] = CreatePlayerTextDraw(playerid, 40.000000, 199.000000, "C");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][16], 2);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][16], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][16], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][16], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][16], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][16], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][16], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][16], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][16], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][16], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][16], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][16], 0);

HOMESCREENTD[playerid][17] = CreatePlayerTextDraw(playerid, 51.000000, 200.000000, ")");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][17], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][17], 0.349999, 1.399999);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][17], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][17], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][17], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][17], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][17], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][17], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][17], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][17], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][17], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][17], 0);

HOMESCREENTD[playerid][18] = CreatePlayerTextDraw(playerid, 54.000000, 197.000000, ")");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][18], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][18], 0.349999, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][18], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][18], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][18], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][18], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][18], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][18], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][18], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][18], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][18], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][18], 0);

HOMESCREENTD[playerid][19] = CreatePlayerTextDraw(playerid, 75.000000, 195.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][19], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][19], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][19], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][19], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][19], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][19], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][19], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][19], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][19], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][19], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][19], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][19], 1);

HOMESCREENTD[playerid][20] = CreatePlayerTextDraw(playerid, 78.000000, 197.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][20], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][20], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][20], 18.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][20], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][20], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][20], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][20], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][20], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][20], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][20], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][20], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][20], 0);

HOMESCREENTD[playerid][21] = CreatePlayerTextDraw(playerid, 77.000000, 204.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][21], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][21], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][21], 19.500000, 14.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][21], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][21], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][21], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][21], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][21], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][21], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][21], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][21], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][21], 0);

HOMESCREENTD[playerid][22] = CreatePlayerTextDraw(playerid, 82.000000, 197.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][22], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][22], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][22], 8.500000, 10.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][22], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][22], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][22], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][22], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][22], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][22], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][22], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][22], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][22], 0);

HOMESCREENTD[playerid][23] = CreatePlayerTextDraw(playerid, 112.000000, 195.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][23], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][23], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][23], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][23], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][23], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][23], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][23], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][23], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][23], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][23], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][23], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][23], 0);

HOMESCREENTD[playerid][24] = CreatePlayerTextDraw(playerid, 112.000000, 195.000000, "ld_chat:goodcha");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][24], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][24], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][24], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][24], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][24], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][24], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][24], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][24], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][24], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][24], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][24], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][24], 1);

HOMESCREENTD[playerid][25] = CreatePlayerTextDraw(playerid, 75.000000, 234.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][25], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][25], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][25], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][25], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][25], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][25], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][25], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][25], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][25], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][25], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][25], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][25], 1);

HOMESCREENTD[playerid][26] = CreatePlayerTextDraw(playerid, 75.000000, 277.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][26], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][26], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][26], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][26], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][26], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][26], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][26], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][26], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][26], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][26], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][26], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][26], 1);

HOMESCREENTD[playerid][27] = CreatePlayerTextDraw(playerid, 37.000000, 234.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][27], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][27], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][27], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][27], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][27], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][27], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][27], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][27], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][27], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][27], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][27], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][27], 1);

HOMESCREENTD[playerid][28] = CreatePlayerTextDraw(playerid, 112.000000, 234.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][28], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][28], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][28], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][28], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][28], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][28], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][28], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][28], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][28], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][28], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][28], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][28], 1);

HOMESCREENTD[playerid][29] = CreatePlayerTextDraw(playerid, 112.000000, 277.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][29], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][29], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][29], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][29], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][29], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][29], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][29], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][29], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][29], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][29], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][29], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][29], 1);

HOMESCREENTD[playerid][30] = CreatePlayerTextDraw(playerid, 37.000000, 277.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][30], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][30], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][30], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][30], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][30], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][30], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][30], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][30], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][30], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][30], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][30], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][30], 1);

HOMESCREENTD[playerid][31] = CreatePlayerTextDraw(playerid, 39.000000, 237.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][31], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][31], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][31], 19.000000, 19.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][31], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][31], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][31], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][31], -16776961);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][31], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][31], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][31], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][31], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][31], 0);

HOMESCREENTD[playerid][32] = CreatePlayerTextDraw(playerid, 41.000000, 239.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][32], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][32], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][32], 15.000000, 15.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][32], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][32], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][32], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][32], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][32], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][32], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][32], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][32], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][32], 0);

HOMESCREENTD[playerid][33] = CreatePlayerTextDraw(playerid, 43.000000, 241.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][33], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][33], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][33], 11.000000, 11.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][33], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][33], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][33], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][33], -16776961);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][33], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][33], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][33], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][33], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][33], 0);

HOMESCREENTD[playerid][34] = CreatePlayerTextDraw(playerid, 44.000000, 241.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][34], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][34], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][34], 9.000000, 11.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][34], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][34], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][34], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][34], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][34], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][34], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][34], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][34], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][34], 0);

HOMESCREENTD[playerid][35] = CreatePlayerTextDraw(playerid, 52.000000, 242.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][35], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][35], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][35], 2.000000, 2.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][35], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][35], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][35], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][35], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][35], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][35], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][35], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][35], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][35], 0);

HOMESCREENTD[playerid][36] = CreatePlayerTextDraw(playerid, 77.000000, 236.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][36], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][36], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][36], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][36], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][36], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][36], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][36], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][36], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][36], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][36], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][36], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][36], 0);

HOMESCREENTD[playerid][37] = CreatePlayerTextDraw(playerid, 77.000000, 233.000000, "G");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][37], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][37], 0.441666, 2.649997);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][37], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][37], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][37], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][37], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][37], 16777215);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][37], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][37], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][37], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][37], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][37], 0);

HOMESCREENTD[playerid][38] = CreatePlayerTextDraw(playerid, 88.000000, 243.000000, "PAY");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][38], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][38], 0.125000, 1.350000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][38], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][38], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][38], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][38], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][38], 16777215);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][38], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][38], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][38], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][38], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][38], 0);

HOMESCREENTD[playerid][39] = CreatePlayerTextDraw(playerid, 114.000000, 237.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][39], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][39], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][39], 19.000000, 19.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][39], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][39], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][39], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][39], 1296911871);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][39], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][39], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][39], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][39], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][39], 0);

HOMESCREENTD[playerid][40] = CreatePlayerTextDraw(playerid, 115.000000, 237.000000, "A");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][40], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][40], 0.300000, 2.099997);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][40], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][40], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][40], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][40], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][40], -16776961);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][40], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][40], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][40], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][40], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][40], 0);

HOMESCREENTD[playerid][41] = CreatePlayerTextDraw(playerid, 122.000000, 240.000000, "DS");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][41], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][41], 0.254166, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][41], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][41], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][41], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][41], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][41], -16776961);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][41], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][41], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][41], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][41], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][41], 0);

HOMESCREENTD[playerid][42] = CreatePlayerTextDraw(playerid, 39.000000, 279.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][42], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][42], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][42], 19.000000, 21.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][42], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][42], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][42], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][42], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][42], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][42], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][42], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][42], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][42], 0);

HOMESCREENTD[playerid][43] = CreatePlayerTextDraw(playerid, 40.000000, 282.000000, "G.P.S");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][43], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][43], 0.191667, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][43], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][43], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][43], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][43], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][43], -16776961);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][43], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][43], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][43], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][43], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][43], 0);

HOMESCREENTD[playerid][44] = CreatePlayerTextDraw(playerid, 77.000000, 277.000000, "HUD:skipicon");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][44], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][44], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][44], 20.000000, 29.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][44], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][44], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][44], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][44], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][44], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][44], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][44], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][44], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][44], 0);

HOMESCREENTD[playerid][45] = CreatePlayerTextDraw(playerid, 113.000000, 278.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][45], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][45], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][45], 21.000000, 22.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][45], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][45], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][45], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][45], 9109759);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][45], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][45], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][45], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][45], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][45], 0);

HOMESCREENTD[playerid][46] = CreatePlayerTextDraw(playerid, 118.000000, 277.000000, "S");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][46], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][46], 0.533333, 2.099997);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][46], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][46], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][46], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][46], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][46], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][46], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][46], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][46], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][46], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][46], 0);

HOMESCREENTD[playerid][47] = CreatePlayerTextDraw(playerid, 116.000000, 292.000000, "SPOTIFY");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][47], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][47], 0.104166, 0.899999);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][47], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][47], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][47], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][47], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][47], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][47], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][47], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][47], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][47], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][47], 0);

HOMESCREENTD[playerid][48] = CreatePlayerTextDraw(playerid, 37.000000, 318.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][48], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][48], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][48], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][48], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][48], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][48], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][48], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][48], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][48], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][48], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][48], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][48], 0);

HOMESCREENTD[playerid][49] = CreatePlayerTextDraw(playerid, 39.000000, 320.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][49], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][49], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][49], 19.000000, 21.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][49], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][49], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][49], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][49], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][49], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][49], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][49], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][49], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][49], 1);

HOMESCREENTD[playerid][50] = CreatePlayerTextDraw(playerid, 40.000000, 327.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][50], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][50], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][50], 16.500000, 12.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][50], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][50], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][50], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][50], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][50], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][50], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][50], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][50], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][50], 0);

HOMESCREENTD[playerid][51] = CreatePlayerTextDraw(playerid, 44.000000, 324.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][51], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][51], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][51], 8.500000, 5.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][51], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][51], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][51], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][51], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][51], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][51], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][51], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][51], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][51], 0);

HOMESCREENTD[playerid][52] = CreatePlayerTextDraw(playerid, 43.000000, 328.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][52], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][52], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][52], 10.000000, 10.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][52], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][52], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][52], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][52], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][52], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][52], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][52], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][52], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][52], 0);

HOMESCREENTD[playerid][53] = CreatePlayerTextDraw(playerid, 75.000000, 318.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][53], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][53], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][53], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][53], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][53], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][53], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][53], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][53], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][53], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][53], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][53], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][53], 1);

HOMESCREENTD[playerid][54] = CreatePlayerTextDraw(playerid, 77.000000, 320.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][54], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][54], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][54], 19.500000, 21.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][54], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][54], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][54], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][54], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][54], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][54], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][54], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][54], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][54], 0);

HOMESCREENTD[playerid][55] = CreatePlayerTextDraw(playerid, 80.000000, 316.000000, "T");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][55], 2);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][55], 0.566666, 2.999998);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][55], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][55], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][55], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][55], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][55], 65535);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][55], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][55], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][55], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][55], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][55], 0);

HOMESCREENTD[playerid][56] = CreatePlayerTextDraw(playerid, 40.000000, 371.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][56], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][56], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][56], 95.500000, 19.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][56], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][56], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][56], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][56], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][56], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][56], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][56], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][56], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][56], 0);

HOMESCREENTD[playerid][57] = CreatePlayerTextDraw(playerid, 41.000000, 373.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][57], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][57], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][57], 93.000000, 16.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][57], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][57], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][57], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][57], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][57], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][57], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][57], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][57], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][57], 0);

HOMESCREENTD[playerid][58] = CreatePlayerTextDraw(playerid, 43.000000, 371.000000, "G");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][58], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][58], 0.454165, 2.049998);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][58], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][58], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][58], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][58], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][58], 16777215);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][58], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][58], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][58], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][58], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][58], 0);

HOMESCREENTD[playerid][59] = CreatePlayerTextDraw(playerid, 123.000000, 373.000000, "Q");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][59], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][59], 0.320832, 1.700000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][59], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][59], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][59], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][59], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][59], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][59], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][59], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][59], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][59], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][59], 0);

HOMESCREENTD[playerid][60] = CreatePlayerTextDraw(playerid, 79.000000, 419.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][60], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][60], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][60], 12.500000, 15.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][60], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][60], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][60], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][60], -256);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][60], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][60], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][60], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][60], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][60], 1);

HOMESCREENTD[playerid][61] = CreatePlayerTextDraw(playerid, 44.000000, 419.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][61], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][61], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][61], 12.500000, 15.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][61], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][61], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][61], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][61], -256);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][61], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][61], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][61], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][61], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][61], 1);

HOMESCREENTD[playerid][62] = CreatePlayerTextDraw(playerid, 127.000000, 174.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][62], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][62], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][62], 7.500000, 5.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][62], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][62], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][62], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][62], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][62], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][62], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][62], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][62], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][62], 0);

HOMESCREENTD[playerid][63] = CreatePlayerTextDraw(playerid, 129.000000, 176.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][63], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][63], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][63], 7.500000, 2.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][63], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][63], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][63], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][63], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][63], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][63], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][63], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][63], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][63], 0);

HOMESCREENTD[playerid][64] = CreatePlayerTextDraw(playerid, 47.000000, 174.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][64], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][64], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][64], 2.500000, 7.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][64], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][64], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][64], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][64], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][64], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][64], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][64], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][64], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][64], 0);

HOMESCREENTD[playerid][65] = CreatePlayerTextDraw(playerid, 44.000000, 177.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][65], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][65], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][65], 2.000000, 5.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][65], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][65], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][65], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][65], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][65], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][65], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][65], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][65], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][65], 0);

HOMESCREENTD[playerid][66] = CreatePlayerTextDraw(playerid, 41.000000, 178.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][66], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][66], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][66], 1.500000, 3.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][66], 1);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][66], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][66], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][66], -741092353);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][66], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][66], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][66], 1);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][66], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][66], 0);

HOMESCREENTD[playerid][67] = CreatePlayerTextDraw(playerid, 51.000000, 175.000000, "LTE");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][67], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][67], 0.216666, 0.800000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][67], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][67], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][67], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][67], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][67], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][67], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][67], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][67], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][67], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][67], 0);

HOMESCREENTD[playerid][68] = CreatePlayerTextDraw(playerid, 79.000000, 376.000000, "MGMC");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][68], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][68], 0.162499, 1.150000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][68], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][68], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][68], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][68], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][68], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][68], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][68], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][68], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][68], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][68], 0);

HOMESCREENTD[playerid][69] = CreatePlayerTextDraw(playerid, 54.000000, 375.000000, ":");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][69], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][69], 0.162499, 1.150000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][69], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][69], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][69], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][69], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][69], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][69], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][69], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][69], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][69], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][69], 0);

HOMESCREENTD[playerid][70] = CreatePlayerTextDraw(playerid, 65.000000, 373.000000, "ld_beat:cring");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][70], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][70], 0.162499, 1.150000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][70], 14.000000, 16.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][70], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][70], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][70], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][70], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][70], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][70], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][70], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][70], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][70], 0);

HOMESCREENTD[playerid][71] = CreatePlayerTextDraw(playerid, 70.000000, 377.000000, "C");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][71], 1);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][71], 0.174999, 0.800000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][71], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][71], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][71], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][71], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][71], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][71], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][71], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][71], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][71], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][71], 0);

HOMESCREENTD[playerid][72] = CreatePlayerTextDraw(playerid, 112.000000, 318.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][72], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][72], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][72], 23.000000, 25.500000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][72], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][72], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][72], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][72], 255);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][72], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][72], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][72], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][72], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][72], 1);

HOMESCREENTD[playerid][73] = CreatePlayerTextDraw(playerid, 114.000000, 320.000000, "ld_chat:badchat");
PlayerTextDrawFont(playerid, HOMESCREENTD[playerid][73], 4);
PlayerTextDrawLetterSize(playerid, HOMESCREENTD[playerid][73], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, HOMESCREENTD[playerid][73], 19.500000, 21.000000);
PlayerTextDrawSetOutline(playerid, HOMESCREENTD[playerid][73], 0);
PlayerTextDrawSetShadow(playerid, HOMESCREENTD[playerid][73], 0);
PlayerTextDrawAlignment(playerid, HOMESCREENTD[playerid][73], 1);
PlayerTextDrawColor(playerid, HOMESCREENTD[playerid][73], -1);
PlayerTextDrawBackgroundColor(playerid, HOMESCREENTD[playerid][73], 255);
PlayerTextDrawBoxColor(playerid, HOMESCREENTD[playerid][73], 50);
PlayerTextDrawUseBox(playerid, HOMESCREENTD[playerid][73], 0);
PlayerTextDrawSetProportional(playerid, HOMESCREENTD[playerid][73], 1);
PlayerTextDrawSetSelectable(playerid, HOMESCREENTD[playerid][73], 1);

//GPAY TD PHONE
playertextdraw_0[playerid] = CreatePlayerTextDraw(playerid, 26.000000, 184.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_0[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_0[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_0[playerid], 122.000000, 244.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_0[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_0[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_0[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_0[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_0[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_0[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_0[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_0[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_0[playerid], 0);

playertextdraw_1[playerid] = CreatePlayerTextDraw(playerid, 38.000000, 167.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_1[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_1[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_1[playerid], 94.000000, 273.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_1[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_1[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_1[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_1[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_1[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_1[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_1[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_1[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_1[playerid], 0);

playertextdraw_2[playerid] = CreatePlayerTextDraw(playerid, 20.000000, 162.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_2[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_2[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_2[playerid], 35.500000, 36.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_2[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_2[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_2[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_2[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_2[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_2[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_2[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_2[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_2[playerid], 0);

playertextdraw_3[playerid] = CreatePlayerTextDraw(playerid, 116.000000, 160.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_3[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_3[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_3[playerid], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_3[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_3[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_3[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_3[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_3[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_3[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_3[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_3[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_3[playerid], 0);

playertextdraw_4[playerid] = CreatePlayerTextDraw(playerid, 116.000000, 405.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_4[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_4[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_4[playerid], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_4[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_4[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_4[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_4[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_4[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_4[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_4[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_4[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_4[playerid], 0);

playertextdraw_5[playerid] = CreatePlayerTextDraw(playerid, 20.000000, 405.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_5[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_5[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_5[playerid], 38.000000, 42.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_5[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_5[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_5[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_5[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_5[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_5[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_5[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_5[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_5[playerid], 0);

playertextdraw_6[playerid] = CreatePlayerTextDraw(playerid, 30.000000, 172.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_6[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_6[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_6[playerid], 113.500000, 261.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_6[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_6[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_6[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_6[playerid], 65535);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_6[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_6[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_6[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_6[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_6[playerid], 0);

playertextdraw_7[playerid] = CreatePlayerTextDraw(playerid, 30.000000, 263.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_7[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_7[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_7[playerid], 113.500000, 170.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_7[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_7[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_7[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_7[playerid], -1061109505);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_7[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_7[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_7[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_7[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_7[playerid], 0);

playertextdraw_8[playerid] = CreatePlayerTextDraw(playerid, 76.000000, 165.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_8[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_8[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_8[playerid], 19.000000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_8[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_8[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_8[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_8[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_8[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_8[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_8[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_8[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_8[playerid], 0);

playertextdraw_9[playerid] = CreatePlayerTextDraw(playerid, 81.000000, 170.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_9[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_9[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_9[playerid], 9.000000, 11.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_9[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_9[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_9[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_9[playerid], -1);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_9[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_9[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_9[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_9[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_9[playerid], 0);

playertextdraw_10[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 169.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_10[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_10[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_10[playerid], 27.500000, 1.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_10[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_10[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_10[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_10[playerid], -741092353);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_10[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_10[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_10[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_10[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_10[playerid], 0);

playertextdraw_11[playerid] = CreatePlayerTextDraw(playerid, 45.000000, 417.000000, "<");
PlayerTextDrawFont(playerid, playertextdraw_11[playerid], 3);
PlayerTextDrawLetterSize(playerid, playertextdraw_11[playerid], 0.458332, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_11[playerid], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_11[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_11[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_11[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_11[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_11[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_11[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_11[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_11[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_11[playerid], 0);

playertextdraw_12[playerid] = CreatePlayerTextDraw(playerid, 80.000000, 418.000000, "O");
PlayerTextDrawFont(playerid, playertextdraw_12[playerid], 1);
PlayerTextDrawLetterSize(playerid, playertextdraw_12[playerid], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, playertextdraw_12[playerid], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_12[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_12[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_12[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_12[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_12[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_12[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_12[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_12[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_12[playerid], 0);

playertextdraw_13[playerid] = CreatePlayerTextDraw(playerid, 114.000000, 418.000000, "O");
PlayerTextDrawFont(playerid, playertextdraw_13[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_13[playerid], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, playertextdraw_13[playerid], 113.500000, 9.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_13[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_13[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_13[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_13[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_13[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_13[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_13[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_13[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_13[playerid], 0);

playertextdraw_14[playerid] = CreatePlayerTextDraw(playerid, 79.000000, 419.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_14[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_14[playerid], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, playertextdraw_14[playerid], 12.500000, 15.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_14[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_14[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_14[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_14[playerid], -256);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_14[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_14[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_14[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_14[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_14[playerid], 1);

playertextdraw_15[playerid] = CreatePlayerTextDraw(playerid, 124.000000, 423.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_15[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_15[playerid], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, playertextdraw_15[playerid], -8.000000, 7.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_15[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_15[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_15[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_15[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_15[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_15[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_15[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_15[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_15[playerid], 1);

playertextdraw_16[playerid] = CreatePlayerTextDraw(playerid, 44.000000, 419.000000, "ld_beat:chit");
PlayerTextDrawFont(playerid, playertextdraw_16[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_16[playerid], 0.412499, 1.750000);
PlayerTextDrawTextSize(playerid, playertextdraw_16[playerid], 12.500000, 15.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_16[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_16[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_16[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_16[playerid], -256);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_16[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_16[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_16[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_16[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_16[playerid], 1);

playertextdraw_17[playerid] = CreatePlayerTextDraw(playerid, 127.000000, 174.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_17[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_17[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_17[playerid], 7.500000, 5.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_17[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_17[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_17[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_17[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_17[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_17[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_17[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_17[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_17[playerid], 0);

playertextdraw_18[playerid] = CreatePlayerTextDraw(playerid, 129.000000, 176.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_18[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_18[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_18[playerid], 7.500000, 2.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_18[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_18[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_18[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_18[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_18[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_18[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_18[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_18[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_18[playerid], 0);

playertextdraw_19[playerid] = CreatePlayerTextDraw(playerid, 47.000000, 174.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_19[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_19[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_19[playerid], 2.500000, 7.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_19[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_19[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_19[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_19[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_19[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_19[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_19[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_19[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_19[playerid], 0);

playertextdraw_20[playerid] = CreatePlayerTextDraw(playerid, 44.000000, 177.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_20[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_20[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_20[playerid], 2.000000, 5.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_20[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_20[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_20[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_20[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_20[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_20[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_20[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_20[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_20[playerid], 0);

playertextdraw_21[playerid] = CreatePlayerTextDraw(playerid, 41.000000, 178.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_21[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_21[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_21[playerid], 1.500000, 3.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_21[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_21[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_21[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_21[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_21[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_21[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_21[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_21[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_21[playerid], 0);

playertextdraw_22[playerid] = CreatePlayerTextDraw(playerid, 51.000000, 175.000000, "LTE");
PlayerTextDrawFont(playerid, playertextdraw_22[playerid], 1);
PlayerTextDrawLetterSize(playerid, playertextdraw_22[playerid], 0.216664, 0.800000);
PlayerTextDrawTextSize(playerid, playertextdraw_22[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_22[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_22[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_22[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_22[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_22[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_22[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_22[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_22[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_22[playerid], 0);

playertextdraw_23[playerid] = CreatePlayerTextDraw(playerid, 112.000000, 172.000000, "00:00");
PlayerTextDrawFont(playerid, playertextdraw_23[playerid], 3);
PlayerTextDrawLetterSize(playerid, playertextdraw_23[playerid], 0.187499, 0.899999);
PlayerTextDrawTextSize(playerid, playertextdraw_23[playerid], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_23[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_23[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_23[playerid], 2);
PlayerTextDrawColor(playerid, playertextdraw_23[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_23[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_23[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_23[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_23[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_23[playerid], 0);

playertextdraw_24[playerid] = CreatePlayerTextDraw(playerid, 35.000000, 226.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_24[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_24[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_24[playerid], 104.000000, 74.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_24[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_24[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_24[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_24[playerid], 1097458175);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_24[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_24[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_24[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_24[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_24[playerid], 0);

playertextdraw_25[playerid] = CreatePlayerTextDraw(playerid, 38.000000, 229.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_25[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_25[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_25[playerid], 98.500000, 68.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_25[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_25[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_25[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_25[playerid], -1);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_25[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_25[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_25[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_25[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_25[playerid], 0);

playertextdraw_26[playerid] = CreatePlayerTextDraw(playerid, 45.000000, 274.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_26[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_26[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_26[playerid], 86.500000, 11.000000);
PlayerTextDrawSetOutline(playerid, playertextdraw_26[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_26[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_26[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_26[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_26[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_26[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_26[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_26[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_26[playerid], 0);

playertextdraw_27[playerid] = CreatePlayerTextDraw(playerid, 43.000000, 237.000000, "");
PlayerTextDrawFont(playerid, playertextdraw_27[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_27[playerid], 0.216664, 1.349999);
PlayerTextDrawTextSize(playerid, playertextdraw_27[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_27[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_27[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_27[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_27[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_27[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_27[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_27[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_27[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_27[playerid], 0);

playertextdraw_28[playerid] = CreatePlayerTextDraw(playerid, 43.000000, 251.000000, "balance:");
PlayerTextDrawFont(playerid, playertextdraw_28[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_28[playerid], 0.137497, 1.349999);
PlayerTextDrawTextSize(playerid, playertextdraw_28[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_28[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_28[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_28[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_28[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_28[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_28[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_28[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_28[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_28[playerid], 0);

playertextdraw_29[playerid] = CreatePlayerTextDraw(playerid, 75.000000, 237.000000, "");
PlayerTextDrawFont(playerid, playertextdraw_29[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_29[playerid], 0.137497, 1.349999);
PlayerTextDrawTextSize(playerid, playertextdraw_29[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_29[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_29[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_29[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_29[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_29[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_29[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_29[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_29[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_29[playerid], 0);

playertextdraw_30[playerid] = CreatePlayerTextDraw(playerid, 75.000000, 252.000000, "0000000000000");
PlayerTextDrawFont(playerid, playertextdraw_30[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_30[playerid], 0.137497, 1.349999);
PlayerTextDrawTextSize(playerid, playertextdraw_30[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_30[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_30[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_30[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_30[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_30[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_30[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_30[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_30[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_30[playerid], 0);

playertextdraw_31[playerid] = CreatePlayerTextDraw(playerid, 64.000000, 274.000000, "G-");
PlayerTextDrawFont(playerid, playertextdraw_31[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_31[playerid], 0.216664, 1.149999);
PlayerTextDrawTextSize(playerid, playertextdraw_31[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_31[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_31[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_31[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_31[playerid], -1);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_31[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_31[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_31[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_31[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_31[playerid], 0);

playertextdraw_32[playerid] = CreatePlayerTextDraw(playerid, 84.000000, 274.000000, "PAY");
PlayerTextDrawFont(playerid, playertextdraw_32[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_32[playerid], 0.216664, 1.149999);
PlayerTextDrawTextSize(playerid, playertextdraw_32[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_32[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_32[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_32[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_32[playerid], -1);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_32[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_32[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_32[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_32[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_32[playerid], 0);

playertextdraw_33[playerid] = CreatePlayerTextDraw(playerid, 42.000000, 350.000000, "ld_bum:blkdot");
PlayerTextDrawFont(playerid, playertextdraw_33[playerid], 4);
PlayerTextDrawLetterSize(playerid, playertextdraw_33[playerid], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, playertextdraw_33[playerid], 88.000000, 17.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_33[playerid], 1);
PlayerTextDrawSetShadow(playerid, playertextdraw_33[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_33[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_33[playerid], -1);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_33[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_33[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_33[playerid], 1);
PlayerTextDrawSetProportional(playerid, playertextdraw_33[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_33[playerid], 1);

playertextdraw_34[playerid] = CreatePlayerTextDraw(playerid, 58.000000, 353.000000, "SEND");
PlayerTextDrawFont(playerid, playertextdraw_34[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_34[playerid], 0.216664, 1.149999);
PlayerTextDrawTextSize(playerid, playertextdraw_34[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_34[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_34[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_34[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_34[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_34[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_34[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_34[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_34[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_34[playerid], 0);

playertextdraw_35[playerid] = CreatePlayerTextDraw(playerid, 84.000000, 353.000000, "CASH");
PlayerTextDrawFont(playerid, playertextdraw_35[playerid], 2);
PlayerTextDrawLetterSize(playerid, playertextdraw_35[playerid], 0.216664, 1.149999);
PlayerTextDrawTextSize(playerid, playertextdraw_35[playerid], 19.500000, 20.500000);
PlayerTextDrawSetOutline(playerid, playertextdraw_35[playerid], 0);
PlayerTextDrawSetShadow(playerid, playertextdraw_35[playerid], 0);
PlayerTextDrawAlignment(playerid, playertextdraw_35[playerid], 1);
PlayerTextDrawColor(playerid, playertextdraw_35[playerid], 255);
PlayerTextDrawBackgroundColor(playerid, playertextdraw_35[playerid], 255);
PlayerTextDrawBoxColor(playerid, playertextdraw_35[playerid], 50);
PlayerTextDrawUseBox(playerid, playertextdraw_35[playerid], 0);
PlayerTextDrawSetProportional(playerid, playertextdraw_35[playerid], 1);
PlayerTextDrawSetSelectable(playerid, playertextdraw_35[playerid], 0);

	//ID AND BLACKMONEY AND FACTION GANG TD BY MAD EDITS
IdTD[playerid][0] = CreatePlayerTextDraw(playerid, 538.000000, 125.000000, "ID:");
PlayerTextDrawFont(playerid, IdTD[playerid][0], 2);
PlayerTextDrawLetterSize(playerid, IdTD[playerid][0], 0.249998, 1.549998);
PlayerTextDrawTextSize(playerid, IdTD[playerid][0], 393.500000, 11.500000);
PlayerTextDrawSetOutline(playerid, IdTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, IdTD[playerid][0], 2);
PlayerTextDrawAlignment(playerid, IdTD[playerid][0], 3);
PlayerTextDrawColor(playerid, IdTD[playerid][0], 16777215);
PlayerTextDrawBackgroundColor(playerid, IdTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, IdTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, IdTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid, IdTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, IdTD[playerid][0], 0);

BlackmoneyTD[playerid][0] = CreatePlayerTextDraw(playerid, 577.000000, 109.000000, "BLACK MONEY:");
PlayerTextDrawFont(playerid, BlackmoneyTD[playerid][0], 2);
PlayerTextDrawLetterSize(playerid, BlackmoneyTD[playerid][0], 0.170833, 1.649999);
PlayerTextDrawTextSize(playerid, BlackmoneyTD[playerid][0], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, BlackmoneyTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, BlackmoneyTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, BlackmoneyTD[playerid][0], 3);
PlayerTextDrawColor(playerid, BlackmoneyTD[playerid][0], 16777215);
PlayerTextDrawBackgroundColor(playerid, BlackmoneyTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, BlackmoneyTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, BlackmoneyTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid, BlackmoneyTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, BlackmoneyTD[playerid][0], 0);

PlayerstatTD[playerid][0] = CreatePlayerTextDraw(playerid, 289.000000, 402.000000, "MGMC CITIZEN");
PlayerTextDrawFont(playerid, PlayerstatTD[playerid][0], 2);
PlayerTextDrawLetterSize(playerid, PlayerstatTD[playerid][0], 0.191666, 1.649999);
PlayerTextDrawTextSize(playerid, PlayerstatTD[playerid][0], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, PlayerstatTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, PlayerstatTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, PlayerstatTD[playerid][0], 1);
PlayerTextDrawColor(playerid, PlayerstatTD[playerid][0], -1);
PlayerTextDrawBackgroundColor(playerid, PlayerstatTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, PlayerstatTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, PlayerstatTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid, PlayerstatTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, PlayerstatTD[playerid][0], 0);

//ATM TD BY MAD EDITS
AtmTD[playerid][0] = CreatePlayerTextDraw(playerid, 295.000000, 169.000000, "_");
PlayerTextDrawFont(playerid, AtmTD[playerid][0], 1);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][0], 0.729165, 13.000000);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][0], 443.000000, 213.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][0], 2);
PlayerTextDrawColor(playerid, AtmTD[playerid][0], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][0], -1378294137);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][0], 0);

AtmTD[playerid][1] = CreatePlayerTextDraw(playerid, 295.000000, 175.000000, "_");
PlayerTextDrawFont(playerid, AtmTD[playerid][1], 1);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][1], 0.600000, 11.550004);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][1], 341.500000, 201.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][1], 2);
PlayerTextDrawColor(playerid, AtmTD[playerid][1], 255);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][1], 135);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][1], 0);

AtmTD[playerid][2] = CreatePlayerTextDraw(playerid, 250.000000, 177.000000, "MGMC CITY ATM");
PlayerTextDrawFont(playerid, AtmTD[playerid][2], 2);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][2], 0.266667, 1.600000);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][2], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][2], 1);
PlayerTextDrawColor(playerid, AtmTD[playerid][2], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][2], 50);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][2], 0);

AtmTD[playerid][3] = CreatePlayerTextDraw(playerid, 380.000000, 174.000000, "X");
PlayerTextDrawFont(playerid, AtmTD[playerid][3], 2);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][3], 0.466666, 2.049998);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][3], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][3], 1);
PlayerTextDrawColor(playerid, AtmTD[playerid][3], -16776961);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][3], 50);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][3], 0);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][3], 1);

AtmTD[playerid][4] = CreatePlayerTextDraw(playerid, 309.000000, 216.000000, "ACCOUNT BALANCE");
PlayerTextDrawFont(playerid, AtmTD[playerid][4], 2);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][4], 0.179167, 1.350000);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][4], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][4], 1);
PlayerTextDrawColor(playerid, AtmTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][4], 0);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][4], 0);

AtmTD[playerid][5] = CreatePlayerTextDraw(playerid, 249.000000, 216.000000, "WITHDRAW");
PlayerTextDrawFont(playerid, AtmTD[playerid][5], 1);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][5], 0.366665, 1.750000);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][5], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][5], 2);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][5], 2);
PlayerTextDrawColor(playerid, AtmTD[playerid][5], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][5], 200);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][5], 1);

AtmTD[playerid][6] = CreatePlayerTextDraw(playerid, 261.000000, 265.000000, "HAPPY BANKING - MGMC");
PlayerTextDrawFont(playerid, AtmTD[playerid][6], 2);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][6], 0.137500, 1.399999);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][6], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][6], 1);
PlayerTextDrawColor(playerid, AtmTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][6], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][6], 50);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][6], 0);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][6], 0);

AtmTD[playerid][7] = CreatePlayerTextDraw(playerid, 326.000000, 233.000000, "00000");
PlayerTextDrawFont(playerid, AtmTD[playerid][7], 2);
PlayerTextDrawLetterSize(playerid, AtmTD[playerid][7], 0.254166, 2.199999);
PlayerTextDrawTextSize(playerid, AtmTD[playerid][7], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, AtmTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, AtmTD[playerid][7], 0);
PlayerTextDrawAlignment(playerid, AtmTD[playerid][7], 1);
PlayerTextDrawColor(playerid, AtmTD[playerid][7], -1);
PlayerTextDrawBackgroundColor(playerid, AtmTD[playerid][7], 255);
PlayerTextDrawBoxColor(playerid, AtmTD[playerid][7], 50);
PlayerTextDrawUseBox(playerid, AtmTD[playerid][7], 0);
PlayerTextDrawSetProportional(playerid, AtmTD[playerid][7], 1);
PlayerTextDrawSetSelectable(playerid, AtmTD[playerid][7], 0);

//turf td
TurfTD[playerid][0] = CreatePlayerTextDraw(playerid, 474.000000, 395.000000, "CONTROL:");
PlayerTextDrawFont(playerid, TurfTD[playerid][0], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][0], 0.241667, 1.350000);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][0], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][0], 3);
PlayerTextDrawColor(playerid, TurfTD[playerid][0], -16776961);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][0], 0);

TurfTD[playerid][1] = CreatePlayerTextDraw(playerid, 474.000000, 381.000000, "ZONE:");
PlayerTextDrawFont(playerid, TurfTD[playerid][1], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][1], 0.316666, 1.200000);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][1], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][1], 3);
PlayerTextDrawColor(playerid, TurfTD[playerid][1], -16776961);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][1], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][1], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][1], 0);

TurfTD[playerid][2] = CreatePlayerTextDraw(playerid, 322.000000, 53.000000, "00:00");
PlayerTextDrawFont(playerid, TurfTD[playerid][2], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][2], 0.445832, 2.149997);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][2], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][2], 2);
PlayerTextDrawColor(playerid, TurfTD[playerid][2], 16777215);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][2], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][2], 0);

TurfTD[playerid][3] = CreatePlayerTextDraw(playerid, 282.000000, 37.000000, "Remaining");
PlayerTextDrawFont(playerid, TurfTD[playerid][3], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][3], 0.324999, 1.649999);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][3], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][3], 1);
PlayerTextDrawColor(playerid, TurfTD[playerid][3], -65281);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][3], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][3], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][3], 0);

TurfTD[playerid][4] = CreatePlayerTextDraw(playerid, 549.000000, 380.000000, "DRUG TURF");
PlayerTextDrawFont(playerid, TurfTD[playerid][4], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][4], 0.266667, 1.350000);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][4], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][4], 3);
PlayerTextDrawColor(playerid, TurfTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][4], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][4], 0);

TurfTD[playerid][5] = CreatePlayerTextDraw(playerid, 583.000000, 395.000000, "VALHALA");
PlayerTextDrawFont(playerid, TurfTD[playerid][5], 2);
PlayerTextDrawLetterSize(playerid, TurfTD[playerid][5], 0.275000, 1.350000);
PlayerTextDrawTextSize(playerid, TurfTD[playerid][5], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, TurfTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, TurfTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, TurfTD[playerid][5], 3);
PlayerTextDrawColor(playerid, TurfTD[playerid][5], -1);
PlayerTextDrawBackgroundColor(playerid, TurfTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, TurfTD[playerid][5], 50);
PlayerTextDrawUseBox(playerid, TurfTD[playerid][5], 0);
PlayerTextDrawSetProportional(playerid, TurfTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, TurfTD[playerid][5], 0);

	TurfKnockTD[playerid][0] = CreatePlayerTextDraw(playerid, 512.000000, 119.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, TurfKnockTD[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, TurfKnockTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, TurfKnockTD[playerid][0], 30.000000, 35.000000);
	PlayerTextDrawSetOutline(playerid, TurfKnockTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TurfKnockTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, TurfKnockTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, TurfKnockTD[playerid][0], 1097458175);
	PlayerTextDrawBackgroundColor(playerid, TurfKnockTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, TurfKnockTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, TurfKnockTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TurfKnockTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, TurfKnockTD[playerid][0], 0);

	TurfKnockTD[playerid][1] = CreatePlayerTextDraw(playerid, 528.000000, 125.000000, "ld_dual:white");
	PlayerTextDrawFont(playerid, TurfKnockTD[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, TurfKnockTD[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, TurfKnockTD[playerid][1], 124.500000, 23.000000);
	PlayerTextDrawSetOutline(playerid, TurfKnockTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TurfKnockTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TurfKnockTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TurfKnockTD[playerid][1], 1097458175);
	PlayerTextDrawBackgroundColor(playerid, TurfKnockTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, TurfKnockTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, TurfKnockTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TurfKnockTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TurfKnockTD[playerid][1], 0);

	TurfKnockTD[playerid][2] = CreatePlayerTextDraw(playerid, 526.000000, 129.000000, "Daniel_Ken has knocked by Luffy_Ken");
	PlayerTextDrawFont(playerid, TurfKnockTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, TurfKnockTD[playerid][2], 0.154166, 1.450000);
	PlayerTextDrawTextSize(playerid, TurfKnockTD[playerid][2], 985.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TurfKnockTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, TurfKnockTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, TurfKnockTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, TurfKnockTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, TurfKnockTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, TurfKnockTD[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, TurfKnockTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TurfKnockTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, TurfKnockTD[playerid][2], 0);


//VEHPANEL BY MADEDITS
VehPanelTD[playerid][0] = CreatePlayerTextDraw(playerid, 467.000000, 178.000000, "_");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][0], 1);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][0], 0.649999, 23.549930);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][0], 312.500000, 60.000000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][0], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][0], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][0], 35719);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][0], 0);

VehPanelTD[playerid][1] = CreatePlayerTextDraw(playerid, 467.000000, 189.000000, "_");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][1], 1);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][1], 0.625000, 21.049926);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][1], 298.500000, 48.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][1], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][1], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][1], -121);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][1], 0);

VehPanelTD[playerid][2] = CreatePlayerTextDraw(playerid, 468.000000, 192.000000, "ENGINE");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][2], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][2], 0.220833, 1.600000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][2], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][2], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][2], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][2], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][2], 1);

VehPanelTD[playerid][3] = CreatePlayerTextDraw(playerid, 456.000000, 215.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][3], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][3], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][3], 22.000000, 24.000000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][3], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][3], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][3], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][3], 0);

VehPanelTD[playerid][4] = CreatePlayerTextDraw(playerid, 456.000000, 247.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][4], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][4], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][4], 22.000000, 24.000000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][4], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][4], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][4], 0);

VehPanelTD[playerid][5] = CreatePlayerTextDraw(playerid, 443.000000, 286.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][5], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][5], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][5], 15.000000, 17.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][5], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][5], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][5], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][5], 1);

VehPanelTD[playerid][6] = CreatePlayerTextDraw(playerid, 475.000000, 286.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][6], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][6], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][6], 15.000000, 17.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][6], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][6], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][6], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][6], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][6], 1);

VehPanelTD[playerid][7] = CreatePlayerTextDraw(playerid, 475.000000, 321.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][7], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][7], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][7], 15.000000, 17.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][7], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][7], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][7], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][7], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][7], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][7], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][7], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][7], 1);

VehPanelTD[playerid][8] = CreatePlayerTextDraw(playerid, 444.000000, 321.000000, "ld_dual:white");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][8], 4);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][8], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][8], 15.000000, 17.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][8], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][8], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][8], 1);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][8], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][8], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][8], 50);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][8], 1);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][8], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][8], 1);

VehPanelTD[playerid][9] = CreatePlayerTextDraw(playerid, 468.000000, 360.000000, "X");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][9], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][9], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][9], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][9], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][9], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][9], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][9], -65281);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][9], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][9], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][9], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][9], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][9], 1);

VehPanelTD[playerid][10] = CreatePlayerTextDraw(playerid, 467.000000, 218.000000, "H");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][10], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][10], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][10], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][10], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][10], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][10], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][10], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][10], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][10], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][10], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][10], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][10], 1);

VehPanelTD[playerid][11] = CreatePlayerTextDraw(playerid, 467.000000, 250.000000, "T");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][11], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][11], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][11], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][11], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][11], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][11], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][11], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][11], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][11], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][11], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][11], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][11], 1);

VehPanelTD[playerid][12] = CreatePlayerTextDraw(playerid, 450.000000, 286.000000, "<");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][12], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][12], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][12], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][12], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][12], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][12], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][12], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][12], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][12], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][12], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][12], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][12], 0);

VehPanelTD[playerid][13] = CreatePlayerTextDraw(playerid, 451.000000, 322.000000, "<");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][13], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][13], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][13], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][13], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][13], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][13], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][13], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][13], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][13], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][13], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][13], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][13], 0);

VehPanelTD[playerid][14] = CreatePlayerTextDraw(playerid, 484.000000, 286.000000, ">");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][14], 0);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][14], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][14], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][14], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][14], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][14], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][14], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][14], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][14], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][14], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][14], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][14], 0);

VehPanelTD[playerid][15] = CreatePlayerTextDraw(playerid, 484.000000, 322.000000, ">");
PlayerTextDrawFont(playerid, VehPanelTD[playerid][15], 2);
PlayerTextDrawLetterSize(playerid, VehPanelTD[playerid][15], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, VehPanelTD[playerid][15], 16.500000, 90.500000);
PlayerTextDrawSetOutline(playerid, VehPanelTD[playerid][15], 1);
PlayerTextDrawSetShadow(playerid, VehPanelTD[playerid][15], 0);
PlayerTextDrawAlignment(playerid, VehPanelTD[playerid][15], 2);
PlayerTextDrawColor(playerid, VehPanelTD[playerid][15], -1);
PlayerTextDrawBackgroundColor(playerid, VehPanelTD[playerid][15], 255);
PlayerTextDrawBoxColor(playerid, VehPanelTD[playerid][15], 200);
PlayerTextDrawUseBox(playerid, VehPanelTD[playerid][15], 0);
PlayerTextDrawSetProportional(playerid, VehPanelTD[playerid][15], 1);
PlayerTextDrawSetSelectable(playerid, VehPanelTD[playerid][15], 0);

    // WARNING TD
	WarningTD[playerid][0] = CreatePlayerTextDraw(playerid, 531.000000, 187.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, WarningTD[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][0], 7.000000, 9.000000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][0], -65281);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][0], 0);

	WarningTD[playerid][1] = CreatePlayerTextDraw(playerid, 531.000000, 207.000000, "ld_beat:chit");
	PlayerTextDrawFont(playerid, WarningTD[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][1], 7.000000, 9.000000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][1], -65281);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][1], 0);

	WarningTD[playerid][2] = CreatePlayerTextDraw(playerid, 535.000000, 191.000000, "ld_bum:blkdot");
	PlayerTextDrawFont(playerid, WarningTD[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][2], -3.000000, 20.500000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][2], -65281);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][2], 0);

	WarningTD[playerid][3] = CreatePlayerTextDraw(playerid, 539.000000, 191.000000, "Warning");
	PlayerTextDrawFont(playerid, WarningTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][3], 0.161999, 0.850000);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][3], 0);

	WarningTD[playerid][4] = CreatePlayerTextDraw(playerid, 539.000000, 202.000000, "you are in yellow zone");
	PlayerTextDrawFont(playerid, WarningTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][4], 0.128665, 0.849999);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][4], 645.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][4], 0);

	WarningTD[playerid][5] = CreatePlayerTextDraw(playerid, 535.000000, 188.600006, "ld_bum:blkdot");
	PlayerTextDrawFont(playerid, WarningTD[playerid][5], 4);
	PlayerTextDrawLetterSize(playerid, WarningTD[playerid][5], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, WarningTD[playerid][5], 88.500000, 26.000000);
	PlayerTextDrawSetOutline(playerid, WarningTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, WarningTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, WarningTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, WarningTD[playerid][5], 255);
	PlayerTextDrawBackgroundColor(playerid, WarningTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, WarningTD[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, WarningTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, WarningTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, WarningTD[playerid][5], 0);

//CUSTOM CLOTH TD BY MADEDITS
ClotheTD[playerid][0] = CreatePlayerTextDraw(playerid, 143.000000, 132.000000, "_");
PlayerTextDrawFont(playerid, ClotheTD[playerid][0], 1);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][0], 0.629166, 17.050090);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][0], 140.500000, 131.000000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][0], 2);
PlayerTextDrawColor(playerid, ClotheTD[playerid][0], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][0], -1378294017);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][0], 0);

ClotheTD[playerid][1] = CreatePlayerTextDraw(playerid, 143.000000, 142.000000, "_");
PlayerTextDrawFont(playerid, ClotheTD[playerid][1], 1);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][1], 0.516666, 14.650012);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][1], 210.500000, 109.500000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][1], 2);
PlayerTextDrawColor(playerid, ClotheTD[playerid][1], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][1], 255);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][1], 0);

ClotheTD[playerid][2] = CreatePlayerTextDraw(playerid, 105.000000, 141.000000, "Preview_Model");
PlayerTextDrawFont(playerid, ClotheTD[playerid][2], 5);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][2], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][2], 74.500000, 101.500000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][2], 0);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][2], 1);
PlayerTextDrawColor(playerid, ClotheTD[playerid][2], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][2], 125);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][2], 255);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][2], 0);
PlayerTextDrawSetPreviewModel(playerid, ClotheTD[playerid][2], 0);
PlayerTextDrawSetPreviewRot(playerid, ClotheTD[playerid][2], -15.000000, 0.000000, -7.000000, 1.000000);
PlayerTextDrawSetPreviewVehCol(playerid, ClotheTD[playerid][2], 1, 1);

ClotheTD[playerid][3] = CreatePlayerTextDraw(playerid, 144.000000, 250.000000, "BUY");
PlayerTextDrawFont(playerid, ClotheTD[playerid][3], 2);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][3], 0.258332, 1.750000);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][3], 15.000000, 44.000000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][3], 2);
PlayerTextDrawColor(playerid, ClotheTD[playerid][3], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][3], 2094792904);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][3], 1);

ClotheTD[playerid][4] = CreatePlayerTextDraw(playerid, 174.000000, 244.000000, "ld_beat:right");
PlayerTextDrawFont(playerid, ClotheTD[playerid][4], 4);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][4], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][4], 22.000000, 26.500000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][4], 1);
PlayerTextDrawColor(playerid, ClotheTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][4], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][4], 1);

ClotheTD[playerid][5] = CreatePlayerTextDraw(playerid, 90.000000, 243.000000, "ld_beat:left");
PlayerTextDrawFont(playerid, ClotheTD[playerid][5], 4);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][5], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][5], 23.000000, 27.500000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][5], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][5], 1);
PlayerTextDrawColor(playerid, ClotheTD[playerid][5], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][5], 50);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][5], 1);

ClotheTD[playerid][6] = CreatePlayerTextDraw(playerid, 178.000000, 146.000000, "ld_beat:cross");
PlayerTextDrawFont(playerid, ClotheTD[playerid][6], 4);
PlayerTextDrawLetterSize(playerid, ClotheTD[playerid][6], 0.600000, 2.000000);
PlayerTextDrawTextSize(playerid, ClotheTD[playerid][6], 15.500000, 16.500000);
PlayerTextDrawSetOutline(playerid, ClotheTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, ClotheTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, ClotheTD[playerid][6], 1);
PlayerTextDrawColor(playerid, ClotheTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, ClotheTD[playerid][6], 255);
PlayerTextDrawBoxColor(playerid, ClotheTD[playerid][6], 50);
PlayerTextDrawUseBox(playerid, ClotheTD[playerid][6], 1);
PlayerTextDrawSetProportional(playerid, ClotheTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, ClotheTD[playerid][6], 1);
	
	//SPEEDO BY MADEDITS
SpeedPlayerTD[playerid][0] = CreatePlayerTextDraw(playerid, 291.000000, 393.000000, "LIGHT");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][0], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][0], 0.237498, 1.199998);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][0], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][0], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][0], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][0], -16776961);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][0], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][0], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][0], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][0], 0);

SpeedPlayerTD[playerid][1] = CreatePlayerTextDraw(playerid, 329.000000, 393.000000, "SEATBELT");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][1], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][1], 0.179165, 1.250000);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][1], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][1], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][1], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][1], -16776961);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][1], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][1], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][1], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][1], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][1], 0);

SpeedPlayerTD[playerid][2] = CreatePlayerTextDraw(playerid, 248.000000, 347.000000, "100");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][2], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][2], 0.533333, 4.900001);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][2], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][2], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][2], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][2], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][2], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][2], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][2], 0);

SpeedPlayerTD[playerid][3] = CreatePlayerTextDraw(playerid, 321.000000, 361.000000, "Health");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][3], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][3], 0.129167, 1.100000);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][3], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][3], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][3], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][3], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][3], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][3], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][3], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][3], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][3], 0);

SpeedPlayerTD[playerid][4] = CreatePlayerTextDraw(playerid, 346.000000, 359.000000, "100");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][4], 1);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][4], 0.287499, 1.350000);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][4], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][4], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][4], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][4], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][4], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][4], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][4], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][4], 0);

SpeedPlayerTD[playerid][5] = CreatePlayerTextDraw(playerid, 330.000000, 376.000000, "GAS");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][5], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][5], 0.141665, 1.149999);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][5], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][5], 3);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][5], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][5], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][5], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][5], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][5], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][5], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][5], 0);

SpeedPlayerTD[playerid][6] = CreatePlayerTextDraw(playerid, 345.000000, 374.000000, "100");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][6], 1);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][6], 0.312500, 1.450000);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][6], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][6], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][6], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][6], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][6], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][6], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][6], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][6], 0);

SpeedPlayerTD[playerid][7] = CreatePlayerTextDraw(playerid, 291.000000, 365.000000, "KM/H");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][7], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][7], 0.220833, 1.649999);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][7], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][7], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][7], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][7], -1);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][7], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][7], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][7], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][7], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][7], 0);

SpeedPlayerTD[playerid][8] = CreatePlayerTextDraw(playerid, 252.000000, 392.000000, "LOCK");
PlayerTextDrawFont(playerid, SpeedPlayerTD[playerid][8], 2);
PlayerTextDrawLetterSize(playerid, SpeedPlayerTD[playerid][8], 0.229166, 1.299998);
PlayerTextDrawTextSize(playerid, SpeedPlayerTD[playerid][8], 400.000000, 17.000000);
PlayerTextDrawSetOutline(playerid, SpeedPlayerTD[playerid][8], 1);
PlayerTextDrawSetShadow(playerid, SpeedPlayerTD[playerid][8], 0);
PlayerTextDrawAlignment(playerid, SpeedPlayerTD[playerid][8], 1);
PlayerTextDrawColor(playerid, SpeedPlayerTD[playerid][8], -16776961);
PlayerTextDrawBackgroundColor(playerid, SpeedPlayerTD[playerid][8], 255);
PlayerTextDrawBoxColor(playerid, SpeedPlayerTD[playerid][8], 50);
PlayerTextDrawUseBox(playerid, SpeedPlayerTD[playerid][8], 0);
PlayerTextDrawSetProportional(playerid, SpeedPlayerTD[playerid][8], 1);
PlayerTextDrawSetSelectable(playerid, SpeedPlayerTD[playerid][8], 0);
	
    BankTD1[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 186.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][0], 0.600000, 17.799980);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][0], 298.500000, 278.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][0], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][0], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][0], 0);

	BankTD1[playerid][1] = CreatePlayerTextDraw(playerid, 320.000000, 189.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][1], 0.600000, 17.149993);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][1], 298.500000, 275.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][1], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][1], -1378294017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][1], 0);

	BankTD1[playerid][2] = CreatePlayerTextDraw(playerid, 277.000000, 188.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][2], 0.600000, 17.499998);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][2], 298.500000, -3.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][2], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][2], 135);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][2], 0);

	BankTD1[playerid][3] = CreatePlayerTextDraw(playerid, 183.000000, 188.000000, "Welcome_Back_Deyo_Schmidzt");
	PlayerTextDrawFont(playerid, BankTD1[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][3], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][3], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][3], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][3], 0);

	BankTD1[playerid][4] = CreatePlayerTextDraw(playerid, 202.000000, 198.000000, "No._Acccount:_123");
	PlayerTextDrawFont(playerid, BankTD1[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][4], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][4], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][4], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][4], 0);

	BankTD1[playerid][5] = CreatePlayerTextDraw(playerid, 193.000000, 211.000000, "$00000000");
	PlayerTextDrawFont(playerid, BankTD1[playerid][5], 3);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][5], 0.374998, 1.649999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][5], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][5], 9109759);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][5], 0);

	BankTD1[playerid][6] = CreatePlayerTextDraw(playerid, 320.000000, 227.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][6], 0.600000, -0.299982);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][6], 408.500000, -281.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][6], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][6], 135);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][6], 0);

	BankTD1[playerid][7] = CreatePlayerTextDraw(playerid, 207.000000, 225.000000, "Quick Actions");
	PlayerTextDrawFont(playerid, BankTD1[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][7], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][7], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][7], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][7], 0);

	BankTD1[playerid][8] = CreatePlayerTextDraw(playerid, 222.000000, 237.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][8], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][8], 298.500000, 65.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][8], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][8], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][8], 0);

	BankTD1[playerid][9] = CreatePlayerTextDraw(playerid, 195.000000, 237.000000, "Withdraw_$10000");
	PlayerTextDrawFont(playerid, BankTD1[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][9], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][9], 251.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][9], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][9], 1);

	BankTD1[playerid][10] = CreatePlayerTextDraw(playerid, 222.000000, 264.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][10], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][10], 298.500000, 66.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][10], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][10], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][10], 0);

	BankTD1[playerid][11] = CreatePlayerTextDraw(playerid, 195.000000, 263.000000, "Withdraw_$50000");
	PlayerTextDrawFont(playerid, BankTD1[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][11], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][11], 253.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][11], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][11], 1);

	BankTD1[playerid][12] = CreatePlayerTextDraw(playerid, 221.000000, 288.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][12], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][12], 298.500000, 66.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][12], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][12], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][12], 0);

	BankTD1[playerid][13] = CreatePlayerTextDraw(playerid, 193.000000, 288.000000, "Withdraw_$100000");
	PlayerTextDrawFont(playerid, BankTD1[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][13], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][13], 255.000000, 28.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][13], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][13], 1);

	BankTD1[playerid][14] = CreatePlayerTextDraw(playerid, 296.000000, 199.000000, "Account_Services");
	PlayerTextDrawFont(playerid, BankTD1[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][14], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][14], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][14], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][14], 0);

	BankTD1[playerid][15] = CreatePlayerTextDraw(playerid, 323.000000, 237.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][15], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][15], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][15], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][15], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][15], 0);

	BankTD1[playerid][16] = CreatePlayerTextDraw(playerid, 323.000000, 263.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][16], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][16], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][16], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][16], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][16], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][16], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][16], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][16], 0);

	BankTD1[playerid][17] = CreatePlayerTextDraw(playerid, 390.000000, 199.000000, "Pay_a_Contact");
	PlayerTextDrawFont(playerid, BankTD1[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][17], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][17], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][17], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][17], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][17], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][17], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][17], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][17], 0);

	BankTD1[playerid][18] = CreatePlayerTextDraw(playerid, 323.000000, 287.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][18], 0.600000, 1.349995);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][18], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][18], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][18], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][18], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][18], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][18], 0);

	BankTD1[playerid][19] = CreatePlayerTextDraw(playerid, 310.000000, 237.000000, "Deposit");
	PlayerTextDrawFont(playerid, BankTD1[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][19], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][19], 332.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][19], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][19], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][19], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][19], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][19], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][19], 1);

	BankTD1[playerid][20] = CreatePlayerTextDraw(playerid, 308.000000, 263.000000, "Withdraw");
	PlayerTextDrawFont(playerid, BankTD1[playerid][20], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][20], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][20], 338.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][20], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][20], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][20], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][20], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][20], 1);

	BankTD1[playerid][21] = CreatePlayerTextDraw(playerid, 302.000000, 288.000000, "Wire_Transfer");
	PlayerTextDrawFont(playerid, BankTD1[playerid][21], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][21], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][21], 345.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][21], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][21], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][21], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][21], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][21], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][21], 1);

	BankTD1[playerid][22] = CreatePlayerTextDraw(playerid, 412.000000, 237.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][22], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][22], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][22], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][22], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][22], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][22], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][22], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][22], 0);

	BankTD1[playerid][23] = CreatePlayerTextDraw(playerid, 398.000000, 236.000000, "Paycheck");
	PlayerTextDrawFont(playerid, BankTD1[playerid][23], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][23], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][23], 427.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][23], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][23], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][23], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][23], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][23], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][23], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][23], 1);

	BankTD1[playerid][24] = CreatePlayerTextDraw(playerid, 446.000000, 188.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][24], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][24], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][24], 286.500000, 23.500000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][24], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][24], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][24], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][24], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][24], 0);

	BankTD1[playerid][25] = CreatePlayerTextDraw(playerid, 442.000000, 184.000000, "X");
	PlayerTextDrawFont(playerid, BankTD1[playerid][25], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][25], 0.404166, 1.649999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][25], 453.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][25], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][25], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][25], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][25], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][25], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][25], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][25], 1);

	BankTD1[playerid][26] = CreatePlayerTextDraw(playerid, 197.000000, 326.000000, "We_Find_Ways");
	PlayerTextDrawFont(playerid, BankTD1[playerid][26], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][26], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][26], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][26], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][26], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][26], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][26], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][26], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][26], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][26], 0);

	BankTD1[playerid][27] = CreatePlayerTextDraw(playerid, 296.000000, 225.000000, "Deposit_Funds");
	PlayerTextDrawFont(playerid, BankTD1[playerid][27], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][27], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][27], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][27], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][27], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][27], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][27], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][27], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][27], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][27], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][27], 0);

	BankTD1[playerid][28] = CreatePlayerTextDraw(playerid, 296.000000, 250.000000, "Withdraw_Funds");
	PlayerTextDrawFont(playerid, BankTD1[playerid][28], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][28], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][28], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][28], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][28], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][28], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][28], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][28], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][28], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][28], 0);

	BankTD1[playerid][29] = CreatePlayerTextDraw(playerid, 304.000000, 274.000000, "Share_Funds");
	PlayerTextDrawFont(playerid, BankTD1[playerid][29], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][29], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][29], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][29], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][29], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][29], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][29], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][29], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][29], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][29], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][29], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][29], 0);

	BankTD1[playerid][30] = CreatePlayerTextDraw(playerid, 397.000000, 225.000000, "Job_Salary");
	PlayerTextDrawFont(playerid, BankTD1[playerid][30], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][30], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][30], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][30], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][30], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][30], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][30], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][30], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][30], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][30], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][30], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][30], 0);

	BankTD1[playerid][31] = CreatePlayerTextDraw(playerid, 385.000000, 305.000000, "MGMC");
	PlayerTextDrawFont(playerid, BankTD1[playerid][31], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][31], 0.362500, 2.799997);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][31], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][31], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][31], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][31], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][31], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][31], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][31], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][31], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][31], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][31], 0);

	BankTD1[playerid][34] = CreatePlayerTextDraw(playerid, 410.000000, 321.000000, "BANK");
	PlayerTextDrawFont(playerid, BankTD1[playerid][34], 2);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][34], 0.362500, 2.799997);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][34], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][34], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][34], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][34], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][34], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][34], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][34], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][34], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][34], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][34], 0);

	BankTD1[playerid][35] = CreatePlayerTextDraw(playerid, 412.000000, 263.000000, "_");
	PlayerTextDrawFont(playerid, BankTD1[playerid][35], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][35], 0.600000, 1.149996);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][35], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][35], 1);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][35], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][35], 2);
	PlayerTextDrawColor(playerid, BankTD1[playerid][35], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][35], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][35], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][35], 1);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][35], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][35], 0);

	BankTD1[playerid][36] = CreatePlayerTextDraw(playerid, 389.000000, 249.000000, "Get_Credit_Card");
	PlayerTextDrawFont(playerid, BankTD1[playerid][36], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][36], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][36], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][36], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][36], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][36], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][36], 255);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][36], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][36], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][36], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][36], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][36], 0);

	BankTD1[playerid][37] = CreatePlayerTextDraw(playerid, 395.000000, 262.000000, "Credit_Card");
	PlayerTextDrawFont(playerid, BankTD1[playerid][37], 1);
	PlayerTextDrawLetterSize(playerid, BankTD1[playerid][37], 0.191667, 1.149999);
	PlayerTextDrawTextSize(playerid, BankTD1[playerid][37], 427.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD1[playerid][37], 0);
	PlayerTextDrawSetShadow(playerid, BankTD1[playerid][37], 0);
	PlayerTextDrawAlignment(playerid, BankTD1[playerid][37], 1);
	PlayerTextDrawColor(playerid, BankTD1[playerid][37], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD1[playerid][37], 255);
	PlayerTextDrawBoxColor(playerid, BankTD1[playerid][37], 50);
	PlayerTextDrawUseBox(playerid, BankTD1[playerid][37], 0);
	PlayerTextDrawSetProportional(playerid, BankTD1[playerid][37], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD1[playerid][37], 1);

	//Player Textdraws
	BankReceiptTD[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 186.000000, "_");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][0], 0.600000, 13.650012);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][0], 298.500000, 278.500000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][0], -1962934017);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][0], 0);

	BankReceiptTD[playerid][1] = CreatePlayerTextDraw(playerid, 320.000000, 189.000000, "_");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][1], 0.600000, 13.100009);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][1], 298.500000, 275.000000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][1], -1378294017);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][1], 0);

	BankReceiptTD[playerid][2] = CreatePlayerTextDraw(playerid, 273.000000, 268.000000, "Please_get_your_receipt");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][2], 0.229166, 1.250000);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][2], 0);

	BankReceiptTD[playerid][3] = CreatePlayerTextDraw(playerid, 274.000000, 187.000000, "MGMC");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][3], 0.762498, 2.749994);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][3], 0);

	BankReceiptTD[playerid][6] = CreatePlayerTextDraw(playerid, 311.000000, 200.000000, "Bank");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][6], 0.762498, 2.749994);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][6], 0);

	BankReceiptTD[playerid][7] = CreatePlayerTextDraw(playerid, 225.000000, 240.000000, "Transaction_Completed_Thankyou_for_Trusting_us");
	PlayerTextDrawFont(playerid, BankReceiptTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, BankReceiptTD[playerid][7], 0.229166, 1.250000);
	PlayerTextDrawTextSize(playerid, BankReceiptTD[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankReceiptTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, BankReceiptTD[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, BankReceiptTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, BankReceiptTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, BankReceiptTD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, BankReceiptTD[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, BankReceiptTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, BankReceiptTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, BankReceiptTD[playerid][7], 0);
	
		BankTD2[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 186.000000, "_");
	PlayerTextDrawFont(playerid, BankTD2[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][0], 0.600000, 13.650015);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][0], 298.500000, 278.500000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][0], 2);
	PlayerTextDrawColor(playerid, BankTD2[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][0], -1962934017);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][0], 0);

	BankTD2[playerid][1] = CreatePlayerTextDraw(playerid, 320.000000, 189.000000, "_");
	PlayerTextDrawFont(playerid, BankTD2[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][1], 0.600000, 13.100013);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][1], 298.500000, 275.000000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][1], 2);
	PlayerTextDrawColor(playerid, BankTD2[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][1], -1378294017);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][1], 0);

	BankTD2[playerid][2] = CreatePlayerTextDraw(playerid, 302.000000, 255.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, BankTD2[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][2], 38.500000, 42.000000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][2], 1);
	PlayerTextDrawColor(playerid, BankTD2[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][2], -206);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][2], 1);

	BankTD2[playerid][3] = CreatePlayerTextDraw(playerid, 274.000000, 240.000000, "Place_your_finger_here");
	PlayerTextDrawFont(playerid, BankTD2[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][3], 0.229167, 1.250000);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][3], 1);
	PlayerTextDrawColor(playerid, BankTD2[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][3], 0);

	BankTD2[playerid][4] = CreatePlayerTextDraw(playerid, 274.000000, 187.000000, "MGMC");
	PlayerTextDrawFont(playerid, BankTD2[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][4], 0.762500, 2.749995);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][4], 1);
	PlayerTextDrawColor(playerid, BankTD2[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][4], 0);

	BankTD2[playerid][7] = CreatePlayerTextDraw(playerid, 311.000000, 200.000000, "Bank");
	PlayerTextDrawFont(playerid, BankTD2[playerid][7], 0);
	PlayerTextDrawLetterSize(playerid, BankTD2[playerid][7], 0.762500, 2.749995);
	PlayerTextDrawTextSize(playerid, BankTD2[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, BankTD2[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, BankTD2[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, BankTD2[playerid][7], 1);
	PlayerTextDrawColor(playerid, BankTD2[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, BankTD2[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, BankTD2[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, BankTD2[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, BankTD2[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, BankTD2[playerid][7], 0);
	
	//Portable Radio Td By me
	PortableRadioTD[playerid][0] = CreatePlayerTextDraw(playerid, -30.000000, 60.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, PortableRadioTD[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid, PortableRadioTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PortableRadioTD[playerid][0], 289.500000, 326.500000);
	PlayerTextDrawSetOutline(playerid, PortableRadioTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PortableRadioTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, PortableRadioTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PortableRadioTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, PortableRadioTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, PortableRadioTD[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, PortableRadioTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, PortableRadioTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, PortableRadioTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, PortableRadioTD[playerid][0], 2967);
	PlayerTextDrawSetPreviewRot(playerid, PortableRadioTD[playerid][0], -98.000000, 0.000000, -178.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, PortableRadioTD[playerid][0], 1, 1);

	PortableRadioTD[playerid][1] = CreatePlayerTextDraw(playerid, 127.000000, 201.000000, "999");
	PlayerTextDrawFont(playerid, PortableRadioTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, PortableRadioTD[playerid][1], 0.350000, 1.600000);
	PlayerTextDrawTextSize(playerid, PortableRadioTD[playerid][1], 157.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PortableRadioTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PortableRadioTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, PortableRadioTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, PortableRadioTD[playerid][1], 16777215);
	PlayerTextDrawBackgroundColor(playerid, PortableRadioTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, PortableRadioTD[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, PortableRadioTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PortableRadioTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, PortableRadioTD[playerid][1], 1);

	PortableRadioTD[playerid][2] = CreatePlayerTextDraw(playerid, 142.000000, 144.000000, "ld_beat:cross");
	PlayerTextDrawFont(playerid, PortableRadioTD[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, PortableRadioTD[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PortableRadioTD[playerid][2], 24.000000, 23.500000);
	PlayerTextDrawSetOutline(playerid, PortableRadioTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PortableRadioTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, PortableRadioTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, PortableRadioTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, PortableRadioTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, PortableRadioTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, PortableRadioTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PortableRadioTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, PortableRadioTD[playerid][2], 1);

	PortableRadioTD[playerid][3] = CreatePlayerTextDraw(playerid, 130.000000, 233.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, PortableRadioTD[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid, PortableRadioTD[playerid][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, PortableRadioTD[playerid][3], 26.500000, 28.500000);
	PlayerTextDrawSetOutline(playerid, PortableRadioTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PortableRadioTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, PortableRadioTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, PortableRadioTD[playerid][3], 2094792959);
	PlayerTextDrawBackgroundColor(playerid, PortableRadioTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, PortableRadioTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, PortableRadioTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PortableRadioTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, PortableRadioTD[playerid][3], 0);

	PortableRadioTD[playerid][4] = CreatePlayerTextDraw(playerid, 134.000000, 239.000000, "OFF");
	PlayerTextDrawFont(playerid, PortableRadioTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, PortableRadioTD[playerid][4], 0.279166, 1.700000);
	PlayerTextDrawTextSize(playerid, PortableRadioTD[playerid][4], 152.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PortableRadioTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PortableRadioTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, PortableRadioTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, PortableRadioTD[playerid][4], -65281);
	PlayerTextDrawBackgroundColor(playerid, PortableRadioTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, PortableRadioTD[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, PortableRadioTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PortableRadioTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, PortableRadioTD[playerid][4], 1);

	
			 // Hunger One in only
    HungerTD[playerid][0] = CreatePlayerTextDraw(playerid, 122.000000, 420.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][0], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][0], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][0], 23.500000, 25.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][0], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][0], 9109759);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][0], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][0], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][0], 0);

    HungerTD[playerid][1] = CreatePlayerTextDraw(playerid, 149.000000, 420.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][1], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][1], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][1], 23.500000, 25.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][1], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][1], 16777215);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][1], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][1], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][1], 0);

    HungerTD[playerid][2] = CreatePlayerTextDraw(playerid, 178.000000, 420.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][2], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][2], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][2], 23.500000, 25.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][2], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][2], -16776961);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][2], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][2], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][2], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][2], 0);

    HungerTD[playerid][3] = CreatePlayerTextDraw(playerid, 206.000000, 420.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][3], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][3], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][3], 23.500000, 25.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][3], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][3], 1296911871);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][3], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][3], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][3], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][3], 0);

    HungerTD[playerid][4] = CreatePlayerTextDraw(playerid, 123.000000, 421.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][4], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][4], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][4], 21.500000, 23.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][4], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][4], 255);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][4], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][4], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][4], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][4], 0);

    HungerTD[playerid][5] = CreatePlayerTextDraw(playerid, 150.000000, 421.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][5], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][5], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][5], 21.500000, 23.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][5], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][5], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][5], 255);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][5], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][5], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][5], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][5], 0);

    HungerTD[playerid][6] = CreatePlayerTextDraw(playerid, 179.000000, 421.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][6], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][6], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][6], 21.500000, 23.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][6], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][6], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][6], 255);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][6], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][6], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][6], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][6], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][6], 0);

    HungerTD[playerid][7] = CreatePlayerTextDraw(playerid, 207.000000, 421.000000, "ld_pool:ball");
    PlayerTextDrawFont(playerid, HungerTD[playerid][7], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][7], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][7], 21.500000, 23.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][7], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][7], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][7], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][7], 255);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][7], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][7], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][7], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][7], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][7], 0);

    HungerTD[playerid][8] = CreatePlayerTextDraw(playerid, 126.000000, 425.000000, "HUD:radar_pizza");
    PlayerTextDrawFont(playerid, HungerTD[playerid][8], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][8], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][8], 16.000000, 16.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][8], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][8], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][8], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][8], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][8], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][8], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][8], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][8], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][8], 0);

    HungerTD[playerid][9] = CreatePlayerTextDraw(playerid, 153.000000, 424.000000, "HUD:radar_diner");
    PlayerTextDrawFont(playerid, HungerTD[playerid][9], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][9], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][9], 16.000000, 16.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][9], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][9], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][9], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][9], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][9], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][9], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][9], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][9], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][9], 0);

    HungerTD[playerid][10] = CreatePlayerTextDraw(playerid, 182.000000, 424.000000, "HUD:radar_girlfriend");
    PlayerTextDrawFont(playerid, HungerTD[playerid][10], 4);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][10], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][10], 16.000000, 16.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][10], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][10], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][10], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][10], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][10], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][10], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][10], 1);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][10], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][10], 0);

    HungerTD[playerid][11] = CreatePlayerTextDraw(playerid, 202.000000, 416.000000, "Preview_Model");
    PlayerTextDrawFont(playerid, HungerTD[playerid][11], 5);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][11], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][11], 31.000000, 30.500000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][11], 0);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][11], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][11], 1);
    PlayerTextDrawColor(playerid, HungerTD[playerid][11], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][11], 0);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][11], 255);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][11], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][11], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][11], 0);
    PlayerTextDrawSetPreviewModel(playerid, HungerTD[playerid][11], 19515);
    PlayerTextDrawSetPreviewRot(playerid, HungerTD[playerid][11], -53.000000, 95.000000, -98.000000, 1.000000);
    PlayerTextDrawSetPreviewVehCol(playerid, HungerTD[playerid][11], 1, 1);

    HungerTD[playerid][12] = CreatePlayerTextDraw(playerid, 134.000000, 426.000000, "100"); // HUNGER
    PlayerTextDrawFont(playerid, HungerTD[playerid][12], 2);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][12], 0.283333, 1.100000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][12], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][12], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][12], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][12], 2);
    PlayerTextDrawColor(playerid, HungerTD[playerid][12], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][12], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][12], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][12], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][12], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][12], 0);

    HungerTD[playerid][13] = CreatePlayerTextDraw(playerid, 161.000000, 426.000000, "100"); // THIRST
    PlayerTextDrawFont(playerid, HungerTD[playerid][13], 2);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][13], 0.283333, 1.100000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][13], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][13], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][13], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][13], 2);
    PlayerTextDrawColor(playerid, HungerTD[playerid][13], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][13], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][13], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][13], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][13], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][13], 0);

    HungerTD[playerid][14] = CreatePlayerTextDraw(playerid, 190.000000, 426.000000, "100"); // HEALTH
    PlayerTextDrawFont(playerid, HungerTD[playerid][14], 2);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][14], 0.283333, 1.100000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][14], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][14], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][14], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][14], 2);
    PlayerTextDrawColor(playerid, HungerTD[playerid][14], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][14], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][14], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][14], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][14], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][14], 0);

    HungerTD[playerid][15] = CreatePlayerTextDraw(playerid, 218.000000, 426.000000, "100"); // ARMOUR
    PlayerTextDrawFont(playerid, HungerTD[playerid][15], 2);
    PlayerTextDrawLetterSize(playerid, HungerTD[playerid][15], 0.283333, 1.100000);
    PlayerTextDrawTextSize(playerid, HungerTD[playerid][15], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HungerTD[playerid][15], 1);
    PlayerTextDrawSetShadow(playerid, HungerTD[playerid][15], 0);
    PlayerTextDrawAlignment(playerid, HungerTD[playerid][15], 2);
    PlayerTextDrawColor(playerid, HungerTD[playerid][15], -1);
    PlayerTextDrawBackgroundColor(playerid, HungerTD[playerid][15], 255);
    PlayerTextDrawBoxColor(playerid, HungerTD[playerid][15], 50);
    PlayerTextDrawUseBox(playerid, HungerTD[playerid][15], 0);
    PlayerTextDrawSetProportional(playerid, HungerTD[playerid][15], 1);
    PlayerTextDrawSetSelectable(playerid, HungerTD[playerid][15], 0);

	SHOWID[playerid][0] = CreatePlayerTextDraw(playerid, 539.000000, 131.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][0], 0.600000, 13.000003);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][0], 340.500000, 187.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][0], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][0], 0);

	SHOWID[playerid][1] = CreatePlayerTextDraw(playerid, 560.000000, 166.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][1], 0.600000, 1.650002);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][1], 298.500000, 145.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][1], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][1], 0);

	SHOWID[playerid][2] = CreatePlayerTextDraw(playerid, 494.000000, 168.000000, "Lil_Scott_Martinez");
	PlayerTextDrawFont(playerid, SHOWID[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][2], 0.250000, 1.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][2], 0);

	SHOWID[playerid][3] = CreatePlayerTextDraw(playerid, 500.000000, 185.000000, "AGE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][3], 0.125000, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][3], 0);

	SHOWID[playerid][4] = CreatePlayerTextDraw(playerid, 559.000000, 185.000000, "GENDER");
	PlayerTextDrawFont(playerid, SHOWID[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][4], 0.125000, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][4], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][4], 0);

	SHOWID[playerid][5] = CreatePlayerTextDraw(playerid, 555.000000, 129.000000, "GOVERMENT OF MGMC");
	PlayerTextDrawFont(playerid, SHOWID[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][5], 0.133331, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][5], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][5], 1433087999);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][5], 0);

	SHOWID[playerid][6] = CreatePlayerTextDraw(playerid, 594.000000, 137.000000, "MGMC IDENTIFICATION CARD");
	PlayerTextDrawFont(playerid, SHOWID[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][6], 0.166666, 1.299998);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][6], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][6], 0);

	SHOWID[playerid][7] = CreatePlayerTextDraw(playerid, 560.000000, 226.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][7], 0.600000, -0.349996);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][7], 298.500000, 145.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][7], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][7], 0);

	SHOWID[playerid][8] = CreatePlayerTextDraw(playerid, 534.000000, 225.000000, "EXPIRES FEB 2030");
	PlayerTextDrawFont(playerid, SHOWID[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][8], 0.125000, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][8], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][8], 0);

	SHOWID[playerid][9] = CreatePlayerTextDraw(playerid, 509.000000, 191.000000, "30");
	PlayerTextDrawFont(playerid, SHOWID[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][9], 0.125000, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][9], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][9], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][9], 1433087999);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][9], 0);

	SHOWID[playerid][10] = CreatePlayerTextDraw(playerid, 543.000000, 191.000000, "MALE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][10], 0.125000, 0.850000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][10], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][10], 1433087999);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][10], 0);

	SHOWID[playerid][11] = CreatePlayerTextDraw(playerid, 623.000000, 210.000000, "THIS CARD HAS BEEN ISSUED BY THE MGMC GOVERMENT");
	PlayerTextDrawFont(playerid, SHOWID[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][11], 0.112498, 1.249997);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][11], 3);
	PlayerTextDrawColor(playerid, SHOWID[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][11], 0);

	SHOWID[playerid][12] = CreatePlayerTextDraw(playerid, 464.000000, 131.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][12], 0.600000, 10.300003);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][12], 298.500000, 37.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][12], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][12], -121);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][12], 0);

	SHOWID[playerid][13] = CreatePlayerTextDraw(playerid, 408.000000, 91.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SHOWID[playerid][13], 5);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][13], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][13], 112.500000, 150.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][13], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][13], 19163);
	PlayerTextDrawSetPreviewRot(playerid, SHOWID[playerid][13], -10.000000, 0.000000, 1.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SHOWID[playerid][13], 1, 1);

	PlayerInfo[playerid][pText][0] = CreatePlayerTextDraw(playerid, 42.000000, 430.000000, "Little Mexico");
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][0], 0);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][0], 0.325000, 1.100000);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][0], 0);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][0], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][0], 255);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][0], 50);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pText][0], 0);
	// End

	// HP & armor
	PlayerInfo[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][3], 1);

	PlayerInfo[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][4], 1);

	// Ammo notification
	PlayerInfo[playerid][pText][5] = CreatePlayerTextDraw(playerid, 521.000000, 63.000000, "30");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][5], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][5], -1446714113);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][5], 1);
	Streamer_ToggleIdleUpdate(playerid, true);

	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);

	/*new nametag[128];
	format(nametag, sizeof(nametag), "%s", GetRPName(playerid));
  	PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(nametag, COLOR_WHITE, 0.0, 0.0, 0.1, 25.0, .attachedplayer = playerid, .testlos = 1);*/

	PlayerLabel[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, -1.5, 10, .attachedplayer = playerid, .testlos = 1);
	InjuredLabel[playerid] = CreateDynamic3DTextLabel("", COLOR_DOCTOR, 0.0, 0.0, -0.3, 10, .attachedplayer = playerid, .testlos = 1);
	
	//Dealership Near Vinewood///////////////////////////////////////////////////////////////////////////////////////////////
    RemoveBuildingForPlayer(playerid, 1522, 1314.729, -897.265, 38.468, 0.250);
    RemoveBuildingForPlayer(playerid, 5762, 1315.369, -887.468, 41.703, 0.250);
    RemoveBuildingForPlayer(playerid, 5852, 1315.369, -887.468, 41.703, 0.250);

    //mechanic newwwwwwww
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 7992, 1217.4063, 1193.1719, 10.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 8022, 1217.4063, 1193.1719, 10.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 8229, 1142.0313, 1362.5000, 12.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 8235, 1166.7188, 1354.2109, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 1099.2656, 1283.3438, 23.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 1136.9766, 1204.7109, 23.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 8231, 1166.6406, 1354.2031, 11.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 8230, 1166.7188, 1354.2109, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 8237, 1172.6250, 1347.4844, 9.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 1175.7656, 1283.3438, 23.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1251, 997.0469, 1710.9531, 11.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1251, 998.0938, 1755.6875, 11.2656, 0.25);
	
/*	// MY HOUSE
	RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2229.0469, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2230.4141, -1815.1484, 11.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2234.4844, -1817.9297, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2228.6719, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2232.5156, -1766.0547, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2249.8672, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2254.7266, -1827.4375, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2259.9453, -1796.0703, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2258.3438, -1804.7422, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2271.6484, -1772.3984, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2263.5234, -1742.1953, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2285.7578, -1762.1250, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2297.8984, -1793.8203, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.3828, -1798.5391, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2293.6250, -1760.6172, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.1484, -1775.8750, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2304.7813, -1767.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2322.6484, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2332.8281, -1817.7109, 12.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.7578, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2341.7578, -1817.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2335.6484, -1796.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2334.7109, -1785.0625, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2329.1875, -1765.5234, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2349.6172, -1763.3438, 11.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2295.7031, -1742.1953, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2331.2656, -1742.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1802.7969, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2364.2500, -1742.1172, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1780.7734, 11.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2378.3359, -1818.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1800.4688, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1805.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.9922, -1813.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1811.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1789.6016, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1795.0547, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2399.9766, -1815.9922, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2398.5781, -1782.7734, 10.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2387.0234, -1763.6406, 12.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2403.2891, -1741.7422, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 17518, 2361.9375, -1699.9375, 15.9219, 0.25);*/
	
	// Mat turf
    RemoveBuildingForPlayer(playerid, 1308, -2696.659, -13.382, 3.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1227, -2756.270, 90.359, 6.929, 0.250);
    RemoveBuildingForPlayer(playerid, 1227, -2756.479, 93.187, 6.929, 0.250);
    RemoveBuildingForPlayer(playerid, 1227, -2757.969, 95.984, 6.929, 0.250);
	
	//comrades gh
    RemoveBuildingForPlayer(playerid, 659, 1492.130, -716.125, 93.500, 0.250);
    RemoveBuildingForPlayer(playerid, 3604, 1525.500, -691.695, 96.078, 0.250);
    RemoveBuildingForPlayer(playerid, 3737, 1525.500, -691.695, 96.078, 0.250);
    RemoveBuildingForPlayer(playerid, 659, 1495.609, -728.304, 92.195, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 1488.239, -720.984, 92.531, 0.250);
    RemoveBuildingForPlayer(playerid, 659, 1504.449, -750.414, 86.429, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 1490.260, -731.078, 90.953, 0.250);
    RemoveBuildingForPlayer(playerid, 659, 1497.869, -740.750, 90.007, 0.250);
    RemoveBuildingForPlayer(playerid, 659, 1503.760, -720.703, 91.656, 0.250);

	//EAST SIDE BALLAS
    RemoveBuildingForPlayer(playerid, 1280, 103.148, -1680.920, 9.703, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 112.734, -1685.140, 12.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 123.828, -1694.020, 11.953, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 117.750, -1658.569, 12.468, 0.250);

	//VALHALA GANG
    RemoveBuildingForPlayer(playerid, 790, -99.905, -2434.208, 36.655, 0.250);
    RemoveBuildingForPlayer(playerid, 790, -66.639, -2463.870, 38.617, 0.250);
    RemoveBuildingForPlayer(playerid, 790, -144.921, -2384.628, 32.381, 0.250);
    RemoveBuildingForPlayer(playerid, 3244, -136.022, -2401.398, 32.256, 0.250);
    RemoveBuildingForPlayer(playerid, 3338, -136.022, -2401.398, 32.256, 0.250);
    RemoveBuildingForPlayer(playerid, 705, -163.141, -2368.739, 29.218, 0.250);
    
	//W GANG
    RemoveBuildingForPlayer(playerid, 1461, 820.148, -2061.060, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1522, -180.313, 1035.589, 18.726, 0.250);
    
    //CHEKUTHAN GH
    RemoveBuildingForPlayer(playerid, 762, 337.414, -1163.719, 83.804, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 336.507, -1171.449, 78.406, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 329.210, -1178.540, 78.953, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 310.273, -1194.739, 78.671, 0.250);
    RemoveBuildingForPlayer(playerid, 708, 287.953, -1206.729, 79.289, 0.250);
    RemoveBuildingForPlayer(playerid, 762, 245.156, -1160.280, 81.804, 0.250);
    RemoveBuildingForPlayer(playerid, 700, 274.195, -1202.329, 79.734, 0.250);
    RemoveBuildingForPlayer(playerid, 706, 252.906, -1156.199, 77.765, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 268.523, -1189.699, 78.171, 0.250);
    RemoveBuildingForPlayer(playerid, 3604, 279.132, -1152.229, 82.414, 0.250);
    RemoveBuildingForPlayer(playerid, 3737, 279.132, -1152.229, 82.414, 0.250);
    RemoveBuildingForPlayer(playerid, 3607, 310.617, -1145.520, 85.875, 0.250);
    RemoveBuildingForPlayer(playerid, 3733, 310.617, -1145.520, 85.875, 0.250);
    RemoveBuildingForPlayer(playerid, 3280, 287.132, 1814.380, 3.703, 0.250);
    RemoveBuildingForPlayer(playerid, 706, 301.085, -1115.380, 79.914, 0.250);

		//Jewellery Robbery Mapping
	RemoveBuildingForPlayer(playerid, 4594, 1825.000, -1413.930, 12.553, 0.250);
    RemoveBuildingForPlayer(playerid, 4606, 1825.000, -1413.930, 12.553, 0.250);
    
    //VINEWOOD//////////////////////////////////////////////////////////////////
    RemoveBuildingForPlayer(playerid, 13759, 1413.413, -804.742, 83.436, 0.250);
    RemoveBuildingForPlayer(playerid, 673, 1398.584, -838.234, 46.171, 0.250);
    RemoveBuildingForPlayer(playerid, 13722, 1413.413, -804.742, 83.436, 0.250);
    RemoveBuildingForPlayer(playerid, 13831, 1413.413, -804.742, 83.436, 0.250);

	//we love mgmc
    RemoveBuildingForPlayer(playerid, 1226, 1650.859, -2249.570, 16.335, 0.250);
    RemoveBuildingForPlayer(playerid, 1215, 1657.319, -2247.020, 13.078, 0.250);
	
	//hpmorp
	RemoveBuildingForPlayer(playerid, 5402, 2049.870, -1400.890, 20.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5578, 2049.870, -1400.890, 20.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5403, 2050.070, -1401.209, 33.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5579, 2050.070, -1401.209, 33.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5661, 2050.070, -1401.209, 33.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5579, 2050.070, -1401.209, 33.679, 0.250);
	RemoveBuildingForPlayer(playerid, 5661, 2050.0703, -1401.2109, 33.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1998.339, -1460.290, 15.562, 0.250);

    //propamap
    RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1085.7031, -1361.0234, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
	
	new string[2500];
	format(string, sizeof(string), "**JOIN:** %s has joined the server (IP: %s)", GetRPName(playerid), GetPlayerIP(playerid));
	DCC_SendChannelMessage(DCC_FindChannelById(JOINLOG), string);
	gConnections++;
    SaveServerInfo();
	return 1;
}

//whitelist
forward Delay_Kick(playerid);
public Delay_Kick(playerid)
{
    Kick(playerid);
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	//TextDrawHideForPlayer(playerid, PriorityTD1);
	TerminateInfo(playerid, reason);
	if (lstream[playerid])
    {
        SvDeleteStream(lstream[playerid]);
        lstream[playerid] = SV_NULL;
    }
    statusb--;
    new name[MAX_PLAYER_NAME + 1];
    GetPlayerName(playerid, name, sizeof(name));
    SetDynamicObjectPos(RadarBlip[playerid], 0.0, 0.0, -1000.0);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[playerid], E_STREAMER_X, 0.0);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[playerid], E_STREAMER_Y, 0.0);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Radar3DText[playerid], E_STREAMER_Z, -1000.0);
    RadarBlipShown[playerid] = false;
    new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

    foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPoint(i, 40.0, x, y, z))
		{
			switch(reason)
			{
				case 0:
				{
					SendClientMessageEx(i, COLOR_RED, "[SERVER]"YELLOW" %s(%d) has exited Server.{7fffd4}(FC/Crash/Timeout)", name, playerid);
				}
				case 1:
				{
					SendClientMessageEx(i, COLOR_RED, "[SERVER]"YELLOW" %s(%d) has exited Server.{7fffd4}(Disconnected)", name, playerid);
				}
				case 2:
				{
					SendClientMessageEx(i, COLOR_RED, "[SERVER]"YELLOW" %s(%d) has exited Server.{7fffd4}(Kick/Banned)", name, playerid);
				}
			}
		}
	}
	new string[2500];
	format(string, sizeof(string), "**LEFT:** %s has left the server (IP: %s)", GetRPName(playerid), GetPlayerIP(playerid));
	DCC_SendChannelMessage(DCC_FindChannelById(JOINLOG), string);
//	TextDrawHideForPlayer(playerid, Textdraw);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerInfo[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!PlayerInfo[playerid][pLogged])
	{
	    ClearChat(playerid);
    	for(new i = 0; i < 5; i ++)
		{
		    SCM(playerid, -1, " ");
		}
		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);

		InterpolateCameraPos(playerid, 157.131378, 924.438415, 135.074752, -329.578277, 1206.304809, 59.176486, 3000);
		InterpolateCameraLookAt(playerid, 152.929550, 926.860778, 133.859512, -329.499755, 1201.544433, 57.649055, 3000);
        PlayAudioStreamForPlayer(playerid, CONNECTION_MUSIC);

		// Due to a SA-MP bug, you can't apply camera coordinates directly after enabling spectator mode (to hide HUD).
		// In this case we'll use a timer to defer this action.
		SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
		//SetTimerEx("IntroTimer1", 3000, false, "i", playerid);
	}

	return 1;
}

forward GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz);
public GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz)
{
	if(PlayerInfo[playerid][pLogged])
	{
		SetPlayerCameraLookAt(playerid, x, y, z);

		switch(step)
		{
		    case 1:
		    {
    			SetPlayerCameraPos(playerid, x, y, z + 100.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 2, x, y, z, angle, cx, cy, cz);
			}
			case 2:
			{
				SetPlayerCameraPos(playerid, x, y, z + 50.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 3, x, y, z, angle, cx, cy, cz);
			}
			case 3:
			{
				SetPlayerCameraPos(playerid, x, y, z + 25.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
		  		SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 4, x, y, z, angle, cx, cy, cz);
			}
			case 4:
			{
				InterpolateCameraPos(playerid, cx, cy, cz + 25.0, cx, cy, cz, 1000);
				InterpolateCameraLookAt(playerid, x + 4.0 * floatsin(-angle, degrees), y + 4.0 * floatcos(-angle, degrees), z, x, y, z + 0.6, 1000);
				SetTimerEx("GrandTheftAutoV", 1500, false, "iifffffff", playerid, 5, x, y, z, angle, cx, cy, cz);
			}
			case 5:
			{
			    SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);
			    PlayerInfo[playerid][pGTAV] = 1;
			}
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	TextDrawShowForPlayer(playerid, CasCade1);
	TextDrawShowForPlayer(playerid, CasCade2);
	TextDrawShowForPlayer(playerid, CasCade3);
    TextDrawShowForPlayer(playerid, CasCade4);
	//TextDrawShowForPlayer(playerid, PriorityTD1);

	SetCameraBehindPlayer(playerid);
    if(PlayerInfo[playerid][pKicked]) return 0;
	PreloadAnims(playerid);

	if(PlayerInfo[playerid][pSetup])
	{
	    if(PlayerInfo[playerid][pTutorial])
		{
	    	KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	    	PlayerInfo[playerid][pTutorial] = 0;
		}

		SetPlayerPos(playerid, 1940.1460, 1911.0525, 3001.8162);//kittisanamkitti
		SetPlayerFacingAngle(playerid, 180.2150);
		
		ShowRegistrationMenu(playerid, true);
		SetPlayerSkin(playerid, 0);

		SetPlayerCameraPos(playerid,1939.488891,1904.130859,3003.056152);
        SetPlayerCameraLookAt(playerid,1939.828857,1911.961181,3002.576171);

		TogglePlayerControllable(playerid, false);

		//ShowDialogToPlayer(playerid, DIALOG_GENDER);

		InsideTut[playerid] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		StopAudioStreamForPlayer(playerid);
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);
	    if(PlayerInfo[playerid][pJailType] == 2)
	    {
	        SM(playerid, COLOR_LIGHTRED, "** You were placed in admin prison by %s, reason: %s", PlayerInfo[playerid][pPrisonedBy], PlayerInfo[playerid][pPrisonReason]);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "** You haven't completed your jail sentence yet.");
		}
	}
	else if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    SetPlayerInPaintball(playerid, PlayerInfo[playerid][pPaintball]);
	}
	else
	{
	    PlayerInfo[playerid][pJoinedEvent] = 0;

	    if(PlayerInfo[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0, 1);

			Dyuze(playerid, "Wounded", "/accept death or /call 911", 10000);
	        SCM(playerid, COLOR_DOCTOR, "You are wounded and losing near to Death. /call 911 for medical attention.");
	        SCM(playerid, COLOR_DOCTOR, "If you wish to accept your death and go to hospital use /accept death.");

			new string[128];
			format(string, sizeof(string), "(( Has been wounded ))");
			UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, string);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

            Maskara[playerid] = 0;
	        PlayerInfo[playerid][pDeathCooldown] = 20;
	    }
	    else if(PlayerInfo[playerid][pHospital])
	    {
	        if(PlayerInfo[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid, .type = PlayerInfo[playerid][pInsurance]);

			ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{
		    SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		    SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);
		}
        if(PlayerInfo[playerid][pGTAV] == 0)
	    {
	    	TogglePlayerControllable(playerid, 0);
	    	SetTimerEx("GrandTheftAutoV", 2000, false, "iifffffff", playerid, 1, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY], PlayerInfo[playerid][pCameraZ]);
	    }
		if(!PlayerInfo[playerid][pHospital])
		{
		    if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
			}

			SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
			SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
			SetPlayerWeapons(playerid);
		}
	}
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);

	/*#if defined Christmas
	#else
    	PlayerTextDrawShow(playerid, EventTextdraw[playerid]);
	#endif*/
	
    	for(new i = 0; i < 16; i ++)
	{
          PlayerTextDrawShow(playerid, HungerTD[playerid][i]);
    }
    TextDrawShowForPlayer(playerid, CRPTD);
   	PlayerTextDrawShow(playerid, BlackmoneyTD[playerid][0]);
    PlayerTextDrawShow(playerid, IdTD[playerid][0]);
    PlayerTextDrawShow(playerid, PlayerstatTD[playerid][0]);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - PlayerInfo[playerid][pLastDeath] < 2)
	{
	    return 1;
	}
	if(PlayerInfo[playerid][pLogged])
	{
		if(PlayerInfo[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[i][pJoinedEvent])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}

		else if(PlayerInfo[playerid][pPaintball] > 0)
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
		else if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( You lost your duel against %s! ))", GetRPName(PlayerInfo[playerid][pDueling]));
			ClearDamages(playerid);
			KillTimer(PlayerInfo[playerid][pBleedTimer]);
			PlayerInfo[playerid][pBleedTimer] = -1;
			PlayerInfo[playerid][pBleed] = 0;
			SetPlayerToSpawn(killerid);

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( You won the duel against %s! ))", GetRPName(playerid));
				SAM(COLOR_LIGHTRED, "AdmCmd: %s has won their duel against %s.", GetRPName(killerid), GetRPName(playerid));
				ClearDamages(playerid);
				KillTimer(PlayerInfo[playerid][pBleedTimer]);
				PlayerInfo[playerid][pBleedTimer] = -1;
				PlayerInfo[playerid][pBleed] = 0;
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID)
			{
                new szzString[128];
				format(szzString, sizeof(szzString), "%s killed %s using %s", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
				SendDiscordMessage(12, szzString);
			    HandleContract(playerid, killerid);
			}

		    if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pJailType] == 0)
		    {
			    if(PlayerInfo[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
				    PlayerInfo[playerid][pInjured] = 1;
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SM(i, COLOR_DISPATCH, "Beacon %s (%i) is in need of immediate medical assistance.", GetRPName(playerid), playerid);
						}
					}
				}
				else
				{
					Dyuze(playerid, "Wasted", "You died.");

					new string[128]; // String of GOD
        			format(string, sizeof(string), "%s's "WHITE"body", GetRPName(playerid));
					PlayerInfo[playerid][pDeathInfo] = CreateDynamic3DTextLabel(string, SERVER_COLOR, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ], 10.0);

					SetTimerEx("DEATHACTOR", 120000, false, "i", playerid);
					PlayerInfo[playerid][pInjured] = 0;
					PlayerInfo[playerid][pHospital] = 1;
					if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SM(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has bled out.", GetRPName(playerid));
                        PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}
				}
			}
			else
			{
			    PlayerInfo[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);

	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] was helibladed by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}
	PlayerInfo[playerid][pLastDeath] = gettime();
 	foreach(new i : Player)
	{
  		if(PlayerInfo[i][pAdmin])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
	}
	 new i = GetNearbyTurf(playerid);
    new string[250];
	if(PlayerInfo[playerid][pInjured] && i > 0)
	{

	   if(TurfInfo[i][tExists] && InfluenceInfo[iStart] == 1 && InfluenceInfo[iTurf] == i)
 	   {
		  if(PlayerInfo[playerid][pGang] > 0)
		  {
			 SendTurfAdminMessage(i, COLOR_LIGHTRED, "{007bff}[Turf Kills] {%06x}%s "WHITE"has been Knocked inside the turf. Gang Name: %s | Killed By: %s", GangInfo[PlayerInfo[playerid][pGang]][gColor] >>> 8, GetRPName(playerid), GangInfo[PlayerInfo[playerid][pGang]][gName], GetRPName(killerid));
			 SetTimerEx("TeleportPlayerFromTurf", 6000, false, "i", playerid);
		  }
		  else if(IsLawEnforcement(playerid))
		  {
            SendTurfAdminMessage(i, COLOR_LIGHTRED, "{007bff}[Turf Kills] "WHITE"%s has been Knocked inside the turf. Faction: Police | Killed By: %s", GetRPName(playerid), GetRPName(killerid));

            SetTimerEx("TeleportPlayerFromTurf", 6000, false, "i", playerid);
		  }

		  foreach(new f : Player)
		  {
             if(i > 0)
	         {
			      format(string, sizeof(string), "%s has killed by %s", GetRPName(playerid), GetRPName(killerid));
			      PlayerTextDrawSetString(f, TurfKnockTD[f][2], string);

			      PlayerTextDrawShow(f, TurfKnockTD[f][0]);
			      PlayerTextDrawShow(f, TurfKnockTD[f][1]);
			      PlayerTextDrawShow(f, TurfKnockTD[f][2]);
			      SetTimerEx("HideKnockTD", 5000, false, "i", f);
			   }
		  }
	   }
	}

	/*if(PlayerInfo[playerid][pBleed] > 0)
	{
		SendClientMessage(playerid, COLOR_RED, "You have died due to gun shot wounds.");
		KillTimer(PlayerInfo[playerid][pBleedTimer]);
		PlayerInfo[playerid][pBleedTimer] = -1;
		PlayerInfo[playerid][pBleed] = 0;
	}*/
	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}
//==================================//=========================================//
	meatjob[playerid] = 0;
	onmeat[playerid] = 0;
	meatstartjob[playerid] = 0;
	prinesmeat[playerid] = 0;
	countmeat[playerid] = 0;
	prinesmeatEx[playerid] = 0;
	countmeatEx[playerid] = 0;
	ExtraMeatall[playerid] = 0;

	inharvesterjob[playerid] = 0;
	onplant[playerid] = 0;
	startplant[playerid] = 0;
//==================================//=========================================//


	gTotalDeaths++;
	SaveServerInfo();
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(ExBJck[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
new string[2500];
    if(areaid == area_greenzone[0])
	{
       format(string, sizeof(string), "you have ~g~entered ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	else if(areaid == area_greenzone[1])
	{
       format(string, sizeof(string), "you have ~g~entered ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	else if(areaid == area_greenzone[2])
	{
       format(string, sizeof(string), "you have ~g~entered ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	else if(areaid == area_greenzone[3])
	{
       format(string, sizeof(string), "you have ~g~entered ~w~greenzone");
    PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
new string[2500];
	if(gettime() - PlayerInfo[playerid][pLastDeath] > 10 && (areaid == area_paintball[0] || areaid == area_paintball[1]))
	{
	    if(PlayerInfo[playerid][pPaintball] == 3 || PlayerInfo[playerid][pPaintball] == 4)
	    {
	    	SendClientMessage(playerid, COLOR_RED, "You were poisoned to death for leaving the arena. (Use /exit)");
	    	SetPlayerHealth(playerid, 0.0);
		}
	}
    else if(areaid == area_greenzone[0])
	{
       format(string, sizeof(string), "you have ~r~exited ~w~greenzone");
       PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	else if(areaid == area_greenzone[1])
	{
       format(string, sizeof(string), "you have ~r~exited ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
    else if(areaid == area_greenzone[2])
	{
       format(string, sizeof(string), "you have ~r~exited ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	else if(areaid == area_greenzone[3])
	{
       format(string, sizeof(string), "you have ~r~exited ~w~greenzone");
	   PlayerTextDrawSetString(playerid, WarningTD[playerid][4], string);
    ShowWarningTD(playerid);
	   SetTimerEx("HideWarningTD", 5000, false, "i", playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if((!ispassenger) && (PlayerInfo[playerid][pCuffed] || PlayerInfo[playerid][pTied] || PlayerInfo[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if(!ispassenger)
	{
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[8]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Trucker.");
	        ClearAnimations(playerid);
	    }
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        ClearAnimations(playerid);
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechanic.");
	        ClearAnimations(playerid);
	    }
	    if((policevehicles[0] <= vehicleid <= policevehicles[1]) && (FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_POLICE))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Police.");
	        ClearAnimations(playerid);
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        ClearAnimations(playerid);
	    }
	    if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        ClearAnimations(playerid);
	    }
	    if((NewsVehicles[0] <= vehicleid <= NewsVehicles[5]) && !PlayerHasJob(playerid, JOB_NEWS))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a News Paper.");
	        ClearAnimations(playerid);
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        ClearAnimations(playerid);
	    }
     	if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	}
	ExBJck[playerid] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(PlayerInfo[playerid][pCP])
	{
	    case CHECKPOINT_FOODPANDA:
	    {
			//new string[32], amount = ((8500 - PlayerInfo[playerid][pPizzaTime])), tip = 500 + random(50);

            if(gettime() - PlayerInfo[playerid][pLastPizza] < 15 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(SERVER_COLOR, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport foodpanda delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastPizza]);
				}
				else
				{
				    SMA(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Teleport foodpanda runs", GetRPName(playerid), SERVER_BOT);
				    Kick(playerid);
				}
		    }
		    
			if(PlayerInfo[playerid][pCarry] != 2)
				return SCM(playerid, SERVER_COLOR, "Grab the meal from the Wayfarer using "WHITE"'/graborder'"SVRCLR" before entering this checkpoint.");
	       	new string[128];

			new payment = 3000 + random(250);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * 2;
	            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);
	            GivePlayerCash(playerid, double_pay);
	        }
	        else
	        {
				GivePlayerCash(playerid, payment);
			}
			//GivePlayerCash(playerid, amount);
			//GivePlayerCash(playerid, tip);

			PlayerInfo[playerid][pCarrying] = false;
			PlayerInfo[playerid][pCarry] = 0;
			RemovePlayerAttachedObject(playerid, 1);
			
			PlayerInfo[playerid][pPizzas] = 0;
			PlayerInfo[playerid][pPizzaTime] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_FORKLIFTER:
		{
	        if (PlayerInfo[playerid][pJob] == JOB_FORKLIFTER)
		    {
		        switch (PlayerInfo[playerid][pJobStage])
				{
				    case 0:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
							PlayerInfo[playerid][pJobStage] = 1;
							PlayerInfo[playerid][pCP] = CHECKPOINT_FORKLIFTER;
				        	SendInfoMessage(playerid, "You have picked up the crate. Drive to the {FF0000}checkpoint{FFFFFF} for further instructions.");
		        			SetPlayerCheckpoint(playerid, 2783.6682, -2417.8679, 13.6347, 3.0);

					        VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, 0.6, 0.28, 0.0, 0.0, 0.0);
						}
					}
				    case 1:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
				            switch (random(2))
						    {
		    	                case 0: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
		    	                case 1: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
							}
							PlayerInfo[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		                    PlayerInfo[playerid][pJobStage] = 2;
							SendInfoMessage(playerid, "Stack the cargo on the shelf.");
						    RemovePlayerFromVehicle(playerid);
						    DestroyDynamicObject(VehicleObject[vehicleid]);
						    VehicleObject[vehicleid] = INVALID_OBJECT_ID;
						    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid, 5, 1220, 5, 0.184000, 0.330999, 0.112999, -84.099983, -9.500001, 20.700000);
						}
					}
					case 2:
					{
						/*new price = Random(1000, 5000);
						GivePlayerCash(playerid, price);
					    SendInfoMessage(playerid, "You have received {33CC33}$%i{FFFFFF}.", price);*/
					    new string[128];
      					new payment = 3000 + random(250);
				        if(DoubleSalary)
				        {
				            new double_pay = payment * 2;
				            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
				            SendClientMessageEx(playerid, COLOR_YELLOW, string);
				            GivePlayerCash(playerid, double_pay);
				        }
				        else
				        {
							GivePlayerCash(playerid, payment);
						}
						SendInfoMessage(playerid, "Get back in your vehicle if you'd like to start working again.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 5);
						PlayerInfo[playerid][pJobStage] = 0;
						PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerCheckpoint(playerid);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
			}
		}
		case CHECKPOINT_NEWS:
	    {
			new string[32], amount = ((500 - PlayerInfo[playerid][pPizzaTime])), payment = 250 + random(250);

            if(gettime() - PlayerInfo[playerid][pLastPizza] < 15 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport news paper delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastLazada]);
				}
				else
				{
				    SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: Teleport news paper runs", GetRPName(playerid), SERVER_BOT);
				    Kick(playerid);
				}
		    }

			format(string, sizeof(string), "~g~+$%i", amount);
			Dyuze(playerid, "Notice", string);

			GivePlayerCash(playerid, payment);

			PlayerInfo[playerid][pNews] = 0;
			PlayerInfo[playerid][pNewsTime] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SM(playerid, COLOR_WHITE, "You received $%i.", payment);
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_TEST:
	    {
	        PlayerInfo[playerid][pTestCP]++;

	        if(PlayerInfo[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[8]))
	            {
					SCM(playerid, COLOR_LIGHTRED, "** You failed the test as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

				    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		            PlayerInfo[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(PlayerInfo[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
					Dyuze(playerid, "Notice", "Failed.");
			        SCM(playerid, COLOR_LIGHTRED, "** You brought back the vehicle damaged and therefore failed your test.");
			    }
			    else
			    {
                   	Dyuze(playerid, "Notice", "Passed.");
			        SCM(playerid, COLOR_AQUA, "You successfully passed your drivers test and received your license!");

			        GivePlayerCash(playerid, -100);
			        PlayerInfo[playerid][pCarLicense] = 1;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

			    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	            PlayerInfo[playerid][pDrivingTest] = 0;
	        }
	    }
	    case CHECKPOINT_JEWROB:
        {
          DisablePlayerCheckpoint(playerid);
          RobberyInfo[jRobStarted] = 0;
	      RobberyInfo[jRobbing] = 0;
	      PlayerInfo[playerid][pJewRobbing] = 0;
	      RobberyInfo[jDoorLock] = 0;
	      RobberyInfo[rTime] = 1;
	      RobberyInfo[jPlanning] = 0;
	      RemoveFromJewelleryRobbery(playerid);
	      SMA(COLOR_LIGHTRED, "[Server] "WHITE"Jewellery Robbery Has Been Finished");
	      SMA(COLOR_LIGHTRED, "[System] "WHITE"Jewellery Is Going For CoolDown Of %i Hours", RobberyInfo[rTime]);
        }
	    case CHECKPOINT_MINING:
	    {
	        new cost, string[128];

	        if(PlayerInfo[playerid][pMiningRock] == 1)
			{
	            cost = 800 + random(500);
			}
			else if(PlayerInfo[playerid][pMiningRock] == 2)
			{
			    cost = 850 + random(650);
			}
			else if(PlayerInfo[playerid][pMiningRock] == 3) // Musgravite
			{
			    cost = 900 + random(800);
			}
			else if(PlayerInfo[playerid][pMiningRock] == 4) // Gold
			{
			    cost = 1000 + random(1000);
			}
			else if(PlayerInfo[playerid][pMiningRock] == 5) // Diamond
			{
			    new rock = random(100);
				switch(rock)
				{
				     case 0..40:
				    {
				        cost = 2500 + random(500);
                        SendClientMessage(playerid, COLOR_WHITE, "Bam, a great stone indeed, the fact you can find stuff in this dump makes me wonder whether theres a diamond hidden in there somewhere.");
					}
					case 41..70:
					{
					    cost = 3300 + random(200);
				        SendClientMessage(playerid, COLOR_WHITE, "Looks like a ruby, awesome. I'll be sending this Mining Enterprises immediately.");
				    }
				    case 71..100:
				    {
					    cost = 15000 + random(3000);
					    PlayerInfo[playerid][pDiamonds] ++;
						SCM(playerid, COLOR_WHITE, "BINGO!, It's a freakin' diamond, we're going to be damn rich!");
						SCM(playerid, COLOR_WHITE, "Boss: You know what? since you found it, you should get to keep it.");
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					}
				}
				PlayerInfo[playerid][pRareTime] = 1800;
				SendClientMessage(playerid, COLOR_GREY, "A cooldown for 30 minutes (of playtime) has been applied. Until then you can't find anymore rare stones.");
			}

			if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				cost += percent(cost, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    cost = cost*2;
			    SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
			}

			GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_AQUA, "You have earned $%i for your mined rock.", cost);
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			Dyuze(playerid, "Notice", string);

			PlayerInfo[playerid][pMiningRock] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_CONSTRUCTION:
	    {
	        new cost, string[128];

	        if(PlayerInfo[playerid][pConstruction] == 1)
			{
	            cost = 1000 + random(100);
			}
			else if(PlayerInfo[playerid][pConstruction] == 2)
			{
			    cost = 1000 + random(150);
			}
			else if(PlayerInfo[playerid][pConstruction] == 3) // Musgravite
			{
			    cost = 1000 + random(200);
			}
			else if(PlayerInfo[playerid][pConstruction] == 4) // Gold
			{
			    cost = 3000 + random(500);
			}
			else if(PlayerInfo[playerid][pConstruction] == 5) // Diamond
			{
			    cost = 5000 + random(100);
			}
			/*GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_AQUA, "You have earned $%i  for your mined rock.", cost);*/
			if(DoubleSalary)
			{
				new double_pay = cost * 2;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessage(playerid, COLOR_YELLOW, string);
				GivePlayerCash(playerid, double_pay);
				format(string, sizeof(string), "~g~+$%i", double_pay);
				Dyuze(playerid, "Notice", string);
			}
			else
			{
				format(string, sizeof(string), "  You have earned $%i.", cost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, cost);
			}
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			Dyuze(playerid, "Notice", string);

			PlayerInfo[playerid][pConstruction] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_BUTCHER:
	    {
	        new cost, string[128];

	        if(PlayerInfo[playerid][pPackagingMeat] == 1)
			{
	            cost = 1000 + random(100);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 2)
			{
			    cost = 1000 + random(100);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 3) // Musgravite
			{
			    cost = 2000 + random(100);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 4) // Gold
			{
			    cost = 3000 + random(100);
			}
			else if(PlayerInfo[playerid][pPackagingMeat] == 5) // Diamond
			{
			    cost = 10000 + random(170);
   				PlayerInfo[playerid][pRareTime] = 1800;
			}

			GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_WHITE, "You have earned $%i for your chopping meat.", cost);
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			Dyuze(playerid, "Notice", string);

			PlayerInfo[playerid][pPackagingMeat] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        if((PlayerInfo[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -1873.825439, 1417.714965, 7.176330)))
			{
			    if(gettime() - PlayerInfo[playerid][pSmuggleTime] < 20 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
			    {
			        PlayerInfo[playerid][pACWarns]++;

			        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pSmuggleTime]);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport matrun", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Teleport matrun");
					    Kick(playerid);
					}
			    }

                if(PlayerInfo[playerid][pMaterials] + 4000 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
	    			return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    if(PlayerInfo[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 75);
			    } else {
			        AddPointMoney(POINT_MATFACTORY2, 75);
			    }

			    if(PlayerInfo[playerid][pGang] >= 0)
			    {
			        GiveGangPoints(PlayerInfo[playerid][pGang], 1);
				}

				if(PlayerInfo[playerid][pSmuggleMats] == 1)
				{
			        AddPointMoney(POINT_MATFACTORY1, 75);
			        PlayerInfo[playerid][pMaterials] += 4000;
			    }
				else if (PlayerInfo[playerid][pSmuggleMats] == 2)
				{
			        AddPointMoney(POINT_MATFACTORY2, 75);
			        PlayerInfo[playerid][pMaterials] += 4000;
			    }
		    	PlayerInfo[playerid][pSmuggleMats] = 0;
		    	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			    SCM(playerid, COLOR_AQUA, "You have dropped off your load and collected 4000 materials from the depot.");
		    	DisablePlayerCheckpoint(playerid);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 750 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 75);
	        
			if(gDoubleSalary)
			{
			    amount = amount * 2;
			    SCM(playerid, COLOR_GREEN, "You have receive 2x of the salary.");
			}

			switch(PlayerInfo[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 52.4310, -293.6580, 1.6916))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore seeds.");
					}

					gSeedsStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of marijuana seeds.", amount);
				}
				case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 52.4310, -293.6580, 1.6916))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gCrackStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The crack house does not need anymore Crack.");
					}

					gCrackStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of Crack.", amount);
				}
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 52.4310, -293.6580, 1.6916))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gEphedrineStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore ephedrine.");
					}

					gEphedrineStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of raw ephedrine.", amount);
				}
			}

			if(gettime() - PlayerInfo[playerid][pSmuggleTime] < 30 && PlayerInfo[playerid][pAdmin] < 2)
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pSmuggleTime]);
				}
				else if(!PlayerInfo[playerid][pKicked])
				{
				    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport drug smuggling", GetRPName(playerid), SERVER_BOT);
				    //BanPlayer(playerid, SERVER_BOT, "Teleport drug smuggling");
				    Kick(playerid);
				}
		    }
		    else
		    {
		        if(PlayerInfo[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(PlayerInfo[playerid][pGang], 1);
				}
			}

			PlayerInfo[playerid][pSmuggleDrugs] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
			IncreaseJobSkill(playerid, JOB_DRUGDEALER);

	    	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    	{
	        	if(PlayerInfo[playerid][pSmugglerSkill] < 25) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 25 - PlayerInfo[playerid][pSmugglerSkill]);
	        	} else if(PlayerInfo[playerid][pSmugglerSkill] < 50) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 50 - PlayerInfo[playerid][pSmugglerSkill]);
	       		} else if(PlayerInfo[playerid][pSmugglerSkill] < 75) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 75 - PlayerInfo[playerid][pSmugglerSkill]);
            	} else if(PlayerInfo[playerid][pSmugglerSkill] < 100) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 100 - PlayerInfo[playerid][pSmugglerSkill]);
				}
			}
			else
			{
				//
			}
	    }
	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntX], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntY], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && PlayerInfo[playerid][pRobCash] > 0)
	        {
				if(PlayerInfo[playerid][pGang] >= 0)
				{
					GiveGangPoints(PlayerInfo[playerid][pGang], 50);
				}
				RobberyInfo[rStolen] += PlayerInfo[playerid][pRobCash];
				PlayerInfo[playerid][pDirtyCash] += PlayerInfo[playerid][pRobCash];
				gVault -= PlayerInfo[playerid][pRobCash];
				SaveServerInfo();

				SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the bank robbery.", PlayerInfo[playerid][pRobCash]);
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBankRobbery(playerid);
			}

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERYAIRPLANE:
	    {
          new rand = random(sizeof(AIRPLANEMONEY));
	      PlayerInfo[playerid][pDirtyCash] += AIRPLANEMONEY[rand];
          TogglePlayerControllable(playerid, 1);

          mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
          mysql_tquery(connectionID, queryBuffer);
	      SM(playerid, COLOR_AQUA, "You Have Successfully Robbed The Airplane vault");
          DisablePlayerCheckpoint(playerid);
	    }
        case CHECKPOINT_ROBBERYFLEECA:
	    {
	        if(IsPlayerInFleecaRobbery(playerid) && PlayerInfo[playerid][pRobCash] > 0)
	        {
				if(PlayerInfo[playerid][pGang] >= 0)
				{
					GiveGangPoints(PlayerInfo[playerid][pGang], 50);
				}
				PlayerInfo[playerid][pDirtyCash] += PlayerInfo[playerid][pRobCash];

				SM(playerid, COLOR_BLUE, "You have earned $%i dirty cash for successfully completing the Fleeca Robbery.", PlayerInfo[playerid][pRobCash]);
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromFleecaRobbery(playerid);
			}

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_ROBBERYBIZ:
	    {
			new businessid = PlayerInfo[playerid][pRobbingBiz];

			if(PlayerInfo[playerid][pGang] >= 0)
			{
				GiveGangPoints(PlayerInfo[playerid][pGang], 50);
			}

			PlayerInfo[playerid][pDirtyCash] += PlayerInfo[playerid][pRobCash];
			BusinessInfo[businessid][bCash] -= PlayerInfo[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the business robbery.", PlayerInfo[playerid][pRobCash]);

			BusinessInfo[businessid][bRobbed] = 3;
			BusinessInfo[businessid][bRobbing] = 0;
			ReloadBusiness(businessid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pRobCash] = 0;
			PlayerInfo[playerid][pRobbingBiz] = -1;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
   	    case CHECKPOINT_ROBBERYHOUSE:
	    {
			new houseid = PlayerInfo[playerid][pRobbingHouse];

			if(PlayerInfo[playerid][pGang] >= 0)
			{
				GiveGangPoints(PlayerInfo[playerid][pGang], 50);
			}

			PlayerInfo[playerid][pDirtyCash] += PlayerInfo[playerid][pRobCash];
			HouseInfo[houseid][hCash] -= PlayerInfo[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the house robbery.", PlayerInfo[playerid][pRobCash]);

			HouseInfo[houseid][hRobbed] = 3;
			HouseInfo[houseid][hRobbing] = 0;
			ReloadHouse(houseid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pRobCash] = 0;
			PlayerInfo[playerid][pRobbingHouse] = -1;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}

	    default:
	    {
	        PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}

	if(startplant[playerid] == 1)
	{
	    new string[256];
	    //PlayerInfo[playerid][pQPlant] = countplantEx[playerid];
	    //PlayerInfo[playerid][pPlant] = countplant[playerid];
	    DisablePlayerCheckpoint(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		ApplyAnimation(playerid, "KNIFE", "IDLE_tired", 4.0, 1, 0, 0, 0, 5000, 1);
		startplant[playerid] = 0;
	    RemovePlayerAttachedObject(playerid, 1);
	    SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
		if(ExtraPlants[playerid] == 1)
	    {
		    prinesplantEx[playerid] = 250+random(300);
        	countplantEx[playerid] = countplantEx[playerid] + prinesplantEx[playerid];
	    	format(string, 256, "You brought {9ACD32}%d{FFFFFF} lb(s) marijuana plant.", prinesplantEx[playerid]);
		    SendClientMessage(playerid, -1, string);
	  		format(string, 256, "+%d", prinesplantEx[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladplants += prinesplant[playerid];
	    	prinesplantEx[playerid] = 0;
	    }
	    else
	    {
	    	prinesplant[playerid] = 750+random(1000);
        	countplant[playerid] = countplant[playerid] + prinesplant[playerid];
        	format(string, 256, "You brought {FFA500}%d{FFFFFF} lb(s) flower plant", prinesplant[playerid]);
	    	SendClientMessage(playerid, -1, string);
	  		format(string, 256, "+%d", prinesplant[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladplants += prinesplant[playerid];
	    	prinesplant[playerid] = 0;
	    }
	    format(string, 256, "{FFFF00}Marijuana: {FFFFFF}%d", countplantEx[playerid]);
	    SendClientMessage(playerid, -1, string);
		return 1;
	}
	if(meatstartjob[playerid] == 1)
	{
	    new string[256];
	    DisablePlayerCheckpoint(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		meatstartjob[playerid] = 0;
	    RemovePlayerAttachedObject(playerid, 4);
	    SetPlayerAttachedObject(playerid, 3, 19583, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
        if(ExtraMeatall[playerid] == 1)
	    {
		    prinesmeatEx[playerid] = 250+random(300);
        	countmeatEx[playerid] = countmeatEx[playerid] + prinesmeatEx[playerid];
	    	format(string, 256, "You brought {9ACD32}%d{FFFFFF} kg(s) big meat.", prinesmeatEx[playerid]);
		    SendClientMessage(playerid, -1, string);
		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 1, 0);
	  		format(string, 256, "+%d", prinesmeatEx[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladmeatall += prinesmeat[playerid];
	    	prinesmeatEx[playerid] = 0;
	    }
	    else
	    {
	    	prinesmeat[playerid] = 300+random(400);
        	countmeat[playerid] = countmeat[playerid] + prinesmeat[playerid];
        	format(string, 256, "You brought {FFA500}%d{FFFFFF} kg(s) average meat.", prinesmeat[playerid]);
	    	SendClientMessage(playerid, -1, string);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 1, 0);
	  		format(string, 256, "+%d", prinesmeat[playerid]);
	  		SetPlayerChatBubble(playerid, string, 0x00FF00FF, 20.0, 3000);
	  		skladmeatall += prinesmeat[playerid];
	    	prinesmeat[playerid] = 0;
	    }
	    format(string, 256, "{FFA500}Average: {FFFFFF}%d kg(s)|| {FFFF00}Big: {FFFFFF}%d kg(s)", countmeat[playerid], countmeatEx[playerid]);
	    SendClientMessage(playerid, -1, string);
		return 1;
	}

	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GiveWeapon(playerid, 46);
	}

	return 1;
}

/*ProcessDamage(playerid, issuerid, weaponid, Float:amount, bool:fmj = false)
{
	new
		Float:health,
		Float:armour;

	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        armour -= amount;
		}
		else
		{
		    health -= amount - armour;
		    armour = 0;
	    }
	}
	else if(health > 0.0)
	{
	    if(health >= amount)
	    {
	        health -= amount;
		}
		else
		{
		    health = 0;
	    }
	}

	if((fmj) && health >= amount / 2)
	{
	    health -= amount / 2;
	}

	SetPlayerHealth(playerid, health < 0.0 ? 0.0 : health);
	SetPlayerArmour(playerid, armour < 0.0 ? 0.0 : armour);

	if(health <= 0.0)
	{
	    CallLocalFunction("OnPlayerDeath", "iii", playerid, issuerid, weaponid);
	}
}*/
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{

	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if((22 <= weapon <= 36) && !PlayerHasWeapon(issuerid, weapon, true) && PlayerInfo[issuerid][pAdmin] < 2 && !PlayerInfo[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));

			SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(issuerid), SERVER_BOT, string);
			//BanPlayer(issuerid, SERVER_BOT, string);
			Kick(playerid);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && PlayerInfo[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(PlayerInfo[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(PlayerInfo[playerid][pTazedTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been tazed.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
			    return 0;
			}

			PlayerInfo[playerid][pTazedTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			Dyuze(playerid, "Notice", "Tazed.");

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their tazer full of electricity at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been "SVRCLR"stunned{CCFFFF} with electricity by %s's tazer.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}
		/*if(IsABulletWeapon(weapon))
		{
			if(PlayerInfo[playerid][pBleed] < 1 && GetArmor(playerid) < 1) // Only bleed if player has no armour.
			{
				SM(playerid, SERVER_COLOR, "You have been wounded by %s bullet, You are now bleeding to death..", GetRPName(issuerid));
				SM(issuerid, COLOR_RED, "You have shot %s with a bullet.", GetRPName(playerid));
				PlayerInfo[playerid][pBleed] = 1;
				KillTimer(PlayerInfo[playerid][pBleedTimer]);
				PlayerInfo[playerid][pBleedTimer] = SetTimerEx("OnPlayerBleed", 3000, true, "d", playerid);
			}
		}*/
		if(gettime() - PlayerInfo[playerid][pLastUpdate] >= 3 && !PlayerInfo[playerid][pHurt])
		{
		    Dyuze(issuerid, "Notice", "The player is AFK!");
		    return 0;
		}
		if(PlayerInfo[issuerid][pFreezeTimer] != -1)
		{
		    PlayerInfo[issuerid][pFreezeTimer] = -1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 150.0, 1144.7922, 2620.3928, 1049.8481) && !IsLawEnforcement(issuerid))
		{
		    new Float:iPos[3];
		    Dyuze(issuerid, "Notice", "~r~Shooting ~w~inside the ~g~Casino ~w~is ~r~prohibited.");
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
      		PlayerInfo[issuerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", issuerid, iPos[0], iPos[1], iPos[2]);
    		TogglePlayerControllable(issuerid, false);

		    return 0;
  		}
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[issuerid][pAdminDuty])
		{
			PlayerInfo[playerid][pHurt] = 60;
		}
	}
	if(GetHealth(playerid) < 49.0 && !IsPlayerNPC(playerid) && !pBlood[playerid])
	{
    	ShowBlood(playerid, 2);
    	pBlood[playerid] = true;
    }
   	if(issuerid != INVALID_PLAYER_ID)
    {
		if(bodypart == 7 || bodypart == 8)
		{
			if(!PlayerInfo[playerid][pBrokenLeg])
			{
				ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);

				//SetPlayerSpecialTag(playerid, TAG_BROKEN_LEG);

				PlayerInfo[playerid][pBrokenLeg] = 1;

				SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s was shot in the leg, their leg is now broken.", GetRPName(playerid));
				SCMf(playerid, SERVER_COLOR, "You have been shot in the legs by %s.", GetRPName(issuerid));
				SCM(playerid, COLOR_RED, "You cannot sprint or jump while you have a broken leg.");
				SCM(playerid, COLOR_YELLOW, "Prevent from running or jumping as your health goes down.");
				SCMf(issuerid, COLOR_RED, "You have shot %s in the legs.", GetRPName(playerid));
			}
		}
    }
	return 1;
}

public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(issuerid))
		{
		    if(weapon == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
		    {
		        DamagePlayer(playerid, 300);
		        HandleContract(playerid, issuerid);
		    }
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", issuerid, weapon, BULLET_HIT_TYPE_PLAYER, playerid, GetPlayerNameEx(playerid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

public OnPlayerClickDynamicTextdraw(playerid, PlayerText: playertextid)
{
	//Bank
    if(playertextid == BankTD2[playerid][2])
	{
		HideBank1(playerid);
		ShowBank(playerid);
		SM(playerid, COLOR_GREEN, "Your Fingerprints has succesfully confirm. You Have now Access To Your Bank Account");
	}
	if(playertextid == BankTD1[playerid][9])
	{
        PlayerInfo[playerid][pBank] -= 10000;
        GivePlayerCash(playerid, 10000);
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);
        SM(playerid, COLOR_AQUA, "You have withdrawn $10000 from your account. Your new balance is $%i.", PlayerInfo[playerid][pBank]);
    }
    if(playertextid == BankTD1[playerid][11])
	{
        PlayerInfo[playerid][pBank] -= 50000;
        GivePlayerCash(playerid, 50000);
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);
        SM(playerid, COLOR_AQUA, "You have withdrawn $50000 from your account. Your new balance is $%i.", PlayerInfo[playerid][pBank]);
    }
	if(playertextid == BankTD1[playerid][13])
	{
        PlayerInfo[playerid][pBank] -= 100000;
        GivePlayerCash(playerid, 100000);
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);
        SM(playerid, COLOR_AQUA, "You have withdrawn $100000 from your account. Your new balance is $%i.", PlayerInfo[playerid][pBank]);
    }
	if(playertextid == BankTD1[playerid][19])
	{
        ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
    }
	if(playertextid == BankTD1[playerid][20])
	{
        ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
    }
	if(playertextid == BankTD1[playerid][21])
	{
        ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
    }
    if(playertextid == BankTD1[playerid][25])
	{
		HideBank(playerid);
		CancelSelectTextDraw(playerid);
	}
	//pr radio
    if(playertextid == PortableRadioTD[playerid][1])
    {
        ShowDialogToPlayer(playerid, DIALOG_WTRADIO);
    }
    if(playertextid == PortableRadioTD[playerid][4])
    {
		callcmd::disconnectptradio(playerid, "\1");
	}
	if(playertextid == PortableRadioTD[playerid][2])
	{
        PlayerTextDrawHide(playerid, PortableRadioTD[playerid][0]);
		PlayerTextDrawHide(playerid, PortableRadioTD[playerid][1]);
		PlayerTextDrawHide(playerid, PortableRadioTD[playerid][2]);
		PlayerTextDrawHide(playerid, PortableRadioTD[playerid][3]);
		PlayerTextDrawHide(playerid, PortableRadioTD[playerid][4]);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == RegistrationTD[playerid][2])
	{
        ShowDialogToPlayer(playerid, DIALOG_AGE);
	}
	if(playertextid == RegistrationTD[playerid][3])
	{
        ShowDialogToPlayer(playerid, DIALOG_GENDER);
	}
	if(playertextid == RegistrationTD[playerid][5])
	{
        ShowDialogToPlayer(playerid, DIALOG_SKIN);
	}
	if(playertextid == RegistrationTD[playerid][1])
	{
            if(PlayerInfo[playerid][pAge] > 0 && PlayerInfo[playerid][pGender] > 0)
            {
                PlayerInfo[playerid][pTutorial] = 1;
				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", playerid);
			}
			else
			{
				  SCM(playerid, COLOR_LIGHTRED, "[System]: "GREY"Specify gender & age to proceed");
			}
	}
	//PHONETD
    if(playertextid == HOMESCREENTD[playerid][29])
	{
        PlayerInfo[playerid][pMusicType] = MUSIC_MP3PLAYER;
		ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
    }
    if(playertextid == HOMESCREENTD[playerid][24])
	{
        ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
	}
	if(playertextid == HOMESCREENTD[playerid][49])
	{
        callcmd::ygaad7tawd(playerid, "\1");//selfie
    }
    if(playertextid == HOMESCREENTD[playerid][53])
	{
        ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
    }
    if(playertextid == HOMESCREENTD[playerid][19])
	{
        callcmd::brevive(playerid, "\1");
    }
    if(playertextid == HOMESCREENTD[playerid][14])
	{
	   ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call: \n Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi", "Call", "Cancel");
	}
    if(playertextid == HOMESCREENTD[playerid][61])
	{
		HideLock(playerid);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == HOMESCREENTD[playerid][30])
	{
        callcmd::locatephone(playerid, "\1");
	}
	if(playertextid == HOMESCREENTD[playerid][27])
	{
	    ShowPlayerDialog(playerid, DIALOG_INSTAGRAM, DIALOG_STYLE_INPUT, "Instagram", "What's on your mind?", "Post", "Back");
	}
	if(playertextid == HOMESCREENTD[playerid][28])
	{
	    ShowPlayerDialog(playerid, DIALOG_PHONEADVERTISE, DIALOG_STYLE_INPUT, "Phone Advertise", "Post Your Advertisemnet Here?", "Post", "Back");
	}
	if(playertextid == HOMESCREENTD[playerid][26])
	{
       SCM(playerid, COLOR_SYNTAX, "Feature Removed For Bug FIX (will be back by next update)");
	}
	if(playertextid == HOMESCREENTD[playerid][60])
	{
		HideLock(playerid);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == HOMESCREENTD[playerid][25])
	{
		ShowGpay(playerid);
		HideLock(playerid);
	}
	if(playertextid == playertextdraw_14[playerid])
	{
		HideGpay(playerid);
		HideLock(playerid);
		CancelSelectTextDraw(playerid);
	}
    if(playertextid == playertextdraw_16[playerid])
	{
		HideGpay(playerid);
		ShowLock(playerid);
	}
	if(playertextid == playertextdraw_33[playerid])
	{
        ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	}
	if(playertextid == HOMESCREENTD[playerid][73])
	{
        callcmd::settings(playerid, "\1");//settings
    }
   	// CLOTH SHOP
	if (playertextid == ClotheTD[playerid][5])
	{
		UpdateClotheSelection(playerid, PlayerInfo[playerid][pOutfit] - 1);
		PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
		UpdateClotheSetup(playerid);
	}
	if (playertextid == ClotheTD[playerid][4]) {
		UpdateClotheSelection(playerid, PlayerInfo[playerid][pOutfit] + 1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		UpdateClotheSetup(playerid);
	}
    if (playertextid == ClotheTD[playerid][3])
	{
	    new
			businessid = GetInsideBusiness(playerid);

	    if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	    {
	        if(BusinessInfo[businessid][bProducts] <= 0)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock.");
	        }
	        if(PlayerInfo[playerid][pDonator] == 0 && PlayerInfo[playerid][pCash] < 1000)
	        {
	   			for (new i = 0; i < 7; i ++) {
					PlayerTextDrawHide(playerid, ClotheTD[playerid][i]);
				}
		    	CancelSelectTextDraw(playerid);
	            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy new clothes.");
	        }
			if(PlayerInfo[playerid][pDonator] == 0)
			{
			    new price = BusinessInfo[businessid][bPrices][0];

				GivePlayerCash(playerid, -price);

				BusinessInfo[businessid][bCash] += price;
	        	BusinessInfo[businessid][bProducts]--;

	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	        	mysql_tquery(connectionID, queryBuffer);

	        	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), FormatNumber(price));
	     		SM(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_VIP, "VIP Perk: You changed your clothes free of charge.");
			}

			for (new i = 0; i < 7; i ++) {
				PlayerTextDrawHide(playerid, ClotheTD[playerid][i]);
			}
	    	//SetPlayerSkin(playerid, pData[playerid][pSkin]);
	    	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	    	SetScriptSkin(playerid, PlayerInfo[playerid][pSkin]);
	    	CancelSelectTextDraw(playerid);
	    }
	}
	if (playertextid == ClotheTD[playerid][6])
	{
		for (new i = 0; i < 7; i ++) {
			PlayerTextDrawHide(playerid, ClotheTD[playerid][i]);
		}
		CancelSelectTextDraw(playerid);

		SetPlayerSkin(playerid, PlayerInfo[playerid][pTempSkin]);
	}
    //VEHPANEL TD CODES
    if(playertextid == VehPanelTD[playerid][10])
    {
		  callcmd::hood(playerid, "");
	}
	if(playertextid == VehPanelTD[playerid][11])
    {
		  callcmd::trunk(playerid, "");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(playertextid == VehPanelTD[playerid][5])
    {
		  PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	if(playertextid == VehPanelTD[playerid][6])
    {
		  PutPlayerInVehicle(playerid, vehicleid, 1);
	}
	if(playertextid == VehPanelTD[playerid][8])
    {
		  PutPlayerInVehicle(playerid, vehicleid, 2);
	}
	if(playertextid == VehPanelTD[playerid][7])
    {
		  PutPlayerInVehicle(playerid, vehicleid, 3);
	}
	if(playertextid == VehPanelTD[playerid][2])
    {
		  callcmd::engine(playerid, "\1");
		  PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
	if(playertextid == VehPanelTD[playerid][9])
	{
        HideVehPanel(playerid);
	}
	//ATM TD CODES
	if(playertextid == AtmTD[playerid][3])
	{
        HideAtm(playerid);
        CancelSelectTextDraw(playerid);
	}
	if(playertextid == AtmTD[playerid][5])
	{
        ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
    }
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    Dyuze(RobberyInfo[rRobbers][i], "Notice", "~w~Heist started");
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

				if(!Maskara[playerid]) {
					PlayerInfo[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				}

				PlayerInfo[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SM(i, COLOR_ROYALBLUE, "HQ: A robbery is occurring at the Mulholland Bank. There are %i confirmed robbers.", GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
		DestroyDynamicObject(RobberyInfo[rObjects][0]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": A bank robbery is currently taking place at the Mulholland Bank!");

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 294.280609, 1375.421020, 2023.845947, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 293.808349, 1378.593383, 2023.845947, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 295.204132, 1379.825561, 2023.845947, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 298.176147, 1379.825317, 2023.845947, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("[Bank]\n/lootbox\nto loot deposit box.", COLOR_YELLOW, 299.551757, 1378.247680, 2023.845947, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}

	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			new string[32];
			format(string, sizeof(string), "%s", GetPlayerZoneName(playerid));
			PlayerTextDrawSetString(i, ShotsFired[playerid][4], string);
			SetTimerEx("HideShotTD", 5000, false, "i", i);
			ShowShotFireTD(i);
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if((1 <= EventInfo[eType] <= 2) && PlayerInfo[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	Dyuze(playerid, "Notice", "~r~Don't shoot until the event starts!");
			    return 0;
			}
			else if(EventInfo[eType] == 2 && PlayerInfo[hitid][pEventTeam] == PlayerInfo[playerid][pEventTeam])
			{
	            Dyuze(playerid, "Notice", "~r~Do not teamkill!");
			    return 0;
			}
		}
		if(PlayerInfo[playerid][pPaintball] == 2 && PlayerInfo[hitid][pPaintballTeam] == PlayerInfo[playerid][pPaintballTeam])
		{
            Dyuze(playerid, "Notice", "~r~Do not teamkill!");
		    return 0;
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
			Dyuze(playerid, "Notice", "~r~Don't shoot at newbies!");
		    return 0;
		}
	}

    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(PlayerInfo[playerid][pClip] > 0)
		{
		    new
				string[12];

		    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    PlayerInfo[playerid][pClip]--;

		    format(string, sizeof(string), "%i", PlayerInfo[playerid][pClip]);
		    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][5], string);
		}
	}


	if(!PlayerHasWeapon(playerid, weaponid, true) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked] && gettime() > PlayerInfo[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
		//BanPlayer(playerid, SERVER_BOT, string);
		Kick(playerid);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!PlayerInfo[hitid][pJoinedEvent] && !PlayerInfo[hitid][pPaintball] && PlayerInfo[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, PlayerInfo[hitid][pArmor]);
		}
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(PlayerInfo[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			PlayerInfo[playerid][pACFired]++;
			}

		    if(!PlayerInfo[playerid][pReloading] && PlayerInfo[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    		    {
					SAM(COLOR_YELLOW, "AdmWarning: %s was automatically kicked for infinite ammo.", GetRPName(playerid));
					//Log_Write("log_cheat", "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
					new szString[128];
					format(szString, sizeof(szString),   "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
					SendDiscordMessage(2, szString);
					KickPlayer(playerid);
				}
			}

			PlayerInfo[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}
	return 1;
}

public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
	    /*case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PurchaseFurniture(playerid, listitem + PlayerInfo[playerid][pFurnitureIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }*/
   	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
		            }
		            if(PlayerInfo[playerid][pVIPPackage] == 0 && PlayerInfo[playerid][pCash] < 50)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
	                }
					if((PlayerInfo[playerid][pVIPPackage] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_ARMY) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
					}

					if(PlayerInfo[playerid][pVIPPackage] == 0)
					{
					    new price = BusinessInfo[businessid][bPrices][0];

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
	                	BusinessInfo[businessid][bProducts]--;

	                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                	mysql_tquery(connectionID, queryBuffer);

	                	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), FormatNumber(price));
	             		SM(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
	                }
	                else
	                {
	                    SCM(playerid, COLOR_VIP, "VIP Perk: You changed your clothes free of charge.");
					}

					SetScriptSkin(playerid, modelid);
		        }
			}
	    }
   	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + PlayerInfo[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
	    }
	    case MODEL_SELECTION_LANDOBJECTS:
	    {
	        if(response)
	        {
	            new landid = GetNearbyLand(playerid);

		    	if(landid >= 0 && HasLandPerms(playerid, landid))
				{
					PurchaseLandObject(playerid, landid, listitem + PlayerInfo[playerid][pFurnitureIndex]);
				}
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	return 1;
}

stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK) return 1;
    if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32], animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(!strcmp(animlib, "PED"))
        {
			new const names[8][] = { "run_fat", "run_fatold", "run_old", "swat_run", "woman_run", "WOMAN_runbusy", "woman_runpanic", "WOMAN_runsexy" };
			for(new i; i < sizeof(names); i++)
			{
			    if(!strcmp(animname, names[i])) return 1;
			}
        }
    }
    return 0;
}

public OnPlayerUpdate(playerid)
{
	new ud, lr;
    if(PlayerInfo[playerid][pKicked]) return 0;
	if(!PlayerInfo[playerid][pLogged]) return 1;
	static id;
	new vehicled = GetPlayerVehicleID(playerid);
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleOwner(playerid, vehicled) && IsEngineVehicle(vehicled) && !PlayerInfo[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicled) && !IsABoat(vehicled) && !IsAPlane(vehicled) && !IsAHelicopter(vehicled))
	    {
	 		new price = 100 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);
			new str[500];
	   		format(str, sizeof(str), "Speeding (%.0f/%.0f mph)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));
    		format(str, sizeof(str), "You have received a %s speeding ticket.", FormatNumber(price));
     		Dyuze(playerid, "Notice", str);
			VehicleInfo[vehicled][vTickets] += price;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicled][vTickets], VehicleInfo[vehicled][vID]);
			mysql_tquery(connectionID, queryBuffer);
			PlayerInfo[playerid][pSpeedTime] = 5;
		}
	}
	if(PlayerInfo[playerid][pBrokenLeg] && IsPlayerRunning(playerid)) {
		ApplyAnimation(playerid, "ped", "FALL_collapse",4.1,0,1,1,0,0);
		if((gettime() - PlayerInfo[playerid][pLastDamage]) < 3) {
			SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
			PlayerInfo[playerid][pLastDamage] = gettime();
		}
	}
	new keys, string[128];
	GetPlayerKeys(playerid, keys, ud, lr);
	if(PlayerInfo[playerid][pHospital] && GetPlayerAnimationIndex(playerid) != 385) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
	if(GetPlayerMoney(playerid) != PlayerInfo[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
	}
		new turfid = GetNearbyTurf(playerid);
		if(turfid == InfluenceInfo[iTurf] && PlayerInfo[playerid][pAdminDuty] == 0)
		{
			  if(PlayerInfo[playerid][pGang] == InfluenceInfo[iAttGang])
			  {
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                   new gangid = InfluenceInfo[iAttGang];
                       InfluenceInfo[iAttGangMembers]++;
                       PlayerInfo[playerid][pInfluenced] = 1;

					   if(PlayerInfo[playerid][pBandana] == 0)
			           {
			                format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", GangInfo[gangid][gColor] >>> 8, GangInfo[gangid][gName],GangRanks[gangid][PlayerInfo[playerid][pGangRank]]);
			                UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
			                PlayerInfo[playerid][pBandana] = 1;
			                SendClientMessage(playerid, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
			           }
				   }
			  }
			  else if(InfluenceInfo[iAttGang] == -1)
              {
    			if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iAttGangMembers]++;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }

			  if(PlayerInfo[playerid][pGang] == InfluenceInfo[iDefGang])
			  {
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iDefGangMembers]++;
                       PlayerInfo[playerid][pInfluenced] = 1;
                       new gangid = InfluenceInfo[iDefGang];

					   if(PlayerInfo[playerid][pBandana] == 0)
			           {
			                format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", GangInfo[gangid][gColor] >>> 8, GangInfo[gangid][gName],GangRanks[gangid][PlayerInfo[playerid][pGangRank]]);
			                UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
			                PlayerInfo[playerid][pBandana] = 1;
			                SendClientMessage(playerid, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
			           }
				   }
			  }
              else if(InfluenceInfo[iDefGang] == -1)
              {
    			if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iDefGangMembers]++;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }
		}
 	    else
		{
            if(PlayerInfo[playerid][pGang] == InfluenceInfo[iAttGang])
            {
			     if(PlayerInfo[playerid][pInfluenced] == 1)
			     {
                      InfluenceInfo[iAttGangMembers]--;
                      PlayerInfo[playerid][pInfluenced] = 0;
			     }
		    }
		    else if(InfluenceInfo[iAttGang] == -1)
              {
    			if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iAttGangMembers]--;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }

            if(PlayerInfo[playerid][pGang] == InfluenceInfo[iDefGang])
		    {
                 if(PlayerInfo[playerid][pInfluenced] == 1)
			     {
                      InfluenceInfo[iDefGangMembers]--;
                      PlayerInfo[playerid][pInfluenced] = 0;
			     }
			}
			else if(InfluenceInfo[iDefGang] == -1)
              {
    			if(IsLawEnforcement(playerid))
              	{
                   if(PlayerInfo[playerid][pInfluenced] == 0)
                   {
                       InfluenceInfo[iDefGangMembers]--;
                       PlayerInfo[playerid][pInfluenced] = 1;
                   }
              	}
			  }
	}
	if(GetPlayerScore(playerid) != PlayerInfo[playerid][pLevel])
	{
	    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	}
	/*if(GetPlayerWantedLevel(playerid) != PlayerInfo[playerid][pWantedLevel])
	{
	    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	}*/
	if((GetPlayerAnimationIndex(playerid) != 1209) && ((PlayerInfo[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (PlayerInfo[playerid][pTazedTime] > 0 && PlayerInfo[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
	{
	    ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);
	}
	if(GetPlayerWeapon(playerid) > 1 && PlayerInfo[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}
	if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:vx,
	        Float:vy,
	        Float:vz,
	        Float:cx,
	        Float:cy,
	        Float:cz;

	    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
		        {
		            gFireHealth[i] = gFireHealth[i] - 1.0;

		            if(gFireHealth[i] <= 0.0)
		            {
		                PlayerInfo[playerid][pTotalFires]++;
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);
			            Dyuze(playerid, "Notice", "~r~Fire extinguished");

			            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
						DestroyDynamicObject(gFireObjects[i]);

						gFireObjects[i] = INVALID_OBJECT_ID;
						gFireHealth[i] = 0.0;
					}
		        }
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
		{
		    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
		    GetPlayerCameraPos(playerid, cx, cy, cz);

		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
		        {
		            GetDynamicObjectPos(gFireObjects[i], x, y, z);

					if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
	   				{
	   				    gFireHealth[i] = gFireHealth[i] - 0.5;

	   				    if(gFireHealth[i] <= 0.0)
		            	{
		   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
		   			    	Dyuze(playerid, "Notice", "~r~Fire extinguished");

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
					}
			  	}
		    }
		}

		if(!IsFireActive())
		{
		    new amount = 250;
		    foreach(new i : Player)
		    {
		        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
		        {
		            if(PlayerInfo[i][pLaborUpgrade] > 0)
					{
						amount += percent(amount, PlayerInfo[i][pLaborUpgrade]);
					}
					if(gDoubleSalary)
					{
					    amount = amount*2;
					    SCM(i, COLOR_GREEN, "You have earned 2x of the salary.");
					}
		            SM(i, COLOR_AQUA, "Well done! You helped put out the fire and received $%i.", amount);
					GivePlayerCash(i, amount);
		        }
			}
			gFires = 0;
		}
	}

	if(PlayerInfo[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    PlayerInfo[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    PlayerInfo[playerid][pACAmmo] = PlayerInfo[playerid][pCurrentAmmo];
	    PlayerInfo[playerid][pACFired] = 0;
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2)
		{
			if(PlayerInfo[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, PlayerInfo[playerid][pCurrentWeapon], true) && !PlayerInfo[playerid][pKicked])
			{
			    PlayerInfo[playerid][pACWarns]++;

			    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));
				    new szString[128];
					format(szString, sizeof(szString),   "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
					SendDiscordMessage(2, szString);
					//Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));

					SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
					//BanPlayer(playerid, SERVER_BOT, string);
					Kick(playerid);
				}
			}
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]) > 0 && !PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws] && PlayerInfo[playerid][pAmmoWeapon] != PlayerInfo[playerid][pCurrentWeapon])
    {
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	}

	if(PlayerInfo[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(PlayerInfo[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        PlayerInfo[playerid][pClip] -= PlayerInfo[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(PlayerInfo[playerid][pClip] < 0)
      		{
       			PlayerInfo[playerid][pClip] = 0;
			}
		}

	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerInfo[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
		{
		    if((22 <= PlayerInfo[playerid][pCurrentWeapon] <= 34) && PlayerInfo[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerInfo[playerid][pAmmoWeapon] == PlayerInfo[playerid][pCurrentWeapon] && 0 <= PlayerInfo[playerid][pCurrentAmmo] <= 320)
		    {
		        // Ammo hack detection.
		        if(PlayerInfo[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerHasWeapon(playerid, PlayerInfo[playerid][pAmmoWeapon]))
				{
				    new weapon, ammo;

				    GetPlayerWeaponData(playerid, weaponSlotIDs[PlayerInfo[playerid][pAmmoWeapon]], weapon, ammo);

				    if((ammo > 0) && (PlayerInfo[playerid][pAmmoType] == AMMOTYPE_HP && ammo > PlayerInfo[playerid][pHPAmmo]) || (PlayerInfo[playerid][pAmmoType] == AMMOTYPE_POISON && ammo > PlayerInfo[playerid][pPoisonAmmo]) || (PlayerInfo[playerid][pAmmoType] == AMMOTYPE_FMJ && ammo > PlayerInfo[playerid][pFMJAmmo]))
				    {
				        new oldammo;

				        if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_HP) {
				            oldammo = PlayerInfo[playerid][pHPAmmo];
				        } else if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_POISON) {
				            oldammo = PlayerInfo[playerid][pPoisonAmmo];
				        } else if(PlayerInfo[playerid][pAmmoType] == AMMOTYPE_FMJ) {
				            oldammo = PlayerInfo[playerid][pFMJAmmo];
				        }

						if(gAnticheat && !PlayerInfo[playerid][pKicked])
						{
					        PlayerInfo[playerid][pACWarns]++;

						    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
						    {
						        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] may be hacking ammo. (old: %i, new: %i)", GetRPName(playerid), playerid, oldammo, ammo);
						        new szString[128];
								format(szString, sizeof(szString),   "%s (uid: %i) possibly hacked ammo. (old: %i, new: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], oldammo, ammo);
								SendDiscordMessage(2, szString);
								//Log_Write("log_cheat", "%s (uid: %i) possibly hacked ammo. (old: %i, new: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], oldammo, ammo);
							}
							else
							{
						    	SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Ammo hacking", GetRPName(playerid), SERVER_BOT);
						    	//BanPlayer(playerid, SERVER_BOT, "Ammo hacking");
						    	Kick(playerid);
							}

							PlayerInfo[playerid][pCurrentAmmo] = oldammo;
					        SetPlayerAmmo(playerid, PlayerInfo[playerid][pAmmoWeapon], oldammo);
						}
				    }
				}

		        if(PlayerInfo[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            new weaponid;
			            GetPlayerWeaponData(playerid, weaponSlotIDs[PlayerInfo[playerid][pCurrentWeapon]], weaponid, PlayerInfo[playerid][pCurrentAmmo]);
			        }

			        switch(PlayerInfo[playerid][pAmmoType])
			        {
			            case AMMOTYPE_HP:
   	           				PlayerInfo[playerid][pHPAmmo] = PlayerInfo[playerid][pCurrentAmmo];
		        	    case AMMOTYPE_POISON:
		                	PlayerInfo[playerid][pPoisonAmmo] = PlayerInfo[playerid][pCurrentAmmo];
						case AMMOTYPE_FMJ:
					    	PlayerInfo[playerid][pFMJAmmo] = PlayerInfo[playerid][pCurrentAmmo];
		        	}
		        }

		        if(PlayerInfo[playerid][pCurrentAmmo] == 0 && PlayerInfo[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
		            PlayerInfo[playerid][pAmmoType] = AMMOTYPE_NORMAL;
				    PlayerInfo[playerid][pAmmoWeapon] = 0;

		        	SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));
		        	SetPlayerWeapons(playerid);
				}
			}
		}
	}
	if(onplant[playerid] && !startplant[playerid] && !IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, -312.12, -1356.69,9.03)
		|| IsPlayerInRangeOfPoint(playerid, 1, -313.70, -1358.28,9.18)
		|| IsPlayerInRangeOfPoint(playerid, 1, -313.67, -1355.63,9.09))
		{
  			ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
	    	GameTextForPlayer(playerid,"~w~Harvesting..",5000,6);
	    	ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
      		startplant[playerid] = true;
			SetTimerEx("TimerGiveHarvester", 5000, false, "i", playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 5, -992.3234,-1607.9264,76.3672)
		|| IsPlayerInRangeOfPoint(playerid, 5, -991.8456,-1622.5966,76.3672)
		|| IsPlayerInRangeOfPoint(playerid, 5, -990.8137,-1635.1368,76.3672))
		{
			ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
			GameTextForPlayer(playerid,"~w~Harvesting..",5000,6);
			ApplyAnimation(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
 			startplant[playerid] = true;
			SetTimerEx("TimerGiveHarvesterEx", 5000, false, "i", playerid);
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerInfo[playerid][pReloading] = 1;
		}

	    PlayerInfo[playerid][pACFired] = 0;
	}

	if(PlayerInfo[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerInfo[playerid][pReloading] = 0;
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	// Armor hacking
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    // TODO: rewrite.
	}

	new Float:CarHealth[MAX_PLAYERS];
	if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}

	if(!PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][4], string);

		if(PlayerInfo[playerid][pReloading]) {
		    string = "0";
		} else {
			format(string, sizeof(string), "%i", PlayerInfo[playerid][pClip]);
		}
		PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][5], string);
	}
	PlayerInfo[playerid][pLastUpdate] = gettime();

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Illegal modding", GetRPName(playerid), SERVER_BOT);
	    //BanPlayer(playerid, SERVER_BOT, "Illegal modding");
	    Kick(playerid);
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}
	vehicleStream[vehicleid][0] = 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pKicked])
	{
		if(PlayerInfo[playerid][pHospital])
	    {
	        SCM(playerid, COLOR_LIGHTRED, "** You are currently in the hospital. Chatting is disabled.");
	        return 0;
		}
		/*if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
		{
		    PlayerInfo[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected spamming.");
		    return 0;
		}*/
		if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
		{
		    PlayerInfo[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected spamming.");
		    return 0;
		}
		if(PlayerInfo[playerid][pAdmin] < 7 && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SAM(COLOR_YELLOW, string, 2);
			//Log_Write("logs/hack.log", string);
        	if(++PlayerInfo[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Server advertisement", GetRPName(playerid), SERVER_BOT);
	    		//BanPlayer(playerid, SERVER_BOT, "Server advertisement");
				Kick(playerid);
        	}
			return 0;
		}
     	if(Maskara[playerid])
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "Stranger(B%d): %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
        	return 0;
    	}
	   	if(GetPlayerState(playerid) == 1 && PlayerInfo[playerid][pChatAnim])
		{
			new lengthTime = strlen(text);
			new animTime = lengthTime*200;

			ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, animTime);
		}
	    if(PlayerInfo[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(PlayerInfo[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2)
           	     	{
    	            	SM(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetRPName(playerid), text);
					}
					else
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(PlayerInfo[playerid][pCallLine] != playerid && PlayerInfo[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
		                SM(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "(cellphone) %s: %s", GetRPName(playerid), text);
					}
					else
					{
					    SM(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "(%s) (cellphone) %s: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
					}
		        }

		        if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
		        {
					format(string, sizeof(string), "(cellphone) %s: %s", GetRPName(playerid), text);
				}
				else
				{
				    format(string, sizeof(string), "(%s) (cellphone) %s: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
				}

				SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

				if(PlayerInfo[playerid][pCallLine] == playerid)
				{
				    switch(PlayerInfo[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "police", true))
					        {
					            SCM(playerid, COLOR_DISPATCH, "This is the Los Santos Police Department. What is your emergency?");
					        	PlayerInfo[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "medic", true))
					        {
					            SCM(playerid, COLOR_DISPATCH, "This is the Los Santos Fire & Medical Department. What is your emergency?");
					        	PlayerInfo[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SCM(playerid, COLOR_DISPATCH, "Sorry? I don't know what you mean... Enter 'police' or 'medic'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(PlayerInfo[playerid][pEmergency], text, 128);

                            PlayerInfo[playerid][pEmergencyCall] = 120;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_POLICE;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_FEDERAL;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_ARMY;

						    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SM(i, COLOR_DOCTOR, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(PlayerInfo[playerid][pEmergency], text, 128);

						    PlayerInfo[playerid][pEmergencyCall] = 120;
						    PlayerInfo[playerid][pEmergencyType] = FACTION_MEDIC;

						    SCM(playerid, COLOR_DISPATCH, "All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SM(i, SERVER_COLOR, "News Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Message: %s", text);
						        }
						    }

						    SCM(playerid, SERVER_COLOR, "News Team: Thank you. We will get back to you shortly!");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6324:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MECHANIC)
						        {
						            SM(i, COLOR_DOCTOR, "Mechanic Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Message: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(PlayerInfo[playerid][pEmergency], text, 128);

						    PlayerInfo[playerid][pEmergencyCall] = 120;
						    PlayerInfo[playerid][pEmergencyType] = FACTION_MECHANIC;

						    SCM(playerid, COLOR_DISPATCH, "Thank you. We will alert all mechanics on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SM(i, SERVER_COLOR, "Taxi Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }

							PlayerInfo[playerid][pTaxiCall] = 60;
						    SCM(playerid, COLOR_DISPATCH, "Thank you. We will alert all taxi drivers on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!PlayerInfo[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
  					  	{
		    			    SM(i, 0x489348FF, "Live Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
    						SM(i, 0x489348FF, "Live Guest %s: %s", GetRPName(playerid), text);
						}
					}
				}

				//SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
			else
			{
			    if(PlayerInfo[playerid][pHelper] > 0 && PlayerInfo[playerid][pAcceptedHelp])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(IsPlayerInAnyVehicle(playerid) && CarWindows[GetPlayerVehicleID(playerid)])
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			            {
        			        if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
        			        {
        						SM(i, COLOR_GREY1, "(windows) %s says: %s", GetRPName(playerid), text);
        					}
        					else
        					{
        					    SM(i, COLOR_GREY1, "(windows) (%s) %s says: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
        					}
			            }
			        }
			    }
			    else
			    {
			        new string2[144];
				    if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
						format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
						format(string2, sizeof(string2), "says: %s", text);
					}
					else
					{
					    format(string, sizeof(string), "(%s) %s says: %s", PlayerInfo[playerid][pAccent], GetRPName(playerid), text);
					    format(string2, sizeof(string2), "says: %s", text);
					}

					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     				SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
     				
     				new szstring[2500];
	                format(szstring, sizeof(szstring), "**%s:** %s.", GetRPName(playerid), text);
	                DCC_SendChannelMessage(DCC_FindChannelById(CHATLOG), szstring);
				}
			}
		}
	}
    PlayerInfo[playerid][pAFKPos][0] = 0.0;
    PlayerInfo[playerid][pAFKPos][1] = 0.0;
    PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(PlayerInfo[playerid][pKicked]) return 0;

	if(!PlayerInfo[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(PlayerInfo[playerid][pMuted])
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Commands are disabled.");
        return 0;
	}
	/*if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
	{
	    PlayerInfo[playerid][pMuted] = 10;
	    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected flooding.");
	    return 0;
	}*/
	if(PlayerInfo[playerid][pAdmin] < 7 && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SAM(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
        PlayerInfo[playerid][pAdvertWarnings] ++;
		return 0;
	}

	PlayerInfo[playerid][pAFKPos][0] = 0.0;
    PlayerInfo[playerid][pAFKPos][1] = 0.0;
    PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 1;
}

forward UnknownCMD(playerid);
public UnknownCMD(playerid)
{
	for(new i = 0; i < 4; i ++)
	{
		TextDrawHideForPlayer(playerid, UnknownTD[i]);
	}
    return 1;
}

ShowShotFireTD(playerid)
{
   PlayerTextDrawShow(playerid, ShotsFired[playerid][0]);
   PlayerTextDrawShow(playerid, ShotsFired[playerid][1]);
   PlayerTextDrawShow(playerid, ShotsFired[playerid][2]);
   PlayerTextDrawShow(playerid, ShotsFired[playerid][3]);
   PlayerTextDrawShow(playerid, ShotsFired[playerid][4]);
   return 1;
}

HideShotTD1(playerid)
{
   PlayerTextDrawHide(playerid, ShotsFired[playerid][0]);
   PlayerTextDrawHide(playerid, ShotsFired[playerid][1]);
   PlayerTextDrawHide(playerid, ShotsFired[playerid][2]);
   PlayerTextDrawHide(playerid, ShotsFired[playerid][3]);
   PlayerTextDrawHide(playerid, ShotsFired[playerid][4]);
   return 1;
}

forward HideShotTD(playerid);
public HideShotTD(playerid)
{
	foreach(new i : Player)
	{
		HideShotTD1(i);
	}
   	return 1;
}

/*forward CasCadeTDCC();
public CasCadeTDCC()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        TextDrawHideForPlayer(i,CasCadeTD[0]);
        TextDrawShowForPlayer(i,CasCadeTD[1]);
    }
}

forward CasCadeTDAA();
public CasCadeTDAA()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        TextDrawHideForPlayer(i,CasCadeTD[1]);
        TextDrawShowForPlayer(i,CasCadeTD[0]);
    }
}*/
forward HideWarningTD(playerid);
public HideWarningTD(playerid)
{
 HideWarning(playerid);
   	return 1;
}

forward DEATHACTOR(playerid);
public DEATHACTOR(playerid)
{
	if(IsValidActor(PlayerInfo[playerid][pDeathActor]))
		DestroyActor(PlayerInfo[playerid][pDeathActor]);
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pDeathInfo]))
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pDeathInfo]);
    return 1;
}

forward ANNHIDE(playerid);
public ANNHIDE(playerid)
{
	for(new i = 0; i < 3; i ++)
	{
		TextDrawHideForPlayer(playerid, ANN[i]);
	}
    return 1;
}

forward ANNOUNCEHIDE(playerid);
public ANNOUNCEHIDE(playerid)
{
	for(new i = 0; i < 9; i ++)
	{
		TextDrawHideForPlayer(playerid, AnnounceTD[i]);
	}
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		for(new i = 0; i < 4; i ++)
		{
			TextDrawShowForPlayer(playerid, UnknownTD[i]);
		}
	  	SetTimerEx("UnknownCMD", 5000, false, "i", playerid);
	 	PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	} else {
		printf("[cmd] %s: [%s]", GetRPName(playerid), cmd);
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_NO)
	{
		for(new i = 0; i < sizeof(jobLocations); i ++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
		    {
		    	if(PlayerInfo[playerid][pNationalID] <= 0)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have a national id to get a job.");
				}
		        if(PlayerInfo[playerid][pJob] != JOB_NONE)
		        {
		            if(PlayerInfo[playerid][pVIPPackage] >= 1)
		        	{
		        	    if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
		        	    {
		        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
		        	    }
		        	    if(PlayerInfo[playerid][pJob] == i)
		        	    {
		        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
		        	    }

		        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						PlayerInfo[playerid][pSecondJob] = i;
						SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
		            }
		            else
		            {
		            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
					}

					return 1;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				PlayerInfo[playerid][pJob] = i;
				PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
				SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
				return 1;
			}
		}
	}
	if(newkeys & KEY_NO)
	{
       if(GetNearbyVen(playerid) >= 0)
	   {
       ShowPlayerDialog(playerid, DIALOG_STREETFOOD, DIALOG_STYLE_LIST, ""SVRCLR"Street Food"WHITE"", "Chai (25 RS)\nCola (50 RS)\nCigar (100 RS)\nBonda (18 RS)\nVada (80 RS)\nBajji (65 RS)", "Select", "Cancel");
     	return 1;
	   }
	}
	if(newkeys & KEY_NO)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, -201.5379, -1741.0367, 675.7687)) // BH
        {
        	ShowPlayerDialog(playerid, DIALOG_BLACKHOSPITAL, DIALOG_STYLE_LIST, "Black Hospital", "Checkin (15,000)", "Select", "Cancel");
		}
	}
	if(newkeys & KEY_NO && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
		   callcmd::podanjanuyir(playerid, "\1");
           PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetNearbyPG(playerid) >= 0)
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
			return 1;
		}
	}
 	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(GetNearbyPG(playerid) >= 0)
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
			return 1;
		}
	}
    if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1135.550903, -1338.575073, 13.742506))
        {
            if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MEDIC))
            {
               return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	         }
             ShowPlayerDialog(playerid, DIALOG_MEDIC, DIALOG_STYLE_LIST, "EMS VEHICLES", "Ambulance\nMedic Ranger", "Select", "Close");
        }
	}
	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1589.947875, -1622.7648892, 13.382812))
        {
             if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_POLICE))
             {
                 return SCM(playerid, COLOR_SYNTAX, "You are not apart of police department at the moment.");
	          }
              ShowPlayerDialog(playerid, DIALOG_LSPD, DIALOG_STYLE_LIST, "LSPD VEHICLES", "LSPD Car\nPolice Ranger", "Select", "Close");
        }
	}
	if(newkeys & KEY_NO)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, -2039.2168, -123.6363, -50.9141))
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
		}
	}
	if(newkeys & KEY_CTRL_BACK && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
           callcmd::phone(playerid, "\1");
           PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
           return 1;
	}
    if(newkeys & KEY_YES)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
    		if(IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
    		{
				switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
				{
				    case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_TERRORIST, FACTION_ARMY:
				    {
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
					}
					case FACTION_GOVERNMENT, FACTION_NEWS, FACTION_MECHANIC, FACTION_CARDEALER:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
					}
					case FACTION_BURGER:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nUniforms", "Select", "Cancel");
					}
					case FACTION_HITMAN:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
					}
				}
			}
		}
	}
    if(newkeys == KEY_NO)
	{
	    if(onmeat[playerid] == 1 && meatstartjob[playerid] == 0 && !IsPlayerInAnyVehicle(playerid))
		{
				if(IsPlayerInRangeOfPoint(playerid, 1, -20.4854, 1574.7264, 12.7500)
				|| IsPlayerInRangeOfPoint(playerid, 1, -16.1826, 1575.7219, 12.7500)
				|| IsPlayerInRangeOfPoint(playerid, 1, -9.6513, 1574.4042, 12.7500)
				|| IsPlayerInRangeOfPoint(playerid, 1, -3.8314, 1573.5138, 12.7500))
				{
				    ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
					GameTextForPlayer(playerid,"~w~Chopping..",10000,6);
					ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
			        meatstartjob[playerid] = 1;
					SetTimerEx("TimerGiveMeat", 10000, false, "i", playerid);
				    return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 1, 0.9510,1571.9641,19.6841)
				|| IsPlayerInRangeOfPoint(playerid, 1, -0.3898,1564.7903,19.6841)
				|| IsPlayerInRangeOfPoint(playerid, 1, -1.7840,1557.8475,19.6841)
				|| IsPlayerInRangeOfPoint(playerid, 1, -3.0651,1551.0083,19.6841))
				{
				    ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
		            GameTextForPlayer(playerid,"~w~Chopping..",20000,6);
		            ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
			        meatstartjob[playerid] = 1;
					SetTimerEx("TimerGiveMeatEx", 20000, false, "i", playerid);
				    return 1;
				}
		}
	}
	if(newkeys == KEY_NO)
	{
	    if(PlayerHasJob(playerid, JOB_CONSTRUCTION))
	        {
	        if(IsPlayerInConstructionArea(playerid))
	        {
	        if(PlayerInfo[playerid][pConstructionTime] > 0)
	        {
		        return SCM(playerid, COLOR_SYNTAX, "Wait until you are done.");
	        }
	        if(PlayerInfo[playerid][pConstruction] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	        {
		        return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	        }

	        ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	        DisablePlayerCheckpoint(playerid);
		    SetPlayerAttachedObject(playerid, 9, 19631, 6);

		    PlayerInfo[playerid][pConstructionTime] = 6;
		   }
		}
	}
	if(newkeys & KEY_CTRL_BACK)
	{
	    if(PlayerInfo[playerid][pLoopAnim])
	    {
	        PlayerInfo[playerid][pLoopAnim] = 0;

		    ClearAnimations(playerid);
			StopLoopingAnim(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	}
 	if(PlayerInfo[playerid][pBrokenLeg] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		{
			ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

			if((gettime() - PlayerInfo[playerid][pLastDamage]) < 3) {
				SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
				PlayerInfo[playerid][pLastDamage] = gettime();
			}
		}
	}
 	if((gettime() - PlayerInfo[playerid][pLastPress]) >= 1)
	{
		if(newkeys & KEY_YES)
		{
			if(!EnterCheck(playerid)) ExitCheck(playerid);

			new id = Gate_Nearest(playerid);
			if (id != -1)
			{
				if (strlen(GateData[id][gatePass]))
				{
					ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
				}
				else
				{
					if (GateData[id][gateFaction] != -1 && PlayerInfo[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
						return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

					Gate_Operate(id);

					switch (GateData[id][gateOpened])
					{
						case 0:
							SCM(playerid, COLOR_SYNTAX, "You have closed the gate/door!");

						case 1:
							SCM(playerid, COLOR_SYNTAX, "You have opened the gate/door!");
					}
				}
			}
			PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
		else if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
		  	callcmd::vehpanel(playerid, "\1");
			PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		callcmd::lights(playerid, "\1");
		PlayerInfo[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
   	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
			PollY++;
			PollVoted[playerid] = 1;
			SCM(playerid, COLOR_SYNTAX, "You Have Voted Yes.");
		}
	    if(newkeys == KEY_NO)
	    {
			PollN++;
			PollVoted[playerid] = 1;
			SCM(playerid, SERVER_COLOR, "** "WHITE" You Have Voted No.");
	    }
	}
	if(newkeys & KEY_NO)
	{
		if(PlayerHasJob(playerid, JOB_BUTCHER))
		    {
		        if(IsPlayerInButcherArea(playerid))
		        {
		        if(PlayerInfo[playerid][pPackageTime] > 0)
		        {
		            return SCM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You are chopping a meat already. Wait until you are done.");
		        }
		        if(PlayerInfo[playerid][pPackagingMeat] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		        {
		            return SCM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You need to drop off your package first.");
		        }

		        GameTextForPlayer(playerid, "~p~Chopping Meat...", 5000, 3);
		        ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 1);

		        DisablePlayerCheckpoint(playerid);

		        PlayerInfo[playerid][pPackageTime] = 10;
		    }
		}
	}
	return 1;
}





public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(PlayerInfo[playerid][pKicked]) return 0;

	if(newstate == PLAYER_STATE_DRIVER) {
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	} else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechanic.");
	        RemovePlayerFromVehicle(playerid);
	    }
	    if((policevehicles[0] <= vehicleid <= policevehicles[1]) && (FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_POLICE))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Police.");
	        RemovePlayerFromVehicle(playerid);
	    }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[8]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a trucker.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((NewsVehicles[0] <= vehicleid <= NewsVehicles[5]) && !PlayerHasJob(playerid, JOB_NEWS))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a News Paper.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }

	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if (PlayerHasJob(playerid, JOB_FORKLIFTER) && IsAForkliftVehicle(GetPlayerVehicleID(playerid)))
		{
		 	StartForkliftJob(playerid);
			SendInfoMessage(playerid, "Please drive to the {FF0000}checkpoint{FFFFFF} to load the cargo.");
		}

	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[8])
		    {
		        PlayerInfo[playerid][pCP] = CHECKPOINT_TEST;
		        PlayerInfo[playerid][pTestVehicle] = vehicleid;
		        PlayerInfo[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
				SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				SCM(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
		    }
		    else
		    {
                //SCM(playerid, COLOR_YELLOW, "You can toggle the vehicle engine by pressing 'N' or typing /engine.");
			}
	    }
	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SM(playerid, COLOR_AQUA, "This vehicle has $%i in unpaid tickets. You can pay your tickets using /paytickets.", VehicleInfo[vehicleid][vTickets]);
	    }

        if(!PlayerInfo[playerid][pToggleTextdraws])
	    {   // Displaying the Speedo
			ShowVehicleHUDForPlayer(playerid);
				for(new i = 0; i < 9; i ++) {
				PlayerTextDrawShow(playerid, SpeedPlayerTD[playerid][i]);
			}
		}
	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        Dyuze(playerid, "Notice", "~b~Out of fuel");
	    	//TogglePlayerControllable(playerid, 0);
	    }
		SetPlayerArmedWeapon(playerid, 0);
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(PlayerInfo[playerid][pDrivingTest])
	    {
         	PlayerInfo[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);
         	SCM(playerid, COLOR_LIGHTRED, "** You have exited the vehicle and therefore failed the test.");
		}
		// Hiding the Speedo
		HideVehicleHUDForPlayer(playerid);
		for(new i = 0; i < 9; i ++) {
			PlayerTextDrawHide(playerid, SpeedPlayerTD[playerid][i]);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && PlayerInfo[driverid][pTaxiFare] > 0 && PlayerInfo[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(PlayerInfo[playerid][pCash] < PlayerInfo[driverid][pTaxiFare])
		    {
		        SCM(playerid, COLOR_SYNTAX, "You can't afford to pay the fare. Therefore you can't ride this taxi.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			PlayerInfo[driverid][pTaxiPassenger] = playerid;
			PlayerInfo[driverid][pTaxiBill] = PlayerInfo[driverid][pTaxiFare];
			PlayerInfo[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s enters %s's taxi cab.", GetRPName(playerid), GetRPName(driverid));
			SM(playerid, COLOR_YELLOW, "You will be charged the fare price of "SVRCLR"$%i{CCFFFF} every 15 seconds during your ride.", PlayerInfo[driverid][pTaxiFare]);
			SM(driverid, COLOR_AQUA, "*%s has entered your taxi. You will earn $%i every 15 seconds during the ride.", GetRPName(playerid), PlayerInfo[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 28, 29, 32:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
        gLastCar[playerid] = vehicleid;
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerInfo[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && PlayerInfo[playerid][pStreamType] == MUSIC_NONE && !PlayerInfo[playerid][pToggleMusic])
  		{
  		    PlayerInfo[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SCM(playerid, COLOR_WHITE, "** You are now tuned in to this vehicle's radio. /stopmusic to stop listening.");
	    }
	}
	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerInfo[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(PlayerInfo[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(PlayerInfo[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "This business is out of stock now.");
					}
	                if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pID], clothingArray[PlayerInfo[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[PlayerInfo[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "You have no more clothing slots available. Therefore you can't buy this.");
	            }
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = PlayerInfo[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SM(playerid, COLOR_SYNTAX, "Changes saved.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
	}

    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerInfo[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerInfo[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerInfo[playerid][pEditGraffiti]);
		}
		else if (PlayerInfo[playerid][pEditGate] != -1 && GateData[PlayerInfo[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerInfo[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerInfo[playerid][pEditGate];

	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerInfo[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the position of gate ID: %d.", id);
				}
				case 2:
	            {
	                new id = PlayerInfo[playerid][pEditGate];

	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerInfo[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the moving position of gate ID: %d.", id);
				}
			}
		}
	}
	switch(PlayerInfo[playerid][pEditType])
	{
		case EDIT_OBJECT_PREVIEW:
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				if (PlayerInfo[playerid][pEditmObject] != -1 && ObjectData[PlayerInfo[playerid][pEditmObject]][mobjExists])
				{
					new string[48];
					new id = PlayerInfo[playerid][pEditmObject];
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][0] = x;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][1] = y;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][2] = z;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][3] = rx;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][4] = ry;
					ObjectData[PlayerInfo[playerid][pEditmObject]][mobjPos][5] = rz;

					DestroyDynamicObject(ObjectData[id][mobjObject]);
					ObjectData[id][mobjObject] = CreateDynamicObject(ObjectData[id][mobjModel], ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], ObjectData[id][mobjPos][3], ObjectData[id][mobjPos][4], ObjectData[id][mobjPos][5], ObjectData[id][mobjWorld], ObjectData[id][mobjInterior]);

					DestroyDynamic3DTextLabel(ObjectData[id][mobjname2]);
					format(string, sizeof(string), "[%i]\nID: %i", ObjectData[id][mobjModel], id);
					ObjectData[id][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], 5.0);

					Object_Save(id);
					SM(playerid, COLOR_WHITE, "You have edited the position of object ID: %d.", id);
				}
			}
		}
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
				PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(PlayerInfo[playerid][pCash] < furnitureArray[PlayerInfo[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[PlayerInfo[playerid][pSelected]][fModel], furnitureArray[PlayerInfo[playerid][pSelected]][fName], furnitureArray[PlayerInfo[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);
						Dyuze(playerid, "Notice", string);

						if(!strcmp(furnitureArray[PlayerInfo[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_SYNTAX, "Changes saved.");
				}

		        ReloadFurniture(objectid, HouseInfo[PlayerInfo[playerid][pFurnitureHouse]][hLabels]);
			}
		}
		case EDIT_LAND_OBJECT_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
				PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new landid = PlayerInfo[playerid][pObjectLand];

					if(landid >= 0 && HasLandPerms(playerid, landid))
					{
					    if(PlayerInfo[playerid][pCash] < furnitureArray[PlayerInfo[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }
		                if(!IsPointInLand(landid, x, y))
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
						}

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], furnitureArray[PlayerInfo[playerid][pSelected]][fModel], furnitureArray[PlayerInfo[playerid][pSelected]][fName], furnitureArray[PlayerInfo[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, x, y, z - 10.0);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);
						Dyuze(playerid, "Notice", string);

						if(!strcmp(furnitureArray[PlayerInfo[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							if(IsGateModel(furnitureArray[PlayerInfo[playerid][pSelected]][fModel]))
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to open and close your gate. To change the destination coordinates, use /land and choose 'Edit object'.");
							}
						    else
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						    }
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
     			    if(PlayerInfo[playerid][pMenuType] == 0)
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
					else
			        ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
				}
			}
		}
		case EDIT_LAND_OBJECT:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerInfo[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerInfo[playerid][pObjectLand]][lLabels]);
			}
		}
		case EDIT_LAND_GATE_MOVE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerInfo[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET move_x = '%f', move_y = '%f', move_z = '%f', move_rx = '%f', move_ry = '%f', move_rz = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerInfo[playerid][pObjectLand]][lLabels]);
			}
		}
	}

	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(PlayerInfo[playerid][pKicked]) return 0;

	// This is a fix to a known exploit where inserting '%' in the dialog box would crash the server.
	if(dialogid == DIALOG_RADIOCHAT)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pFaction] == -1)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
				}
				if(PlayerInfo[playerid][pFactionRadio] == 0)
				{
					PlayerInfo[playerid][pFactionRadio] = 1;
					SvAttachListenerToStream(factionstream[PlayerInfo[playerid][pFaction]], playerid);
					callcmd::rvc(playerid);
					SM(playerid, COLOR_GREY, "Succesfuly connected to %s radio channel.", FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
				}
				else if(PlayerInfo[playerid][pFactionRadio] == 1)
				{
					PlayerInfo[playerid][pFactionRadio] = 0;
					SvDetachListenerFromStream(factionstream[PlayerInfo[playerid][pFaction]], playerid);
					callcmd::rvc(playerid);
					SM(playerid, COLOR_GREY, "You have disconnected on %s radio channel.", FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pGang] == -1)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
				}
				if(PlayerInfo[playerid][pGangRadio] == 0)
				{
					PlayerInfo[playerid][pGangRadio] = 1;
					SvAttachListenerToStream(gangstream[PlayerInfo[playerid][pGang]], playerid);
					callcmd::rvc(playerid);
					SM(playerid, COLOR_GREY, "Succesfuly connected to %s radio channel.", GangInfo[PlayerInfo[playerid][pGang]][gName]);
				}
				else if(PlayerInfo[playerid][pGangRadio] == 1)
				{
					PlayerInfo[playerid][pGangRadio] = 0;
					SvDetachListenerFromStream(gangstream[PlayerInfo[playerid][pGang]], playerid);
					callcmd::rvc(playerid);
					SM(playerid, COLOR_GREY, "You have disconnected on %s radio channel.", GangInfo[PlayerInfo[playerid][pGang]][gName]);
				}
			}
		}
	}
	for(new i = 0, l = strlen(inputtext); i < l; i ++)
	{
	    if(inputtext[i] == '%') inputtext[i] = '#';
	}
	    //whitelist
	if(dialogid == DIALOG_WHITELIST)
        {
            new player[200], string[128];
            format(player,sizeof(player),"Whitelist/%s.txt",inputtext);
            if(response == 1)
            {
                        if(!dini_Exists(player))
                        {
                            format(string,sizeof(string),"{00FFFF}%s{FFFFFF} has been whitelisted.", inputtext);
                            SendClientMessage(playerid,COLOR_WHITE,string);
                            dini_Create(player);

							#if defined DISCORD
                            if(_:WhitelistInfo == 0)
                            WhitelistInfo = DCC_FindChannelById("984892304835899392");//masukkan ic channel discord kalian

                            format(str,sizeof str,":unlock:***Nickname: ``%s`` Successfully whitelisted!***",inputtext);
                            DCC_SendChannelMessage(WhitelistInfo,str);
							#endif
                            ShowPlayerDialog(playerid,DIALOG_WHITELIST,DIALOG_STYLE_INPUT,"{00FFFF}Whitelist","{FF0000}Please Enter Name To Whitelist.","Continue","Cancel");
                        }
                        else
                        {
                            format(string,sizeof(string),"{00FFFF}%s{FFFFFF} has been whitelisted!", inputtext);
                            SendClientMessage(playerid,COLOR_WHITE,string);
                            ShowPlayerDialog(playerid,DIALOG_WHITELIST,DIALOG_STYLE_INPUT,"{00FFFF}Whitelist","{FF0000}Please Enter Name To Whitelist.\n* Unknown player!","Continue","Cancel");
                        }
            }
        }
        if(dialogid == DIALOG_REMOVE)
        {
            new player[200], string[128];
            format(player,sizeof(player),"Whitelist/%s.txt",inputtext);
            if(response == 1)
            {
                        if(dini_Exists(player))
                        {
                                dini_Remove(player);
                                format(string,sizeof(string),"{00FFFF}%s{FFFFFF} has been blacklisted.", inputtext);
                                SendClientMessage(playerid,COLOR_WHITE,string);
                                #if defined DISCORD
                                if(_:BlacklistInfo == 0)
                                BlacklistInfo = DCC_FindChannelById("984892304835899392");//masukkan id channel discord kalian

                                format(str,sizeof str,":lock:*INFO BLACKLIST*\n``NAME : %s has been blacklisted.``",inputtext);
                                DCC_SendChannelMessage(BlacklistInfo,str);
                                #endif
                                ShowPlayerDialog(playerid,DIALOG_REMOVE,DIALOG_STYLE_INPUT,"{00FFFF}Blacklist","{FF0000}Please Enter Name Below.","Continue","Cancel");
                        }
                        else
                        {
                            format(string,sizeof(string),"{00FFFF}%s{FFFFFF}This Player Is Not In The Whitelisted!", inputtext);
                            SendClientMessage(playerid,COLOR_WHITE,string);
                            ShowPlayerDialog(playerid,DIALOG_REMOVE,DIALOG_STYLE_INPUT,"{00FFFF}Blacklist","{FF0000}Please Enter Name Below.","Continue","Cancel");
                        }
            }
        }
   	if(dialogid == DIALOG_TYPE_MAIN)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0: // Hoods
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
        	    case 1: // Vents
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 2: // Lights
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Exhausts
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
				case 4: // Front Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5: // Rear Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 6: // Roofs
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 7: // Spoilers
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 8: // Side Skirts
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9: // Bullbars
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 10: // Wheels
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 11: // Car Stereo
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
				case 12: // Hydraulics
        	    {
 				ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
				case 13: // Nitrous Oxide
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_EXHAUSTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1034);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1046);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1065);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1064);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1028);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1089);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
	    			}
					}
	  			 	else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1037);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1045);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1066);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1059);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1029);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1092);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1044);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		             	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1129);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1104);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
 						AddVehicleComponent(car,1113);
 						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1136);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1043);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1127);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1132);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1105);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
				}
        	    case 5: // Medium
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr350
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 6: // Small
        	    {
                        if(
					pmodelid[playerid] == 436)//previon
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1022);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Twin
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405 ) // sentinel
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 8: // Upswept
        	    {
                        if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1018);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
				case 9: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
        	    case 10: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_FBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
				{
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1171);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1153);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1160);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1155);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1169);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1166);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1152);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1173);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1157);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1170);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1165);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1179);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1189);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1182);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1115);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1191);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 536 ||
	            pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 576)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1185);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1188);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1181);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

				    else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1116);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1190);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
             	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	//=========================//=====Advance Mines & Lumberjack========================//===================//
	if(dialogid == DIALOG_TYPE_RBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1149);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1159);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1154);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1141);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1168);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1148);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1151);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1161);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1156);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1140);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1167);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
		        {


              		new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1176);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1180);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1187);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1184);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1109);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1192);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
     }
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1177);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1178);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1186);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1183);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1110);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1193);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_ROOFS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1038);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1054);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1067);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1055);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1032);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1088);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1035);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1053);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1068);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1061);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1033);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1091);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1130);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1128);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1131);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1103);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                 if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 550||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    }
				case 5:
        	    {
                 ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 6:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SPOILERS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1147);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1049);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1162);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1138);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1164);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1060);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1139);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1163);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:// Win
        	    {
                if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 3: // Fury
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 4: // Alpha
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 5: // Pro
        	    {
                        if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 492 ||//greenwood
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // club
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 6: // Champ
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Race
        	    {
                if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542)//clover
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 8: // Drag
        	    {
                if(
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517)//majestic
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 9:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 10:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SIDESKIRTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1036);
		            	AddVehicleComponent(car,1040);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1047);
					    AddVehicleComponent(car,1051);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1069);
					    AddVehicleComponent(car,1071);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1056);
					    AddVehicleComponent(car,1062);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1026);
					    AddVehicleComponent(car,1027);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1090);
					    AddVehicleComponent(car,1094);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1039);
			            AddVehicleComponent(car,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1048);
					    AddVehicleComponent(car,1052);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1070);
					    AddVehicleComponent(car,1072);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1057);
					    AddVehicleComponent(car,1063);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1031);
					    AddVehicleComponent(car,1030);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1093);
					    AddVehicleComponent(car,1095);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
	               {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
	       		        AddVehicleComponent(car,1042);
	       		        AddVehicleComponent(car,1099);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
	   				else if(pmodelid[playerid] == 567) // Savanna
					{
					    AddVehicleComponent(car,1102);
					    AddVehicleComponent(car,1133);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1134);
					    AddVehicleComponent(car,1137);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1108);
					    AddVehicleComponent(car,1107);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	                    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1122);
			            AddVehicleComponent(car,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1106);
			            AddVehicleComponent(car,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1118);
			            AddVehicleComponent(car,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 6:
        	    {
				if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1119);
			            AddVehicleComponent(car,1121);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 7:
        	    {
				if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 527 ||
					pmodelid[playerid] == 415 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 517 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 439 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 549 ||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    }
				case 8:
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9:
        	    {
    			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_BULLBARS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
			        }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1123);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1125);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1117);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] ou cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_WHEELS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1025);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Offroad Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1074);
           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Mega Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 2:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1076);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Wires Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 3:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1078);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Twist Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	      		 	SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 4:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1081);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Grove Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 5:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1082);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Import Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 6:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1085);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Atomic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 7:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1096);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Ahab Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 8:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1097);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Virtual Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 9:
        	    {
     			if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1098);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Access Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 10:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1084);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Trance Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 11:
        	    {
 				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1073);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Shadow Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 12:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1075);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Rimshine Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	      	 		SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 13:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1077);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Classic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 14:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1079);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Cutter Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 15:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1083);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Dollar Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 16:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 17:
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_CSTEREO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1086);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HYDRAULICS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1087);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_NITRO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1008);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
        			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
			    }
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1009);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
        	    }
        	    case 2:
        	    if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1010);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
        	    case 3:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
        	    case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HOODS)// HOODS
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// fury
        	    {
                	if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // Race
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1011);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 3: // Worx
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1012);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
				case 5: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	////////////////////////////////////////end of hoods///////////
    if(dialogid == DIALOG_TYPE_VENTS)//////////////////VENTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
              			else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}


	///////////END OF VENTS///////////
	if(dialogid == DIALOG_TYPE_LIGHTS)//////////////////LIGTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// round
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 439)//stallion
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
               			AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
                    else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 400)//landstalker
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	switch(dialogid)
	{
		case DIALOG_CARSTORAGE:
		{
		    if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
			}
		}
		case DIALOG_VALESTORAGE:
		{
		   if(response)
		   {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseValeStorage", "i", playerid);
		   }
		}
		case DIALOG_DMVRELEASE:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1 LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerDMVRelease", "i", playerid);
			}
		}
		case DIALOG_PAYCHECK:
		{
	 		if(!response) return 1;
			new
				szMessage[150];
	   		if(strlen(inputtext) < 1)
			{
	            format(szMessage, sizeof(szMessage), "You must enter the check code before signing.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
	        }
			if(!IsNumeric(inputtext))
			{
	 			format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of numbers only.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
			}
	        if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
			{
	           	format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of 6 digits.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
	        }
	        new code = strval(inputtext);
        	if(code == PayCheckCode[playerid])
	        {
				SendPaycheck(playerid);
	        	PayCheckCode[playerid] = 0;
			}
			else
			{
	            SCM(playerid, COLOR_WHITE, "Wrong check code.");
	        }
		}
		case DIALOG_PAINTBALL:
		{
		    if(response)
		    {
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has entered the paintball arena.", GetRPName(playerid));
				SetPlayerInPaintball(playerid, listitem+1);

				foreach(new i : Player)
				{
				    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
				    {
				        SM(i, COLOR_LIGHTORANGE, "(( %s has entered the paintball arena. ))", GetRPName(playerid));
					}
			    }
		    }
		}
 		case DIALOG_GRAFFITICOLOR:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (IsSprayingInProgress(id))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}

			    switch (listitem)
			    {
			        case 0:
			        {
		    	        PlayerInfo[playerid][pGraffitiColor] = 0xFFFFFFFF;
					}

			        case 1:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFFFF0000;
					}

			        case 2:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFFFFFF00;
					}

			        case 3:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF33CC33;
					}

			        case 4:
			        {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF33CCFF;
					}

		    	    case 5:
		    	    {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF0080FF;
					}

		    	    case 6:
		    	    {
			            PlayerInfo[playerid][pGraffitiColor] = 0xFF1394BF;
					}
					case 7:
					{
						PlayerInfo[playerid][pGraffitiColor] = 0x000000AA;
					}
			    }
			    ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
			}
		}
		case DIALOG_GRAFFITITEXT:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
				if (strlen(inputtext) > 64)
				{
				    return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "[!] Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
		        if (IsSprayingInProgress(id))
		        {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}
		        PlayerInfo[playerid][pGraffiti] = id;
		        PlayerInfo[playerid][pGraffitiTime] = 15;

				strpack(PlayerInfo[playerid][pGraffitiText], inputtext, 64 char);
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);

				Dyuze(playerid, "Notice", "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!");

				SendProximityMessage(playerid, 30.0, SERVER_COLOR, "**{C2A2DA} %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
		}
		case DIALOG_BIZMENU:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_BIZNAME, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new name below for your business.", "Confirm", "Return");
				}
				if(listitem == 1)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_MESSAGE, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new message below for your business.", "Confirm", "Return");
				}
				if(listitem == 2)
			    {
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),"Your business's safe currently contain:\n\t\t$%s\n\t\tProducts: %i.", number_format(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bProducts]);
    				ShowPlayerDialog(playerid,DIALOG_BIZSAFE,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Deposit","Withdraw");
				}
				if(listitem == 3)
	   		   	{
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),""WHITE"Are you sure you want to "SVRCLR"%s "WHITE"your business?", RBS(businessid));
    				ShowPlayerDialog(playerid,DIALOG_BIZLOCK,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Unlock","Lock");
				}
			}
		}
        case DIALOG_BIZNAME:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bName], 64, inputtext);
			format(string28,sizeof(string28), "You have set your business name to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET name = '%s' WHERE id = %i", BusinessInfo[businessid][bName], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
        case DIALOG_BIZSAFE:
        {
            if(!response)
            {
                if(!response)
                {
                    new businessid = GetNearbyBusinessEx(playerid);
                    new string[128];
                    format(string, sizeof(string),""WHITE"Enter the amount of money you want to withdraw your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
			    	ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
			    }
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    new string[128];
			    format(string, sizeof(string),""WHITE"Enter the amount of money you want to deposit your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
		    	ShowPlayerDialog(playerid,DIALOG_DEPOSIT,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
		    }
		}
		case DIALOG_WITHDRAW:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > BusinessInfo[businessid][bCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money in your business vault.");
    		BusinessInfo[businessid][bCash] -= money;
    		GivePlayerCash(playerid, money);

    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "**{C2A2DA} %s has withdrawn money from their business vault.", GetRPName(playerid));
			format(string28, sizeof(string28), " You have withdrawn $%s from your business vault, There is now $%s remaining", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_DEPOSIT:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > PlayerInfo[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money on you.");
    		BusinessInfo[businessid][bCash] += money;
    		GivePlayerCash(playerid, -money);

			format(string28, sizeof(string28), " You have deposit $%s from your business vault, There is now $%s available", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_MESSAGE:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bMessage], 128, inputtext);
			format(string28,sizeof(string28), "You have set your business message to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET message = '%s' WHERE id = %i", BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
		case DIALOG_BIZLOCK:
		{
		    if(!response)
	    	{
	    	    new businessid = GetNearbyBusinessEx(playerid);

                if(!BusinessInfo[businessid][bLocked])
				{
    				BusinessInfo[businessid][bLocked] = 1;
    				Dyuze(playerid, "Notice", "~r~Business locked");
			    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));

			    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
				}
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    BusinessInfo[businessid][bLocked] = 0;
			    Dyuze(playerid, "Notice", "~r~Business unlocked");
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
		case DIALOG_TOP: { // Crimes, Rich, Level
			if(response) {
				new Cache:Result, Name[MAX_PLAYER_NAME], Money, fString[128], cString[2048];

				if(listitem == 0)
			    {
					Result = mysql_query(connectionID, "SELECT crimes, username FROM users ORDER BY crimes DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "crimes");

							format(fString, sizeof fString, "%s\t%i Crimes\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Mga taong walang puso", cString, "Okay","");
				}
				if(listitem == 1)
			    {
					Result = mysql_query(connectionID, "SELECT bank, username FROM users ORDER BY bank DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "bank");

							format(fString, sizeof fString, "%s\t$%d\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Mga taong dapat nakawan sa syudad", cString, "Okay","");
				}
				if(listitem == 2)
			    {
					Result = mysql_query(connectionID, "SELECT hours, username FROM users ORDER BY hours DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "hours");

							format(fString, sizeof fString, "%s\t%i Playing Hours\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Mga walang buhay sa syudad", cString, "Okay","");
				}
			}
		}
		case DIALOG_DGUN: 
		{
			if(response)
	        {
	 			if(listitem == 0)
				{
                    SetPlayerHealth(playerid, 100.0);
                }
	 			else if(listitem == 1)
				{
                    SetScriptArmour(playerid, 70.0);
                }
                else if(listitem == 2)
                {
                    GiveWeapon(playerid, 24);
                }
                else if(listitem == 3)
                {
                    GiveWeapon(playerid, 29);
                }
			}
		}
		case DIALOG_BLACKHOSPITAL:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pCash] < 5000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to pay bills.");
				    }
				    if(!PlayerInfo[playerid][pInjured])
					{
					    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
					}
					GameTextForPlayer(playerid, "~g~Checking in...", 60000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 60000, false, "i", playerid);

					GivePlayerCash(playerid, -5000);
					SCM(playerid, COLOR_YELLOW, "Wait for 1minute recovery");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has paid a bill for his check in.", GetRPName(playerid));
	           	}
			}
		}
		case DIALOG_EDITMOBILE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Y Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Z Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Y Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 5:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Z Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 6:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
					case 7:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an Y Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
					case 8:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an Z Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
				}
			}
		}
		case DIALOG_CPOSX:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fOffsetX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;
				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//etPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f' WHERE id = %i", fOffsetX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CPOSY:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fOffsetY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;
				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_y = '%f' WHERE id = %i", fOffsetY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CPOSZ:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fOffsetZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_Z = '%f' WHERE id = %i", fOffsetZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTX:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fRotX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotX] = fRotX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_x = '%f' WHERE id = %i", fRotX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTY:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fRotY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotY] = fRotY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_y = '%f' WHERE id = %i", fRotY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTZ:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fRotZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_z = '%f' WHERE id = %i", fRotZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEX:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fScaleX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_x = '%f' WHERE id = %i", fScaleX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEY:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fScaleY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_y = '%f' WHERE id = %i", fScaleY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEZ:
		{
	 		if(response)
	 		{
	 			new clothingid = PlayerInfo[playerid][pSelected];
				new Float:fScaleZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_z = '%f' WHERE id = %i", fScaleZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_STREETFOOD:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
		            new price = 25;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

					PlayerInfo[playerid][pThirst] += 50;
					PlayerInfo[playerid][pThirstTimer] = 0;
	        		if (PlayerInfo[playerid][pThirst] > 100)
					{
						PlayerInfo[playerid][pThirst] = 100;
					}

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 10.0);

                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received a glass of Chai.", GetRPName(playerid), price);
                }
	 			if(listitem == 1)
				{
		            new price = 50;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

     PlayerInfo[playerid][pThirst] += 50;
					PlayerInfo[playerid][pThirstTimer] = 0;
	        		if (PlayerInfo[playerid][pThirst] > 100)
					{
						PlayerInfo[playerid][pThirst] = 100;
					}

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 15.0);

                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received a bottle of Cola.", GetRPName(playerid), price);
                }
	 			if(listitem == 2)
				{
		            new price = 100;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

					PlayerInfo[playerid][pCigars] += 10;

					GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received a Cigar.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Cigars purchased. Use /usecigar to smoke a cigar.");
                }
	 			if(listitem == 3)
				{
		            new price = 18;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

					PlayerInfo[playerid][pHunger] += 25;
					PlayerInfo[playerid][pHungerTimer] = 0;
	        		if (PlayerInfo[playerid][pHunger] > 100)
					{
						PlayerInfo[playerid][pHunger] = 100;
					}
	                GivePlayerCash(playerid, -price);
	                GivePlayerHealth(playerid, 20.0);

	                SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received Bonda.", GetRPName(playerid), price);
                }
	 			if(listitem == 4)
				{
		            new price = 80;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

                    PlayerInfo[playerid][pHunger] += 50;
					PlayerInfo[playerid][pHungerTimer] = 0;
	        		if (PlayerInfo[playerid][pHunger] > 100)
					{
						PlayerInfo[playerid][pHunger] = 100;
					}
                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 25.0);

                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received a Vada.", GetRPName(playerid), price);
                }
	 			if(listitem == 5)
				{
		            new price = 65;

		            if(PlayerInfo[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
                    }

                    PlayerInfo[playerid][pHunger] += 50;
					PlayerInfo[playerid][pHungerTimer] = 0;
	        		if (PlayerInfo[playerid][pHunger] > 100)
					{
						PlayerInfo[playerid][pHunger] = 100;
					}
                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 25.0);

                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the vendor and received a Bajji.", GetRPName(playerid), price);
                }
			}
		}
 		case DIALOG_CREATEQUIZ:
		{
			if(response) {
				if(CreateQuiz == 0)
				{
				    strcpy(quizQuestion, inputtext);
				    CreateQuiz = 1;
	                ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
				}
				else if(CreateQuiz == 1)
				{
				    strcpy(quizAnswer, inputtext);
	                CreateQuiz = -1;
	                SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a quiz.", GetRPName(playerid));
	                SMA(COLOR_LIGHTRED, "Quiz: %s Type (/answer) to answer", quizQuestion);
				}
			}
			else CreateQuiz = -1;

		}
		case DIALOG_TWEET:
		{
			if(response) {
			    strcpy(tweet, inputtext);
                SMA(COLOR_WHITE, ""WHITE"["SVRCLR"Twitter"WHITE"] "SVRCLR"@%s"WHITE": %s", GetRPName(playerid), tweet);
			}
		}
		case DIALOG_SETTINGS:
		{
         if(response)
      		{
      		new string[3500];
      		switch(listitem)
				{
				    case 0: // Account Menu
				    {
				    	strcat(string, "[Account Menu]\n");
				    	strcat(string, "                \n");
						format(string, sizeof(string), "%s"WHITE"Name:\t{bcc41a}%s\n", string, GetRPName(playerid));
						format(string, sizeof(string), "%s"WHITE"Address:\t{bcc41a}%s\n", string, GetPlayerIP(playerid));
						ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Account Command List", string, "Close", "");
				    }
				    case 1: // Bug Fix
				    {
				    	strcat(string, "[Bug Fix]\n");
				    	strcat(string, "                \n");
						strcat(string, "For Fixing Voice Bug [/fixvoice]\n");
						strcat(string, "For Fixing WorldBug [/fixvw]\n");
						strcat(string, "For Voice Proxi [/vc]\n");
						ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Bug Fix List", string, "Close", "");
				    }
					case 2: // Discord Menu
				    {
				    	strcat(string, "[Discord Menu]\n");
				    	strcat(string, "                \n");
                        format(string, sizeof(string), "%sDiscord:\t{bcc41a}https://discord.gg/3BTxmXMzdj\n", string);
						ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Discord List", string, "Close", "");
				    }
				 }
			}
		}
		case DIALOG_PHONEADVERTISE:
		{
		  if(response) {
			    strcpy(tweet, inputtext);
                SMA(COLOR_WHITE, ""WHITE"Phone Advert:"RED" %s, just contact %s(%i)", tweet, GetRPName(playerid), PlayerInfo[playerid][pPhone]);
            }
		}
		case DIALOG_INSTAGRAM:
		{
			if(response) {
			    strcpy(tweet, inputtext);
               SMA(COLOR_WHITE, ""WHITE"["RED"Instagram"WHITE"] "RED"@%s"WHITE": %s", GetRPName(playerid), tweet);
			}
		}
		case DIALOG_NEWBWELCOME:
		{
		    if(response)
		    {
		        new count;
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pHelper] > 0)
					{
					    count++;
					}
				}
				if(count > 0)
				{
		        	new string[30];
		        	format(string, sizeof(string), "Show me around Los Santos, I am new here.");
					strcpy(PlayerInfo[playerid][pHelpRequest], string, 128);
					SendHelperMessage(COLOR_AQUA, "** Help Request: New Player %s (ID:%d) is requesting a helper to show them around. **", GetRPName(playerid), playerid);

					PlayerInfo[playerid][pLastRequest] = gettime();
					SCM(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "No Helpers Online", ""WHITE"Unfortunately there are no members of the helper team online.\nYou can also try /(n)ewbie, This is where most of the community can help you with simple questions such as 'Where is the Bank'.\nYou can also checkout "SERVER_URL" for beginner tutorials.", "Cancel", "");
				}
			}
		}
		case DIALOG_POINTLIST:
		{
		    if(response)
		    {
		        if(strlen(psstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", psstring, "", "Cancel");
				}
			}
		}
				// TURF
		case DIALOG_TURF:
		{
			if(response)
			{
				 switch(listitem)
				 {
						case 0: // TURF ID
						{
							ShowPlayerDialog(playerid, DIALOG_TURFID, DIALOG_STYLE_INPUT, "Turf System v2", "Enter the turf id", "Enter", "Close");
						}
     	                case 1: // DEFENDING GANG
						{
							ShowPlayerDialog(playerid, DIALOG_TURFDFGANG, DIALOG_STYLE_INPUT, "Turf System v2", "Enter the Defending Gang ID", "Enter", "Close");
						}
						case 2: // ATTACKING GANG
						{
							ShowPlayerDialog(playerid, DIALOG_TURFATTGANG, DIALOG_STYLE_INPUT, "Turf System v2", "Enter the Defending Gang ID", "Enter", "Close");
						}
						case 3: // TURF START
						{
                              if(InfluenceInfo[iStart] == 1) {
							     return SendClientMessage(playerid, COLOR_SYNTAX, "Turf War is already started.");
							  }
							  if(InfluenceInfo[iTurf] == 0) {
							     return SendClientMessage(playerid, COLOR_SYNTAX, "Turf ID Not Specified.");
							  }
							  if(InfluenceInfo[iDefGang] == 0) {
							     return SendClientMessage(playerid, COLOR_SYNTAX, "Defending Gang ID Not Specified.");
							  }
							  if(InfluenceInfo[iAttGang] == 0) {
							     return SendClientMessage(playerid, COLOR_SYNTAX, "Attacking Gang ID Not Specified.");
							  }
							  else
							  {
							      InfluenceInfo[iStart] = 1;
							      InfluenceInfo[iEnabled] = 1;
							      InfluenceInfo[iTime] = 30 * 60;
							      InfluenceInfo[iGangid] = InfluenceInfo[iDefGang];

							      new turfid = InfluenceInfo[iTurf];
							      SMA(COLOR_GREEN, "[Turf Info] "WHITE"%s Has Now Started.", TurfInfo[turfid][tName]);

							      foreach(new i: Player)
                                  {
	   	                              GangZoneFlashForPlayer(i, TurfInfo[turfid][tGangZone], (0xFFf74d4dFF & ~0xff) + 0xAA);

	   	                              new text[256];
	   	                              format(text, sizeof(text), "Turf War Started.");
		                               TextDrawSetString(AnnounceTD[8], text);
		                               for(new f = 0; f < 9; f ++)
		                               {
			                               TextDrawShowForPlayer(i, AnnounceTD[f]);
		                               }

		                               SetTimerEx("ANNOUNCEHIDE", 10000, false, "i", i);
		                               PlayerPlaySound(i,1150,0.0,0.0,0.0);
                                  }


                                    new string[2500];
                                    format(string, sizeof(string), "~r~Turf_On_Progress");
                                    TextDrawSetString(PrioTD[1], string);
                                    PrioText = string;
							  }
						}
				 }
			}
		}
		case DIALOG_TURFID:
		{
		    if(response)
		    {
		          new turfid;
				 if(sscanf(inputtext, "i", turfid)) return SCM(playerid, COLOR_SYNTAX, "Enter a Turf ID.");
				 if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists]) return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
                 if(InfluenceInfo[iTurf] == turfid) return SCM(playerid, COLOR_SYNTAX, "This turf is already started.");

                 InfluenceInfo[iTurf] = turfid;
                 SM(playerid, COLOR_YELLOW, "Edited Turf To %s", TurfInfo[turfid][tName]);
		    }
		}
        case DIALOG_TURFDFGANG:
		{
		    if(response)
		    {
		          new gangid;
				 if(sscanf(inputtext, "i", gangid)) return SCM(playerid, COLOR_SYNTAX, "USAGE: gangid.");
                 if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup])) return SCM(playerid, COLOR_SYNTAX, "Invalid Gang.");

				 if(gangid > 0)
				 {
                    InfluenceInfo[iDefGang] = gangid;
                    SM(playerid, COLOR_YELLOW, "Edited Turf Defending Gang To %s", GangInfo[gangid][gName]);
                 }
                 else
                 {
                      InfluenceInfo[iDefGang] = gangid;
                      SM(playerid, COLOR_YELLOW, "Edited Turf Defending Gang To Police");
				 }
		    }
		}
		case DIALOG_TURFATTGANG:
		{
		    if(response)
		    {
		          new gangid;
				 if(sscanf(inputtext, "i", gangid)) return SCM(playerid, COLOR_SYNTAX, "USAGE: gangid.");
				 if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup])) return SCM(playerid, COLOR_SYNTAX, "Invalid Gang.");

                 if(gangid > 0)
				 {
                    InfluenceInfo[iAttGang] = gangid;
                    SM(playerid, COLOR_YELLOW, "Edited Turf Attacking Gang To %s", GangInfo[gangid][gName]);
                 }
                 else
                 {
                      InfluenceInfo[iAttGang] = gangid;
                      SM(playerid, COLOR_YELLOW, "Edited Turf Attacking Gang To Police");
				 }
		    }
		}
		case DIALOG_TURFLIST:
		{
		    if(response)
		    {
		        if(strlen(tsstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Turf List"WHITE" ("REVISION")", tsstring, "", "Cancel");
				}
			}
		}
    	case DIALOG_RULES:
		{
  			if(response)
      		{
      		    new sstring[2048];
				switch(listitem)
				{
				    case 0: // SERVER
				    {
				        format(sstring, sizeof(sstring), ""SVRCLR"- First of all, Always roleplay. Your character's behavior needs to be as realistic, and close to real life as possible! -\n");
						strcat(sstring, ""WHITE"1. "SVRCLR"You can't Metagaming! Don't mix in-character (IC) and out-of-character (OOC) chat/information. IC chat is the default chat, OOC is used by typing /b!\n");
						strcat(sstring, ""WHITE"2. "SVRCLR"You can't Killing on sight (KOS). Killing a player on sight without a word or any attempt to roleplay is not allowed and is prisonable!\n");
						strcat(sstring, ""WHITE"3. "SVRCLR"You can't Revenge killing (RK). If a player critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes!\n");
						strcat(sstring, ""WHITE"4. "SVRCLR"You can't Powergaming! Impossible roleplay, meaning anything that is cannot be done in real life is forbidden! Do not force roleplay on others!\n");
						strcat(sstring, ""WHITE"5. "SVRCLR"You can't Car ramming or Car parking! Do not repeatedly ram other people with your car, and don't park on top of a player to kill them!\n");
						strcat(sstring, ""WHITE"6. "SVRCLR"You can't Logging to avoid! Never log out or alt-tab out of game to avoid death, arrest or prison!\n");
						strcat(sstring, ""WHITE"Note: "SVRCLR"This is a short version of our server rulebook. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Server Rules", sstring, "Ok","");
				    }
				    case 1: // TRAFFIC
				    {
				        format(sstring, sizeof(sstring), ""WHITE"1. "SVRCLR"Drive on the right side of the road at all times or else you will get punishment.\n");
				        strcat(sstring, ""WHITE"2. "SVRCLR"Yield to emergency vehicles.\n");
				        strcat(sstring, ""WHITE"3. "SVRCLR"Move over and slow down for stopped emergency vehicles.\n");
				        strcat(sstring, ""WHITE"4. "SVRCLR"Turn your headlights on at night. Type (/lights) to turn it.\n");
				        strcat(sstring, ""WHITE"5. "SVRCLR"Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
				        strcat(sstring, ""WHITE"6. "SVRCLR"Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
				        strcat(sstring, ""WHITE"7. "SVRCLR"Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, ""WHITE"8. "SVRCLR"Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
				        strcat(sstring, ""WHITE"9. "SVRCLR"Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, ""WHITE"10. "SVRCLR"Pedistrians always have the right of way, regardless of the situation.\n");
				        strcat(sstring, ""WHITE"11. "SVRCLR"Drive how you would in real life, dont be a moron.\n");
				        strcat(sstring, ""SVRCLR"- If you fail at driving you will be jailed or banned. -\n");
				        strcat(sstring, ""WHITE"Note: "SVRCLR"This is a short version of our traffic laws. Please visit  to see a full list of "SERVER_URL"");
				    	ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Traffic Rules", sstring, "Ok","");
				    }
				    case 2: // SPEED
				    {
				        format(sstring, sizeof(sstring), ""SVRCLR"- This server has limitations. -\n");
				        strcat(sstring, ""WHITE"1. "SVRCLR"50 MPH if you are in the City.\n");
				        strcat(sstring, ""WHITE"2. "SVRCLR"70 MPH on the County roads.\n");
				        strcat(sstring, ""WHITE"3. "SVRCLR"90 MPH on the Highways and Interstates.\n");
				        strcat(sstring, ""WHITE"4. "SVRCLR"Box trucks cannot exceed 50 MPH.\n");
				        strcat(sstring, ""WHITE"5. "SVRCLR"Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
				        strcat(sstring, ""WHITE"Note: "SVRCLR"This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Speed Rules", sstring, "Ok","");
				    }
				}
      		}
		}
		case DIALOG_REMOVEPVEH:
		{
      		if(response)
		    {
		        new targetid = PlayerInfo[playerid][pRemoveFrom];

				if(targetid == INVALID_PLAYER_ID)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "The player has disconnected. You can't remove their vehicles now.");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[targetid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveVehicle", "ii", playerid, targetid);
		    }
		}
		case DIALOG_LOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // JOBS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Select Destination", "Foodpanda\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nMeat Packager\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nConstruction Job\nForklifter\nNews Paper", "Select", "Close");
				    }
				    case 1: // STORES
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST2, DIALOG_STYLE_LIST, "Select Destination", "24/7\nAmmunation\nClothing Store\nGymnasium\nRestaurant\nAdvertisement Store\nClub\nPharmacy", "Select", "Close");
				    }
				    case 2: // GENERAL LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST3, DIALOG_STYLE_LIST, "Select Destination", "DMV\nBank\nCasino\nCar Dealership\nAirplane Dealership (Temporary Disabled)\nBoat Dealership\nPawnshop\nPaintball\nCityHall LS\nCityHall LV\nMechanic Autoparts", "Select", "Close");
				    }
					case 3: // Find Points
					{
					    new string[34 * MAX_POINTS];
					    for(new x = 0; x < MAX_POINTS; x++)
						{
						    if(PointInfo[x][pExists]) {
					    		strcat(string, PointInfo[x][pName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATEPOINTS, DIALOG_STYLE_LIST, "Select Destination", string, "Select", "Close");
						} else {
          					SCM(playerid, COLOR_WHITE, "Unable to locate any new locations.");
						}
					}
					case 4: // Find Turfs
					{
					    new string[34 * MAX_TURFS];
					    for(new x = 0; x < MAX_TURFS; x++)
						{
						    if(TurfInfo[x][tExists]) {
					    		strcat(string, TurfInfo[x][tName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATETURFS, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
						} else {
						    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
						}
					}
					case 5: // WASH MONEY LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATEWASHMONEY, DIALOG_STYLE_LIST, "Select Destination", "East Los Santos\nPershing Square\nGlen Park\nVerona Beach\nCemetery", "Select", "Close");
				    }
				    case 6: // VIP LOCATION
				    {
				    	ShowPlayerDialog(playerid, DIALOG_VIPLOCATION, DIALOG_STYLE_LIST, "Select Destination", "VIP Location", "Select", "Close");
				    }
				}
      		}
		}
		case DIALOG_LOCATELIST1:
		{
			if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Foodpanda");
					case 1:
					    LocateMethod(playerid,"Trucker");
	                case 2:
						LocateMethod(playerid,"Fisherman");
	   				case 3:
						LocateMethod(playerid,"Bodyguard");
	                case 4:
						LocateMethod(playerid,"ArmsDealer");
	                case 5:
						LocateMethod(playerid,"Miner");
					case 6:
						LocateMethod(playerid,"Meat Packager");
	                case 7:
						LocateMethod(playerid,"TaxiDriver");
	                case 8:
						LocateMethod(playerid,"DrugDealer");
	                case 9:
						LocateMethod(playerid,"Lawyer");
	                case 10:
						LocateMethod(playerid,"Detective");
					case 11:
						LocateMethod(playerid,"Construction");
					case 12:
						LocateMethod(playerid,"Forklifter");
					case 13:
					    LocateMethod(playerid,"News Paper");						
				}
			}
		}
		case DIALOG_LOCATELIST2:
		{
		    if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Supermarket");
				    case 1:
				        LocateMethod(playerid,"GunShop");
				    case 2:
				        LocateMethod(playerid,"ClothesShop");
				    case 3:
				        LocateMethod(playerid,"Gym");
				    case 4:
				        LocateMethod(playerid,"Restaurant");
				    case 5:
				        LocateMethod(playerid,"AdAgency");
				    case 6:
				        LocateMethod(playerid,"Club");
                    case 7:
				        LocateMethod(playerid,"Pharmacy");
				}
			}
		}
		case DIALOG_LOCATELIST3:
		{
		    if(response)
			{
			    switch(listitem)
			    {

                    case 0:
						LocateMethod(playerid,"DMV");
                    case 1:
						LocateMethod(playerid,"Bank");
                	case 2:
						LocateMethod(playerid,"Casino");
                	case 3:
						LocateMethod(playerid,"Dealership");
                    case 4:
						LocateMethod(playerid,"AirDealer");
                    case 5:
						LocateMethod(playerid,"BoatDealer");
					case 6:
					    LocateMethod(playerid,"Pawnshop");
	    			case 7:
					    LocateMethod(playerid,"Paintball");
                    case 8:
					    LocateMethod(playerid,"CityHallLS");
                    case 9:
					    LocateMethod(playerid,"CityHallLV");
					case 10:
					    LocateMethod(playerid,"Mechanic Autoparts");
				}
			}
		}
		case DIALOG_LOCATEWASHMONEY:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			            LocateMethod(playerid,"Els");
			        case 1:
			            LocateMethod(playerid,"Ps");
			        case 2:
			            LocateMethod(playerid,"Gp");
			        case 3:
			            LocateMethod(playerid,"Vb");
			        case 4:
                        LocateMethod(playerid,"Cm");
				}
			}
		}
		case DIALOG_SIDEJOB:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			            LocateMethod(playerid,"meatchopper");
					case 1:
					    LocateMethod(playerid,"harvester");
				}
			}
		}
		case DIALOG_BLACKMARKET1:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    if(PlayerInfo[playerid][pDirtyCash] < 10000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have dirty cash. You can't buy this.");
                    }
				    PlayerInfo[playerid][pDirtyCash] -= 10000;
                    GiveWeapon(playerid, 24);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an Deagle from black market!");
                }
                else if(listitem == 1)
                {
                	if(PlayerInfo[playerid][pDirtyCash] < 10000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    PlayerInfo[playerid][pDirtyCash] -= 10000;
                    GiveWeapon(playerid, 25);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an Shotgun from black market!");
                }
                else if(listitem == 2)
                {
               		if(PlayerInfo[playerid][pDirtyCash] < 15000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    PlayerInfo[playerid][pDirtyCash] -= 15000;
                    GiveWeapon(playerid, 30);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an AK-47 from black market!");
                }
                else if(listitem == 3)
                {
               		if(PlayerInfo[playerid][pDirtyCash] < 7000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    PlayerInfo[playerid][pDirtyCash] -= 7000;
                    GiveWeapon(playerid, 29);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an MP5 from black market!");
                }
                else if(listitem == 4)
                {
               		if(PlayerInfo[playerid][pDirtyCash] < 5000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    PlayerInfo[playerid][pDirtyCash] -= 5000;
                    SetPlayerArmour(playerid, 100);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an Vest from black market!");
                }
                else if(listitem == 5)
                {
               		if(PlayerInfo[playerid][pDirtyCash] < 20000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    PlayerInfo[playerid][pDirtyCash] -= 20000;
                    PlayerInfo[playerid][pLockpick] += 1;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lockpick = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	                mysql_tquery(connectionID, queryBuffer);
                    SCM(playerid, COLOR_WHITE, "** You have successfully bought an Lockpick from black market!");
                }
			}
		}
		case DIALOG_LOCATELISTC:
		{
		    if(response)
		    {
				LocateMethod(playerid, inputtext);
		    }
		}
		case DIALOG_LOCATETURFS:
		{
			if(response)
			{
			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(strfind(TurfInfo[i][tName], inputtext) != -1)
			        {
				   	 	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
				    	SetPlayerCheckpoint(playerid, TurfInfo[i][tMinX], TurfInfo[i][tMinY], TurfInfo[i][tHeight], 3.0);
				    	SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", TurfInfo[i][tName]);
				    	break;
					}
				}
			}
		}
		case DIALOG_LOCATEPOINTS:
		{
		    if(response)
			{
			    if(PointInfo[listitem][pExists])
			    {
	                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
				    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
				    SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", PointInfo[listitem][pName]);
			    }
			}
		}
		case DIALOG_CONTACTS_OPTIONS:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", PlayerInfo[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "i", playerid);
					}
					case 1:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", PlayerInfo[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerTextContact", "i", playerid);
					}
					case 2:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phone_contacts WHERE contact_id = %i", PlayerInfo[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer);

						ListContacts(playerid);
						SCMf(playerid, COLOR_YELLOW, "You have deleted the selected contact.");
					}
				}
			}
			else
			{
				ListContacts(playerid);
			}
		}
		case DIALOG_CONTACTS_NUMBER:
		{
			if (response)
			{
				new number, string[128];

				if (sscanf(inputtext, "i", number))
				{
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else if (number < 1)
				{
					format(string, sizeof(string), "You have entered an invalid number.\n\nPlease input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phone_contacts (phone_number, contact_name, contact_number) VALUES(%i, '%e', %i)", PlayerInfo[playerid][pPhone], gTargetName[playerid], number);
					mysql_tquery(connectionID, queryBuffer);

					ListContacts(playerid);
					SCMf(playerid, COLOR_YELLOW, "You have added a contact: %s (%i).", gTargetName[playerid], number);
				}
			}
		}
		case DIALOG_CONTACTS_ADD:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else if (strlen(inputtext) > 24)
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "The contact name must be below 24 characters.\n\nPlease input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					strcpy(gTargetName[playerid], inputtext, MAX_PLAYER_NAME);

					new string[128];
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
			}
			else
			{
				ListContacts(playerid);
			}
			return 1;
		}
		case DIALOG_CONTACTS:
		{
			if (response)
			{
				if (listitem == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					PlayerInfo[playerid][pSelected] = gListedItems[playerid][--listitem];

					ShowPlayerDialog(playerid, DIALOG_CONTACTS_OPTIONS, DIALOG_STYLE_LIST, "{FFFFFF}Contact options", "Call contact\nText Message\nDelete contact", "Select", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_SMS_TEXT:
		{
			new text[128];
			new number = PlayerInfo[playerid][pPhoneSMS];

			if (response)
			{
				if (sscanf(inputtext, "s[128]", text))
				{
					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
				else
				{
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pPhone] == number)
						{
							if(PlayerInfo[i][pJailType] > 0)
							{
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
							}
							if(PlayerInfo[i][pTogglePhone])
							{
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player has their mobile phone switched off.");
							}

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

							if(strlen(text) > MAX_SPLIT_LENGTH)
							{
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %.*s... **", GetRPName(playerid), PlayerInfo[playerid][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): ...%s **", GetRPName(playerid), PlayerInfo[playerid][pPhone], text[MAX_SPLIT_LENGTH]);

								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %.*s... **", GetRPName(i), PlayerInfo[i][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): ...%s **", GetRPName(i), PlayerInfo[i][pPhone], text[MAX_SPLIT_LENGTH]);
							}
							else
							{
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %s **", GetRPName(playerid), PlayerInfo[playerid][pPhone], text);
								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %s **", GetRPName(i), PlayerInfo[i][pPhone], text);
							}

							/*if(PlayerInfo[i][pTextFrom] == INVALID_PLAYER_ID)
							{
								SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
							}*/

							PlayerInfo[i][pTextFrom] = playerid;

							return 1;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
					mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, text);
				}
			}
		}
		case DIALOG_PHONE_SMS:
		{
			new number;

			if (response)
			{
				if(PlayerInfo[playerid][pTogglePhone])
					return SCM(playerid, SERVER_COLOR , "You have your phone toggled.");

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (PlayerInfo[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "You can't text your own number.\n\nPlease specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else
				{
					PlayerInfo[playerid][pPhoneSMS] = number;

					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_CALL:
		{
			if (response)
			{
				if(PlayerInfo[playerid][pTogglePhone])
					return SCM(playerid, SERVER_COLOR , "You have your phone toggled.");

				new number;

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
				}
				else if (PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You are already on a call. Use {6688FF}/hangup{FFFFFF} to end it.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (PlayerInfo[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't dial your own number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You have entered an invalid phone number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else
				{
					if(number == 911)
					{
						PlayerInfo[playerid][pCallLine] = playerid;
						PlayerInfo[playerid][pCallStage] = 911;

						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: 911, what is your emergency? Enter 'police' or 'medic'.");
						return 1;
					}
					else if(number == 6397)
					{
						PlayerInfo[playerid][pCallLine] = playerid;
						PlayerInfo[playerid][pCallStage] = 6397;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, SERVER_COLOR, "News Team: This is News here. Leave a message and we'll get back to you! *BEEP*");
						return 1;
					}
					else if(number == 6324)
					{
						PlayerInfo[playerid][pCallLine] = playerid;
						PlayerInfo[playerid][pCallStage] = 6324;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_LIGHTORANGE, "Dispatch: This is the mechanic hotline. Please explain your situation to us.");
						return 1;
					}
					else if(number == 8294)
					{
						if(CountTaxiDrivers() < 1)
							return SCM(playerid, COLOR_YELLOW, "Dispatch: Sorry but we currently have no on duty taxi drivers.");

						PlayerInfo[playerid][pCallLine] = playerid;
						PlayerInfo[playerid][pCallStage] = 8294;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: This is the cab company. Please state your location and destination.");
						return 1;
					}
					else if(number == 666)
					{
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
						return 1;
					}

					foreach(new i : Player)
					{
						if(PlayerInfo[i][pTogglePhone])
							return SCM(playerid, SERVER_COLOR , "The player's phone is off.");

						if(PlayerInfo[i][pPhone] == number)
						{
							if(PlayerInfo[i][pJailType] > 0)
							{
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
							}
							if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
							{
								for(new f = 0; f < 13; f ++)
								{
									TextDrawHideForPlayer(i, CallingTD[f]);
								}
								for(new g = 0; g < 5; g++) {
									PlayerTextDrawHide(i, CallingPlayerTD[playerid][g]);
								}
								TextDrawHideForPlayer(i, CloseCallTD);
								TextDrawHideForPlayer(i, PICKUP);
								TextDrawHideForPlayer(i, HANGUP);
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" This player is currently in a call. Wait until they hang up.");
							}
							if(PlayerInfo[i][pTogglePhone])
							{
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player has their mobile phone switched off.");
							}
							if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
							{
								return SCM(playerid, SERVER_COLOR , "Error:"WHITE" That player is currently in a live interview and can't talk on the phone.");
							}

							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

							KillTimer(PlayerInfo[playerid][pCallTimer]);
							KillTimer(PlayerInfo[i][pCallTimer]);

							PlayerInfo[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
							PlayerInfo[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

							PlayerInfo[playerid][pCallLine] = i;
							PlayerInfo[playerid][pCalling] = 1;
							PlayerInfo[playerid][pCallStage] = 0;

							PlayerInfo[i][pCallLine] = playerid;
							PlayerInfo[i][pCallStage] = 1;

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
							SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
							SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), PlayerInfo[playerid][pPhone]);
							PlayAudioStreamForPlayer(i, "https://www.mboxdrive.com/CALLRING.mp3");

							calling(i, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), PlayerInfo[playerid][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(i, CallingTD[f]);
							}
							for(new g = 0; g < 4; g++) {
								PlayerTextDrawShow(i, CallingPlayerTD[playerid][g]);
							}
							TextDrawShowForPlayer(i, CloseCallTD);
							TextDrawShowForPlayer(i, PICKUP);
							TextDrawShowForPlayer(i, HANGUP);
							SelectTextDraw(i, COLOR_LIGHTBLUE);

							for(new f = 0; f < 32; f++) {
							TextDrawHideForPlayer(playerid, PhoneTD[f]);
							}
							TextDrawHideForPlayer(playerid, BankTD);
							TextDrawHideForPlayer(playerid, MessageTD);
							TextDrawHideForPlayer(playerid, TwitterTD);
							TextDrawHideForPlayer(playerid, ContactsTD);
							TextDrawHideForPlayer(playerid, PhoneCloseTD);
							TextDrawHideForPlayer(playerid, SettingTD);
							TextDrawHideForPlayer(playerid, CameraTD);
							TextDrawHideForPlayer(playerid, CallTD);
							TextDrawHideForPlayer(playerid, AppTD);
							TextDrawHideForPlayer(playerid, GpsTD);

							calling(playerid, GetPlayerNameEx(i), GetPlayerSkinScript(i), PlayerInfo[i][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(playerid, CallingTD[f]);
							}
							for(new g = 0; g < 5; g++) {
								PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][g]);
							}
							PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][3]);
							TextDrawShowForPlayer(playerid, CloseCallTD);
							//TextDrawShowForPlayer(playerid, PICKUP);
							TextDrawShowForPlayer(playerid, HANGUP);

							SelectTextDraw(playerid, COLOR_LIGHTBLUE);
							return 1;
						}
					}

					SCM(playerid, SERVER_COLOR , "Error:"WHITE" That number is either not in service or the owner is offline.");
				}
			}
		}
		case DIALOG_PHONE:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
					}
					case 2:
					{
						ListContacts(playerid);
					}
				}
			}
		}
	    case DIALOG_REGISTER:
    	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "** Please choose a password containing at least 4 characters.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(PlayerInfo[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
			}
			else
			{
			    KickPlayer(playerid);
			}
		}
		case DIALOG_CONFIRMPASS:
		{
		    if(response)
		    {
		        new
					password[129];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
				}

				WP_Hash(password, sizeof(password), inputtext);

				if(!strcmp(PlayerInfo[playerid][pPassword], password))
				{
				    gTotalRegistered++;
				    SaveServerInfo();

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users (username, password, regdate, lastlogin, ip) VALUES('%s', '%s', NOW(), NOW(), '%s')", GetPlayerNameEx(playerid), password, GetPlayerIP(playerid));
		            mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
				    SCM(playerid, COLOR_LIGHTRED, "** Your repeated password does not match your chosen password. Please try again.");
				}
		    }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	        }
	    }
	    case DIALOG_LOGIN:
	    {
	        if(response)
	        {
	            new
	                specifiers[] = "%D of %M, %Y @ %k:%i",
	                password[129];

				if(isnull(inputtext))
				{
				    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
				    return 1;
				}

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, '%s') AS login_date FROM users WHERE username = '%s' AND password = '%s'", specifiers, GetPlayerNameEx(playerid), password);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	        }
	        else
	        {
				KickPlayer(playerid);
			}
	    }
	    case DIALOG_GENDER:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                PlayerInfo[playerid][pGender] = 1;
	                PlayerInfo[playerid][pSkin] = 299;
	                SCM(playerid, COLOR_LIGHTRED, "[System]: "WHITE"You have choosen you're character a Male.");
				}
				else if(listitem == 1)
				{
	                PlayerInfo[playerid][pGender] = 2;
	                PlayerInfo[playerid][pSkin] = 12;
	                SCM(playerid, COLOR_LIGHTRED, "[System]: "WHITE"You have choosen you're character a Female");
				}
		        //ShowDialogToPlayer(playerid, DIALOG_AGE);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
	    }
        case DIALOG_SKIN:
	    {
	        if(response)
	        {
	            new skinid;

                if(sscanf(inputtext, "i", skinid))
	            {
				    ShowDialogToPlayer(playerid, DIALOG_SKIN);
				    SCM(playerid, COLOR_SYNTAX, "[skinid]");
	            }
	            if(!(0 <= skinid <= 311) || (265 <= skinid <= 267) || (274 <= skinid <= 288) || (300 <= skinid <= 302) || (306 <= skinid <= 311))
				{
					 SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
                     return ShowDialogToPlayer(playerid, DIALOG_SKIN);
				}
	            if(!(1 <= skinid <= 311))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_SKIN);
				    SCM(playerid, COLOR_SYNTAX, "Invalid skin specified. (1-311)");
				    return 1;
	            }

	            PlayerInfo[playerid][pSkin] = skinid;
	            SetPlayerSkin(playerid, skinid);

                SM(playerid, COLOR_LIGHTRED, "[System]: "WHITE"You have choosen you're character skin to %i.", PlayerInfo[playerid][pSkin]);
	        }
	        else
	        {
             ShowDialogToPlayer(playerid, DIALOG_SKIN);
			}
	    }
	    case DIALOG_AGE:
	    {
	        if(response)
	        {
	            new age = strval(inputtext);

				if(!(13 <= age <= 99))
				{
				    ShowDialogToPlayer(playerid, DIALOG_AGE);
				    SCM(playerid, COLOR_SYNTAX, "You may only enter a number from 13 to 99. Please try again.");
				    return 1;
	            }

	            PlayerInfo[playerid][pAge] = age;
	            PlayerInfo[playerid][pReferralUID] = 0;

	            SM(playerid, COLOR_LIGHTRED, "[System]: "WHITE"You have choosen %i years old for your character.", age);
	            //ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_AGE);
			}
	    }
	    case DIALOG_REFERRAL:
	    {
	        if(response)
	        {
	            if(isnull(inputtext) || strlen(inputtext) > 24)
	            {
	                return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}
				if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
				{
				    SCM(playerid, COLOR_SYNTAX, "You can't put down your own name as a referral.");
				    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM users WHERE username = '%e'", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
	        }
	        else
	        {
				PlayerInfo[playerid][pTutorial] = 1;
				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", playerid);
			}
	    }
      /*	case DIALOG_RENTCAR:
	    {
 		    if(response)
		    {
			    if(listitem == 0) //General Interiors
			    {
				new iColors[2] = { -1, -1 };
				new Float: fVehPos[4];

				    GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
				    GetPlayerFacingAngle(playerid, fVehPos[3]);
				    RentCars = CreateVehicle(400, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
				    PutPlayerInVehicle(playerid, RentCars, 0);
				    PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] - 200;
				    PlayerInfo[playerid][pInsideRental] = 1;
				    return SendClientMessage(playerid, COLOR_GREY, "You have rented a Landstalker!");
			    }
			    if(listitem == 1) //General Interiors
			    {
				new iColors[2] = { -1, -1 };
				new Float: fVehPos[4];

				   GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
				   GetPlayerFacingAngle(playerid, fVehPos[3]);
				   RentCars = CreateVehicle(404, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
				   PutPlayerInVehicle(playerid, RentCars, 0);
				   PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] - 200;
				   PlayerInfo[playerid][pInsideRental] = 1;
				   return SendClientMessage(playerid, COLOR_GREY, "You have rented a Perreniel!");
			   }
			   if(listitem == 2) //General Interiors
			   {
				new iColors[2] = { -1, -1 };
				new Float: fVehPos[4];

				   GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
				   GetPlayerFacingAngle(playerid, fVehPos[3]);
				   RentCars = CreateVehicle(560, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
				   PutPlayerInVehicle(playerid, RentCars, 0);
				   PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] - 500;
				   PlayerInfo[playerid][pInsideRental] = 1;
				   return SendClientMessage(playerid, COLOR_GREY, "You have rented a Sultan!");
			   }
			   if(listitem == 3) //General Interiors
			   {
				new iColors[2] = { -1, -1 };
				new Float: fVehPos[4];

				   GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
				   GetPlayerFacingAngle(playerid, fVehPos[3]);
				   RentCars = CreateVehicle(411, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
				   PutPlayerInVehicle(playerid, RentCars, 0);
				   PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] - 1000;
				   PlayerInfo[playerid][pInsideRental] = 1;
				   return SendClientMessage(playerid, COLOR_GREY, "You have rented a Infernus!");
			  }
           }
		}*/
		case DIALOG_REFUND1:
	    {
	    if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_REFUND2, DIALOG_STYLE_LIST,"Mallu Gamers Mobile Community  - {FFFF00}Refund","Refund Package 1","Read", "");
		   }
	    }
		case DIALOG_REFUND2:
	    {
	    if(response)
	    {
		     if(listitem == 0)
			 {
			    ShowPlayerDialog(playerid, DIALOG_REFUND3, DIALOG_STYLE_MSGBOX,"Mallu Gamers Mobile Community ","{FFFF00}5000 Cash\n7Days-Gold Donator\n2 Playing Hours","Okay","Return");
			   }
		    }
	    }
		case DIALOG_REFUND3:
	    {
	    if(!response)
	    {
	        ShowPlayerDialog(playerid, DIALOG_REFUND2, DIALOG_STYLE_LIST,"Mallu Gamers Mobile Community - {FFFF00}Refund Packages","Refund Package","Read", "");
		}
	    if(response)
	    {
	        GivePlayerCash(playerid, 5000);
	        PlayerInfo[playerid][pBank] = 10000;
   	        PlayerInfo[playerid][pConnectTime] = 2;
		   }
	    }
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				if(response)
				{
					new badingsiseanz = Random(3,10);
					if(isnull(inputtext) || strlen(inputtext) < 4)
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						PlayerInfo[playerid][pLastCarolTime] = 30;
						return 1;
					}
					if(!strcmp(inputtext, ReturnLyrics(CarolLyrics[playerid])))
					{
						SM(playerid, SERVER_COLOR, "You have successfully sung the lyrics! "GREEN"You recieved %i candy.", badingsiseanz);
						PlayerInfo[playerid][pCandy] += badingsiseanz;
						PlayerInfo[playerid][pLastCarolTime] = 30;
						return 1;
					}
					else
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						PlayerInfo[playerid][pLastCarolTime] = 30;
					}
				}
				else
				{
					SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
					PlayerInfo[playerid][pLastCarolTime] = 30;
					return 1;
				}
			}
		#endif*/
	    case DIALOG_INTERIORS:
	    {
	        if(response)
	        {
	            TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
	            Dyuze(playerid, "Notice", "~w~Teleported");
	        }
	    }
	    case DIALOG_BUYFURNITURE1:
	    {
	        new houseid = GetInsideHouse(playerid);

		    if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	   	    if(response)
	        {
				PlayerInfo[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
	        }
	    }
	    case DIALOG_BUYFURNITURE2:
	    {
	        new houseid = GetInsideHouse(playerid);

	        if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	        if(response)
	        {
	            listitem += PlayerInfo[playerid][pFurnitureIndex];

	            if(PlayerInfo[playerid][pCash] < furnitureArray[listitem][fPrice])
	            {
	                return SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
	            }
	            else
	            {
		            new
		                Float:x,
	    	            Float:y,
	        	        Float:z,
	            	    Float:a;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					PlayerInfo[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
					PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[listitem][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[listitem][fModel] <= 19417) || (19426 <= furnitureArray[listitem][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                    PlayerInfo[playerid][pSelected] = listitem;

					SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This furniture item costs $%i to purchase.", furnitureArray[listitem][fName], furnitureArray[listitem][fPrice]);
					SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
                    EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
		case GatePass:
		{
			if (response)
			{
				new id = Gate_Nearest(playerid);

				if (id == -1)
					return 0;

				if (isnull(inputtext))
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");

				if (strcmp(inputtext, GateData[id][gatePass]) != 0)
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Error: Incorrect password specified.\n\nPlease enter the password for this gate below:", "Submit", "Cancel");

				Gate_Operate(id);
			}
		}
		case LotteryNumber:
		{
			if (response)
			{
				new bizid = GetInsideBusiness(playerid);

				if (bizid != -1)
				{
					new price = BusinessInfo[bizid][bPrices][18];
					if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
						return ShowPlayerDialog(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
					}
					PlayerInfo[playerid][pLottery] = strval(inputtext);
					PlayerInfo[playerid][pLotteryB] = 1;

					SendProximityMessage(playerid, 30.0, SERVER_COLOR, "**{D0AEEB} %s has paid %s and received a lottery ticket.", FormatNumber(price));

					GivePlayerCash(playerid, -price);

					BusinessInfo[bizid][bCash] += price;
					BusinessInfo[bizid][bProducts]--;

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[bizid][bCash], BusinessInfo[bizid][bProducts], BusinessInfo[bizid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET Lottery = %i, LotteryB = %i WHERE uid = %i", PlayerInfo[playerid][pLottery],PlayerInfo[playerid][pLotteryB], PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}
		case DIALOG_EDITBUY:
		{
			if(response)
			{
				PlayerInfo[playerid][pProductChoose] = listitem;
				//SM(playerid, COLOR_SYNTAX,"You are editing product number: %i", PlayerInfo[playerid][pProductChoose]);
				ShowPlayerDialog(playerid, DIALOG_EDITBUY2, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the new product price:", "Modify", "");
			}
		}
		case DIALOG_EDITBUY2: {
			if(response)
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid), product = PlayerInfo[playerid][pProductChoose];
				if(!(1 <= number <= 100000))
				{
					return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $100,000 at once.");
				}
				BusinessInfo[businessid][bPrices][product] = number;
				//SM(playerid, COLOR_SYNTAX,"You set product %d to %i.", BusinessInfo[businessid][bPrices][product], number);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%d = %i WHERE id = %i", product, number,BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
        case DIALOG_LSPD:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // LSPD Car
				    {
				        new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 596;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel [Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "LSPD CAR SPAWNED");
                        }
                        case 1: // Police Ranger
				        {
				    	new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 599;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Ranger SPAWNED");
				        }
    				    /*case 2: // Swat
				        {
				    	new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 601;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Swat Truck SPAWNED");
				    }
					case 3: // Cheetah
					{
				        new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 415;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Cheetah SPAWNED");
					}
					case 4: // LSPD Truck
					{
					    new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 528;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    factionVehicle{Pdveh} = true;
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "LSPD Truck SPAWNED");
					}
                    case 5: // Sulthan
					{
					    new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 560;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Sulthan SPAWNED");
					}
                    case 6: // Buffalo
					{
					    new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, Pdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 0;
                        color2 = 0;
                        modelid = 402;
	                    Pdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(Pdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[Pdveh][vFactionType] = 1;
	                    factionVehicle{Pdveh} = true;
	                    vehicleFuel[Pdveh] = 100;
	                    vehicleColors[Pdveh][0] = color1;
	                    vehicleColors[Pdveh][1] = color2;

	                    SetVehicleVirtualWorld(Pdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(Pdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, Pdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Buffalo SPAWNED");
					   }*/
                  }
             }
		}
		case DIALOG_MEDIC:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // Ambulance
				    {
				        new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, mdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = -1;
                        color2 = -1;
                        modelid = 416;
	                    mdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(mdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[mdveh][vFactionType] = 2;
	                    factionVehicle{mdveh} = true;
	                    vehicleFuel[mdveh] = 100;
	                    vehicleColors[mdveh][0] = color1;
	                    vehicleColors[mdveh][1] = color2;

	                    SetVehicleVirtualWorld(mdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(mdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, mdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Ambulance SPAWNED");
				    }
				    case 1: // Medic Ranger
				    {
				    	new modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, mdveh;

				    	GetPlayerPos(playerid, x, y, z);
	                    GetPlayerFacingAngle(playerid, a);

                        color1 = 3;
                        color2 = 3;
                        modelid = 490;
	                    mdveh = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	                    if(mdveh == INVALID_PLAYER_ID)
	                    {
	                       return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	                     }
	                    VehicleInfo[mdveh][vFactionType] = 2;
	                    factionVehicle{mdveh} = true;
	                    vehicleFuel[mdveh] = 100;
	                    vehicleColors[mdveh][0] = color1;
	                    vehicleColors[mdveh][1] = color2;

	                    SetVehicleVirtualWorld(mdveh, GetPlayerVirtualWorld(playerid));
	                    LinkVehicleToInterior(mdveh, GetPlayerInterior(playerid));

	                    PutPlayerInVehicle(playerid, mdveh, 0);
	                    SCM(playerid, COLOR_SYNTAX, "Medic Ranger SPAWNED");
				    }
				}
      		}
		}
     	case DIALOG_BUY:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }

	            if(BusinessInfo[businessid][bType] == BUSINESS_STORE)
	            {
	                switch(listitem)
	                {
	                    case 0:
	                    {
							new price = BusinessInfo[businessid][bPrices][0];

	                        if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pPhone] = random(100000) + 899999;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
	                        SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your new phone number is %i.", PlayerInfo[playerid][pPhone]);
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pWalkieTalkie])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a Portable Radio already.");
						    }

						    PlayerInfo[playerid][pWalkieTalkie] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Portable Radio.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Portable Radio purchased. Use /wtradio to set frequency and Talk.");
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pCigars] >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 cigars.");
						    }

						    PlayerInfo[playerid][pCigars] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pack of cigars.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Cigars purchased. Use /usecigar to smoke a cigar.");
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pSpraycans] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 spraycans.");
						    }

						    PlayerInfo[playerid][pSpraycans] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 10 spraycans.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Spraycans purchased. Use /colorcar and /paintcar in a vehicle to use them.");
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pPhonebook])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a phonebook already.");
						    }

						    PlayerInfo[playerid][pPhonebook] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a phonebook.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Phonebook purchased. Use /phonebook to lookup a player's number.");
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

							GiveWeapon(playerid, 43);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a camera.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Camera purchased.");
						}
						case 6:
						{
						    new price = BusinessInfo[businessid][bPrices][6];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pMP3Player])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have an MP3 player already.");
						    }

						    PlayerInfo[playerid][pMP3Player] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received an MP3 player.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** MP3 player purchased. Use /mp3 for a list of options.");
						}
						case 7:
						{
						    new price = BusinessInfo[businessid][bPrices][7];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pFishingRod])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a fishing rod already.");
						    }

						    PlayerInfo[playerid][pFishingRod] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a fishing rod.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing rod purchased. Use /fish at the pier or in a boat to begin fishing.");
						}
						case 8:
						{
						    new price = BusinessInfo[businessid][bPrices][8];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pFishingBait] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 pieces of bait.");
						    }

						    PlayerInfo[playerid][pFishingBait] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = %i WHERE uid = %i", PlayerInfo[playerid][pFishingBait], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received fish bait.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing bait purchased. Bait increases the odds of catching bigger fish.");
						}
						case 9:
						{
						    new price = BusinessInfo[businessid][bPrices][9];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pMuriaticAcid] + 1 >= 21)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of muriatic acid.");
						    }

						    PlayerInfo[playerid][pMuriaticAcid] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", PlayerInfo[playerid][pMuriaticAcid], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of muriatic acid.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Muriatic acid purchased.");
						}
						case 10:
						{
						    new price = BusinessInfo[businessid][bPrices][10];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pBakingSoda] + 1 >= 21)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 bottles of baking soda.");
						    }

						    PlayerInfo[playerid][pBakingSoda] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", PlayerInfo[playerid][pBakingSoda], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of baking soda.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Baking soda purchased.");
						}
						case 11:
						{
						    new price = BusinessInfo[businessid][bPrices][11];
						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pWatch])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a pocket watch already.");
						    }

						    PlayerInfo[playerid][pWatch] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pocket watch.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Pocket watch purchased. Use /ww to toggle it.");
						}
						case 12:
						{
						    new price = BusinessInfo[businessid][bPrices][12];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pGPS])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a GPS already.");
						    }

						    PlayerInfo[playerid][pGPS] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a GPS.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** GPS purchased. (( /gps, /locate ))");
						}
						case 13:
						{
						    new price = BusinessInfo[businessid][bPrices][13];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pGasCan] + 5 > 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 liters of gas.");
						    }

						    PlayerInfo[playerid][pGasCan] += 5;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 5 liters of gasoline.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
						}
						case 14:
						{
						    new price = BusinessInfo[businessid][bPrices][14];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pRope] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 ropes.");
						    }


						    PlayerInfo[playerid][pRope] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 ropes.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Ropes purchased. Use /tie to tie people in your vehicle.");
						}
						case 15:
						{
						    new price = BusinessInfo[businessid][bPrices][15];
						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pBlindfold] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 blindfolds.");
						    }


						    PlayerInfo[playerid][pBlindfold] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 blindfolds.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Blindfold purchased. Use /blindfold to blindfold people in your vehicle.");
						}
						/*case 16:
						{
						    new price = BusinessInfo[businessid][bPrices][16];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
							if(PlayerInfo[playerid][pBackpack] > 1)
							{
						    	return SCM(playerid, COLOR_SYNTAX, "You already have a small backpack.");
							}

						    PlayerInfo[playerid][pBackpack] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received small backpack.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Small Backpack purchased. Use /(b)ack(p)ack to check your backpack.");
						}*/
						case 16:
						{
		    				new price = BusinessInfo[businessid][bPrices][16];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pToolkit] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 toolkits.");
						    }


						    PlayerInfo[playerid][pToolkit] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a toolkit.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Toolkit purchased. Use /hotwire to hotwire people's vehicles.");
						}
						case 17:
						{
		    				new price = BusinessInfo[businessid][bPrices][17];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pFlashlight] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 flashlight.");
						    }


						    PlayerInfo[playerid][pFlashlight] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a flashlight.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Flashlight purchased. use /flashlight to use it on your hand and /taclight to use it on your weapon.	");
						}
						case 18:
						{
							if (PlayerInfo[playerid][pLottery])
								return SCM(playerid, COLOR_SYNTAX, "You have a lottery ticket already.");

							ShowPlayerDialog(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
						}
						case 19: {
							new price = BusinessInfo[businessid][bPrices][19];
						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(PlayerInfo[playerid][pMask])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a mask already.");
						    }

						    PlayerInfo[playerid][pMask] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Mask.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Mask purchased. Use /mask to toggle it.");
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_PHARMACY)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pBandage] + 1 > 5)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 bandages.");
						    }

 							PlayerInfo[playerid][pBandage] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the cashier and recieved an bandage.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pMedkit] + 1 > 2)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 2 medkits.");
						    }

 							PlayerInfo[playerid][pMedkit] +=1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the cashier and recieved an medkit.", GetRPName(playerid), price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
				{
				    if(PlayerInfo[playerid][pWeaponRestricted])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than 2 hours. You can't buy stuff here.");
					}

				    switch(listitem)
					{
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 4))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 4);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Knife.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Knife purchased.");
				        }
				        case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 5))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 5);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bat.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Bat purchased.");
				        }
				        case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 1))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 1);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Brass Knuckles.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Brass Knuckles.");
				        }
				        case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GiveWeapon(playerid, 22);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 9mm pistol.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** 9mm pistol purchased.");
				        }
				        case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GiveWeapon(playerid, 23);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Silenced Pistol.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Silenced Pistol purchased.");
				        }
				        case 5:
				        {
				            new price = BusinessInfo[businessid][bPrices][5];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GiveWeapon(playerid, 25);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Shot Gun.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Shot Gun purchased.");
				        }
				        case 6:
				        {
				            new price = BusinessInfo[businessid][bPrices][6];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        SetScriptArmour(playerid, 100.0);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Kelvar Vest.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Kelvar Vest purchased.");
				        }
				        case 7:
				        {
				            new price = BusinessInfo[businessid][bPrices][7];

				            if(PlayerInfo[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }

							PlayerInfo[playerid][pWeaponClip] += 1;

							GivePlayerCash(playerid, -price);
							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;
	                        
	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponclip = %i WHERE uid = %i", PlayerInfo[playerid][pWeaponClip], PlayerInfo[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

		                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the shopkeeper and received a weapon clip.", GetRPName(playerid), price);
		                    SCM(playerid, COLOR_WHITE, "** Weapon Clip purchased. Use /ammo to use.");
				        }
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
				    new
						string[128];

	                format(string, sizeof(string), "%s's %s [%i Products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				    if(listitem == 0)
					{
						//ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
						//ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkins, sizeof(clothesShopSkins));
                        ResetClotheSetup(playerid);
						SelectTextDraw(playerid, COLOR_AQUA);
						for (new i = 0; i < 7; i ++) {
							PlayerTextDrawShow(playerid, ClotheTD[playerid][i]);
						}

						PlayerInfo[playerid][pTempSkin] = PlayerInfo[playerid][pSkin];
					}
					else
					{
						PlayerInfo[playerid][pCategory] = listitem - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
				    }
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "** You have chosen the normal fighting style.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][0];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

                            PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Boxing fighting style for $%i.", price);
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kung-Fu fighting style for $%i.", price);
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kneehead fighting style for $%i.", price);
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Grabkick fighting style for $%i.", price);
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerInfo[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
	                        SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Elbow fighting style for $%i.", price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

 							PlayerInfo[playerid][pThirst] += 25;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

         					PlayerInfo[playerid][pThirst] += 30;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 15.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

        					PlayerInfo[playerid][pHunger] += 25;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 20.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received kid's meal.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pHunger] += 30;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 25.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a medium meal.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pHunger] += 100;
							PlayerInfo[playerid][pHungerTimer] = 0;
			        		if (PlayerInfo[playerid][pHunger] > 100)
							{
								PlayerInfo[playerid][pHunger] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 30.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a big meal.", GetRPName(playerid), price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 25;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 30;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 35;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of beer.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 40;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of wine.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(PlayerInfo[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        PlayerInfo[playerid][pThirst] += 50;
							PlayerInfo[playerid][pThirstTimer] = 0;
			        		if (PlayerInfo[playerid][pThirst] > 100)
							{
								PlayerInfo[playerid][pThirst] = 100;
							}

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of whiskey.", GetRPName(playerid), price);
						}
					}
				}
			}
		}
	    case DIALOG_BUYCLOTHES:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }
	            if(PlayerInfo[playerid][pVIPPackage] == 0 && PlayerInfo[playerid][pCash] < 50)
                {
                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
                }

	            if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                new skinid;

	                if(sscanf(inputtext, "i", skinid))
	                {
	                    return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}
					if(!(0 <= skinid <= 311) || (265 <= skinid <= 267) || (274 <= skinid <= 288) || (300 <= skinid <= 302) || (306 <= skinid <= 311))
					{
					    SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
                        return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}

					if(PlayerInfo[playerid][pVIPPackage] == 0)
					{
					    new price = 50;

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
                    	BusinessInfo[businessid][bProducts]--;

                    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    	mysql_tquery(connectionID, queryBuffer);

                    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a new set of clothes.", GetRPName(playerid), price);
                 		SM(playerid, COLOR_WHITE, "** You've changed your skin for $%i.", price);
                    }
                    else
                    {
                        SCM(playerid, COLOR_VIP, "** Donator perk: You changed your clothes free of charge.");
					}

					SetPlayerSkin(playerid, skinid);
                    PlayerInfo[playerid][pSkin] = skinid;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);
	            }
			}
	    }
   		case DIALOG_PICKLOAD:
	    {
	        if(response)
	        {
	            if(!PlayerHasJob(playerid, JOB_COURIER))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 499 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville.");
				}
				if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
				}

				switch(listitem)
				{
				    case 0:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Grocery supplies{33CCFF}. Use /deliver at any Supermarket to drop off this shipment.");
						PlayerInfo[playerid][pShipment] = BUSINESS_STORE;
	                }
	                case 1:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Ammunition{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
						PlayerInfo[playerid][pShipment] = BUSINESS_GUNSHOP;
	                }
	                case 2:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Clothing items{33CCFF}. Use /deliver at any Clothes Shop to drop off this shipment.");
						PlayerInfo[playerid][pShipment] = BUSINESS_CLOTHES;
	                }
	                case 3:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Food & drinks{33CCFF}. Use /deliver at any Restaurant to drop off this shipment.");
						PlayerInfo[playerid][pShipment] = BUSINESS_RESTAURANT;
	                }
	                case 4:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Beverages{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
						PlayerInfo[playerid][pShipment] = BUSINESS_BARCLUB;
	                }
	                case 5:
	                {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Weapons{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						PlayerInfo[playerid][pShipment] = BUSINESS_GUNSHOP;
						PlayerInfo[playerid][pIllegalCargo] = ILLEGAL_GUNS;
					}
					case 6:
					{
    					SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Materials{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						PlayerInfo[playerid][pShipment] = BUSINESS_GUNSHOP;
						PlayerInfo[playerid][pIllegalCargo] = ILLEGAL_MATS;
					}
					case 7:
					{
    					SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Drugs{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						PlayerInfo[playerid][pShipment] = BUSINESS_BARCLUB;
						PlayerInfo[playerid][pIllegalCargo] = ILLEGAL_DRUGS;
					}
				}

				PlayerInfo[playerid][pLastLoad] = gettime();
	        }
	    }
	    case DIALOG_UNREADTEXTS:
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", PlayerInfo[playerid][pPhone]);
	        mysql_tquery(connectionID, queryBuffer);

	        if(response)
	        {
				callcmd::texts(playerid, "\1");
	        }
	    }
	    case DIALOG_ATM:
	    {
	        if(response)
	        {
				switch(listitem) {
					case 0: ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
					case 1: ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
					case 2: ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
				}
	        }
		}
		case DIALOG_VOICECHAT:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	SvUpdateDistanceForLStream(lstream[playerid], 2.0);
			    	SendClientMessage(playerid, COLOR_GREY, "you are whispering now.");
				}
				if(listitem == 1)
			    {
			    	SvUpdateDistanceForLStream(lstream[playerid], 5.0);
			    	SendClientMessage(playerid, COLOR_GREY, "you are now at the normal voice.");
				}
				if(listitem == 2)
			    {
				    SvUpdateDistanceForLStream(lstream[playerid], 15.0);
				    SendClientMessage(playerid, COLOR_GREY, "you are shouting now.");
				}
			}
		}
		case DIALOG_ATMDEPOSIT:
		{
			if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM);
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	                return 1;
	            }

	            PlayerInfo[playerid][pBank] += amount;
	            GivePlayerCash(playerid, -amount);

	            if(PlayerInfo[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 1);

	                PlayerInfo[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and deposits some cash in their bank account.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have deposited %s into your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));
	        }
		}
	    case DIALOG_ATMWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	                return 1;
	            }

	            PlayerInfo[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            if(PlayerInfo[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 1);

	                PlayerInfo[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have withdrawn %s from your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));

	        }
		}
		case DIALOG_WTRADIO:
	    {
	        if(response)
	        {
	            new id;

	            if(sscanf(inputtext, "i", id))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_WTRADIO);
	            }
	            if(!(0 <= id <= 555))
	            {
                    return SendClientMessage(playerid, COLOR_SYNTAX, "The specified Radio Channel must range from 0 to 555.");
	            }
	            if(PlayerInfo[playerid][pPrRadio] == 1)
	            {
	                return SendClientMessage(playerid, COLOR_SYNTAX, "You need to disconnect from a radio channel to connect to another channel");
             	}
	            IDStream[playerid] = id;

	            if(StreamFreq[IDStream[playerid]] == SV_NULL)
                {
                    PlayerInfo[playerid][pPrRadio] = 1;
		            StreamFreq[IDStream[playerid]] = SvCreateGStream(0xFF0000FF, "Radio");
		            SvAttachListenerToStream(StreamFreq[IDStream[playerid]], playerid);
		            SendClientMessage(playerid, COLOR_CYAN, "Successfully connected to the radio channel.");
		            new string[128];
                    format(string, sizeof(string), "%d", id);
		            PlayerTextDrawSetString(playerid, PortableRadioTD[playerid][1], string);
 	            }
 	            else
 	            {
                    PlayerInfo[playerid][pPrRadio] = 1;
    	            SvAttachListenerToStream(StreamFreq[IDStream[playerid]], playerid);
                    SendClientMessage(playerid, COLOR_CYAN, "Successfully connected to the radio channel.");
	            }
            }
		}
	    case DIALOG_ATM_TRANSFER:
	    {
	        if(response)
	        {
	            new id;

	            if(sscanf(inputtext, "i", id))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	            }
	            if(!IsPlayerConnected(id))
	            {
	                SendClientMessage(playerid, COLOR_GREY, "That player is not connected.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
	            }
				SetPVarInt(playerid, "transfer_id", id);
				ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	        }
		}
	    case DIALOG_ATM_TRANSFER2:
	    {
	        if(response)
	        {
	            new targetid = GetPVarInt(playerid, "transfer_id"), amount;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	            }
	            if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	                return 1;
	            }
				if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or hasn't logged in yet.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}
				if(!PlayerInfo[targetid][pLogged])
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, SERVER_COLOR, "(( That player is not logged in ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}

	            PlayerInfo[targetid][pBank] += amount;
				PlayerInfo[playerid][pBank] -= amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
				mysql_tquery(connectionID, queryBuffer);

	            SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), PlayerInfo[playerid][pBank]);
				SM(targetid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
				//Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

				if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
				{
				    SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
				}
	        }
		}
		case DIALOG_CHANGEPASS:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 4)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You need to enter a password greater than 4 characters.");
		        }

				new
				    password[129];

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE uid = %i", password, PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCM(playerid, COLOR_WHITE, "** Your account password was changed successfully.");
    		}
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    if(response)
		    {
		        PlayerInfo[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu(playerid);
				else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
		    }
		    else
		    {
		        callcmd::buy(playerid, "\1");
			}
		}
		case DIALOG_BUYCLOTHING:
		{
		    if(response)
		    {
		        PreviewClothing(playerid, listitem + PlayerInfo[playerid][pClothingIndex]);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
		}
        case DIALOG_KAYOPERIKO:
	    {
	        if(response)
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
			         new price = 3000;
				    if(PlayerInfo[playerid][pCash] < 3000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase Hacker Laptop/Hammer.");
				    }
				    if(PlayerInfo[playerid][pHammer] == 5)
				    {
                        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 Hacker Laptop/Hammer.");
				    }
				    PlayerInfo[playerid][pHammer] += 1;

					GivePlayerCash(playerid, -price);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hammer = %i WHERE uid = %i", PlayerInfo[playerid][pHammer], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Hacker Laptop/Hammer..", GetRPName(playerid), price);
				    SCM(playerid, COLOR_WHITE, "** Hacker Laptop/Hammer. purchased. You can use it in various robberies");
				    }
				    case 1:
		            {
			         new price = 3000;
				    if(PlayerInfo[playerid][pCash] < 3000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have $3000 for Purchasing Tools to Break Jail");
				    }
				    if(PlayerInfo[playerid][pTool] == 5)
				    {
                        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 Tools");
				    }
				    PlayerInfo[playerid][pTool] += 1;

					GivePlayerCash(playerid, -price);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET tool = %i WHERE uid = %i", PlayerInfo[playerid][pTool], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received Tool to Break Jail..", GetRPName(playerid), price);
				    SCM(playerid, COLOR_WHITE, "** Jail Breaking Tool. purchased. You can use it when in jail");
				    }
				}
			}
		}
		case DIALOG_CLOTHING:
		{
		    if(response)
		    {
		        if(!ClothingInfo[playerid][listitem][cExists])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "The slot you've selected does not contain any item of clothing.");
		        }

		        if(ClothingInfo[playerid][listitem][cAttached]) {
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Detach\nEdit\nDelete", "Select", "Cancel");
		        } else {
                    ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Attach\nEdit\nDelete", "Select", "Cancel");
		        }

		        PlayerInfo[playerid][pSelected] = listitem;
			}
		}
		case DIALOG_CLOTHINGMENU:
		{
		    if(response)
		    {
		        new clothingid = PlayerInfo[playerid][pSelected];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(!ClothingInfo[playerid][clothingid][cAttached])
		                {
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

		                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
		                    {
			                    ClothingInfo[playerid][clothingid][cAttached] = 1;

			                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
									ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
								SM(playerid, COLOR_WHITE, "** %s attached to slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
								mysql_tquery(connectionID, queryBuffer);
							}
							else
							{
							    SCM(playerid, COLOR_SYNTAX, "No attachment slots available. You can only have up to five clothing items attached at once.");
		                    }
		                }
		                else
		                {
		                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		                    ClothingInfo[playerid][clothingid][cAttached] = 0;
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
							mysql_tquery(connectionID, queryBuffer);

							SM(playerid, COLOR_WHITE, "** %s detached and added to inventory.", ClothingInfo[playerid][clothingid][cName]);
		                }
		            }
					case 1:
					{
				    	ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Edition menu", "Edit offset\nChange bone", "Select", "Cancel");
					}
					case 2:
					{
				    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
				    	SM(playerid, COLOR_WHITE, "** %s deleted from your clothing inventory.", ClothingInfo[playerid][clothingid][cName]);

				    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
				    	mysql_tquery(connectionID, queryBuffer);

					    ClothingInfo[playerid][clothingid][cAttached] = 0;
			            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
					    ClothingInfo[playerid][clothingid][cExists] = 0;
					    ClothingInfo[playerid][clothingid][cID] = 0;
					    ClothingInfo[playerid][clothingid][cName] = 0;
					}
				}
			}
		}
		case DIALOG_CLOTHINGEDIT:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                PlayerInfo[playerid][pEditType] = EDIT_CLOTHING;

		                if(!ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached]) {
		                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
								ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);

							EditAttachedObject(playerid, 9);
		                }
		                else {
		                    EditAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
		                }

		                GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Choose a new bone for this clothing item.", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Select", "Cancel");
					}
				}
			}
		}
		case DIALOG_CLOTHINGBONE:
		{
		    if(response)
		    {
		        ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone] = listitem + 1;

		        if(ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttached])
		        {
		            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex]);
		            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cScaleZ]);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_WHITE, "** Bone for {00AA00}%s"WHITE" changed to '%s'.", ClothingInfo[playerid][PlayerInfo[playerid][pSelected]][cName], inputtext);
		    }
		}
		case DIALOG_BUYVEHICLE:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
		        }

		        new
		            string[128];

		        PlayerInfo[playerid][pSelected] = listitem;

				format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "SVRCLR"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
				ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
			}
		}
		case DIALOG_BUYBOAT:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Boats"))
		            {
		                listitem += i;

		                if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
				        }

				        new
				            string[128];

				        PlayerInfo[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "SVRCLR"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
						return 1;
					}
				}
		    }
		}
		case DIALOG_BUYAIRCRAFT:
		{
		    if(response)
		    {
		        for(new i = 0; i < sizeof(vehicleArray); i ++)
		        {
		            if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
		            {
		                listitem += i;

		                if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
				        {
				            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
				        }

				        new
				            string[128];

				        PlayerInfo[playerid][pSelected] = listitem;

						format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "SVRCLR"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
						ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
						return 1;
					}
				}
		    }
		}
		case DIALOG_BUYVEHICLE2:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pGangCar])
		        {
		            new
		                string[20];

		            listitem = PlayerInfo[playerid][pSelected];

		            if(PlayerInfo[playerid][pCash] < vehicleArray[listitem][cARPrice])
			        {
			            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
			        }
			        if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
					}
					if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
				    }

		            new
						Float:x,
						Float:y,
						Float:z,
						Float:angle;

		            if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.6909, -1298.2206, 17.2362))
					{
						switch(random(3))
			    	    {
			        	    case 0: x = 562.3970, y = -1283.8485, z = 17.0007, angle = 0.0000;
			            	case 1: x = 557.8670, y = -1283.9822, z = 17.0007, angle = 0.0000;
			            	case 2: x = 552.8177, y = -1284.1307, z = 17.0007, angle = 0.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
					{
					    switch(random(4))
			    	    {
			        	    case 0: x = 138.0530, y = -1828.8923, z = -0.4000, angle = 90.0000;
			            	case 1: x = 138.0067, y = -1819.7065, z = -0.4000, angle = 90.0000;
			            	case 2: x = 137.9428, y = -1810.7821, z = -0.4000, angle = 90.0000;
			            	case 3: x = 137.0448, y = -1801.4567, z = -0.4000, angle = 90.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
					{
					    switch(random(3))
			    	    {
			        	    case 0: x = 1806.3048, y = -2424.4480, z = 15.0087, angle = 180.0000;
			            	case 1: x = 1847.3726, y = -2428.7100, z = 15.0087, angle = 180.0000;
			            	case 2: x = 1891.6610, y = -2433.3047, z = 15.0087, angle = 180.0000;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, price, pos_x, pos_y, pos_z, pos_a, gangid, respawndelay) VALUES(%i, %i, '%f', '%f', '%f', '%f', %i, 600)", vehicleArray[listitem][carModel], vehicleArray[listitem][cARPrice], x, y, z, angle, PlayerInfo[playerid][pGang]);
					mysql_tquery(connectionID, queryBuffer);

                    AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[listitem][cARPrice], 3));
			        mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

			        format(string, sizeof(string), "~r~-$%i", vehicleArray[listitem][cARPrice]);
		    	    Dyuze(playerid, "Notice", string);

					GivePlayerCash(playerid, -vehicleArray[listitem][cARPrice]);
					PlayerInfo[playerid][pGangCar] = 0;

			        SM(playerid, COLOR_GREEN, "%s purchased for your gang for $%i. /ganghelp for more commands.", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
		    	    //Log_Write("log_give", "%s (uid: %i) purchased a %s for %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], vehicleNames[vehicleArray[listitem][carModel] - 400], GangInfo[PlayerInfo[playerid][pGang]][gName], vehicleArray[listitem][cARPrice]);
		        }
		        else
		        {
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, PlayerInfo[playerid][pSelected]);
				}
			}
		}
  		case DIALOG_SPAWNCAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerInfo[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
		    }
		}
		case DIALOG_DESPAWNCAR:
		{
		    if(response)
		    {
		        new count;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
			 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
			 	        {
			 	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
			 	        }

			 	        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(i), GetVehicleZoneName(i));
            			DespawnVehicle(i);
            			return 1;
			 	    }
		        }
		    }
		}
		case DIALOG_FINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
                        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_BIZINTERIOR:
		{
		    if(response)
		    {
		        new businessid = PlayerInfo[playerid][pSelected];

		        foreach(new i : Player)
		        {
		            if(GetInsideBusiness(i) == businessid)
		            {
						SetPlayerPos(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ]);
						SetPlayerFacingAngle(i, bizInteriorArray[listitem][intA]);
						SetPlayerInterior(i, bizInteriorArray[listitem][intID]);
						SetCameraBehindPlayer(i);
		            }
		        }

                BusinessInfo[businessid][bIntX] = bizInteriorArray[listitem][intX];
                BusinessInfo[businessid][bIntY] = bizInteriorArray[listitem][intY];
                BusinessInfo[businessid][bIntZ] = bizInteriorArray[listitem][intZ];
                BusinessInfo[businessid][bIntA] = bizInteriorArray[listitem][intA];
			    BusinessInfo[businessid][bInterior] = bizInteriorArray[listitem][intID];

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
			    mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			    SM(playerid, COLOR_AQUA, "You've changed the interior of business %i to %s.", businessid, bizInteriorArray[listitem][intName]);
		    }
		}
		case DIALOG_FACTIONLOCKER:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
		    {
				switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_MECHANIC, FACTION_TERRORIST, FACTION_ARMY, FACTION_CARDEALER:
					{
					    if(listitem == 0) // Toggle duty
					    {
					        if(!PlayerInfo[playerid][pDuty])
					        {
					            if(IsLawEnforcement(playerid) || IsTerrorist(playerid))
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their police issued equipment from the locker.", GetRPName(playerid));
								}
								else if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC)
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their medical supplies from the locker.", GetRPName(playerid));
								}

                                PlayerInfo[playerid][pDuty] = 1;

								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
							    PlayerInfo[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Equipment
						{
		    				if(IsLawEnforcement(playerid) || IsTerrorist(playerid))
		    				{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSniper", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nFire Extinguisher\nShotgun\nPainkillers", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(PlayerInfo[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_SYNTAX, "There are no uniforms setup for your faction.");
							}
							if(PlayerInfo[playerid][pClothes] >= 0)
							{
							    PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pClothes];
							    PlayerInfo[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            PlayerInfo[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
						if(listitem == 0) // Toggle duty
					    {
					        if(!PlayerInfo[playerid][pDuty])
					        {
								if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their equipment from the locker.", GetRPName(playerid));
								}

                                PlayerInfo[playerid][pDuty] = 1;

								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
							    PlayerInfo[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
					    if(listitem == 1) // Equipment
					    {

					        if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nCamera", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(PlayerInfo[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_SYNTAX, "There are no uniforms setup for your faction.");
							}
							if(PlayerInfo[playerid][pClothes] >= 0)
							{
							    PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pClothes];
							    PlayerInfo[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    PlayerInfo[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_BURGER:
					{
						if(listitem == 0) // Toggle duty
					    {
					        if(!PlayerInfo[playerid][pDuty])
					        {
								if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_BURGER)
					            {
					                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their equipment from the locker.", GetRPName(playerid));
								}

                                PlayerInfo[playerid][pDuty] = 1;

								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
							    PlayerInfo[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(PlayerInfo[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_SYNTAX, "There are no uniforms setup for your faction.");
							}
							if(PlayerInfo[playerid][pClothes] >= 0)
							{
							    PlayerInfo[playerid][pSkin] = PlayerInfo[playerid][pClothes];
							    PlayerInfo[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    PlayerInfo[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_HITMAN:
					{
					    if(listitem == 0) // Order weapons
					    {
					        ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Order weapons", "Kevlar Vest ($100)\nKnife ($150)\nSilenced pistol ($100)\nShotgun ($150)\nDesert Eagle ($200)\nMP5 ($250)\nCountry rifle ($400)\nAK-47 ($600)\nM4 ($800)\nSniper rifle ($900)\nBomb ($750)", "Order", "Cancel");
						}
						else if(listitem == 1) // Change clothes
						{
						    ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
						}
					}
		        }
			}
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
		    {
				switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_FEDERAL, FACTION_TERRORIST, FACTION_ARMY:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 34);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an SNIPER from the locker.", GetRPName(playerid));
					        }
						}
					}
					case FACTION_MEDIC, FACTION_MECHANIC, FACTION_CARDEALER:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 42);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a fire extinguisher from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                 				GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            PlayerInfo[playerid][pPainkillers] = 40;
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a 40 pack of painkillers from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
						}
					}
					case FACTION_GOVERNMENT:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_NEWS:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a digital camera from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_HITMAN:
					{
					    switch(listitem)
					    {
					        case 0:
							{
							    if(PlayerInfo[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

					            GivePlayerCash(playerid, -100);
					            SetScriptArmour(playerid, 100.0);

					            SM(playerid, COLOR_AQUA, "** You ordered a kevlar vest for $100.");
					            Dyuze(playerid, "Notice", "~r~-$100");
					    	}
							case 1:
							{
							    if(PlayerInfo[playerid][pCash] < 150)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

					            GiveWeapon(playerid, 4);
					            GivePlayerCash(playerid, -150);

					            SM(playerid, COLOR_AQUA, "** You ordered a knife for $150.");
					            Dyuze(playerid, "Notice", "~r~-$150");
					    	}
					    	case 2:
							{
							    if(PlayerInfo[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 23);
					            GivePlayerCash(playerid, -100);

					            SM(playerid, COLOR_AQUA, "** You ordered a silenced pistol for $100.");
					            Dyuze(playerid, "Notice", "~r~-$100");
					    	}
					    	case 3:
							{
							    if(PlayerInfo[playerid][pCash] < 150)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 25);
					            GivePlayerCash(playerid, -150);

					            SM(playerid, COLOR_AQUA, "** You ordered a shotgun for $150.");
					            Dyuze(playerid, "Notice", "~r~-$150");
					    	}
					    	case 4:
							{
							    if(PlayerInfo[playerid][pCash] < 200)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 24);
					            GivePlayerCash(playerid, -200);

					            SM(playerid, COLOR_AQUA, "** You ordered a Desert Eagle for $200.");
					            Dyuze(playerid, "Notice", "~r~-$200");
					    	}
					    	case 5:
							{
							    if(PlayerInfo[playerid][pCash] < 250)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 29);
					            GivePlayerCash(playerid, -250);

					            SM(playerid, COLOR_AQUA, "** You ordered an MP5 for $250.");
					            Dyuze(playerid, "Notice", "~r~-$2500");
					    	}
					    	case 6:
							{
							    if(PlayerInfo[playerid][pCash] < 400)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 33);
					            GivePlayerCash(playerid, -400);

					            SM(playerid, COLOR_AQUA, "** You ordered a country rifle for $400.");
					            Dyuze(playerid, "Notice", "~r~-$400");
					    	}
					    	case 7:
							{
							    if(PlayerInfo[playerid][pCash] < 600)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 30);
					            GivePlayerCash(playerid, -600);

					            SM(playerid, COLOR_AQUA, "** You ordered an AK-47 for $600.");
					            Dyuze(playerid, "Notice", "~r~-$600");
					    	}
					    	case 8:
							{
							    if(PlayerInfo[playerid][pCash] < 800)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 31);
					            GivePlayerCash(playerid, -800);

					            SM(playerid, COLOR_AQUA, "** You ordered an M4 for $800.");
					            Dyuze(playerid, "Notice", "~r~-$800");
					    	}
					    	case 9:
							{
							    if(PlayerInfo[playerid][pCash] < 900)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 34);
					            GivePlayerCash(playerid, -900);

					            SM(playerid, COLOR_AQUA, "** You ordered a sniper rifle for $900.");
					            Dyuze(playerid, "Notice", "~r~-$900");
					    	}
					    	case 10:
							{
							    if(PlayerInfo[playerid][pCash] < 750)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't afford this weapon.");
					            }
					            if(PlayerInfo[playerid][pBombs] > 3)
					            {
					                return SCM(playerid, COLOR_SYNTAX, "You have more than 3 bombs. You can't buy anymore.");
								}

					            PlayerInfo[playerid][pBombs]++;
					            GivePlayerCash(playerid, -750);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
								mysql_tquery(connectionID, queryBuffer);

					            SM(playerid, COLOR_AQUA, "** You ordered a bomb for $750. /plantbomb to place the bomb.");
					            Dyuze(playerid, "Notice", "~r~-$750");
					    	}
					    }
					}
				}
			}
		}
		case DIALOG_FACTIONSKINS:
		{
		    if(PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
		    {
		        if(response)
		        {
					new index = PlayerInfo[playerid][pSkinSelected] + 1;

					if(index >= MAX_FACTION_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
					    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
					    PlayerInfo[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_FACTION_SKINS; i ++)
						{
						    if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
						        PlayerInfo[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == PlayerInfo[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
							{
						    	if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
						        	PlayerInfo[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
		        }
		        else
		        {
		            PlayerInfo[playerid][pClothes] = PlayerInfo[playerid][pSkin];
		            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
		            PlayerInfo[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pClothes], PlayerInfo[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes a uniform out of the locker and puts it on.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_HITMANCLOTHES:
		{
		    if((response) && PlayerInfo[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
		    {
				new skinid;

		    	if(sscanf(inputtext, "i", skinid))
				{
					return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }
		        if(!(0 <= skinid <= 311))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		            return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }

		        PlayerInfo[playerid][pSkin] = skinid;
		        SetPlayerSkin(playerid, skinid);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				Dyuze(playerid, "Notice", "~w~Clothes changed for free");
		    }
		}
		case DIALOG_MDC:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                static string[2048], count;

		                string = "Suspect\tLocation\tWanted level";

		                count = 0;

						foreach(new i : Player)
						{
						    if(PlayerInfo[i][pWantedLevel] > 0)
						    {
						        format(string, sizeof(string), "%s\n%s\t%s\t%i/6", string, GetRPName(i), GetPlayerZoneName(i), PlayerInfo[i][pWantedLevel]);
						        count++;
						    }
						}

						if(!count)
						{
						    return SCM(playerid, COLOR_SYNTAX, "There are currently no wanted suspects online.");
						}

						ShowPlayerDialog(playerid, DIALOG_MDCWANTED, DIALOG_STYLE_TABLIST_HEADERS, "Suspects wanted", string, "Track", "Cancel");
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
					}
				}
			}
		}
		case DIALOG_MDCWANTED:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        foreach(new i : Player)
				{
    				if(!strcmp(GetRPName(i), inputtext))
    				{
    				    new
    				        Float:x,
    				        Float:y,
    				        Float:z;

    				    GetPlayerPosEx(i, x, y, z);

    				    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

    				    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the suspect's last known location.");
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "The suspect you've selected has went offline.");
			}
		}
		case DIALOG_PLAYERLOOKUP:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        new username[MAX_PLAYER_NAME];

		        if(sscanf(inputtext, "s[24]", username))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gender, age, wantedlevel, crimes, arrested, carlicense, gunlicense FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer, "MDC_PlayerLookup", "is", playerid, username);
			}
		}
		case DIALOG_MDCPLAYER1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges\nCheck Vehicles", "Select", "Cancel");
			}
		}
		case DIALOG_MDCPLAYER2:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", PlayerInfo[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);
		            }
		            case 1:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", PlayerInfo[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ClearCharges", "i", playerid);
		            }
		            case 2:
		            {
		                SM(playerid, SERVER_COLOR, "[!]"WHITE" Coming soon.");
					}
				}
		    }
		}
		case DIALOG_MDCCHARGES:
		{
		    ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges", "Select", "Cancel");
		}
		case DIALOG_VEHICLELOOKUP1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
			    new vehicleid, string[512];

			    if(sscanf(inputtext, "i", vehicleid))
			    {
		    	    return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}
				if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
				{
				    SCM(playerid, COLOR_SYNTAX, "The vehicle ID specified is not owned by any particular person.");
			    	return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}

				PlayerInfo[playerid][pSelected] = vehicleid;

				format(string, sizeof(string), "Name: %s\nPlate: %s\nOwner: %s\nTickets: $%i\nLocation: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vTickets], GetVehicleZoneName(vehicleid));
            	ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Vehicle lookup", string, "Track", "Cancel");
			}
		}
		case DIALOG_VEHICLELOOKUP2:
		{
			if((response) && IsLawEnforcement(playerid))
		    {
				new garageid, vehicleid = PlayerInfo[playerid][pSelected];

				if((garageid = GetVehicleGarage(vehicleid)) >= 0)
				{
				    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the garage this vehicle is inside of.");
				}
				else
				{
				    new
						Float:x,
						Float:y,
						Float:z;

                    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the vehicle's last known location.");

					GetVehiclePos(vehicleid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				}

    			PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    if((response) && GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
		    }
		}
		case DIALOG_FACTIONPAY2:
		{
		    if(GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        if(response)
		        {
		            new amount, factionid = PlayerInfo[playerid][pFactionEdit], rankid = PlayerInfo[playerid][pSelected];

		            if(sscanf(inputtext, "i", amount))
		            {
		                return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}
					if(!(1 <= amount <= 30000))
					{
					    SCM(playerid, COLOR_SYNTAX, "The specified amount must range from $1 to $30000.");
					    return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}

					FactionInfo[factionid][fPaycheck][rankid] = amount;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
				    mysql_tquery(connectionID, queryBuffer);

					SM(playerid, COLOR_AQUA, "You have set the paycheck for rank %i to $%i.", rankid, amount);
				    new szString[128];
					format(szString, sizeof(szString), "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
					SendDiscordMessage(4, szString);
					//Log_Write("log_faction", "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
		        }

				ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
		    }
		}
		case DIALOG_PHONEBOOK:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            PlayerInfo[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && PlayerInfo[playerid][pPage] > 1)
		        {
		            PlayerInfo[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		    }
		}
		case DIALOG_CREATEZONE:
		{
		    if((response) && PlayerInfo[playerid][pAdmin] >= 5)
		    {
		        PlayerInfo[playerid][pMinX] = 0.0;
		        PlayerInfo[playerid][pMinY] = 0.0;
		        PlayerInfo[playerid][pMaxX] = 0.0;
		        PlayerInfo[playerid][pMaxY] = 0.0;

		        if(PlayerInfo[playerid][pZoneType] == ZONETYPE_LAND)
				{
					new Float:lx = PlayerInfo[playerid][plX],
					    Float:ly = PlayerInfo[playerid][plY],
					    Float:lz = PlayerInfo[playerid][plZ];

                    GetPlayerPos(playerid, lx, ly, lz);
					PlayerInfo[playerid][plX] = lx;
					PlayerInfo[playerid][plY] = ly;
					PlayerInfo[playerid][plZ] = lz;

			        PlayerInfo[playerid][pZoneCreation] = ZONETYPE_LAND;
			        SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
				else if(PlayerInfo[playerid][pZoneType] == ZONETYPE_TURF)
				{
			        PlayerInfo[playerid][pZoneCreation] = ZONETYPE_TURF;
			        SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
		    }
		}
		case DIALOG_CONFIRMZONE:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_LAND)
		        {
			        for(new i = 0; i < MAX_LANDS; i ++)
					{
					    if(!LandInfo[i][lExists])
					    {
					        new
					            Float:minx = PlayerInfo[playerid][pMinX],
					            Float:miny = PlayerInfo[playerid][pMinY],
					            Float:maxx = PlayerInfo[playerid][pMaxX],
					            Float:maxy = PlayerInfo[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            PlayerInfo[playerid][pMinX] = maxx;
	                            PlayerInfo[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            PlayerInfo[playerid][pMinY] = maxy;
					            PlayerInfo[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO lands (price, min_x, min_y, max_x, max_y, height, lx, ly, lz) VALUES(%i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pLandCost], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z, PlayerInfo[playerid][plX], PlayerInfo[playerid][plY], PlayerInfo[playerid][plZ]);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLand", "iiiffffffff", playerid, i, PlayerInfo[playerid][pLandCost], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z, PlayerInfo[playerid][plX], PlayerInfo[playerid][plY], PlayerInfo[playerid][plZ]);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Land slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
		    	else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF)
		    	{
		    	    for(new i = 1; i < MAX_TURFS; i ++)
					{
					    if(!TurfInfo[i][tExists])
					    {
					        new
					            Float:minx = PlayerInfo[playerid][pMinX],
					            Float:miny = PlayerInfo[playerid][pMinY],
					            Float:maxx = PlayerInfo[playerid][pMaxX],
					            Float:maxy = PlayerInfo[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            PlayerInfo[playerid][pMinX] = maxx;
	                            PlayerInfo[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            PlayerInfo[playerid][pMinY] = maxy;
					            PlayerInfo[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f')", i, PlayerInfo[playerid][pTurfName], PlayerInfo[playerid][pTurfType], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, PlayerInfo[playerid][pTurfName], PlayerInfo[playerid][pTurfType], PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY], z);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Turf slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
			}
			else
			{
			    CancelZoneCreation(playerid);

		        if(PlayerInfo[playerid][pZoneType] == ZONETYPE_LAND)
				{
					SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /landcancel to exit land creation mode.");
					PlayerInfo[playerid][pZoneCreation] = ZONETYPE_LAND;
				}
				else if(PlayerInfo[playerid][pZoneType] == ZONETYPE_TURF)
				{
					SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /turfcancel to exit turf creation mode.");
					PlayerInfo[playerid][pZoneCreation] = ZONETYPE_TURF;
				}
			}
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
				PlayerInfo[playerid][pMenuType] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
        case DIALOG_LANDBUILD1:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
	            switch(PlayerInfo[playerid][pMenuType])
	            {
	                case 0: // Model selection
	                {
						PlayerInfo[playerid][pCategory] = listitem;
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
	                }
	                case 1:
	                {
						PlayerInfo[playerid][pCategory] = listitem;
						ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
					}
     	       }
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILDTYPE);
			}
	    }
	    case DIALOG_LANDBUILD2:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	        if(response)
	        {
                PurchaseLandObject(playerid, landid, listitem + PlayerInfo[playerid][pFurnitureIndex]);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	    case DIALOG_LANDMENU:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
           		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
						mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_LANDOBJECTS, playerid);
		                //ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
					}
					case 2:
					{
						if(!LandInfo[landid][lLabels])
					    {
					        LandInfo[landid][lLabels] = 1;
					        SCM(playerid, COLOR_AQUA, "You will now see labels appear above the objects in your land.");
					    }
					    else
					    {
					        LandInfo[landid][lLabels] = 0;
					        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your land objects.");
					    }

					    ReloadAllLandObjects(landid);
					    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
					}
					case 3:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDSELLALL, DIALOG_STYLE_MSGBOX, "Clear objects", "This option sells all the objects in your land. You will receive\n75 percent of the total cost of all your objects.\n\nPress "SVRCLR"Confirm{A9C4E4} to proceed with the operation.", "Confirm", "Back");
					}
					case 4:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
					}
   				}
	        }
	    }
	    case DIALOG_LANDEDITOBJECT:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid;

	            if(sscanf(inputtext, "i", objectid))
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
				}
				if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_LAND)
				{
				    SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find out an object's ID by enabling labels.");
				    return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }
		        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != LandInfo[landid][lID])
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid object. This land object is not apart of your land.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }

		        PlayerInfo[playerid][pSelected] = objectid;
				ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
	    case DIALOG_LANDOBJECTMENU:
	    {
            new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid = PlayerInfo[playerid][pSelected];

	            if(!strcmp(inputtext, "Edit object"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

	    	        PlayerInfo[playerid][pEditType] = EDIT_LAND_OBJECT;
		    	    PlayerInfo[playerid][pEditObject] = objectid;
	        		PlayerInfo[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
					Dyuze(playerid, "Notice", "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel");
	            }
	            else if(!strcmp(inputtext, "Edit gate destination"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

			        PlayerInfo[playerid][pEditType] = EDIT_LAND_GATE_MOVE;
			        PlayerInfo[playerid][pEditObject] = objectid;
			        PlayerInfo[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
					SCM(playerid, COLOR_WHITE, "** You are now editing the move-to position for your gate.");
			        Dyuze(playerid, "Notice", "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel");
	            }
	            else if(!strcmp(inputtext, "Duplicate object"))
	            {
	                PlayerInfo[playerid][pSelected] = objectid;

	                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJECT, playerid);
	            }
	            else if(!strcmp(inputtext, "Sell object"))
	            {
	                PlayerInfo[playerid][pSelected] = objectid;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_LANDOBJECT, playerid);
				}
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
			}
		}
		case DIALOG_LANDOBJECTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            PlayerInfo[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && PlayerInfo[playerid][pPage] > 1)
		        {
		            PlayerInfo[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else
		        {
		            new objectid = strval(inputtext);

		            if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
		            {
			            PlayerInfo[playerid][pSelected] = objectid;
						ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
					}
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDSELLALL:
		{
		    new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
        		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_LANDOBJECTS, playerid);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDPERMS:
		{
		    new landid = GetNearbyLand(playerid), targetid;

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
				if(sscanf(inputtext, "u", targetid))
				{
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(!IsPlayerConnected(targetid))
		        {
		            SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(targetid == playerid)
				{
					SCM(playerid, COLOR_SYNTAX, "You can't give permissions to yourself.");
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
				}

		        if(PlayerInfo[targetid][pLandPerms] == landid)
		        {
		            PlayerInfo[targetid][pLandPerms] = -1;

		            SM(targetid, COLOR_AQUA, "%s has removed your access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_AQUA, "You have removed %s's access to your land's objects.", GetRPName(targetid));
				}
				else
				{
				    PlayerInfo[targetid][pLandPerms] = landid;

		            SM(targetid, COLOR_AQUA, "%s has granted you access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_AQUA, "You have granted %s access to your land's objects.", GetRPName(targetid));
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
		}
		case DIALOG_MP3PLAYER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
		            }
		            case 2:
		            {
						if(!radioConnectionID)
						{
						    return SCM(playerid, COLOR_SYNTAX, "The radio station database is currently unavailable.");
						}

						ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
					}
		            case 3:
		            {
						switch(PlayerInfo[playerid][pMusicType])
						{
				            case MUSIC_MP3PLAYER:
				            {
				                SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
				                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their MP3 player.", GetRPName(playerid));
							}
							case MUSIC_BOOMBOX:
							{
							    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their boombox.", GetRPName(playerid));
							}
							case MUSIC_VEHICLE:
							{
							    if(IsPlayerInAnyVehicle(playerid))
							    {
								    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the radio in the vehicle.", GetRPName(playerid));
								}
							}
						}
					}
		        }
			}
		}
		case DIALOG_MP3MUSIC:
		{
		    if(response)
		    {
		        new url[128];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
				}

				for(new i = 0, l = strlen(inputtext); i < l; i ++)
				{
				    switch(inputtext[i])
				    {
				        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
				        {
							continue;
						}
						default:
						{
						    SCM(playerid, COLOR_SYNTAX, "The name of the .mp3 contains invalid characters, please try again.");
						    return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /musicfor a list of all music uploaded to the server.)", "Submit", "Back");
						}
				    }
				}

				format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, inputtext);

				switch(PlayerInfo[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}

				SM(playerid, COLOR_AQUA, "You have started the playback of "SVRCLR"%s{CCFFFF}.", inputtext);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3URL:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
          		}

          		switch(PlayerInfo[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIO:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		            }
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    if(response)
		    {
		        strcpy(PlayerInfo[playerid][pGenre], inputtext, 32);
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
		    }
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    if(response)
		    {
		        PlayerInfo[playerid][pPage] = 1;
	     		PlayerInfo[playerid][pSearch] = 0;

		        strcpy(PlayerInfo[playerid][pSubgenre], inputtext, 32);
	     		ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
			}
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            PlayerInfo[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && PlayerInfo[playerid][pPage] > 1)
		        {
		            PlayerInfo[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else
		        {
			        listitem = ((PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS) + listitem;

					if(PlayerInfo[playerid][pSearch])
					{
					    mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, 1", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pGenre], listitem);
						mysql_tquery(radioConnectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
					}
					else
					{
						mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE genre = '%e' AND subgenre = '%e' ORDER BY name LIMIT %i, 1", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pSubgenre], listitem);
			        	mysql_tquery(radioConnectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
					}
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pSearch])
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
			    }
			    else
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
				}
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 3)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Your search query must contain 3 characters or more.");
		            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		        }

		        PlayerInfo[playerid][pPage] = 1;
		        PlayerInfo[playerid][pSearch] = 1;

		        strcpy(PlayerInfo[playerid][pGenre], inputtext, 32);
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		}

        case DIALOG_USECOOKIES:
		{
		    if(response)
		    {
				/*
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), desc);
					mysql_tquery(connectionID, queryBuffer);
				*/

				if(PlayerInfo[playerid][pJailType] > 0 && listitem != 2)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't redeem your jacket while in prison or jail.");
				}

		        switch(listitem)
		        {
					case 0:
					{
					    if(PlayerInfo[playerid][pEcoin] < 2000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough jacket. You can't redeem this item.");
		                }

		                PlayerInfo[playerid][pEcoin] -= 2000;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'jacket prize', NOW(), 'Free vehicle (up to $500k value)')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 2000 jacket for a {00AA00}Free vehicle ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a vehicle ticket (up to $500k value).", GetRPName(playerid), playerid);
					}
					case 1:
					{
					    if(PlayerInfo[playerid][pEcoin] < 2500)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough jacket. You can't redeem this item.");
		                }

		                PlayerInfo[playerid][pEcoin] -= 2500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'jacket prize', NOW(), 'Free house (up to $250k value)')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 2500 jackets for a {00AA00}Free house ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a house ticket (up to $800k value).", GetRPName(playerid), playerid);
					}
					case 2:
					{
					    if(PlayerInfo[playerid][pEcoin] < 3000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough jacket. You can't redeem this item.");
		                }

		                PlayerInfo[playerid][pEcoin] -= 3000;
		                PlayerInfo[playerid][pVIPPackage] = 3;
		                PlayerInfo[playerid][pVIPTime] = gettime() + 2592000;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i, vippackage = 3, viptime = %i WHERE uid = %i", PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pVIPTime], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 2500 jacket for {00AA00}1 month Platinum VIP{33CCFF}.");
					}
					case 3:
					{
					    if(PlayerInfo[playerid][pEcoin] < 5000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough jacket. You can't redeem this item.");
		                }

		                PlayerInfo[playerid][pEcoin] -= 5000;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", PlayerInfo[playerid][pEcoin], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'jacket prize', NOW(), 'Free business of any type')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 3000 jacket for a {00AA00}Free business ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a business ticket (any type).", GetRPName(playerid), playerid);
					}
				}
			}
		}

		case DIALOG_PAWNSHOP:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][pJailType] > 0 && listitem != 2)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you're in prisoned.");
				}

		        switch(listitem)
		        {
					case 0:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 100;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Free business of any type')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 100 diamonds to a {00AA00}Free business ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a business ticket (any type).", GetRPName(playerid), playerid);
					}
					case 1:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 100;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Free house (LC House Type)')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have exchanged 100 Diamonds into a {00AA00}Free house ticket{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a house ticket (Low Class House Type).", GetRPName(playerid), playerid);
					}
					case 2:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 150)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 150;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Entrance/Door Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 150 diamonds to an {00AA00}entrance/door ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for an entrance/door ticket(normal int).", GetRPName(playerid), playerid);
					}
					case 3:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 50)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 50;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Gate Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 50 diamonds to a {00AA00}gate ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a gate ticket.", GetRPName(playerid), playerid);
					}
					case 4:
					{
					    if(PlayerInfo[playerid][pDiamonds] < 75)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
		                }

		                PlayerInfo[playerid][pDiamonds] -= 75;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Pawnshop Exchange', NOW(), '[E] Rare Car Ticket')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 75 diamonds to a {00AA00}rare car ticket.{33CCFF}. /report for your prize.");
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a rare car ticket.", GetRPName(playerid), playerid);
					}
				}
			}
		}

		case DIALOG_GANGSTASH:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
			            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
		            }
		            /*case 1:
		            {
		                SCM(playerid, COLOR_SYNTAX, "This feature is disabled, non-rp.");
		                //ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
		            }*/
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
		            }
					case 2:
					{
					    PlayerInfo[playerid][pSelected] = ITEM_MATERIALS;
					    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
					}
		            case 3:
		            {
		                PlayerInfo[playerid][pSelected] = ITEM_CASH;
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
					}
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GCLOTHES);
					}
		        }
		    }
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
	        if(PlayerInfo[playerid][pGang] == -1)
	        {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang Locker | Weapons", "Withdraw\nDeposit", "Select", "Back");
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHWEAPONS2:
		{
          	if(PlayerInfo[playerid][pGang] == -1)
	        {
		        return 1;
		    }
		    if(response)
		    {
				if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 1)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 1+ in order to withdraw weapons.");
		            }

				    switch(PlayerInfo[playerid][pSelected])
				    {
				        case GANGWEAPON_9MM:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
				            GiveWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a 9mm from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
				            GiveWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a silenced pistol from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
				            GiveWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Desert Eagle from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
				            GiveWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a shotgun from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]--;
				            GiveWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sawnoff shotgun from the gang stash.", GetRPName(playerid));
				           // Log_Write("log_gang", "%s (uid: %i) withdraws a sawnoff shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
				            GiveWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Tec-9 from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
				            GiveWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Micro Uzi from the gang stash.", GetRPName(playerid));
				           // Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
				            GiveWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an MP5 from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
				            GiveWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an AK-47 from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4]--;
				            GiveWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an M4 from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws an M4 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
				            GiveWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a rifle from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]--;
				            GiveWeapon(playerid, 34);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sniper rifle from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a sniper rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(PlayerInfo[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]--;
				            GiveWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a molotov from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a molotov from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
					}
				}
				else if(listitem == 1)
		        {
                    switch(PlayerInfo[playerid][pSelected])
				    {
				        case GANGWEAPON_9MM:
				        {
				            if(!PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
				            RemovePlayerWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a 9mm in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(!PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
				            RemovePlayerWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a silenced pistol in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(!PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
				            RemovePlayerWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Desert Eagle in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(!PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
				            RemovePlayerWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a shotgun in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(!PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;
				            RemovePlayerWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sawnoff shotgun in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a sawnoff shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(!PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
				            RemovePlayerWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Tec-9 in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(!PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
				            RemovePlayerWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Micro Uzi in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(!PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
				            RemovePlayerWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an MP5 in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(!PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
				            RemovePlayerWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an AK-47 in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(!PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
				            RemovePlayerWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an M4 in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(!PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
				            RemovePlayerWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a rifle in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(!PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
				            RemovePlayerWeapon(playerid, 34);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sniper rifle in the gang stash.", GetRPName(playerid));
				           // Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(!PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;
				            RemovePlayerWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a molotov in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a molotov in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
						}
					}
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
			}
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: PlayerInfo[playerid][pSelected] = ITEM_WEED;
		            case 1: PlayerInfo[playerid][pSelected] = ITEM_COCAINE;
		            case 2: PlayerInfo[playerid][pSelected] = ITEM_METH;
		            case 3: PlayerInfo[playerid][pSelected] = ITEM_PAINKILLERS;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(PlayerInfo[playerid][pGangRank] < 2)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 2+ in order to withdraw drugs.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: PlayerInfo[playerid][pSelected] = ITEM_HPAMMO;
		            case 1: PlayerInfo[playerid][pSelected] = ITEM_POISONAMMO;
		            case 2: PlayerInfo[playerid][pSelected] = ITEM_FMJAMMO;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(PlayerInfo[playerid][pGangRank] < 5)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw ammo.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
			}
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 3)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				switch(PlayerInfo[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPot] -= amount;
						PlayerInfo[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some pot from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of pot from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCrack] -= amount;
						PlayerInfo[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some Crack from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of Crack from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMeth] -= amount;
						PlayerInfo[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some meth from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of meth from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] -= amount;
						PlayerInfo[playerid][pPainkillers] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some painkillers from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i painkillers from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMaterials] -= amount;
						PlayerInfo[playerid][pMaterials] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some materials from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i materials from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCash] -= amount;
						GivePlayerCash(playerid, amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCash], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some cash from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the gang stash.", amount);
						new szString[128];
						format(szString, sizeof(szString), "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
						SendDiscordMessage(5, szString);
						//Log_Write("log_gang", "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pHPAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some hollow point ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of hollow point ammo from the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i hollow point ammo from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some poison tip ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of poison tip ammo from the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i poison tip ammo from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(PlayerInfo[playerid][pFMJAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some full metal jacket ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of full metal jacket ammo from the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) withdraws %i FMJ ammo from the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= PlayerInfo[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				switch(PlayerInfo[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gPot] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of pot.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPot] += amount;
						PlayerInfo[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some pot in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of pot in the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) deposits %i grams of pot in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gCrack] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of Crack.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCrack] += amount;
						PlayerInfo[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some Crack in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of Crack in the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) deposits %i grams of Crack in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of meth.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMeth] += amount;
						PlayerInfo[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some meth in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of meth in the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i painkillers.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPainkillers] += amount;
						PlayerInfo[playerid][pPainkillers] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some painkillers in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i painkillers in the gang stash.", amount);
						//Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i materials.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gMaterials] += amount;
						PlayerInfo[playerid][pMaterials] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gMaterials], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some materials in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i materials in the gang stash.", amount);
					//	Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gCash] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than $%i.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gCash] += amount;
						GivePlayerCash(playerid, -amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gCash], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cash in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited $%i in the gang stash.", amount);
					//	Log_Write("log_gang", "%s (uid: %i) deposited $%i in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_HPAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of hollow point ammo.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_HPAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gHPAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some hollow point ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of hollow point ammo in the gang stash.", amount);
					//	Log_Write("log_gang", "%s (uid: %i) deposits %i hollow point ammo in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_POISONAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of poison tip ammo.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_POISONAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoisonAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some poison tip ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of poison tip ammo in the gang stash.", amount);
					//	Log_Write("log_gang", "%s (uid: %i) deposits %i poison tip ammo in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > PlayerInfo[playerid][pFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo] + amount > GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_FMJAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of FMJ ammo.", GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_FMJAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gFMJAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some full metal jacket ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of full metal jacket ammo in the gang stash.", amount);
					//	Log_Write("log_gang", "%s (uid: %i) deposits %i FMJ ammo in the gang stash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
					}
				}
			}
			else
			{
				if(PlayerInfo[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= PlayerInfo[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw materials.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHCASH:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 6+ in order to withdraw cash.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSKINS:
		{
		    if(PlayerInfo[playerid][pGang] >= 0)
		    {
		        if(response)
		        {
					new index = PlayerInfo[playerid][pSkinSelected] + 1;

					if(index >= MAX_GANG_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
					    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
					    PlayerInfo[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_GANG_SKINS; i ++)
						{
						    if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
						        PlayerInfo[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == PlayerInfo[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
							{
						    	if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
						        	PlayerInfo[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
		        }
		        else
		        {
		            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
		            PlayerInfo[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes their clothes.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_GANGFINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang]) && (count++ == listitem))
			 	    {
                        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_GANGPOINTSHOP:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 6)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer] = 1;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugX] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugY] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][0] = 500;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][1] = 1000;
						GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][2] = 1500;
						GangInfo[PlayerInfo[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugpot = 0, drugcrack = 0, drugmeth = 0, pot_price = 500, crack_price = 1000, meth_price = 1500, points = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoints], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -500);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC drug dealer{CCFFFF}. '/gang npc' to edit your drug dealer.");
						//Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
					}
					case 1:
		            {
		                if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
						}
						if(GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer] = 1;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsX] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsY] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] = 0.0;
						GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] = 0;
						GangInfo[PlayerInfo[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0, points = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoints], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -500);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC arms dealer{CCFFFF}. '/gang npc' to edit your arms dealer.");
					//	Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
					}
                    case 2:
					{
					    if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 4500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 100000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $100000 on hand to purchase this upgrade.");
						}

						GivePlayerCash(playerid, -100000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -4500);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Gang mapping (up to 50 objects)')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SCM(playerid, COLOR_AQUA, "You have spent 4500 GP & $100000 on "SVRCLR"Mapping{CCFFFF}. /report for an admin to set it up.");
						SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for mapping for their gang.", GetRPName(playerid), playerid);
					}
					case 3:
					{
					    if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 5000)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(PlayerInfo[playerid][pCash] < 100000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $100000 on hand to purchase this upgrade.");
						}

						GivePlayerCash(playerid, -100000);
						GiveGangPoints(PlayerInfo[playerid][pGang], -5000);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Custom gang interior')", PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SCM(playerid, COLOR_AQUA, "You have spent 5000 GP & $100000 on "SVRCLR"Custom gang interior{CCFFFF}. /report for an admin to set it up.");
						SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a custom gang interior.", GetRPName(playerid), playerid);
					}
					case 4:
					{
					    switch(GangInfo[PlayerInfo[playerid][pGang]][gLevel])
					    {
					        case 1:
					        {
					            if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 6000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(PlayerInfo[playerid][pCash] < 75000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $75000 on hand to purchase this upgrade.");
								}

								GangInfo[PlayerInfo[playerid][pGang]][gLevel] = 2;
								GangInfo[PlayerInfo[playerid][pGang]][gPoints] -= 6000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 2, points = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoints], PlayerInfo[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -75000);
								ReloadGang(PlayerInfo[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 6000 GP & $75000 for gang level 2/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerInfo[playerid][pGang]), GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

							//	Log_Write("log_gang", "%s (uid: %i) spent 6000 GP & $75000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
							}
							case 2:
					        {
					            if(GangInfo[PlayerInfo[playerid][pGang]][gPoints] < 12000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(PlayerInfo[playerid][pCash] < 100000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $100000 on hand to purchase this upgrade.");
								}

								GangInfo[PlayerInfo[playerid][pGang]][gLevel] = 3;
								GangInfo[PlayerInfo[playerid][pGang]][gPoints] -= 12000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 3, points = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gPoints], PlayerInfo[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -100000);
								ReloadGang(PlayerInfo[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 12000 GP & $100000 for gang level 3/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerInfo[playerid][pGang]), GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

							//	Log_Write("log_gang", "%s (uid: %i) spent 12000 GP & $100000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang]);
							}
						}
					}
		        }
		    }
		}
		case DIALOG_GANGARMSPRICES:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
			}
		}
		case DIALOG_GANGARMSPRICE:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}

				GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][PlayerInfo[playerid][pSelected]] = amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", PlayerInfo[playerid][pSelected] + 1, amount, PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				if(PlayerInfo[playerid][pSelected] == 0) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Micro Uzi{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 1) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Tec-9{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 2) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"MP5{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 3) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Desert Eagle{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 4) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Molotov{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 5) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"AK-47{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 6) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"M4{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 7) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sniper{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 8) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sawnoff Shotgun{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 9) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Hollow Point Ammo{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 10) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Poison Tip Ammo{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 11) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"FMJ Ammo{CCFFFF} to $%i.", amount);
		        }
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
		}
		case DIALOG_GANGARMSDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
				}
				else if(listitem == 1)
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
				}
				else if(listitem == 2)
				{
				    if(PlayerInfo[playerid][pGang] != PlayerInfo[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This arms dealer doesn't belong to your gang.");
				    }
				    if(PlayerInfo[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
				}
			}
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 28);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a micro uzi.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"micro uzi{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 1:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 32);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Tec-9.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Tec-9{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 2:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 1000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 1000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 29);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an MP5.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"MP5{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 3:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 2000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 2000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 24);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Desert Eagle.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Desert Eagle{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 4:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 5000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 5000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 18);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a molotov.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"molotov{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 5:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 30);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an AK-47.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"AK-47{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 6:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 4000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 4000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 31);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an M4.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"M4{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 7:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 6500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 6500;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 34);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sniper{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 8:
			        {
			            if(GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 26);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sawnoff shotgun.", GetRPName(playerid), GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sawnoff shotgun{CCFFFF} for $%i.", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
				}
			}
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

		case DIALOG_GANGARMSAMMO:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    PlayerInfo[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

  		case DIALOG_GANGAMMOBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsX], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsY], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(PlayerInfo[playerid][pSelected])
			    {
			        case 0: // Hollow point ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][9] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pHPAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][9] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsHPAmmo] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of hollow point ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"hollow point ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Poison tip ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][10] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][10] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPoisonAmmo] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of poison tip ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"poison tip ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // FMJ ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][11] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(PlayerInfo[playerid][pFMJAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][11] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsFMJAmmo] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsFMJAmmo], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of FMJ ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"FMJ ammo{CCFFFF} for $%i.", amount, cost);
					}
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
			}
		}
		case DIALOG_GANGARMSEDIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
					case 3: ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
					case 4: ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
				}
				if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
			    }

			    GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] += amount;
			    PlayerInfo[playerid][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials], PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have deposited %i materials in your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
				}
				if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }

			    GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials] -= amount;
			    PlayerInfo[playerid][pMaterials] += amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials], PlayerInfo[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have withdrawn %i materials from your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"hollow point ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"poison tip ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"FMJ ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
		}
		case DIALOG_GANGAMMOWITHDRAW:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pHPAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsHPAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"hollow point ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsPoisonAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"poison tip ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pFMJAmmo] + amount > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsFMJAmmo], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"FMJ ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
				}
				else if(listitem == 1)
				{
				    if(PlayerInfo[playerid][pGang] != PlayerInfo[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This drug dealer doesn't belong to your gang.");
				    }
				    if(PlayerInfo[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
				}
			}
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    PlayerInfo[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
		case DIALOG_GANGDRUGBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugX], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugY], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(PlayerInfo[playerid][pSelected])
			    {
			        case 0: // Pot
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pPot] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPot], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of pot.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"pot{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Crack
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pCrack] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCrack], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of Crack.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"Crack{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // Meth
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pCash] < GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2] * amount;

						GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth] -= amount;
						GangInfo[PlayerInfo[playerid][pDealerGang]][gCash] += cost;

						PlayerInfo[playerid][pMeth] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i, cash = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth], GangInfo[PlayerInfo[playerid][pDealerGang]][gCash], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of meth.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"meth{CCFFFF} for $%i.", amount, cost);
					}
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
			}
		}
        case DIALOG_GANGDRUGEDIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
        case DIALOG_GANGDRUGPRICES:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
			}
		}
		case DIALOG_GANGDRUGPRICE:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}

				GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][PlayerInfo[playerid][pSelected]] = amount;

				if(PlayerInfo[playerid][pSelected] == 0) {
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"pot{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 1) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"crack{CCFFFF} to $%i.", amount);
		        } else if(PlayerInfo[playerid][pSelected] == 2) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth_price = %i WHERE id = %i", amount, PlayerInfo[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"meth{CCFFFF} to $%i.", amount);
		        }

		        mysql_tquery(connectionID, queryBuffer);
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        PlayerInfo[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] += amount;
						PlayerInfo[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"pot{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] += amount;
						PlayerInfo[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"Crack{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] += amount;
						PlayerInfo[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth], PlayerInfo[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"meth{CCFFFF} in your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
		}
		case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(PlayerInfo[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugPot] -= amount;
						PlayerInfo[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugPot], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"pot{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack] -= amount;
						PlayerInfo[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugCrack], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"Crack{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth] -= amount;
						PlayerInfo[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth], PlayerInfo[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"meth{CCFFFF} from your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
		}
		case DIALOG_FREENAMECHANGE:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(!(3 <= strlen(inputtext) <= 20))
				{
				    SCM(playerid, COLOR_SYNTAX, "Your name must contain 3 to 20 characters.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(strfind(inputtext, "_") == -1)
				{
				    SCM(playerid, COLOR_SYNTAX, "The name needs to contain at least one underscore.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
                if(!IsValidName(inputtext))
                {
				    SCM(playerid, COLOR_SYNTAX, "That name is not supported by SA-MP.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}

		        PlayerInfo[playerid][pFreeNamechange] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", inputtext);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
		    }
		    else
		    {
		    	if(!PlayerInfo[playerid][pLogged])
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has been kicked for failing to change their name.", GetRPName(playerid), playerid);
		            KickPlayer(playerid);
		        }
		        else
		        {
			    	PlayerInfo[playerid][pJailType] = 2;
				    PlayerInfo[playerid][pJailTime] = 10 * 60;

					ResetPlayerWeaponsEx(playerid);
					ResetPlayer(playerid);

					SetPlayerInJail(playerid);
					Dyuze(playerid, "Notice", "~w~Welcome to~n~~r~admin jail");

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = 'Server', prisonreason = 'Failing to change their name' WHERE uid = %i", PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					strins(PlayerInfo[playerid][pPrisonedBy], "Server", 0);
					strins(PlayerInfo[playerid][pPrisonReason], "Failing to change their name", 0);

	                SAM(COLOR_YELLOW, "AdmWarning: %s [%i] has been prisoned for failing to change their name.", GetRPName(playerid), playerid);
					new szString[128];
					format(szString, sizeof(szString), "%s (uid: %i) has been prisoned for 10 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
					SendDiscordMessage(10, szString);
					//Log_Write("log_punishments", "%s (uid: %i) has been prisoned for 10 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

				}
			}
		}
	}

	return 1;
}

// Commands //

forward LastAlertPayCheck(playerid);
public LastAlertPayCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	//GameTextForPlayer(playerid, "~w~Type /signcheck", 2500, 1);
		Dyuze(playerid, "Payday", "Type /signcheck to get your paycheck.");
    	SCM(playerid, COLOR_WHITE, "You have one minute left before your paycheck code expires. Please type /signcheck to get your paycheck.");
        SetTimerEx("DestroyCheck", 63000, false, "i", playerid);
	}
}

forward DestroyCheck(playerid);
public DestroyCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	PayCheckCode[playerid] = 0;
    	SCM(playerid, COLOR_WHITE, "Your paycheck code expired. Please remember to use /signcheck next time.");
	}
}

CMD:taxhelp(playerid, params[])
{
	SM(playerid, COLOR_SYNTAX, "The tax is currently set to {CCFFFF}%i percent", gTax);
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1153.202026, -1305.075927, 1019.413940))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any of the hospitals.");
	}
	if(PlayerInfo[playerid][pCash] < 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        Dyuze(playerid, "Notice", "~r~-$5000");
	        SCM(playerid, COLOR_AQUA, "You paid $5000 for insurance at {FF8282}County General{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        Dyuze(playerid, "Notice", "~r~-$5000");
	        SCM(playerid, COLOR_AQUA, "You paid $5000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	    case HOSPITAL_VIP:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_VIP)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -2000);
	        Dyuze(playerid, "Notice", "~r~-$5000");
	        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}VIP LOUNGE{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_VIP, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_VIP;
	    }
	}

	return 1;
}

CMD:checkin(playerid, params[])
{
    new targetid;

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1153.202026, -1305.075927, 1019.413940))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in any of the hospitals.");
    }

    PlayerInfo[playerid][pInjured] = 0;
    PlayerInfo[playerid][pHunger] = 100;
    PlayerInfo[playerid][pHungerTimer] = 0;
    PlayerInfo[playerid][pThirst] = 100;
    PlayerInfo[playerid][pThirstTimer] = 0;
    SetPlayerHealth(playerid, 100.0);
    GivePlayerCash(playerid, -1000);

    SetPlayerPos(playerid, 1173.564819, -1325.327270, 1020.151550);
    ApplyAnimation(playerid,"CRACK","crckdeth2",4.0, 0, 0, 0, 10000, 0);
    SCM(playerid, COLOR_LIGHTBLUE, "'/stopani' For Stop The Animation.");
    return 1;

}

CMD:poll(playerid, params[])
{
	new string[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(sscanf(params, "s[128]", params))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /poll [question]");

	if(strlen(params) > 128)
		return SCM(playerid, COLOR_SYNTAX, "Maximum characters limit is 128.");

	if(PollOn)
		return SCM(playerid, COLOR_SYNTAX, "There is already an poll started.");

	format(string, sizeof(string), "** Question:"WHITE" %s {FF6347}**", params);
	SCMA(COLOR_LIGHTRED, string);

	SCMA(COLOR_LIGHTRED, "** Press "WHITE"Y{FF6347} to vote "WHITE"Yes{FF6347}, Press "WHITE"N{FF6347} to vote "WHITE"No{FF6347}. **");
	SCMA(COLOR_LIGHTRED, "** Poll ending in "WHITE"30{FF6347} Seconds. **");

	PollOn = 1;
	PollN = 0;
	foreach(new i: Player)
	{
		PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}

CMD:blindfold(playerid,params[])
{
    new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /blindfold [playerid]");
	}
	if(PlayerInfo[playerid][pBlindfold] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any blindfolds left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold yourself.");
	}
	if(pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already blindfolded. /unblindfold to free them.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold a helper who is assisting someone.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold an on duty administrator.");
	}


	PlayerInfo[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	Dyuze(targetid, "Notice", "~r~Blindfold");
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s blindfold %s with a bandana.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	TextDrawShowForPlayer(targetid, Blind);
	pBlind[targetid] = 1;
    return 1;
}

CMD:unblindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unblindfold [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't unblindfold yourself.");
	}
	if(!pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not blindfold.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to unblindfold them.");
	}

	Dyuze(targetid, "Notice", "~g~Unblindfold");
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unblindfoild the bandana from %s.", GetRPName(playerid), GetRPName(targetid));

    TextDrawHideForPlayer(targetid, Blind);
	pBlind[targetid] = 0;
	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tie [playerid]");
	}
	if(PlayerInfo[playerid][pRope] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any ropes left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie yourself.");
	}
	if(PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already tied. /untie to free them.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie a helper who is assisting someone.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie an on duty administrator.");
	}

	PlayerInfo[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	Dyuze(targetid, "Notice", "~r~Tied");
	TogglePlayerControllable(targetid, 0);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ties %s with a rope.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	PlayerInfo[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't untie yourself.");
	}
	if(!PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to untie them.");
	}

	Dyuze(targetid, "Notice", "~r~Untied");
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unties the rope from %s.", GetRPName(playerid), GetRPName(targetid));

 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	PlayerInfo[targetid][pTied] = 0;
	return 1;
}

CMD:signcheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SCM(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

	if(PlayerInfo[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}

 	new string[128];
	format(string, sizeof(string), "Check code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
	ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /b [local OOC]");
	}
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "(( Stranger(B%d): %s ))", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}

CMD:robjew(playerid, params[])
{
	new count;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1833.0172, -1396.1160, 13.4345))
	{
		return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Not At Jewelry Robbery Area");
	}
    if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the Jewellery while on-duty.");
	}
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob Jewellery.");
		return 1;
	}
	if(PlayerInfo[playerid][pJewRobbing])
	{
	    return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Already Robbing");
	}
 	if(RobberyInfo[jPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a Jewellery robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[jRobbing])
	{
	     return SCM(playerid, COLOR_RED, "[Error] "WHITE"Some one is already Robbing the Jewellery");
	}
   if(RobberyInfo[rTime] > 0)
   {
      return SM(playerid, COLOR_RED, "[Error] "WHITE"Jewelry Is In CoolDown, Come After %i Hours", RobberyInfo[rTime]);
   }
    foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob Jewellery.");
	}
    SCM(playerid, COLOR_GREEN, "Started Robbing");
    TogglePlayerControllable(playerid, 0);
    RobberyInfo[jRobbing] = 1;   // 300000
	PlayerInfo[playerid][pJewRobbing] = 1;
    SetTimerEx("StartJewRob", 1000, false, "i", playerid);
    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s Started The Jewellry Robbery.", GetRPName(playerid));
    RobberyInfo[jRobbers][0] = playerid;
    RobberyInfo[jPlanning] = 1;
   	new szString[250];
	format(szString, sizeof(szString), "JEWELLERYROBBERY: %s had Started the Jew Robbery", GetRPName(playerid));
	SendDiscordMessage(25, szString);
    SCM(playerid, COLOR_AQUA, "You have setup a Jewellery robbery{CCFFFF}. You need to /jewinvite at least 2 more people in order to begin the heist.");
    return 1;
}

CMD:jewinvite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invite [playerid]");
	}
	if(!(RobberyInfo[jPlanning] && RobberyInfo[jRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInJewRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetJewelleryRobbers() >= MAX_JEWELLERY_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i Jew robbers in this robbery.", MAX_JEWELLERY_ROBBERS);
 	}
	if(PlayerInfo[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the Jewellery while on-duty.");
	}
	PlayerInfo[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a Jew robbery. (/accept jrobbery)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your Jew robbery.", GetRPName(targetid));
	return 1;
}

CMD:dlock(playerid, params[])
{
   if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1828.9672, -1392.7148, 13.4416))
   {
	  return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Not At Safe Locker Area");
   }
   if(RobberyInfo[jPlanning] == 0 && RobberyInfo[jRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a Jew robbery.");
	}
	if(GetJewelleryRobbers() < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 3 other heisters in your robbery.");
	}
   if(!RobberyInfo[jDoorLock])
   {
       return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Started The Robbery");
   }
   if(!PlayerInfo[playerid][pHammer])
   {
       return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Have Hacker Laptop and Hammer, You Need To Buy Hacker Laptom and Hammer From UTools");
   }
   foreach(new i : Player)
   {
   if(IsLawEnforcement(i))
   {
      SM(i, COLOR_ROYALBLUE, "HQ: A robbery is occurring at the MGMC Jewellery. There are %i confirmed robbers.", GetJewelleryRobbers());
   }
   }
     ApplyAnimationEx(playerid, "BOMBER", "BOM_PLANT_IN", 4.0, 1, 1, 1, 0, 0);
	 GameTextForPlayer(playerid,"~w~Destroying Lock..",10000,6);
	 SetTimerEx("DestroyLock", 10000, false, "i", playerid);
	 return 1;
}

CMD:lootjewbox(playerid, params[])
{
  	if(!IsPlayerInJewRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this Jew robbery.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1819.4634, -1395.6161, 13.4565))
   {
	  return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Not At jewelry loot area");
   }
	if(!RobberyInfo[jRobStarted])
	{
	    return SCM(playerid, COLOR_RED, "[Error] "WHITE"Robbery Not Started Yet");
	}
	GameTextForPlayer(playerid,"~w~Looting Jewlry Vault..",10000,6);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	SetTimerEx("LootJew", 5000, false, "i", playerid);
	SCM(playerid, COLOR_GREEN, "Wait For The Police To Reach Here.");
	return 1;
}

CMD:robbiz(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), count;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a business that you can rob.");
	}
	if(IsBusinessOwner(playerid, businessid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob your business.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You need to be level 2 in order to rob the business.");
	}
	if(PlayerInfo[playerid][pRobbingBiz] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a business.");
	}
	if(BusinessInfo[businessid][bRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business. Robbery has already started.");
	}
	if(BusinessInfo[businessid][bRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This business can be robbed again in %i hours. You can't rob it now.", BusinessInfo[businessid][bRobbed]);
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the business.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the %s. All units respond immediately.", GetZoneName(BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ]));
			SetPlayerCheckpoint(i, BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ], 3.0);
		}
	}

	PlayerInfo[playerid][pLootTime] = 5;
	Dyuze(playerid, "Notice", "~w~Looting house vault...");
   	new szString[250];
	format(szString, sizeof(szString), "STOREROBBERY: %s had Started the STORE Robbery", GetRPName(playerid));
	SendDiscordMessage(25, szString);
 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s points his gun at the clerk and attempts to rob the business shop.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
	/*TextDrawHideForPlayer(playerid, PriorityTD1);
	TextDrawShowForPlayer(playerid, PriorityTD4);*/
	PlayerInfo[playerid][pRobbingBiz] = businessid;
	BusinessInfo[businessid][bRobbing] = 1;
	return 1;
}

CMD:robhouse(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), count;
	if(houseid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a house that you can rob.");
	}
	if(IsHouseOwner(playerid, houseid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob the your house.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You need to be level 2+ in order to rob a house.");
	}
	if(PlayerInfo[playerid][pRobbingHouse] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a house.");
	}
	if(HouseInfo[houseid][hRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house. Robbery has already started.");
	}
	if(HouseInfo[houseid][hRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This house can be robbed again in %i hours. You can't rob it now.", HouseInfo[houseid][hRobbed]);
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the house.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the %s. All units respond immediately.", GetZoneName(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]));
			SetPlayerCheckpoint(i, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ], 3.0);
		}
	}

	PlayerInfo[playerid][pLootTime] = 5;
	Dyuze(playerid, "Notice", "~w~Looting house vault...");

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s attempts to rob the house.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
	PlayerInfo[playerid][pRobbingHouse] = houseid;
	HouseInfo[houseid][hRobbing] = 1;
	return 1;
}

CMD:ds(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY2, "Usage: /ds [door shout text]");

	new string[128], idx;

	if((idx = GetNearbyHouse(playerid)) != -1 || (idx = GetInsideHouse(playerid)) != -1)
	{
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyHouse(i) == idx) || (GetInsideHouse(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door) %s: %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
						format(string, sizeof(string), "(door) %s: ... %s", GetRPName(playerid), params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					} else {
						format(string, sizeof(string), "(door) %s: %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %.90s", GetRPName(playerid), params);
			SM(playerid, COLOR_GREY1, "(door) %s: ... %s", GetRPName(playerid), params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %s", GetRPName(playerid), params);
		}
	}
	else if((idx = GetNearbyBusiness(playerid)) != -1 || (idx = GetInsideBusiness(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyBusiness(i) == idx) || (GetInsideBusiness(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door) %s: %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door) %s: ... %s", GetRPName(playerid), params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door) %s: %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %.90s", GetRPName(playerid), params);
			SM(playerid, COLOR_GREY1, "(door) %s: ... %s", GetRPName(playerid), params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %s", GetRPName(playerid), params);
		}
	} else if((idx = GetNearbyEntranceEx(playerid)) != -1 || (idx = GetInsideEntrance(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyEntranceEx(i) == idx) || (GetInsideEntrance(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door) %s: %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door) %s: ... %s", GetRPName(playerid), params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door) %s: %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %.90s", GetRPName(playerid), params);
			SM(playerid, COLOR_GREY1, "(door) %s: ... %s", GetRPName(playerid), params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door) %s: %s", GetRPName(playerid), params);
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not near any door.");
	}
	return 1;
}

CMD:mic(playerid, params[])
{
	new
	    string[144];

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1082.1001, -1740.0272, 14.1402))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any microphone.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mic [text]");
	}

	SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Microphone) %s",params);
	format(string, sizeof(string), "[M] %s: %s!", GetRPName(playerid), params);
	SendProximityFadeMessage(playerid, 50.0, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);

	return 1;
}

CMD:s(playerid, params[]) return callcmd::shout(playerid, params);
CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(s)hout [text]");
	}
	if(Maskara[playerid] == 1) {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "Stranger(B%d): %s!", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "%s: %s!", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}

CMD:fixvoice(playerid, params[])
{
    PlayerInfo[playerid][pGangRadio] = 0;
	SvDetachListenerFromStream(gangstream[PlayerInfo[playerid][pGang]], playerid);
    
    PlayerInfo[playerid][pFactionRadio] = 0;
	SvDetachListenerFromStream(factionstream[PlayerInfo[playerid][pFaction]], playerid);
    SCM(playerid, COLOR_GREEN, "Your Voice Is Fixed By Admin.");
    return 1;
}

CMD:vehpanel(playerid, params[])
{
   new vehicleid = GetPlayerVehicleID(playerid);

   if(vehicleid)
   {
		ShowVehPanel(playerid);
   }
   else
   {
		SCM(playerid, COLOR_GREEN, "Vehicle Panel Will Only Work If You Are In A Vehicle");
   }
   return 1;
}

CMD:vcode(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vcode [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Car text removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Car text attached. '/vcode none' to detach the Car text.");
	}

	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /me [action]");
	}

	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %.*s...", MaskaraID[playerid], MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], params);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %s", GetRPName(playerid), params);
		}
	}
	return 1;
}

CMD:ame(playerid, params[])
{
	new message[100], string[128];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /ame [action/off]");
 		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][aMeID]);
	    PlayerInfo[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");
	if(Maskara[playerid] == 1)
	{
		if(PlayerInfo[playerid][aMeStatus] == 0)
		{
		    PlayerInfo[playerid][aMeStatus] =1;

			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			PlayerInfo[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][aMeStatus] == 0)
		{
		    PlayerInfo[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			PlayerInfo[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
}

CMD:ado(playerid, params[])
{
	new message[100], string[180];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /ado [action/off]");
  		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][aMeID]);
	    PlayerInfo[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");

	if(Maskara[playerid] == 1)
	{
		if(PlayerInfo[playerid][aMeStatus] == 0)
		{
			PlayerInfo[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			PlayerInfo[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][aMeStatus] == 0)
		{
			PlayerInfo[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			PlayerInfo[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /do [describe]");
	}
	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( Stranger(B%d) ))", params[MAX_SPLIT_LENGTH], MaskaraID[playerid]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( Stranger(B%d) ))", params, MaskaraID[playerid]);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( %s ))", params, GetRPName(playerid));
		}
	}
	return 1;
}

/*CMD:checkdoublesalary(playerid, params[])
{
    if(!gDoubleSalary)
    {
        SCM(playerid, COLOR_YELLOW, "______________________________C:RP DOUBLE SALARY SYSTEM______________________________");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}3:00"WHITE" and ends at {FF0000}6:00"WHITE", SERVER TIME ("RED"Not Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}9:00"WHITE" and ends at {FF0000}12:00"WHITE", SERVER TIME ("RED"Not Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}15:00"WHITE" and ends at {FF0000}18:00"WHITE", SERVER TIME ("RED"Not Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}21:00"WHITE" and ends at {FF0000}24:00"WHITE", SERVER TIME ("RED"Not Active"WHITE")");
	}
	else
	{
	    SCM(playerid, COLOR_YELLOW, "______________________________ARP DOUBLE SALARY SYSTEM______________________________");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}3:00"WHITE" and ends at {FF0000}6:00"WHITE", SERVER TIME ("GREEN"Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}9:00"WHITE" and ends at {FF0000}12:00"WHITE", SERVER TIME ("GREEN"Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}15:00"WHITE" and ends at {FF0000}18:00"WHITE", SERVER TIME ("GREEN"Active"WHITE")");
		SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}21:00"WHITE" and ends at {FF0000}24:00"WHITE", SERVER TIME ("GREEN"Active"WHITE")");
	}
	return 1;
}*/

CMD:double(playerid, params[])
{
    new option[10];
	if(sscanf(params, "s[10]", option))
	{
	    SCM(playerid, COLOR_NEWS, "Command: /double [option]");
		SCM(playerid, COLOR_NEWS, "Available Options: Salary, Exp");
		return 1;
	}
	if(!strcmp(option, "salary", true))
	{
     	if(!gDoubleSalary)
	    {
	        SCM(playerid, COLOR_YELLOW, "______________________________MGMC:RP DOUBLE SALARY SYSTEM("RED"NOT ACTIVE"YELLOW")______________________________");
	   		/*SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}3:00"WHITE" and ends at {FF0000}6:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}9:00"WHITE" and ends at {FF0000}12:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}15:00"WHITE" and ends at {FF0000}18:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}21:00"WHITE" and ends at {FF0000}24:00"WHITE", SERVER TIME");*/
		}
		else
		{
		    SCM(playerid, COLOR_YELLOW, "______________________________MGMC:RP DOUBLE SALARY SYSTEM("GREEN"ACTIVE"YELLOW")______________________________");
		/*	SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}3:00"WHITE" and ends at {FF0000}6:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}9:00"WHITE" and ends at {FF0000}12:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}15:00"WHITE" and ends at {FF0000}18:00"WHITE", SERVER TIME");
			SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}21:00"WHITE" and ends at {FF0000}24:00"WHITE", SERVER TIME");*/
		}
		return 1;
	}
	if(!strcmp(option, "exp", true))
	{
	    if(!gDoubleXP)
	    {
	        SCM(playerid, COLOR_YELLOW, "______________________________""MGMC:RP DOUBLE XP SYSTEM("RED"NOT ACTIVE"YELLOW")_________________________________");
		/*	SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}0:00"WHITE" and ends at {FF0000}3:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}6:00"WHITE" and ends at {FF0000}9:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}12:00"WHITE" and ends at {FF0000}15:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}18:00"WHITE" and ends at {FF0000}21:00"WHITE", SERVER TIME");*/
		}
		else
		{
		    SCM(playerid, COLOR_YELLOW, "______________________________""MGMC:RP DOUBLE XP SYSTEM("GREEN"Active"YELLOW")_________________________________");
		/*	SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}0:00"WHITE" and ends at {FF0000}3:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}6:00"WHITE" and ends at {FF0000}9:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}12:00"WHITE" and ends at {FF0000}15:00"WHITE", SERVER TIME");
		    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}18:00"WHITE" and ends at {FF0000}21:00"WHITE", SERVER TIME");*/
		}
		return 1;
	}
	return 1;
}

/*CMD:dsrtime(playerid, params[])
{
    SCM(playerid, COLOR_YELLOW, "______________________________""MGMC:RP DOUBLE SALARY SYSTEM______________________________");
	SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}3:00"WHITE" and ends at {FF0000}6:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}9:00"WHITE" and ends at {FF0000}12:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}15:00"WHITE" and ends at {FF0000}18:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double SALARY starts at {008000}21:00"WHITE" and ends at {FF0000}24:00"WHITE", SERVER TIME");
	return 1;
}

CMD:dxptime(playerid, params[])
{
    SCM(playerid, COLOR_YELLOW, "______________________________""MGMC:RP DOUBLE XP SYSTEM_________________________________");
	SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}0:00"WHITE" and ends at {FF0000}3:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}6:00"WHITE" and ends at {FF0000}9:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}12:00"WHITE" and ends at {FF0000}15:00"WHITE", SERVER TIME");
    SCM(playerid, COLOR_WHITE, ""SVRCLR"[SERVER]: "WHITE"Double XP starts at {008000}18:00"WHITE" and ends at {FF0000}21:00"WHITE", SERVER TIME");
	return 1;
}*/

CMD:cureleg(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /cureleg [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pBrokenLeg])
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" The player specified has no broken legs.");
	}

	PlayerInfo[targetid][pBrokenLeg] = 0;

	//SetPlayerSpecialTag(targetid, TAG_NONE);

	SCM(targetid, COLOR_YELLOW, "Your broken leg was cured by an admin.");
	SAM(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" has cured %s's broken legs.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:check(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	DisplayStats(targetid, playerid);
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}

CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(l)ow [text]");
	}
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "Stranger(B%d): %s", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "%s: %s", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	SetPlayerBubbleText(playerid, 5.0, COLOR_GREY1, "(Quietly) %s", params);
	return 1;
}

CMD:w(playerid, params[]) return callcmd::whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming whispers.");
	}
	if(PlayerInfo[playerid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Whisper chat is currently disabled. /tog whisper to re-enable.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't whisper to yourself.");
	}

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "[L] %s whisper to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(targetid), text);

	SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Whispering)");

	if(PlayerInfo[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/rw [message]' to reply to this whisper.");
	}

	PlayerInfo[targetid][pWhisperFrom] = playerid;
	return 1;
}

CMD:vc(playerid, params[])
{
	ShowDialogToPlayer(playerid, DIALOG_VOICECHAT);
	return 1;
}

CMD:rvc(playerid)
{
    new string[2048], status[128], statuss[128];
    strcat(string, "Channel\tToggle\tDescription");
    if(PlayerInfo[playerid][pFactionRadio] == 0)
    {
    	status = "{ff0000}OFF{FFFFFF}";
    }
    else
    {
    	status = "{009900}ON{FFFFFF}";
    }
    if(PlayerInfo[playerid][pGangRadio] == 0)
    {
    	statuss = "{ff0000}OFF{FFFFFF}";
    }
    else
    {
    	statuss = "{009900}ON{FFFFFF}";
    }
    format(string, sizeof(string), "%s\nFaction Radio\t%s\tRadio Channel for your faction\
		\nGang Radio\t%s\tRadio Channel for your Gang.", string, status, statuss);
    ShowPlayerDialog(playerid, DIALOG_RADIOCHAT, DIALOG_STYLE_TABLIST_HEADERS, "Voice Chat Setup", string, "Toggle", "Close");
    return 1;
}

CMD:pm(playerid, params[])
{
	new targetid, text[128];
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a donator subscription.");
	}
	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pm [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pTogglePM] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming private messages.");
	}
	if(PlayerInfo[playerid][pTogglePM] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "PM chat is currently disabled. /tog pm to re-enable.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't PM yourself.");
	}

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "(L) %s PM to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "(( PM from %s: %s ))", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "(( PM to %s: %s ))", GetRPName(targetid), text);

	if(PlayerInfo[targetid][pPMFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/re [message]' to reply to this PM.");
	}

	PlayerInfo[targetid][pPMFrom] = playerid;
	return 1;
}

CMD:re(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /re [text]");
	}
	if(PlayerInfo[playerid][pPMFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been messaged by anyone since you joined the server.");
	}
	if(PlayerInfo[PlayerInfo[playerid][pPMFrom]][pTogglePM] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming private messages.");
	}
	if(PlayerInfo[playerid][pTogglePM] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "PM chat is currently disabled. /tog pm to re-enable.");
	}

	PlayerInfo[PlayerInfo[playerid][pPMFrom]][pPMFrom] = playerid;
	SM(PlayerInfo[playerid][pPMFrom], COLOR_YELLOW, "(( PM from %s: %s ))", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "(( PM to %s: %s ))", GetRPName(PlayerInfo[playerid][pPMFrom]), params);

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "(L) %s PM to %s: %s", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pPMFrom]), params);
        }
	}
	return 1;
}

CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rw [text]");
	}
	if(PlayerInfo[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, PlayerInfo[playerid][pWhisperFrom], 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	PlayerInfo[PlayerInfo[playerid][pWhisperFrom]][pWhisperFrom] = playerid;
	SM(PlayerInfo[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(PlayerInfo[playerid][pWhisperFrom]), params);

    foreach(new i : Player)
    {
	    if(PlayerInfo[i][pPMListen])
		{
			SM(i, COLOR_YELLOW, "(L) %s whispers to %s: %s", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pWhisperFrom]), params);
        }
	} // GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
	return 1;
}

CMD:createatm(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createatm [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The ATM will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ATM slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:removeatm(playerid, params[])
{
	new loc;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeatm [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid ATM or Static.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed ATM %i.", loc);
	return 1;
}

CMD:createvendor(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createvendor [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The vendor will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_VENDORS; i ++)
	{
		if(!VenInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vendors VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateVen", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SCM(playerid, COLOR_GREY, "VENDORS slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removevendor(playerid, params[])
{
	new loc;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevendor [vendorid] (/nearest)");
	}
	if(!(0 <= loc < MAX_VENDORS) || !VenInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid VENDORS or Static.");
	}
    DestroyDynamic3DTextLabel(VenInfo[loc][aText]);
    DestroyDynamicObject(VenInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vendors WHERE id = %i", VenInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	VenInfo[loc][aExists] = false;
	VenInfo[loc][aID] = 0;

	SCM(playerid, COLOR_WHITE, "** You have removed VENDORS %i.", loc);
	return 1;
}

CMD:createpg(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createpg [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The public garage will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_PGARAGE; i ++)
	{
		if(!PGInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO publicgarage VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreatePG", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Public Garage slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:removepg(playerid, params[])
{
	new loc;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepg [pgid] (/nearest)");
	}
	if(!(0 <= loc < MAX_PGARAGE) || !PGInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Public Garage or Static.");
	}
    DestroyDynamic3DTextLabel(PGInfo[loc][aText]);
    DestroyDynamicObject(PGInfo[loc][aObject]);
    DestroyDynamicMapIcon(PGInfo[loc][aMapIcon]);
    DestroyDynamicPickup(PGInfo[loc][aPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM publicgarage WHERE id = %i", PGInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	PGInfo[loc][aExists] = false;
	PGInfo[loc][aID] = 0;

	SM(playerid, COLOR_WHITE, "** You have removed public garage %i.", loc);
	return 1;
}

CMD:radar(playerid, params[])
{
	new targetid;
	if(gettime() - PlayerInfo[playerid][pLastRadar] < 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this to track again.. Please wait %i more seconds.", 5 - (gettime() - PlayerInfo[playerid][pLastRadar]));
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
  	  return SCM(playerid, COLOR_SYNTAX, "You are not a law enforcement!");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
 	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /radar [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 50.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}
    PlayerInfo[playerid][pFindTime] = 900;
    PlayerInfo[playerid][pLastRadar] = gettime();
    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's suspects location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerInfo[playerid][pFindTime]);
	PlayerInfo[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:hotwire(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(PlayerInfo[playerid][pToolkit] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must have a toolkit to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(PlayerInfo[playerid][pEngine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are already attempting to hotwire this vehicle.");
		}
	    GetVehicleHealth(vehicleid, health);

	    PlayerInfo[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngineHotwire", 5010, 0, "dd",  vehicleid, playerid);
  		SCM(playerid,COLOR_WHITE,"You are currently hotwiring this vehicle.");
  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts hotwiring the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle's engine is already on.");
	}

	return 1;
}

CMD:lockpick(playerid, params[])
{	
	new vehicleid = GetNearbyVehicle(playerid);

	if(PlayerInfo[playerid][pLockpick] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any lockpicks left.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may only break into a player owned vehicle.");
	}
	if(VehicleInfo[vehicleid][vLocked] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is unlocked. Therefore you can't break into it.");
	}

	PlayerInfo[playerid][pLockpick]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lockpick = %i WHERE uid = %i", PlayerInfo[playerid][pLockpick], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	if(GetNearbyVehicle(playerid))
	{	
		TogglePlayerControllable(playerid, 0);
		VehicleInfo[vehicleid][vLocked] = 0;
		SetVehicleParams(vehicleid, VEHICLE_DOORS, false);
		Dyuze(playerid, "Notice", "~w~Lockpicking the vehicle..");
		SetTimerEx("TimerLockpick", 10000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is unlocking the vehicle.", GetRPName(playerid));
	}
	return 1;
}

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	if(!VehicleHasEngine(vehicleid)) return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	if(vehicleFuel[vehicleid] <= 0) return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You do not have keys to this vehicle, therefore you can't turn on its engine.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		GetVehicleHealth(vehicleid, health);
 		if(PlayerInfo[playerid][pEngine]) return SCM(playerid, COLOR_SYNTAX, "You are already attempting to turn your engine on.");
		if(health < 251.0) return SCM(playerid, COLOR_SYNTAX, "The vehicle engine won't start. This vehicle engine was wrecked!");

		PlayerInfo[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngine", 1010, 0, "dd",  vehicleid, playerid);
		Dyuze(playerid, "Successfully", "Vehicle engine starting, please wait..");
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
		Dyuze(playerid, "Successfully", "Turned off the engine.");
	}
	return 1;
}

CMD:flash(playerid, params[])
{
	new vehicleid,panels,doors,lights,tires;
	vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_WHITE, "You are not the driver.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
	}
	if(!IsAFlashingEXB(GetPlayerVehicleID(playerid)))
	{
		return SCM(playerid, COLOR_WHITE, "This vehicle doesn't support ELM lights.");
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
        ExBJck[playerid] = 1;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 7, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and buckles it up.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 1)
	{
        ExBJck[playerid] = 0;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 7);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SM(playerid, COLOR_SYNTAX, "Usage: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SM(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

    new stext[4];
    if(ExBJck[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s looks at %s, checking to see if they are wearing a helmet.", GetRPName(playerid),GetRPName(giveplayerid));
        SM(playerid,COLOR_WHITE, "%s's helmet is currently %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetRPName(playerid),GetRPName(giveplayerid));
    	SM(playerid,COLOR_WHITE, "%s's seat belt is currently %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
    if(ExBJck[playerid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "You have your seatbelt on.");
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "Your seatbelt is off.");
	}
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no lights which can be turned on.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
	}

	return 1;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no hood.");
	}
    if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no boot.");
	}
    if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}


CMD:myupgrades(playerid, params[])
{
    SM(playerid, COLOR_YELLOW, "_____ %s's upgrades (%i points available) _____", GetRPName(playerid), PlayerInfo[playerid][pUpgradePoints]);
	SM(playerid, SERVER_COLOR, "Shealth: %.0f/100{C8C8C8} You spawn with %.1f health at the hospital after death.", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnHealth]);
	SM(playerid, COLOR_YELLOW, "Sarmor: %.0f/100{C8C8C8} You spawn with %.1f armor at the hospital after death.", PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pSpawnArmor]);
	SM(playerid, SERVER_COLOR, "Addict: %i/3{C8C8C8} You gain an extra %.1f health and armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
	SM(playerid, COLOR_YELLOW, "Asset: %i/4{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
    SM(playerid, SERVER_COLOR, "Labor: %i/5{C8C8C8} You earn an extra %i percent cash to your paycheck when working.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
    SM(playerid, COLOR_YELLOW, "Inventory: %i/5{C8C8C8} This upgrade increases the capacity for your items. [/inv]", PlayerInfo[playerid][pInventoryUpgrade]);
	return 1;
}

CMD:upgrade(playerid, params[])
{
    new cost = 150000;
    new cost2 = cost - PlayerInfo[playerid][pCash];
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	/*if(PlayerInfo[playerid][pUpgradePoints] < 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have no upgrade points available which you can spend.");
	}*/
	if(PlayerInfo[playerid][pCash] < cost)
	{
		return SM(playerid, COLOR_GREY, "You can't afford any upgrade. You need more %d to afford upgrade.", cost2);
	}
	if(isnull(params))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /upgrade [option] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
	    SCM(playerid, COLOR_WHITE, "List of options: Addict, Asset, SpawnHealth, SpawnArmor, Labor, Inventory");
	}
	else if(!strcmp(params, "inventory", true))
	{
	    if(PlayerInfo[playerid][pInventoryUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your inventory skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pInventoryUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_GREEN, "You upgraded your inventory skill to %i/5. Your inventory capacity was increased.", PlayerInfo[playerid][pInventoryUpgrade]);
 	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(PlayerInfo[playerid][pAddictUpgrade] >= 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your addict skill is already upgraded to its maximum level of 3.");
		}

  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

		PlayerInfo[playerid][pAddictUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SM(playerid, COLOR_YELLOW, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "labor", true))
	{
	    if(PlayerInfo[playerid][pLaborUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your labor skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pLaborUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_GREEN, "You upgraded your labor skill to level %i/5. You now earn %i percent more extra cash when you work.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(PlayerInfo[playerid][pAssetUpgrade] >= 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your asset skill is already upgraded to its maximum level of 4.");
		}
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

		PlayerInfo[playerid][pAssetUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(PlayerInfo[playerid][pSpawnHealth] >= 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn health is at maximum (100).");
	    }
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

	    PlayerInfo[playerid][pSpawnHealth] += 0.5;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", PlayerInfo[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(PlayerInfo[playerid][pSpawnArmor] > 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn armor is at maximum (25).");
	    }
  		if(PlayerInfo[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		PlayerInfo[playerid][pCash] -= cost;

	    PlayerInfo[playerid][pSpawnArmor] += 0.5;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", PlayerInfo[playerid][pSpawnArmor]);
	}
	return 1;
}

CMD:buylevel(playerid, params[]) return callcmd::levelup(playerid, params);
CMD:levelup(playerid, params[])
{
	new
		exp = (PlayerInfo[playerid][pLevel] * 4),
		cost = (PlayerInfo[playerid][pLevel] + 1) * 150,
		string[64];

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(PlayerInfo[playerid][pEXP] < exp)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need %i more respect points in order to level up.", exp - PlayerInfo[playerid][pEXP]);
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to have at least %s on hand to buy your next level.", FormatNumber(cost));
	}
	if(PlayerInfo[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}
	PlayerInfo[playerid][pEXP] -= exp;
	PlayerInfo[playerid][pCash] -= cost;
	PlayerInfo[playerid][pLevel]++;
	PlayerInfo[playerid][pUpgradePoints] += 2;

	if(PlayerInfo[playerid][pLevel] == 3 && PlayerInfo[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", PlayerInfo[playerid][pLevel]);
	Dyuze(playerid, "Notice", string);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, cash = cash - %i, level = level + 1 WHERE uid = %i", exp, cost, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_YELLOW, "You have moved up to level %i.", PlayerInfo[playerid][pLevel]);
	SM(playerid, COLOR_YELLOW, "You now have %i upgrade points. Use /upgrade to learn more.", PlayerInfo[playerid][pUpgradePoints]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:dollarrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1083);
            SM(playerid, COLOR_SYNTAX, "   Dollar Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:sr(playerid, params[]) {
	return callcmd::shadowrims(playerid, params);
}

CMD:shadowrims(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
    SCM(playerid, 0xFFFFFFFF, "You have added shadow rims to your vehicle.");
    return 1;
}

CMD:ctr(playerid, params[]) {
	return callcmd::cutterrims(playerid, params);
}

CMD:cutterrims(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
    SCM(playerid, 0xFFFFFFFF, "You have added cutter rims to your vehicle.");
    return 1;
}

CMD:gr(playerid, params[]) {
	return callcmd::goldrims(playerid, params);
}

CMD:goldrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 4) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
            SM(playerid, COLOR_SYNTAX, "Gold Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:answer(playerid, params[])
{
	new param[32];
	if(sscanf(params, "S()[32]", param))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
		return 1;
	}
	if(isnull(quizAnswer))
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no active quiz!");
	}
	if(!isnull(param))
	{
		if(!strcmp(quizAnswer, param, true))
		{
			SMA(COLOR_LIGHTRED, "%s has answered the quiz correctly. answer: "SVRCLR"%s", GetRPName(playerid), quizAnswer);
			quizQuestion[0] = EOS;
			quizAnswer[0] = EOS;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Sorry bud, that ain't the right answer.");
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
	}
	return 1;
}

CMD:rp(playerid, params[])
{
	new option[10];
	if(sscanf(params, "s[10]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /rp [option]");
	    SCM(playerid, COLOR_WHITE, "Guns: GrabGun, HideGun, AimHead, AimBody, AimFeet, AimHand");
        SCM(playerid, COLOR_WHITE, "Player: handsup, handsdown");
        if(GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_ARMY && GetFactionType(playerid) == FACTION_FEDERAL)
  		{
			SCM(playerid, COLOR_BLUE, "Police RP: Tazer");
		}
		if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
			SCM(playerid, COLOR_DOCTOR, "Saving Patient Step: Rushpt, Stopbleed, Getst, Lowst, Rusham");
			SCM(playerid, COLOR_DOCTOR, "Medic RP: Heal");
		}
		if(GetFactionType(playerid) == FACTION_MECHANIC)
		{
		    SCM(playerid, COLOR_GREEN, "OpenL, GetTools, CarHood, Nitro, Hyd, GetWheels, InWheel, BodyKits");
		    SCM(playerid, COLOR_GREEN, "Install");
		}
	    return 1;
	}
	if(!strcmp(option, "bodykits", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install bodykits towards the car.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "inwheel", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s removes the old 4 wheels of the car as he/she installs new ones.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "getwheels", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes 4 pieces of wheels from the locker.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "hyd", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install the Hydraulics to the car.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "nitro", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attempts to install the nitro boost to the car.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "install", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** Installed. ((%s))", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "openl", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the locker with his/her right hand.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "gettools", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the tools/bodykits from the locker.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "carhood", true))
	{
	    if(GetFactionType(playerid) == FACTION_MECHANIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses his/her force to open the car's hood.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "handsup", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s raises both of his/her hands onto the air, levels it at his/her head.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "rushpt", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes towards the patient with the medkit.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "stopbleed", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses alcohol, cotton and bandage to stop the bleeding of the wound.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "getst", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes at the back of the ambulance, taking out a stretcher and rushes back towards the patient.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "lowst", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lowers the stretcher, levels it towards the patient and gently move the patient on it.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "rusham", true))
	{
	    if(GetFactionType(playerid) == FACTION_MEDIC)
  		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rushes towards at the back of the ambulance, loading the patient inside.", GetRPName(playerid));
		}
        else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}

	if(!strcmp(option, "handsdown", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s moves his hands down freely.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "grabgun", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs his/her gun out, loads it and switches the safety to OFF.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "hidegun", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s hides/slings his/her gun back to its old position and flicking the safety to ON.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimhead", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the head of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimbody", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the body of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimfeet", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the feet of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "aimhand", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun at the hand of the enemy.", GetRPName(playerid));
		return 1;
	}
	if(!strcmp(option, "tazer", true))
	{
	    if(IsLawEnforcement(playerid))
	    {
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s shoots the tazer towards the enemy.", GetRPName(playerid));
		}
		else SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
		return 1;
	}
	if(!strcmp(option, "heal", true))
	{
	    if(GetFactionType(playerid) != FACTION_MEDIC)
	    {
	        SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
	    }
	    else
	    {
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses alcohol, cotton and bandage to cure the patient's wound.", GetRPName(playerid));
		}
		return 1;
	}
	return 1;
}

CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2)
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /quiz [option]");
			SCM(playerid, COLOR_WHITE, "Available options: create, end, edit");
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SMA(COLOR_LIGHTRED, "The quiz was ended by %s, answer: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s changed the quiz answer to %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /quiz edit [answer]");
		}
	}
	return 1;
}

CMD:jobhelp(playerid)
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE && PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You have no job and therefore no job commands to view.");
	}

	switch(PlayerInfo[playerid][pJob])
	{
		case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** Job: /getorder, /putorder, /graborder, /cancelcp.");
		case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** Job: /loadtruck, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Job: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Job: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Job: /getmats, /craftweapon.");
		case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Job: /mine, /cancelcp.");
		case JOB_BUTCHER: SCM(playerid, COLOR_WHITE, "** Job: /chopmeat, /cancelcp.");
		case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Job: /setfare, /takecall.");
        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Job: /planthelp, /getcrate.");
        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Job: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Job: /find.");
        case JOB_CONSTRUCTION: SCM(playerid, COLOR_WHITE, "** Job: /cancelcp.");
        case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** JOB *** Hop in to forklift to begin");
        case JOB_NEWS: SCM(playerid, COLOR_WHITE, "** Job: /getpaper, /cancelcp.");
        case JOB_PRODUCTION: SCM(playerid, COLOR_WHITE, "** Job: /createproduct, /sellproduct.");
 	}

 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** Secondary  Job: /getorder, /putorder, /graborder, /cancelcp.");
			case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /load, /deliver.");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Secondary Job: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Secondary Job: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getmats, /craftweapon.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /mine.");
			case JOB_BUTCHER: SCM(playerid, COLOR_WHITE, "** Job: /chopmeat, /cancelcp.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /setfare.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getdrug, /planthelp, /getcrate.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Secondary Job: /find.");
	        case JOB_CONSTRUCTION: SCM(playerid, COLOR_WHITE, "** Secondary Job: /cancelcp.");
	        case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** Secondary Job *** Hop in to forklift to begin");
	        case JOB_NEWS: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getpaper, /cancelcp.");
	 	}
	}

	return 1;
}

CMD:hghelp(playerid)
{
    SCM(playerid, SERVER_COLOR, "The Hunger Games Minigame:");
    SCM(playerid, COLOR_WHITE, "Players are taken to a vast island, where they must fight for survival,");
	SCM(playerid, COLOR_WHITE, "obtain better weapons (hidden in various parts of the arena) and eliminate opponents.");
    SCM(playerid, COLOR_WHITE, "The last man standing is the winner.");
    SCM(playerid, COLOR_YELLOW, "** HG: /joingame, /exitgame, /survivors, /hgwaiting");
    return 1;
}

CMD:selfrepair(playerid, params[])
{
	new count, Float:health;
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 589.505859, -1494.062011, 15.382656) && !IsPlayerInRangeOfPoint(playerid, 5.0, 386.922851, -1522.228149, 32.278041) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1933.960449, -1857.269653, 13.561939))
	{
	    return SCM(playerid, COLOR_GREY2, "You are not at the repair point.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_GREY2, "The engine must be off during the repair session.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_GREY2, "You are not inside of any vehicle.");
	}
	if(PlayerInfo[playerid][pCash] < 3000)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You cannot afford the self repair.");
 	}

	GetVehicleHealth(vehicleid, health);

	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
        RepairVehicle(vehicleid);
		SCM(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");

		SetVehicleHealth(vehicleid, 1000.0);
		GivePlayerCash(playerid, -4000);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is self repairing his/her vehicle.", GetRPName(playerid));
	}
	return 1;
}

CMD:facrepair(playerid, params[])
{
	new count, Float:health;
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1599.714843, -1621.765502, 13.462455) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1135.154663, -1325.867919, 13.617612))
	{
	    return SCM(playerid, COLOR_GREY2, "You are not at the repair point.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_GREY2, "The engine must be off during the repair session.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_GREY2, "You are not inside of any vehicle.");
	}
	GetVehicleHealth(vehicleid, health);

	if(health >= 8000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
        RepairVehicle(vehicleid);
		SCM(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");
		SetVehicleHealth(vehicleid, 3000.0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is self repairing his/her vehicle.", GetRPName(playerid));
	}
	return 1;
}

CMD:vehiclehelp(playerid)
{
    SCM(playerid, COLOR_WHITE, "** Vehicle: /engine, /lights, /hood, /trunk, /buyvehicle, /vstorage, /park, /lock.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /vstash, /neon, /unmod, /colorcar, /paintcar, /upgradevehicle, /sellcar, /sellmycar.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /findcar, /givekeys, /takekeys, /setradio, /paytickets, /carinfo, /gascan.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /seatbelt, /checkmybelt, /checkbelt, /windows.");
    return 1;
}

CMD:fd(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
    }

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1554.651611, -1607.967041, 13.382812) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1096.872680, -1316.325195, 13.712162))
    {
        return SCM(playerid, COLOR_SYNTAX, "You Are Not In Range Of The Faction Garage");
    }

    if(!IsPlayerInAnyVehicle(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You must spawn a vehicle to despawn car.");
    }

    if(factionVehicle{vehicleid})
    {
        DestroyVehicleEx(vehicleid);
        factionVehicle{vehicleid} = false;
        return SCM(playerid, COLOR_SYNTAX, "FACTION VEHICLE HAS BEEN DESPAWNED.");
    }
    return 1;
}

CMD:bankhelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "** Bank: /withdraw, /deposit, /wiretransfer, /balance, /robbank, /invite, /setupvault.");
	return 1;
}

CMD:donatorhelp(playerid) return callcmd::viphelp(playerid);
CMD:viphelp(playerid)
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a donator subscription.");
	}
	SCM(playerid, COLOR_VIP, "** Donator: /(v)ip, /vipinfo, /vipinvite, /vipnumber");
	SCM(playerid, COLOR_VIP, "** Donator: /craftweapon, /vcode, /vipmenu(soon)");
	return 1;
}

CMD:fwsall(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "confirm"))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fwsall [confirm]");
			return 1;
		}
		foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pLogged])
		        continue;

			GiveWeapon(i, 24);
			GiveWeapon(i, 25);
			GiveWeapon(i, 27);
			GiveWeapon(i, 31);
			GiveWeapon(i, 34);
			SM(i, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
		}
		SMA(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to everyone.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:rexfws(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 24);
		GiveWeapon(targetid, 25);
		GiveWeapon(targetid, 27);
		GiveWeapon(targetid, 31);
		GiveWeapon(targetid, 34);
		SM(playerid, COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:fws(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 24);
		GiveWeapon(targetid, 25);
		GiveWeapon(targetid, 27);
		GiveWeapon(targetid, 31);
		GiveWeapon(targetid, 34);
		SMA(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

forward Slide(playerid);
public Slide(playerid)
{
    if(Sliding[playerid] == 1)
    {
		new Float:X;
		new Float:Y;
		new Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z - 5.00);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
    }
	return 1;
}

forward IsAChopper(vehicleid);
public IsAChopper(vehicleid)
{
	if(vehicleid >= 0 && vehicleid <= 1) // < Define your Chopper ID's Here
	{
		return 1;
	}
	return 0;
}

CMD:rappel(playerid,params[])
{
    new vehicleid;
    if(!IsPlayerInAnyVehicle(playerid) && IsAChopper(vehicleid)) return SendClientMessage(playerid, 0x33CCFFAA,"You must be in a law enforcement helicopter to rappel!");
	if(!IsLawEnforcement(playerid)) return SendClientMessage(playerid, 0x33CCFFAA,"You are not a LEO.");
	if(GetPVarInt(playerid,"rappelling") == 1) return SendClientMessage(playerid, 0x33CCFFAA, "You are already rappelling!");

	RemovePlayerFromVehicle(playerid);
	new Float:X, Float:Y, Float:Z,Float:Angle;
    GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z-2);
	GetPlayerFacingAngle(playerid, Angle);
	Dyuze(playerid, "Notice", "~B~Rappelling");
	SetPVarInt(playerid,"rappelling",1);
    new z_ = 5;
	for(new i = 0; i < 58; i++) {
		rope1 = CreateObject(19089, X, Y, Z+z_, 0, 0, Angle);
		z_ -= 3;
	}
	ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
	SM(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Don't forget to use /breakrope (/br)");
	return 1;
}
CMD:br(playerid,params[])
{
	if(GetPVarInt(playerid,"rappelling") == 0) return SendClientMessage(playerid, 0x33CCFFAA, "You are not rappelling!");
	for(new i = 0; i < 58; i++) {
		SetPVarInt(playerid,"rappelling",0);
		DestroyObject(rope1);
		ClearAnimations(playerid);
	}
	return 1;
}

//temoporary
CMD:slide(playerid, params[])
{
	new vehicleid;
	if(IsPlayerInAnyVehicle(playerid) && IsAChopper(vehicleid) && Sliding[playerid] == 0)
	{
		Sliding[playerid] = 1;
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You are sliding down the rope.");
	}
	return 1;
}

CMD:stopp(playerid, params[])
{
	if(Sliding[playerid] == 1)
	{
		Sliding[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, COLOR_WHITE, "You have stopped sliding.");
	}
	return 1;
}

CMD:buyrepairkit(playerid, params[])
{
    new price = 2500;
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 949.726074, -1641.879638, 13.635803))
	{
		return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You are not in range of the Mechanic Shop");
	}
    if(PlayerInfo[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
    }
    if(PlayerInfo[playerid][pRepairKit] >= 5)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 repairkit.");
    }
    PlayerInfo[playerid][pRepairKit] += 1;
    GivePlayerCash(playerid, -price);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", PlayerInfo[playerid][pRepairKit], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the mechanic and received repairkit.", GetRPName(playerid), price);
    SCM(playerid, COLOR_WHITE, "** Repairkit purchased. /use repairkit to use.");
	return 1;
}
/*
CMD:blackmarket(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, -50.1366, -269.3632, 6.6332))
	{
		return SCM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You are not in range of the Black Market.");
	}
	ShowPlayerDialog(playerid, DIALOG_BLACKMARKET1, DIALOG_STYLE_LIST, "BLACK MARKET", "Deagle ($10,000)\nShotgun ($10,000)\nAK ($15,000)\nMP5 ($7,000)\nVest ($5,000)\nLockpick ($5,000)", "Select", "Cancel");
	return 1;
}
*/
CMD:brevive(playerid, params[])
{
new
	string[128];

   if(!PlayerInfo[playerid][pInjured])
	{
	  return SCM(playerid, COLOR_SYNTAX, "You are not injured and you cant call a bot to revive you.");
	}
	foreach(new i : Player)
        {
		   if(GetFactionType(i) == FACTION_MEDIC)
		   {
			  if(PlayerInfo[i][pDuty])
			  {
				 return SCM(playerid, COLOR_SYNTAX, "You Cant Call A Bot While An EMS Is Online.");
			  }
		   }
		}


		   new Float:x, Float:y, Float:z, Float:angle;
	      GetPlayerPos(playerid, x, y, z);
	      GetPlayerFacingAngle(playerid, angle);

		  PlayerInfo[playerid][pReviveBot] = CreateActor(274,x, y, z, angle);
		  ApplyActorAnimation(PlayerInfo[playerid][pReviveBot], "MEDIC", "CPR", 4.1, 1, 1, 1, 1, 1);
		  SetActorInvulnerable(PlayerInfo[playerid][pReviveBot], true);
		  SetTimerEx("DESTROYACTOR", 10000, false, "i", playerid);
          new szString[128];
	      format(szString, sizeof(szString), "%s (uid: %i) has been revived by [BOT]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
          SendDiscordMessage(9, szString);
		  format(string, sizeof(string), "%s ~g~Bot Is Reviving You...", string);
		  GameTextForPlayer(playerid, string, 10000, 1);
		  return 1;
}


CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

	SCM(playerid, COLOR_WHITE, "** Radio: /fc, /(r)adio, /div, /faction, /division, /locker, /showbadge, /(m)egaphone.");

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SCM(playerid, COLOR_WHITE, "** Police: /open, /cell, /cells, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.");
	        SCM(playerid, COLOR_WHITE, "** Police: /wanted, /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall, /backup.");
	        SCM(playerid, COLOR_WHITE, "** Police: /mdc, /clearwanted, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.");
	        SCM(playerid, COLOR_WHITE, "** Police: /showtlaws, /showslaws, /giveweaponlic, /invoice");
         	SCM(playerid, COLOR_WHITE, "** Auto: /po, /sto, /mir.");

			if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    SCM(playerid, COLOR_WHITE, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
		case FACTION_MEDIC:
		{
		    SCM(playerid, COLOR_WHITE, "** Medic: /firstaid, /stretcher(/loadpt), /deliverpatient, /getpt, /injuries, /deploy, /undeploy.");
		    SCM(playerid, COLOR_WHITE, "** Medic: /movept, /badge, /gov, /backup, /mrevive, /listcallers, /trackcall, /d, /callsign, /undeployall, /heal.");
  			SCM(playerid, COLOR_WHITE, "** Auto: /po.");
		}
		case FACTION_NEWS:
		{
		    SCM(playerid, COLOR_WHITE, "** News: /news, /live, /endlive, /liveban, /phonebook");
		}
		case FACTION_MECHANIC:
		{
		    SCM(playerid, COLOR_WHITE, "** Mech: /tune, /repair, /tow, /untow, /refill, /nos, /hyd, /takecall");
			SCM(playerid, COLOR_WHITE, "** Mech: /upgradevehicle, /mechfee, /neon, /paintcar, /colorcar, /unmod");
		}
		case FACTION_GOVERNMENT:
		{
		    SCM(playerid, COLOR_WHITE, "** Goverment: /gov, /settax, /factionpay, /tazer, /cuff, /uncuff, /detain, /taxdeposit, /taxwithdraw.");
		    SCM(playerid, COLOR_WHITE, "** Goverment: /backup, /badge, /d, /flash");
		}
		case FACTION_HITMAN:
		{
		    SCM(playerid, COLOR_WHITE, "** Hitman: /contracts, /takehit, /profile, /passport, /plantbomb, /pickupbomb, /detonate, /hmole, /hfind");
		}
		case FACTION_TERRORIST:
		{
		    SCM(playerid, COLOR_WHITE, "** Terrorist: /locker, /gov, /r, /fc **");
		}
		case FACTION_CARDEALER:
		{
		    SCM(playerid, COLOR_WHITE, "** Car Dealer: /givecarkeys, /givecarbill, /r, /fc**");
		}
		case FACTION_BURGER:
		{
		    SCM(playerid, COLOR_WHITE, "** Angels Burger: /sellfood, /r**");
		}
	}

	return 1;
}

CMD:it(playerid, params[])
{
new time;
   if(PlayerInfo[playerid][pAdmin] < 3)
   {
	   return SCM(playerid, COLOR_SYNTAX, "You are not authorised to use this command.");
   }
   if(sscanf(params, "i", time))
   {
       return SCM(playerid, COLOR_WHITE, "Usage: /it [time]");
   }

   InfluenceInfo[iTime] = time * 60;
   SM(playerid, COLOR_YELLOW, "You have set the turf time to %i Minutes", time);
   return 1;
}

CMD:i(playerid, params[]) return callcmd::influence(playerid, params);
CMD:influence(playerid, params[])
{
new gangid;
   if(PlayerInfo[playerid][pAdmin] < 3)
   {
	   return SCM(playerid, COLOR_SYNTAX, "You are not authorised to use this command.");
   }
   if(sscanf(params, "i", gangid))
   {
       SCM(playerid, COLOR_WHITE, "Usage: /infbar [gangid]");
       SCM(playerid, COLOR_WHITE, "(-1) Police.");
       return 1;
   }
   if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
   {
	  return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
   }


   InfluenceInfo[iEnabled] = 1;
   InfluenceInfo[iGangid] = gangid;
   return 1;
}

CMD:ioff(playerid, params[]) return callcmd::influenceoff(playerid, params);
CMD:influenceoff(playerid, params[])
{
   if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, "You are not a admin.");
   if(InfluenceInfo[iEnabled] == 0) return SCM(playerid, COLOR_SYNTAX, "Influence bar is off");

   InfluenceInfo[iEnabled] = 0;
   InfluenceInfo[iGangid] = -1;

   SM(playerid, COLOR_YELLOW, "Influence Bar Turned Off.");
   return 1;
}

CMD:tstart(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, "You are not a admin.");
    if(InfluenceInfo[iStart] == 1) return SCM(playerid, COLOR_SYNTAX, "Turf war is already started.");

	ShowPlayerDialog(playerid, DIALOG_TURF, DIALOG_STYLE_LIST, "Turf System v2", "Turf ID\nDefending Gang\nAttacking Gang\nStart Turf", "Select", "Close");
	return 1;
}
CMD:tstop(playerid, params[])
{
new turfid;
   if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_WHITE, "You are not a admin.");
   if(InfluenceInfo[iStart] == 0) return SCM(playerid, COLOR_SYNTAX, "Turf war is not started.");
   if(sscanf(params, "i", turfid)) return SCM(playerid, COLOR_SYNTAX, "Usage: /tstop [turfid]");
   if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists]) return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
   if(!turfid) return SCM(playerid, COLOR_SYNTAX, "This turf is not started.");

   if(InfluenceInfo[iTurf] == turfid)
   {
      InfluenceInfo[iStart] = 0;
      InfluenceInfo[iTurf] = -1;
      SMA(COLOR_GREEN, "[Turf Info]"WHITE" Turf War Ended.");
      SAM(COLOR_LIGHTRED, "AdmCmd: %s has stopped the turf war.", GetRPName(playerid));

      InfluenceInfo[iEnabled] = 0;
      InfluenceInfo[iTime] = 0;
      InfluenceInfo[iDefGang] = -2;
      InfluenceInfo[iAttGang] = -2;
      InfluenceInfo[iDefGangMembers] = 0;
      InfluenceInfo[iAttGangMembers] = 0;

       new string[2500];
       format(string, sizeof(string), "~y~Priority_On_Hold");
       TextDrawSetString(PrioTD[1], string);
       PrioText = string;

       foreach(new i: Player)
       {
	   	   GangZoneStopFlashForPlayer(i, TurfInfo[turfid][tGangZone]);
	   	   new text[256];
	   	   format(text, sizeof(text), "Turf War Stopped.");
		   TextDrawSetString(AnnounceTD[8], text);

		   PlayerInfo[i][pInfluenced] = 0;
		   for(new f = 0; f < 9; f ++)
		   {
			     TextDrawShowForPlayer(i, AnnounceTD[f]);
		   }

		   SetTimerEx("ANNOUNCEHIDE", 10000, false, "i", i);
		   PlayerPlaySound(i,1150,0.0,0.0,0.0);
	     //ShowTurfsOnMap(i);
       }
   }
   else
   {
		 SCM(playerid, COLOR_SYNTAX, "This turf is not started yet.");
   }
   return 1;
}


CMD:tann(playerid, params[])
{
   if(PlayerInfo[playerid][pAdmin] < 3)
   {
      return SCM(playerid, COLOR_SYNTAX, "You are not authorised");
   }
   if(isnull(params)) return SCM(playerid, COLOR_YELLOW, "Usage: /tann [announce text]");

   SMA(COLOR_YELLOW, "[Turf News] "WHITE"%s", params);
   return 1;
}


CMD:gonline(playerid, params[])
{
new gangid;
new count;
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_SYNTAX, "You are not authorised to use this command.");
	if(sscanf(params, "i", gangid)) return SCM(playerid, COLOR_LIGHTRED, "Usage: "WHITE"/gonline [gangid]");
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup]) return SCM(playerid, COLOR_LIGHTRED, "Error: "WHITE"Invalid gang.");

	new string[2500], psstring[2500];

	foreach(new i : Player)
	{
	new turfid = GetNearbyTurf(i);
		if(PlayerInfo[i][pGang] == gangid) {
			count++;

  	if(turfid == InfluenceInfo[iTurf])
			{
			    format(psstring, sizeof(psstring), "%s(%i) %s - Location: Inside Of An Active Turf\n", psstring, PlayerInfo[i][pGangRank], GetRPName(i));
			}
			else
			{
                format(psstring, sizeof(psstring), "%s(%i) %s - Location: %s\n", psstring, PlayerInfo[i][pGangRank], GetRPName(i), GetPlayerZoneName(i));
			}
		}
 }

	if(count > 0)
	{
        format(string, sizeof(string), "%s {%06x}[%s]\n\n"WHITE"Online Players: %i\n%s", string, GangInfo[gangid][gColor] >>> 8, GangInfo[gangid][gName], count, psstring);
		ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_LIST, "Gang Online", string, "Close", "");
	}
	else
	{
       ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_LIST, "Gang Online", "No Members Online In This Gang", "Close", "");
	}
	return 1;
}

CMD:ganghelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	SCM(playerid, COLOR_WHITE, "** Gang: /f, /gang, /gstash, /bandana, /clothes, /capture, /claim, /reclaim, /turfinfo, /points.");
    SCM(playerid, COLOR_WHITE, "** Gang: /gpark, /gbuyvehicle, /gfindcar, /grespawncars, /gsellcar, /lock, /endalliance.");
	SCM(playerid, COLOR_WHITE, "** Gang: /getmats, /craftweapon, /getdrug, /planthelp, /getcrate");
	return 1;
}

CMD:landhelp(playerid, params[])
{
    SCM(playerid, COLOR_WHITE, "** Land: /buyland, /lock, /lopen, /landinfo, /land, /sellmyland, /sellland, /lands.");
    return 1;
}

CMD:planthelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
    SCM(playerid, COLOR_WHITE, "** Plant: /plantpot, /plantinfo, /pickplant.");
    return 1;
}

CMD:o(playerid, params[]) return callcmd::ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(o)oc [global OOC]");
	}
	if(!enabledOOC && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global OOC channel is disabled at the moment.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pToggleOOC])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the OOC chat as you have it toggled.");
	}

	if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0 && strcmp(PlayerInfo[playerid][pCustomTitle], "0", true) != 0) && strcmp(PlayerInfo[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s"WHITE" %s", color >>> 8, PlayerInfo[playerid][pCustomTitle], GetRPName(playerid));

	} else if(PlayerInfo[playerid][pAdmin] > 1) {
		format(string, sizeof(string), ""SVRCLR"%s"WHITE" %s", GetAdminRank(playerid), GetRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), ""SVRCLR"Former Admin"WHITE" %s", GetRPName(playerid));
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "{C2A2DA}%s Donator"WHITE" %s", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SM(i, COLOR_WHITE, "(( %s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

CMD:newb(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:n(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The newbie channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pNewbieMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel. /report for an unmute.");
	}
	if(gettime() - PlayerInfo[playerid][pLastNewbie] < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - PlayerInfo[playerid][pLastNewbie]));
	}
	if(PlayerInfo[playerid][pToggleNewbie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);

	PlayerInfo[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", PlayerInfo[playerid][pNewbies], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", targetid, color >>> 8, name, PlayerInfo[targetid][pLevel], GetPlayerPing(targetid));
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SCM(playerid, COLOR_SYNTAX, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, name, PlayerInfo[i][pLevel], GetPlayerPing(i));
	            count++;
			}
		}

		if(!count)
		{
		    SM(playerid, COLOR_SYNTAX, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}

CMD:pay(playerid, params[])
{
    new targetid, amount;

    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /pay [playerid] [amount]");
    }
    if(gettime() - PlayerInfo[playerid][pLastPay] < 3)
    {
        return SCM(playerid, COLOR_SYNTAX, "Please wait three seconds between each transaction.");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
    if(targetid == playerid)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't pay yourself.");
    }
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(amount > PlayerInfo[playerid][pCash])
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have that much.");
    }
    if(amount > 1000 && PlayerInfo[playerid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can only pay up to $1,000 at a time as a level 1.");
    }
    if(!(1 <= amount <= 100000))
    {
        return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $100,000 at once.");
    }
    if(amount < 1)
    {
        return SM(playerid, COLOR_SYNTAX, "Invalid amount");
    }

    PlayerInfo[playerid][pLastPay] = gettime();

    GivePlayerCash(playerid, -amount);
    GivePlayerCash(targetid, amount);

    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out $%i and gives it to %s.", GetRPName(playerid), amount, GetRPName(targetid));
    //Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    SM(targetid, COLOR_AQUA, "You have been given $%i by %s.", amount, GetRPName(playerid));
    SM(playerid, COLOR_AQUA, "You have given "SVRCLR"$%i{CCFFFF} to %s.", amount, GetRPName(targetid));
    
    new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));
	SendDiscordMessage(6, szString);

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
    {
        SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has given $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
    }

    return 1;
}

CMD:fixlands(playerid, params[])
{
	return callcmd::reloadlands(playerid, params);
}

CMD:reloadlands(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(gettime() - gLastFix < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 1 minute. Please wait %i more seconds.", 60 - (gettime() - gLastFix));
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /reloadlands [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command may cause lag to the server. Abusing this will cause in a permanent ban.");
	    return 1;
	}
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reloaded all lands and their objects.", GetRPName(playerid));
	gLastFix = gettime();
	return 1;
}

CMD:resetbackpack(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /resetbackpack [playerid]");
	    SCM(playerid, COLOR_SYNTAX, "** This command removes the player's backpack and all items inside it.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	ResetBackpack(targetid);
	SM(targetid, COLOR_LIGHTRED, "Administrator %s has reset your backpack and all its items.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset %s's backpack and all its items.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:vale(playerid)
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VALE_STORAGE, playerid);
	return 1;
}*/

CMD:giveweaponlic(playerid, params[])
{
	new targetid, days;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_GREY2, "You are not a part of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "ui", targetid, days))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /giveweaponlic [playerid] [days]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "The player has already have weapon license.");
	}
/*	if(!(1 <= days <= 30))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 30.");
	}

	PlayerInfo[targetid][pWeaponLicense] = 1;
	PlayerInfo[targetid][pWeaponLicenseTime] = gettime() + (days * 86400);*/
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[targetid][pWeaponLicense], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** %s has given you a weapon license.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a weapon license.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:weaponlicinfo(playerid, params[])
{
	new time = PlayerInfo[playerid][pWeaponLicenseTime] - gettime(), string[32];

	if(!PlayerInfo[playerid][pWeaponLicense])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a weapon license.");
	}
	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "Expires In: %i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), "Expires In: %i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "Expires In: %i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "Expires In: %i days", time / 86400);
		}
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Weapon License", string, "Close","");
	return 1;
}*/

CMD:givebackpack(playerid, params[])
{
	new targetid, size[10];
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[32]", targetid, size))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /givebackpack [playerid] [size]");
	    SCM(playerid, COLOR_WHITE, "Sizes:   Small, Medium, Large");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!strcmp(size, "small", true))
	{
		PlayerInfo[targetid][pBackpack] = 1;
	    SM(targetid, COLOR_WHITE, "** %s has given you a small backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a small backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "medium", true))
	{
		PlayerInfo[targetid][pBackpack] = 2;
	    SM(targetid, COLOR_WHITE, "** %s has given you a medium backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a medium backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "large", true))
	{
		PlayerInfo[targetid][pBackpack] = 3;
	    SM(targetid, COLOR_WHITE, "** %s has given you a large backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a large backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}
CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: GasCan, Seeds, Ephedrine, DirtyCash, Diamonds, Jacket, Lockpick, Food, Drink, WeaponClip");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to give away.");
	    }
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0 && PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can only give away weapons to your own faction members.");
	    }

	    GiveWeapon(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SM(targetid, COLOR_AQUA, "%s has given you their %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have given %s your %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		//Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more materials.");
		}

		PlayerInfo[playerid][pMaterials] -= amount;
		PlayerInfo[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[targetid][pMaterials], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i materials.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some materials to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [pot] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPot])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more pot.");
		}

		PlayerInfo[playerid][pPot] -= amount;
		PlayerInfo[targetid][pPot] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[targetid][pPot], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of pot.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of pot to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i grams of pot to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some pot to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i grams of pot to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [Crack] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more Crack.");
		}

		PlayerInfo[playerid][pCrack] -= amount;
		PlayerInfo[targetid][pCrack] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[targetid][pCrack], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of crack.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of crack to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i grams of Crack to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some Crack to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i grams of Crack to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more meth.");
		}

		PlayerInfo[playerid][pMeth] -= amount;
		PlayerInfo[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some meth to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more painkillers.");
		}

		PlayerInfo[playerid][pPainkillers] -= amount;
		PlayerInfo[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some painkillers to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pCigars] -= amount;
		PlayerInfo[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[targetid][pCigars], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some cigars to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSpraycans])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pSpraycans] -= amount;
		PlayerInfo[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[targetid][pSpraycans], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some spraycans to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pGasCan] -= amount;
		PlayerInfo[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[targetid][pGasCan], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some gasoline to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more seeds.");
		}

		PlayerInfo[playerid][pSeeds] -= amount;
		PlayerInfo[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some seeds to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more ephedrine.");
		}

		PlayerInfo[playerid][pEphedrine] -= amount;
		PlayerInfo[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[targetid][pEphedrine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some ephedrine to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [dirtycash] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDirtyCash])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		PlayerInfo[playerid][pDirtyCash] -= amount;
		PlayerInfo[targetid][pDirtyCash] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", PlayerInfo[targetid][pDirtyCash], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of dirty cash.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of dirty cash to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i grams of dirty cash to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some dirty cash to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i grams of dirty cash to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pDiamonds] -= amount;
		PlayerInfo[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[targetid][pDiamonds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetRPName(targetid));
	    new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) gives %i Credits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(6, szString);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some diamonds to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "jacket", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [jacket] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEcoin])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pEcoin] -= amount;
		PlayerInfo[targetid][pEcoin] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", PlayerInfo[targetid][pDiamonds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i jacket.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i jacket to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some jacket to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i jacket to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "lockpick", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [lockpick] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pLockpick])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pLockpick] -= amount;
		PlayerInfo[targetid][pLockpick] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lockpick = %i WHERE uid = %i", PlayerInfo[playerid][pLockpick], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lockpick = %i WHERE uid = %i", PlayerInfo[targetid][pLockpick], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i lockpick.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i lockpick to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some lockpick to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i lockpick to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "food", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [food] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pFood])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pFood] -= amount;
		PlayerInfo[targetid][pFood] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", PlayerInfo[playerid][pFood], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", PlayerInfo[targetid][pFood], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i food.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i food to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some food to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i food to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "drink", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [drink] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDrink])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pDrink] -= amount;
		PlayerInfo[targetid][pDrink] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", PlayerInfo[playerid][pDrink], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", PlayerInfo[targetid][pDrink], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i drink.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i drink to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some drink to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i drink to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "weaponclip", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [weaponclip] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pWeaponClip])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pWeaponClip] -= amount;
		PlayerInfo[targetid][pWeaponClip] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponclip = %i WHERE uid = %i", PlayerInfo[playerid][pDrink], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponclip = %i WHERE uid = %i", PlayerInfo[targetid][pDrink], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i weaponclip.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i weaponclip to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some drink to %s.", GetRPName(playerid), GetRPName(targetid));
	    //Log_Write("log_give", "%s (uid: %i) gives %i weaponclip to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	return 1;
}

CMD:rpgun(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs his/her gun out, loads it and switches the safety to OFF.", GetRPName(playerid));
	return 1;
}

CMD:rpaim(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims the gun to his/her enemy.", GetRPName(playerid));
	return 1;
}

CMD:washmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pDirtyCash] < 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have dirty money.");
	}
    for(new i = 0; i < sizeof(washmoneyPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, washmoneyPoints[i][0], washmoneyPoints[i][1], washmoneyPoints[i][2]))
	    {
			Dyuze(playerid, "Notice", "~g~Washing Money...");
			ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 1, 1, 0, 0);
			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, 9);
			SetTimerEx("TimerWashMoney", 10000, false, "i", playerid);
			return 1;
		}
	}
	return 1;
}

CMD:selldiamond(playerid, params[])
{
	return SendClientMessage(playerid, COLOR_WHITE, "This command is under development, wait for further announcements.");
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Backpack, Pot, Crack, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 ||  PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

        PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEAPON;
		PlayerInfo[targetid][pSellExtra] = weaponid;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you their %s for $%i. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_MATERIALS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i materials for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i materials for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "backpack", true))
	{
	    new size[6];
		if(sscanf(param, "ii", amount, price))
		{
  			SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [backpack] [size] [price]");
  			SCM(playerid, SERVER_COLOR, "** {FF0000}[NOTE}: "WHITE"Please note that the items inside the backpack will be deleted.");
  			return 1;
		}
		if(!PlayerInfo[playerid][pBackpack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have a backpack.");
		}
		if(PlayerInfo[playerid][bpWearing])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't sell your backpack while wearing it.");
		}
		if(amount != PlayerInfo[playerid][pBackpack])
		{
		    SCM(playerid, COLOR_SYNTAX, "Invalid backpack size.");
		    SCM(playerid, COLOR_SYNTAX, "Sizes: 1 - Small  |  2 - Medium  |  3 - large");
		    return 1;
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_BACKPACK;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;
		if(amount == 1)
		{
		    format(size, sizeof(size), "small");
		}
		if(amount == 2)
		{
		    format(size, sizeof(size), "medium");
		}
		if(amount == 3)
		{
  			format(size, sizeof(size), "large");
		}
		SM(targetid, COLOR_AQUA, "** %s offered to sell you a %s backpack for $%i. (/accept item)", GetRPName(playerid), size, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s backpack for $%i.", GetRPName(targetid), size, price);
	}
	else if(!strcmp(option, "pot", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [pot] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPot])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEED;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of pot for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of pot for $%i.", GetRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "crack", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [Crack] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_COCAINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of Crack for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of Crack for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_METH;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of meth for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of meth for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_PAINKILLERS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i painkillers for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i painkillers for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_SEEDS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i seeds for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i seeds for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_EPHEDRINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of ephedrine for $%i.", GetRPName(targetid), amount, price);
	}

	return 1;
}

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accent [type]");
	    SCM(playerid, COLOR_GREY2, "List of accents: (0) None - (1) Tagalog - (2) Cebuano - (3) Bikol - (4) English");
		SCM(playerid, SERVER_COLOR, "More accent contact developers.");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(PlayerInfo[playerid][pAccent], "None", 16);
		case 1: strcpy(PlayerInfo[playerid][pAccent], "Tagalog", 16);
		case 2: strcpy(PlayerInfo[playerid][pAccent], "Cebuano", 16);
		case 3: strcpy(PlayerInfo[playerid][pAccent], "Bikol", 16);
		case 4: strcpy(PlayerInfo[playerid][pAccent], "English", 16);

		default: SCM(playerid, COLOR_SYNTAX, "Invalid accent. Valid types range from 0 to 53.");
	}

	SM(playerid, COLOR_WHITE, "** You set your accent to '%s'.", PlayerInfo[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", PlayerInfo[playerid][pAccent], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s flips a coin which lands on %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "%s %02d, %i %02d:%02d:%02d", string, date[2], date[0], date[3], date[4], date[5]);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s Jail Time: %i seconds", string, PlayerInfo[playerid][pJailTime]);
	}

    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	Dyuze(playerid, "Time", string, 5000);
	SM(playerid, COLOR_WHITE, "** Paychecks occur at every hour. The next paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}

CMD:reportdm(playerid, params[]) return callcmd::rdm(playerid, params);
CMD:rdm(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rdm [playerid]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddDMReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your DM report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /report [playerid (optional)] [text]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:sendloc(playerid, params[])
{
    new targetid, Float:x, Float:y, Float:z, Float:a;
    if(sscanf(params, "ui", targetid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /sendloc [playerid]");
    }
    if(targetid == playerid)
    {
       return SCM(playerid, COLOR_SYNTAX, "You Cant Send yourself.");
	}
    if(!IsPlayerConnected(targetid))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
    }
    SM(playerid, COLOR_GREEN, " You Have Send Your Location To %s ", GetRPName(targetid));
	SM(targetid, COLOR_GREEN, " %s Has Send You Their Location, Marked In The Map", GetRPName(playerid));

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    SetPlayerCheckpoint(targetid, x, y, z, 3.0);
    return 1;
}

CMD:harvest(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2, -1112.4697, -1636.8641, 76.3672))
	{
	    if(inharvesterjob[playerid] == 0)
	    {
		    startplant[playerid] = 0;
			onplant[playerid] = 1;
			harvesterskin[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 158);
			SendClientMessage(playerid, -1, "You got a job Harvester. {00FF00}Production site located near the flower of plant.");
			SendClientMessage(playerid, -1, "{00FF00}Weeds plant pay higher, they are up the hill.");
	        inharvesterjob[playerid] = 1;
			return 1;
		}
		else if(inharvesterjob[playerid] == 1)
		{
			new string[128];
	        new money = countplant[playerid]*3 + countplantEx[playerid]*5;
	        if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    money = money*2;
			    SCM(playerid, COLOR_GREEN, "You recieved x2 of the salary.");
			}
			startplant[playerid] = 0;
			onplant[playerid] = 0;
			prinesplant[playerid] = 0;
			countplant[playerid] = 0;
			prinesplantEx[playerid] = 0;
			countplantEx[playerid] = 0;
			ExtraPlants[playerid] = 0;
			SetPlayerSkin(playerid, harvesterskin[playerid]);
			//SetPlayerSkin(playerid, harvesterskin2[playerid]);
			GivePlayerCash(playerid, money);
			format(string, 128, "You earned %d from your job, payment has been added.", money);
	        SendClientMessage(playerid, -1, string);
	        format(string, 128, "~g~$%d", money);
	        Dyuze(playerid, "Notice", string);
	//        ExtortionTurfsWarsZone(playerid, 10, money);
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
			DisablePlayerCheckpoint(playerid);
			inharvesterjob[playerid] = 0;
	        return 1;
		}
	}
	else
	{
		SCM(playerid, COLOR_WHITE, "You are not in the harvester sidejob!");
	}
	return 1;
}

CMD:meatchop(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2, -16.9641, 1543.6111, 12.7560))
	{
	    if(onmeat[playerid] == 0)
	    {
			meatstartjob[playerid] = 0;
			onmeat[playerid] = 1;
			meatskin[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 168);
			SetPlayerAttachedObject(playerid, 3, 19583, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, -1, "You are now hired as a meat chopper. {00FF00}Chop off those meat at chopping site.");
			SendClientMessage(playerid, -1, "When you are finished with your shift; come back to this place and clock out.");
	        meatjob[playerid] = 1;
			return 1;
	    }
	    else if(onmeat[playerid] == 1)
	    {
	        new string[128], money = countmeat[playerid]*1 + countmeatEx[playerid]*2;
	        if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				money += percent(money, PlayerInfo[playerid][pLaborUpgrade]);
			}
			if(gDoubleSalary)
			{
			    money = money*2;
			    SCM(playerid, COLOR_GREEN, "You recieved x2 of the salary.");
			}
			meatstartjob[playerid] = 0;
			onmeat[playerid] = 0;
			prinesmeat[playerid] = 0;
			countmeat[playerid] = 0;
			prinesmeatEx[playerid] = 0;
			countmeatEx[playerid] = 0;
			ExtraMeatall[playerid] = 0;
			SetPlayerSkin(playerid, meatskin[playerid]);
			GivePlayerCash(playerid, money);
			format(string, 128, "You earned %d from your job.", money);
	        SendClientMessage(playerid, -1, string);
			RemovePlayerAttachedObject(playerid, 3);
			RemovePlayerAttachedObject(playerid, 4);
			DisablePlayerCheckpoint(playerid);
			meatjob[playerid] = 0;
	    }
	 }
	 else
	{
		SendClientMessage(playerid, -1, "You are not in the Meat Chopper Job");
	}
	return 1;
}

CMD:gethelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:requesthelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethelp [help request]");
	}
	if(PlayerInfo[playerid][pHelpMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting help requests.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRequest] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastRequest]));
	}

	strcpy(PlayerInfo[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(playerid), playerid, params);

	PlayerInfo[playerid][pLastRequest] = gettime();
	SCM(playerid, COLOR_YELLOW, "Your help request was sent to all helpers. Please wait for a response.");
	return 1;
}

CMD:accept(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accept [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: House, Death, Garage, Business, Land, Vest, Vehicle, Faction, Gang, Ticket, Live");
		SCM(playerid, COLOR_WHITE, "Available options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, jRobbery, Allience, Carry");
	}
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pHouseOffer],
		    houseid = PlayerInfo[playerid][pHouseOffered],
		    price = PlayerInfo[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this house.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's house offer and paid $%i for their house.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your house offer and paid $%i for your house.", GetRPName(playerid), price);
	    //Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(PlayerInfo[playerid][pAcceptedEMS]) && !PlayerInfo[PlayerInfo[playerid][pAcceptedEMS]][pAFK])
		{
			return SCM(playerid, COLOR_SYNTAX, "There is a medic online and on the way to rescue you.");
		}
 		if(PlayerInfo[playerid][pDeathCooldown] > 0)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can give up.", PlayerInfo[playerid][pDeathCooldown]);
		}
	    if(!PlayerInfo[playerid][pInjured])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not injured and can't accept your death.");
	    }

	    SCM(playerid, COLOR_SYNTAX, "You have given up and accepted your fate.");
	    DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = PlayerInfo[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
		}
		if(PlayerInfo[playerid][pCash] < 750 || PlayerInfo[offeredby][pCash] < 750)
		{
			return SCM(playerid, COLOR_SYNTAX, "You both need to have $750 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -750);
		GivePlayerCash(offeredby, -750);
		BusinessInfo[id][bCash] += 750;

		SMA(SERVER_COLOR, "%s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));

		PlayerInfo[playerid][pMarriedTo] = PlayerInfo[offeredby][pID];
		PlayerInfo[offeredby][pMarriedTo] = PlayerInfo[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[playerid][pMarriedTo], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[offeredby][pMarriedTo], PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = PlayerInfo[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(PlayerInfo[playerid][pMarriedTo] == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't even married ya naab.");
		}
		if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[offeredby][pID])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That isn't the person you're married to.");
		}

		PlayerInfo[playerid][pMarriedTo] = -1;
		PlayerInfo[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = PlayerInfo[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't accept offers from yourself.");
		}

		new gangid = PlayerInfo[playerid][pGang], allyid = PlayerInfo[offeredby][pGang];

	    SM(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has formed an alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGarageOffer],
		    garageid = PlayerInfo[playerid][pGarageOffered],
		    price = PlayerInfo[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this garage.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's garage offer and paid $%i for their garage.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your garage offer and paid $%i for your garage.", GetRPName(playerid), price);
        //Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pBizOffer],
		    businessid = PlayerInfo[playerid][pBizOffered],
		    price = PlayerInfo[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this business.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's business offer and paid $%i for their %s.", GetRPName(offeredby), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your business offer and paid $%i for your %s.", GetRPName(playerid), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
        //Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "land", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pLandOffer],
		    landid = PlayerInfo[playerid][pLandOffered],
		    price = PlayerInfo[playerid][pLandPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a land.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsLandOwner(offeredby, landid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this land.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's land.");
	    }

	    SetLandOwner(landid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's land offer and paid $%i for their land.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your land offer and paid $%i for your land.", GetRPName(playerid), price);
	    //Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their land (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), LandInfo[landid][lID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pLandOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pVestOffer],
		    price = PlayerInfo[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vest.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy the vest.");
	    }
	    new Float:armor = 50.0;

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vest and paid $%i for %.1f armor points.", GetRPName(offeredby), price, armor);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vest offer and paid $%i for %.1f armor points.", GetRPName(playerid), price, armor);

	    TurfTaxCheck(offeredby, price);

	    PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pCarOffer],
		    vehicleid = PlayerInfo[playerid][pCarOffered],
		    price = PlayerInfo[playerid][pCARPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this vehicle.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's vehicle.");
	    }

	    GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = PlayerInfo[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vehicle offer and paid $%i for their %s.", GetRPName(offeredby), price, GetVehicleName(vehicleid));
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vehicle offer and paid $%i for your %s.", GetRPName(playerid), price, GetVehicleName(vehicleid));
        //Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pFactionOffer],
		    factionid = PlayerInfo[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a faction.");
	    }
	    if(PlayerInfo[offeredby][pFaction] != factionid || PlayerInfo[offeredby][pFactionRank] < FactionInfo[factionid][fRankCount] - 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    PlayerInfo[playerid][pFaction] = factionid;
	    PlayerInfo[playerid][pFactionRank] = 0;
	    PlayerInfo[playerid][pDivision] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = 0, division = -1 WHERE uid = %i", factionid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's faction offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your faction offer and is now apart of your faction.", GetRPName(playerid));
		new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
		SendDiscordMessage(4, szString);
		//Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	    PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGangOffer],
		    gangid = PlayerInfo[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a gang.");
	    }
	    if(PlayerInfo[offeredby][pGang] != gangid || PlayerInfo[offeredby][pGangRank] < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    PlayerInfo[playerid][pGang] = gangid;
	    PlayerInfo[playerid][pGangRank] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0 WHERE uid = %i", gangid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's gang offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your gang offer and is now apart of your gang.", GetRPName(playerid));
		new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
		SendDiscordMessage(5, szString);
		//Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	    PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = PlayerInfo[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
        new szString[128], targetid;
        format(szString, sizeof(szString), "%s has Frisked %s.", GetRPName(playerid), GetRPName(targetid));
        SendDiscordMessage(6, szString);
	    PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pTicketOffer],
		    price = PlayerInfo[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a ticket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to pay this ticket.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have paid the $%i ticket written by %s.", price, GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has paid the $%i ticket which was written to them.", GetRPName(playerid), price);
        //Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

	    PlayerInfo[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = PlayerInfo[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerInfo[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetRPName(playerid));
        //Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

		PlayerInfo[playerid][pLiveBroadcast] = offeredby;
		PlayerInfo[offeredby][pLiveBroadcast] = playerid;
  		PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = PlayerInfo[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(PlayerInfo[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's handshake offer.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your handshake offer.", GetRPName(playerid));

  		PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pSellOffer],
		    type = PlayerInfo[playerid][pSellType],
		    amount = PlayerInfo[playerid][pSellExtra],
		    price = PlayerInfo[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = PlayerInfo[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GiveWeapon(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SM(playerid, COLOR_AQUA, "** You have purchased %s's %s for $%i.", GetRPName(offeredby), GetWeaponNameEx(weaponid), price);
				SM(offeredby, COLOR_AQUA, "** %s has purchased your %s for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
				//Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
				TurfTaxCheck(offeredby, price);

				PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(PlayerInfo[offeredby][pMaterials] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMaterials] += amount;
			    PlayerInfo[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[offeredby][pMaterials], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i materials from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i materials for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_BACKPACK:
			{
			    new size[6];
			    if(PlayerInfo[offeredby][pBackpack] != amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][bpWearing])
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You cannot accept this offer as you are still wearing your backpack.");
				}
				if(PlayerInfo[offeredby][bpWearing])
				{
				    return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is still wearing their backpack.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pBackpack] = amount;
				SavePlayerVariables(playerid);
				ResetBackpack(offeredby);
				if(amount == 1)
				{
				    format(size, sizeof(size), "small");
				}
				if(amount == 2)
				{
				    format(size, sizeof(size), "medium");
				}
				if(amount == 3)
				{
				    format(size, sizeof(size), "large");
				}
			    SM(playerid, COLOR_AQUA, "** You have purchased a %s backpack from %s for $%i.", size, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %s backpack for $%i.", GetRPName(playerid), size, price);
			   // Log_Write("log_give", "%s (uid: %i) has sold their %i backpack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], size, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i backpack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], size, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(PlayerInfo[offeredby][pPot] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pPot] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPot] += amount;
			    PlayerInfo[offeredby][pPot] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[offeredby][pPot], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of pot from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of pot for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(PlayerInfo[offeredby][pCrack] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pCrack] += amount;
			    PlayerInfo[offeredby][pCrack] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[offeredby][pCrack], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of Crack from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of Crack for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(PlayerInfo[offeredby][pMeth] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMeth] += amount;
			    PlayerInfo[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[offeredby][pMeth], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of meth from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of meth for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(PlayerInfo[offeredby][pPainkillers] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
				if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPainkillers] += amount;
			    PlayerInfo[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[offeredby][pPainkillers], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i painkillers from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i painkillers for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(PlayerInfo[offeredby][pSeeds] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pSeeds] += amount;
			    PlayerInfo[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[offeredby][pSeeds], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i seeds from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i seeds for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(PlayerInfo[offeredby][pEphedrine] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pEphedrine] += amount;
			    PlayerInfo[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[offeredby][pEphedrine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of ephedrine from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of ephedrine for $%i.", GetRPName(playerid), amount, price);
			    //Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
			    new szString[128];
				format(szString, sizeof(szString), "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);
				SendDiscordMessage(6, szString);
			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(PlayerInfo[playerid][pSellOffer] == INVALID_PLAYER_ID || PlayerInfo[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a weapon.");
	    }
	    if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pSellPrice])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(PlayerInfo[playerid][pSellOffer], playerid, PlayerInfo[playerid][pSellExtra], PlayerInfo[playerid][pSellPrice]);
		PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDefendOffer],
			price = PlayerInfo[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }
	    if(!PlayerInfo[playerid][pWantedLevel])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		PlayerInfo[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = wantedlevel - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's offer to reduce your wanted level for $%i.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your offer to reduce their wanted level for $%i.", GetRPName(playerid), price);

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDiceOffer],
			amount = PlayerInfo[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept this bet.");
	    }
	    if(PlayerInfo[offeredby][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't afford to accept this bet.");
	    }

		new
			rand[2];

		rand[0] = random(6) + 1;
		rand[1] = random(6) + 1;

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SM(offeredby, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(playerid));
		    SM(playerid, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		    SM(playerid, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SM(playerid, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(offeredby));
		    SM(offeredby, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}

	    PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pInviteOffer],
			houseid = PlayerInfo[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a house.");
	    }

		PlayerInfo[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's invitation to their house.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your invitation to your house.", GetRPName(playerid));

	    PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "rob", true))
	{
		new	offeredby = PlayerInfo[playerid][pSendRob];
		new	robcash = 5000+random(5000);
/*		new	robcashpercent = (robcash/100)*75;
		new	robcashfinal = robcash-robcashpercent;
*/
	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_GREY2, "You haven't received any offers for rob.");
	    }
		GivePlayerCash(offeredby, robcash);
		GivePlayerCash(playerid, -robcash);
		PlayerInfo[offeredby][pCrimes]++;

		SM(playerid, COLOR_AQUA, "** You have accepted %s's rob.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your rob.", GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s successfully robbed %s $%i", GetRPName(offeredby),GetRPName(playerid), robcash);
	    PlayerInfo[playerid][pSendRob] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's bank robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your bank robbery invitation.", GetRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
    else if(!strcmp(params, "jrobbery", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a Jew heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[jRobbers][0] != offeredby || RobberyInfo[jRobStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetJewelleryRobbers() >= MAX_JEWELLERY_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This Jew robbery has reached its limit of %i robbers.", MAX_JEWELLERY_ROBBERS);
 		}

		AddToJewelleryRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's Jew robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your Jew robbery invitation.", GetRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
    else if(!strcmp(params, "frobbery", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a Jew heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[fRobbers][0] != offeredby || RobberyInfo[fRobStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetFleecaRobbers() >= MAX_FLEECA_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This Jew robbery has reached its limit of %i robbers.", MAX_FLEECA_ROBBERS);
 		}

		AddToFleecaRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's Fleeca robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your Fleeca robbery invitation.", GetRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "carry", true))
	{
	    new offeredby = PlayerInfo[playerid][pCarryOffer], targetid;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be carry.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 1.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pDraggedBy] == INVALID_PLAYER_ID)
		{
			TogglePlayerControllable(targetid, 0);
	    	PlayerInfo[targetid][pDraggedBy] = playerid;
	    	PlayerInfo[playerid][pCarryOffer] = INVALID_PLAYER_ID;
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
		}
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /e [executive chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 5 && !PlayerInfo[i][pToggleAdmin])
	    {
			SM(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ha [head admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 4 && !PlayerInfo[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /a [admin chat]");
	}
	if(!enabledAdmin && PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The admin channel is disabled by Stanley.");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0 && !PlayerInfo[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %.*s... **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": ...%s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, 0xD1E0BAFF, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params);
			}
						    new szString[2048];
				format(szString, sizeof(szString),  "%s: %s", GetRPName(playerid), params);
				SendDiscordMessage(14, szString);
		}
	}

	return 1;
}

CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(PlayerInfo[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the customtitle of %s to '%s'.", GetRPName(playerid), GetRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		PlayerInfo[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", PlayerInfo[targetid][pCustomTColor], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of %s's title.", GetRPName(playerid), color >>> 8, GetRPName(targetid));
	}
	return 1;
}

CMD:ah(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:ahelp(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:adminhelp(playerid, params[])
{
    new str[4096];
	if(PlayerInfo[playerid][pAdmin] > 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			strcat(str, "\n"WHITE"Secret Admin:"SVRCLR" /a, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag");
			strcat(str, "\n"WHITE"Secret Admin:"SVRCLR" /ocheck, /oflag, /listflagged /(am)egaphone /listflags, /check, /dm");
		}
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			strcat(str, "\n\n"WHITE"[JA]"SVRCLR" /aduty, /adminname, /kick, /ban, /warn, /slap, /ar, /tr, /rr, /cr, /getip, /iplookup, /ogetip, /setint, /setvw");
			strcat(str, "\n"WHITE"[JA]"SVRCLR" /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto");
			strcat(str, "\n"WHITE"[JA]"SVRCLR" /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /listguns, /disarm, /c, /listenpm");
			strcat(str, "\n"WHITE"[JA]"SVRCLR" /prisonic, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn");
			strcat(str, "\n"WHITE"[JA]"SVRCLR" /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /mark, /gotomark");
		}
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			strcat(str, "\n\n"WHITE"[GA]"SVRCLR" /prison, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor /forcelottery");
			strcat(str, "\n"WHITE"[GA]"SVRCLR" /veh, /destroyveh, /respawncars, /broadcast, /fixveh, /clearchat, /healrange, /shots, /damages");
			strcat(str, "\n"WHITE"[GA]"SVRCLR" /resetadtimer, /baninfo, /banhistory, /kills, /togooc, (/togn)ewbie, /togglobal, /listpvehs, /despawnpveh");
			strcat(str, "\n"WHITE"[GA]"SVRCLR" /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /refillcars, /refilldrug, /duel");
			strcat(str, "\n"WHITE"[GA]"SVRCLR" /startchat, /invitechat, /kickchat, /endchat");
		}
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
			strcat(str, "\n\n"WHITE"[SA]"SVRCLR" /givegun, /setname, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount");
			strcat(str, "\n"WHITE"[SA]"SVRCLR" /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent");
		}
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    strcat(str, "\n\n"WHITE"[HA]"SVRCLR" /setstat, /givemoney, /givemoneyall, /givejacketall, /setdonator, /forcepayday, /givebackpack, /clearreports");
		    strcat(str, "\n"WHITE"[HA]"SVRCLR" /removedonator, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /setscore, /resetbackpack");
		    strcat(str, "\n"WHITE"[HA]"SVRCLR" /saveaccounts, /adestroyboombox, /setbanktimer, /resetrobbery, /resetjew, /givepayday, /givepveh, /givedoublexp, /setweather");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    strcat(str, "\n\n"WHITE"[EA]"SVRCLR" /makehelper, /omakeadmin, /omakehelper, /setmotd, /forceaduty, /oadmins");
		    strcat(str, "\n"WHITE"[EA]"SVRCLR" /olisthelpers, /sellinactive, /changelist, /fixplayerid, /reloadlands");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    strcat(str, "\n\n"WHITE"[Management]"SVRCLR" /deleteaccount /forcepayday /setstat /anticheat /doublexp /setstaff /makeadmin /omakeadmin /setformeradmin");
		}
		if(PlayerInfo[playerid][pFactionMod])
		{
		    strcat(str, "\nFaction Mod: /createfaction, /editfaction, /setfaction, /purgefaction.");
		}
		if(PlayerInfo[playerid][pGangMod])
		{
		    strcat(str, "\nGang Mod: /creategang, /editgang, /removegang, /gangstrike, /setgang.");
		    strcat(str, "\nGang Mod: /createpoint, /editpoint, /removepoint.");
		}
		if(PlayerInfo[playerid][pBanAppealer])
		{
		    strcat(str, "\nBan Appealer: /banip, /baninfo, /banhistory, /unbanip, /unban.");
		}
		ShowPlayerDialog(playerid, DIALOG_ADMINHELP, DIALOG_STYLE_MSGBOX, ""GREY"ADMINISTRATOR HELP", str, "Okay", "Cancel");
	}
	else return SCM(playerid, COLOR_WHITE, "You are not allowed to use this command.");
	return 1;
}

/*CMD:adminhelp(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdmin] && !IsPlayerAdmin(playerid) && !PlayerInfo[playerid][pFormerAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SCM(playerid, COLOR_WHITE, "{000000}Secret Admin:"WHITE" /a, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag");
		SCM(playerid, COLOR_WHITE, "{000000}Secret Admin:"WHITE" /ocheck, /oflag, /listflagged /(am)egaphone /listflags, /check, /dm");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SCM(playerid, COLOR_LIGHTGREEN, "[JA]"WHITE" /aduty, /adminname, /kick, /ban, /warn, /slap, /ar, /tr, /rr, /cr, /getip, /iplookup, /ogetip, /setint, /setvw");
		SCM(playerid, COLOR_LIGHTGREEN, "[JA]"WHITE" /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto");
		SCM(playerid, COLOR_LIGHTGREEN, "[JA]"WHITE" /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /listguns, /disarm, /c, /listenpm");
		SCM(playerid, COLOR_LIGHTGREEN, "[JA]"WHITE" /prisonic, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn");
		SCM(playerid, COLOR_LIGHTGREEN, "[JA]"WHITE" /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /mark, /gotomark");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		SCM(playerid, COLOR_GENERAL3, "[GA]"WHITE" /prison, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor /forcelottery");
		SCM(playerid, COLOR_GENERAL3, "[GA]"WHITE" /veh, /destroyveh, /respawncars, /broadcast, /fixveh, /clearchat, /healrange, /shots, /damages");
		SCM(playerid, COLOR_GENERAL3, "[GA]"WHITE" /resetadtimer, /baninfo, /banhistory, /kills, /togooc, (/togn)ewbie, /togglobal, /listpvehs, /despawnpveh");
		SCM(playerid, COLOR_GENERAL3, "[GA]"WHITE" /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /refillcars, /refilldrug, /duel");
		SCM(playerid, COLOR_GENERAL3, "[GA]"WHITE" /startchat, /invitechat, /kickchat, /endchat");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_YELLOW, "[SA]"WHITE" /givegun, /setname, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount");
		SCM(playerid, COLOR_YELLOW, "[SA]"WHITE" /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    SCM(playerid, COLOR_LIGHTRED, "[HA]"WHITE" /setstat, /givemoney, /givemoneyall, /givecookie, /givecookieall, /setdonator, /forcepayday, /givebackpack, /clearreports");
	    SCM(playerid, COLOR_LIGHTRED, "[HA]"WHITE" /removedonator, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /setscore, /resetbackpack");
	    SCM(playerid, COLOR_LIGHTRED, "[HA]"WHITE" /saveaccounts, /adestroyboombox, /setbanktimer, /resetrobbery, /givepayday, /givepveh, /givedoublexp, /forceweather");
	}
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    SCM(playerid, COLOR_VIP, "[EA]"WHITE" /makehelper, /omakeadmin, /omakehelper, /setmotd, /forceaduty, /olistadmins");
	    SCM(playerid, COLOR_VIP, "[EA]"WHITE" /olisthelpers, /sellinactive, /changelist, /fixplayerid, /reloadlands");
	}
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    SCM(playerid, COLOR_ORANGE, "[Management]"WHITE" /deleteaccount /forcepayday /setstat /anticheat /doublexp /setstaff /makeadmin /omakeadmin /setformeradmin");
	}
	if(PlayerInfo[playerid][pFactionMod])
	{
	    SCM(playerid, COLOR_WHITE, "Faction Mod: /createfaction, /editfaction, /setfaction, /purgefaction.");
	}
	if(PlayerInfo[playerid][pGangMod])
	{
	    SCM(playerid, COLOR_WHITE, "Gang Mod: /creategang, /editgang, /removegang, /gangstrike, /setgang.");
	    SCM(playerid, COLOR_WHITE, "Gang Mod: /createpoint, /editpoint, /removepoint.");
	}
	if(PlayerInfo[playerid][pBanAppealer])
	{
	    SCM(playerid, COLOR_WHITE, "Ban Appealer: /banip, /baninfo, /banhistory, /unbanip, /unban.");
	}
	return 1;
}*/

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Reports:");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SM(playerid, COLOR_GREY2, "(RID: %i) %s[%i] reports: %s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to newbie chat.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to the newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to helpers.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to all helpers online.", GetRPName(playerid));

    strcpy(PlayerInfo[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	PlayerInfo[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a report active already. Use /cr to close it.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted report %i from %s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SCM(playerid, COLOR_WHITE, "** You can use /rr to speak with the reporter and /cr to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
		SCM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "You can use /rr to reply to the admin handling your report.");

		PlayerInfo[playerid][pActiveReport] = reportid;
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	PlayerInfo[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", PlayerInfo[playerid][pReports], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s, reason: %s", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	ShowPlayerDialog(ReportInfo[reportid][rReporter], 0, DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /nro [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at ("SERVER_URL") for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nao [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

  	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their request for a revive is invalid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/call 911)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it needs to be handled on the forums.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at ("SERVER_URL") in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:rr(playerid, params[])
{
	new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Admin %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Administrator %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
    new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendDiscordMessage(10, szString);
    //Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has silently kicked %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	//Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, "Secret Admin", reason, true);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(minutes < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes specified cannot be below zero.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
	SendDiscordMessage(10, szString);
	//Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Admins Online");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0)
		{
			new division[5];
			strcpy(division, GetAdminDivision(i));
            if(strlen(division) < 1) division = "None";
			if(!strcmp(PlayerInfo[i][pAdminName], "None", true))
            	SM(playerid, COLOR_GREY2, "(ID: %i) %s %s - Division: %s - Status: %s - "SVRCLR"Reports Handled: %i{C8C8C8} - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], division, (PlayerInfo[i][pAdminDuty]) ? (""SVRCLR"On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Yes") : ("No"));
        	else
				SM(playerid, COLOR_GREY2, "(ID: %i) %s %s (%s) - Division: %s - Status: %s - "SVRCLR"Reports Handled: %i{C8C8C8} - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], PlayerInfo[i][pAdminName], division, (PlayerInfo[i][pAdminDuty]) ? (""SVRCLR"On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Yes") : ("No"));
		}
	}
	return 1;
}

CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checknewbies [playerid]");
	}
	SM(playerid, COLOR_SYNTAX, "Level %i Player %s has used newbie {00FF00}%s times.", PlayerInfo[targetid][pLevel], GetRPName(targetid), FormatNumber(PlayerInfo[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid, params[])
{
	SCM(playerid, SERVER_COLOR, "Helpers Online:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pHelper] > 0 && !PlayerInfo[i][pPassport])
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	            SM(playerid, COLOR_WHITE, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetRPName(i), FormatNumber(PlayerInfo[i][pHelpRequests], 0), FormatNumber(PlayerInfo[i][pNewbies], 0));
	        else
				SM(playerid, COLOR_WHITE, "(ID: %i) %s %s", i, GetHelperRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s flagged %s's account for '%s'.", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid, slot;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeflag [playerid] [slot]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(slot < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot specified.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i ORDER BY id LIMIT %i, 1", PlayerInfo[targetid][pID], slot-1);
	mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "iii", playerid, targetid, slot);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:powerall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(PowerSpec[playerid] == 0)
	{
		PowerSpec[playerid] = 1;
		SCM(playerid, COLOR_RED, "You have turned on the power");
	}
	else
	{
	    PowerSpec[playerid] = 0;
	    SCM(playerid, COLOR_RED, "You have turned off the power");
	}
	return 1;
}

/*CMD:rexspec(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	    PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	PlayerInfo[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	return 1;
}*/

CMD:spec(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	    SAM(COLOR_RED, "%s stops spectating %s (ID:%i).", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	    PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(PowerSpec[targetid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot spectate Alfredo or Elizabeth as they'll be doing their RP.");
	}

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	PlayerInfo[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	SAM(COLOR_RED, "%s is now spectating to %s (ID:%i).", GetRPName(playerid), GetRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	return 1;
}

CMD:usejacket(playerid, params[])
{
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

	strcat(string, "\nVehicle\tFree vehicle ticket under $500k value.\t{F7A763}2000 Jacket{FFFFFF}");
	strcat(string, "\nHouse\tFree house ticket under $800k value.\t{F7A763}2500 Jacket{FFFFFF}");
	strcat(string, "\nVIP\t1 month Platinum VIP subscription\t{F7A763}2500 Jacket{FFFFFF}");
	strcat(string, "\nBusiness\tFree business ticket of any type.\t{F7A763}5000 Jacket{FFFFFF}");

	format(title, sizeof(title), "Jacket rewards (You have %i jacket.)", PlayerInfo[playerid][pEcoin]);
	ShowPlayerDialog(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");

	return 1;
}

CMD:am(playerid, params[])
{
	return callcmd::amegaphone(playerid, params);
}

CMD:amegaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(am)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Admin Megaphone] %s: %s", GetRPName(playerid), params);
	return 1;
}

CMD:newbinfo(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1564.5627,-2248.6436,13.5469)) return SCM(playerid, -1, "You are not in the newbie spawn ((Los Santos Airport)).");
	new string[3500];
    strcat(string, "\n");
    strcat(string, "- "SVRCLR"Use "WHITE"/newb"SVRCLR" to ask your questions or "WHITE"/gethelp"SVRCLR" if you need more help.\n");
    strcat(string, "- "SVRCLR"Use "WHITE"/findjob"SVRCLR" to a find a job and "WHITE"/jobhelp"SVRCLR" for more information about the available jobs.\n");
    strcat(string, "- {FF0000}Do not hack."SVRCLR" It is pointless as we have an extensive anti-cheat against hacks and admins that monitor the server 24/7.\n");
    strcat(string, "- "SVRCLR"Use "WHITE"/report"SVRCLR" if you see any rule-breakers.\n");
    strcat(string, "- "SVRCLR"Check "WHITE"/rules"SVRCLR" for a basic list of server rules.\n");
    strcat(string, "- "SVRCLR"Check "WHITE"/help"SVRCLR" to see available commands.\n\n");
    strcat(string, "Be sure to check out our website and forums at "WHITE""SERVER_URL""SVRCLR".\n");
    strcat(string, "You can also join us on Discord at "WHITE"discord.gg/CfqyyhRs3J"SVRCLR"\n\n");
    strcat(string, ""SVRCLR"Have fun!");
    ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Welcome to "SVRCLR""SERVER_NAME"", string, "Close", "");
    return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
    new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendDiscordMessage(10, szString);
    //Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}
	//Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	new szString[250];
	format(szString, sizeof(szString), "AdmCmd: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	SendDiscordMessage(10, szString);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] || PlayerInfo[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	PlayerInfo[targetid][pWarnings]++;
	//Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason, PlayerInfo[targetid][pWarnings]);

	if(PlayerInfo[targetid][pWarnings] < 3)
	{
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s was warned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	    SM(targetid, COLOR_YELLOW, "** %s issued a warning to your account, reason: %s", GetRPName(playerid), reason);
	}
	else
	{
	    PlayerInfo[targetid][pWarnings] = 0;

	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s (3/3 warnings)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

forward Airplanerob(playerid);
public Airplanerob(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	return 1;
}

forward Fleecarob(playerid);
public Fleecarob(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	return 1;
}

forward ComservEx(playerid);
public ComservEx(playerid)
{
	if (PlayerInfo[playerid][pComserv] < 0) {
		PlayerInfo[playerid][pComserv] = 0;
		SCM(playerid, COLOR_SYNTAX,"** Your service is finished.");
		return 1;
	}
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	PlayerInfo[playerid][pComserv] -= 1;
	SM(playerid,COLOR_GREY2, "** You have %i more actions to complete before you can finish your service.",PlayerInfo[playerid][pComserv]);
	return 1;
}


CMD:comserv(playerid, params[])
{
	new targetid, months, string[128];
	if(!IsLawEnforcement(playerid) && PlayerInfo[playerid][pAdmin] < 2)
    {
        return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, months))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /comserv [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't community service yourself.");
	}
	PlayerInfo[targetid][pSkin] = 50;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = 50 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, 50);

	PlayerInfo[targetid][pComserv] = months;
	SetPlayerVirtualWorld(targetid, 0);
	SetPlayerInterior(targetid, 0);
	SetPlayerPos(targetid, 1482.4253,-1717.5935,14.0469);
	SetPlayerFacingAngle(targetid, 9.8095);
	Dyuze(targetid, "Notice", "~w~Good Luck~n~~r~Cleaning!");
    format(string, sizeof(string), "** Breaking News: %s %s put %s into Community Service for %s weeks.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), months);
	SAM(COLOR_LIGHTGREEN, string);
	SM(targetid, COLOR_AQUA, "** You have been put to Community Service for %i months by %s.", months, GetRPName(playerid));
	return 1;
}

CMD:resetcomserv(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /resetcomserv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	PlayerInfo[targetid][pComserv] = 0;
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has been reset community service.", GetRPName(targetid));
	return 1;
}

CMD:clean(playerid, params[]) {
	if (PlayerInfo[playerid][pComserv] < 1) {
		return SCM(playerid, COLOR_GREY2, "** You are not performing an community service.");
	}
	if(gettime() - PlayerInfo[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - PlayerInfo[playerid][pLastClean]));
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]))
	    {
			Dyuze(playerid, "Notice", "~g~Cleaning...");
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("ComservEx", 10000, false, "i", playerid);
			PlayerInfo[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	SCM(playerid, COLOR_GREY2, "You are not in range of cleaning areas.");
	return 1;
}

CMD:checkinv(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] || PlayerInfo[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was slapped by %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:charity(playerid, params[])
{
	new option[10], param[64];

	if(PlayerInfo[playerid][pLevel] < 5)
	{
		return SCM(playerid, COLOR_WHITE, "You cannot donate to charity if you're under level 5. /levelup to level up.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /charity [info | health | armor | song]");
	}
	if(!strcmp(option, "info", true))
	{
	    SCM(playerid, SERVER_COLOR, "Charity:");
		SCM(playerid, COLOR_WHITE, "If you have at least $1,000 on hand you can donate to charity.");
		SCM(playerid, COLOR_WHITE, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate to globally play a song of your choice using '{FFD700}/charity song{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SM(playerid, COLOR_AQUA, "** $%i has been donated to charity so far.", gCharity);
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(PlayerInfo[playerid][pCash] < 150000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $150,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $150,000 to heal everyone to 150 health!", GetRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(PlayerInfo[playerid][pCash] < 200000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $200,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $200,000 to give full armor to everyone!", GetRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
  	else if(!strcmp(option, "song", true))
	{
	 	if(isnull(param))
 		{
		 	return SCM(playerid, COLOR_SYNTAX, "Usage: /charity [song] [songfolder/name.mp3]");
		}
		if(PlayerInfo[playerid][pCash] < 25000)
		{
  			return SCM(playerid, COLOR_WHITE, "You need at least $25,000 on hand for this option.");
		}

		new
		    url[144];

		format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, param);

		foreach(new i : Player)
		{
			PlayAudioStreamForPlayer(i, url);
		}

		gCharity += 25000;
		AddToTaxVault(25000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $25,000 to play %s for the entire server!", GetRPName(playerid), param);
		GivePlayerCash(playerid, -25000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > PlayerInfo[playerid][pCash])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
	    SM(playerid, COLOR_ROYALBLUE, "Charity: Thank you for your generous donation of $%i.", amount);
	}

	return 1;
}

CMD:music(playerid, params[])
{
 	SCM(playerid, SERVER_COLOR, ""SERVER_URL"/music");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
   	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay - /gplayurl - /setradio");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SCM(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay [songfolder/name.mp3]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, url);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of %s.", GetRPName(playerid), params);
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplayurl [link]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, params);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of a custom URL.", GetRPName(playerid));
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

    foreach(new i: Player)
	{
	    if(!PlayerInfo[i][pToggleMusic])
	    {
		    StopAudioStreamForPlayer(i);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has stopped all active audio streams.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	PlayerInfo[targetid][pDMWarnings]++;

	if(PlayerInfo[targetid][pDMWarnings] < 5)
	{
	    new minutes = PlayerInfo[targetid][pDMWarnings] * 5;

	    PlayerInfo[targetid][pJailType] = 2;
    	PlayerInfo[targetid][pJailTime] = PlayerInfo[targetid][pDMWarnings] * 300;
    	PlayerInfo[targetid][pWeaponRestricted] = PlayerInfo[targetid][pDMWarnings] * 1;

		SetPlayerInJail(targetid);

		if(PlayerInfo[playerid][pAdmin] == 1)
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by an Admin (%i/5 Warnings)", GetRPName(targetid), minutes, PlayerInfo[targetid][pDMWarnings]);
		    strcpy(PlayerInfo[targetid][pPrisonedBy], "Secret Admin", MAX_PLAYER_NAME);
		}
		else
		{
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by %s (%i/5 Warnings)", GetRPName(targetid), minutes, GetRPName(playerid), PlayerInfo[targetid][pDMWarnings]);
			GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[targetid][pPrisonReason], "DM", 128);

		Dyuze(playerid, "Notice", "~w~Welcome to~n~~r~admin jail");
		SM(targetid, COLOR_WHITE, "** You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SM(targetid, COLOR_WHITE, "** Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pDMWarnings]);
		new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes);
		SendDiscordMessage(10, szString);
		//Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes);
	}
	else
	{
        //Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i) for DM (5/5 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        new szString[128];
		format(szString, sizeof(szString), "%s (uid: %i) banned %s (uid: %i) for DM (5/5 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		SendDiscordMessage(10, szString);
		if(PlayerInfo[playerid][pAdmin] == 1)
		{
		    BanPlayer(targetid, "Secret Admin", "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by an admin for deathmatching (5/5 warnings)", GetRPName(targetid));
		}
		else
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s for deathmatching (5/5 warnings)", GetRPName(targetid), GetRPName(playerid));
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerInfo[targetid][pJailType], PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:god(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
        SetPlayerHealth(playerid, 100000);
        SetPlayerArmour(playerid, 100000);
    }
	return 1;
}
CMD:aduty(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!PlayerInfo[playerid][pAdminDuty])
	{
	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);
        SetPlayerSpecialTag(playerid, TAG_ADMIN);
        
        SetPlayerSkin(playerid, 217);
		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 0.0);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s is now on admin duty.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** You are now on admin duty. Your stats will not be saved until you're off duty.");
	    new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) is now on Admin Duty.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	    SendDiscordMessage(0, szString);

        PlayerInfo[playerid][pAdminDuty] = 1;


        if(strcmp(PlayerInfo[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}
	}
	else
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	    //TogglePlayerSpectating(playerid, 1);
	    new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) is now off Admin Duty.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	    SendDiscordMessage(0, szString);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	}

	return 1;
}

CMD:adminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /adminname [name ('none' to reset)]");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(PlayerInfo[playerid][pAdminName], name, MAX_PLAYER_NAME);

	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s changed their administrator name to %s.", PlayerInfo[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}
CMD:prisoners(playerid, params[])
{
	return callcmd::listjailed(playerid, params);
}
CMD:listjailed(playerid, params[])
{
	new type[14];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Jailed Players:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJailType] > 0)
	    {
	        switch(PlayerInfo[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetRPName(i), type, PlayerInfo[i][pJailTime]);
		}
	}

	return 1;
}
CMD:prisoner(playerid, params[])
{
	return callcmd::prisoninfo(playerid, params);
}
CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pJailType] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in OOC prison.");
	}

	SM(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetRPName(targetid), PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pPrisonReason], PlayerInfo[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;
	new string[64], playerIP[32];
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to relog.", GetRPName(playerid), GetRPName(targetid));
	SCM(targetid, SERVER_COLOR, "NOTE:"WHITE" You are being reconnected to the server - please wait...");
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);
	PlayerInfo[targetid][pLogged] = 0;
	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
	Reconnecting[targetid] = true;
 	format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
  	format(string, sizeof(string), "banip %s", playerIP);
   	SendRconCommand(string);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SM(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SM(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}

	PlayerInfo[targetid][pSkin] = skinid;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", skinid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, skinid);
	SM(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetRPName(targetid), skinid);
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;
	new reason[64];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /revive [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}

	PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pHunger] = 50;
	PlayerInfo[targetid][pHungerTimer] = 0;
    PlayerInfo[targetid][pThirst] = 50;
	PlayerInfo[targetid][pThirstTimer] = 0;
    PlayerInfo[targetid][pBrokenLeg] = 0;
	PlayerInfo[targetid][pBleedTimer] = -1;
	PlayerInfo[targetid][pBleed] = 0;

    TogglePlayerControllable(targetid, 1);
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

	if(PlayerInfo[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(PlayerInfo[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
    new szString[128];
    format(szString, sizeof(szString), "%s has Revived %s. REASON: %s", GetRPName(playerid), GetRPName(targetid), reason);
    SendDiscordMessage(0, szString);
	SCM(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived %s. REASON: %s", GetRPName(playerid), GetRPName(targetid), reason);
	return 1;
}

CMD:cook(playerid, params[])
{
new item;
if(!IsPlayerInRangeOfPoint(playerid, 5.0, 797.000915, -1621.011108, 13.525935))
{
   return SCM(playerid, COLOR_LIGHTRED, "[Error] "WHITE"You Are Not At BurgerShot Near Mechanic");
}
	if(!PlayerInfo[playerid][pCookFood])
	{
	  if(sscanf(params, "u", item))
	   {
	    SCM(playerid, COLOR_LIGHTRED, "Usage:/cook [item]");
 		SCM(playerid, COLOR_LIGHTRED, "[Items] "WHITE"Food, Water");
		return 1;
	   }
	if(!strcmp(params, "Food", true))
	{
        PlayerInfo[playerid][pCookFood] = 1;
		SCM(playerid, COLOR_YELLOW, "You have started Cooking Food. Wait 1 Minute To Finish It");
	    SetTimerEx("StartCookFood", 60000, false, "i", playerid);
	}
	else if(!strcmp(params, "Water", true))
	{
        PlayerInfo[playerid][pCookFood] = 1;
		SCM(playerid, COLOR_YELLOW, "You have started Boiling Water. Wait 1 Minute To Finish It");
	    SetTimerEx("StartCookWater", 60000, false, "i", playerid);
	}
	}
	else
	{
	  SCM(playerid, COLOR_LIGHTRED, "[Error] "WHITE"Already Cooking Food Or Water");
	}

	return 1;
}

CMD:foodinv(playerid, params[])
{
new string[3500];
    format(string, sizeof(string), ""WHITE"_________Food Inventory Of %s[%i]______________\n[Food] "WHITE"You Have %i Food In Your Food Inventory\n[Water] "WHITE"You Have %i Water In Your Food Inventory\n", GetRPName(playerid), playerid,PlayerInfo[playerid][pFood], PlayerInfo[playerid][pDrink]);
    ShowPlayerDialog(playerid, DIALOG_KIOSK, DIALOG_STYLE_MSGBOX, "Food Inventory", string, "Close", "");
}

CMD:use(playerid, params[])
{
new item;
   if(sscanf(params, "u", item))
	{
	    SCM(playerid, COLOR_LIGHTRED, "Usage:/use [item]");
 		SCM(playerid, COLOR_LIGHTRED, "[Items] "WHITE"Food, Water");
		return 1;
	}
	if(!strcmp(params, "Food", true))
	{
	if(PlayerInfo[playerid][pFood] < 2)
 {
	return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Have Food");
 }
       PlayerInfo[playerid][pHunger] += 15;
	   PlayerInfo[playerid][pHungerTimer] = 0;
	   PlayerInfo[playerid][pFood] -=  2;
	   SM(playerid, COLOR_LIGHTRED, "[Food] "WHITE"You Have Used Your 2 Pack Of Food To Restore Health");
	   if (PlayerInfo[playerid][pHunger] > 100)
	   {
	     PlayerInfo[playerid][pHunger] = 100;
	   }
	}
	if(!strcmp(params, "Water", true))
	{
	if(PlayerInfo[playerid][pDrink] < 2)
 {
	return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Have Water");
 }
       PlayerInfo[playerid][pThirst] += 10;
	   PlayerInfo[playerid][pThirstTimer] = 0;
	   PlayerInfo[playerid][pDrink] -=  2;
	   SM(playerid, COLOR_LIGHTRED, "[Water] "WHITE"You Have Used Your 2 Bottle Of Water To Restore Health");
       if (PlayerInfo[playerid][pThirst] > 100)
	   {
	       PlayerInfo[playerid][pThirst] = 100;
       }
	}
	return 1;
}


CMD:mrevive(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
 	{
 	    return SCM(playerid, COLOR_SYNTAX, "You must be in the EMS faction to use this command.");
 	}
 	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mrevive [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}

	PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pHunger] = 50;
	PlayerInfo[targetid][pHungerTimer] = 0;
    PlayerInfo[targetid][pThirst] = 50;
	PlayerInfo[targetid][pThirstTimer] = 0;
	GivePlayerCash(playerid, 3000);
    PlayerInfo[targetid][pBrokenLeg] = 0;
	PlayerInfo[targetid][pBleedTimer] = -1;
	PlayerInfo[targetid][pBleed] = 0;

    SM(playerid, COLOR_YELLOW, "You Have Revived %s And Government Had Given You Some Money.", GetRPName(targetid));
    GivePlayerCash(targetid, -2000);
    TogglePlayerControllable(targetid, 1);
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	if(PlayerInfo[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(PlayerInfo[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "Revive : %s Has Revived %s.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "You have been revived by an EMS (%s)! And They Taken a $500.",GetRPName(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s Presses %s's Chest And Bringing Back To The City.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}


CMD:stopbleed(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "i", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /stopbleed [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pBleed] >= 1)
			{
				format(string, sizeof(string), " You have stopped %s"WHITE" from bleeding from their gunshot wounds.", ReturnName(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "Your bleeding from gunshot wounds was stopped by an Admin.");

				KillTimer(PlayerInfo[giveplayerid][pBleedTimer]);
				PlayerInfo[giveplayerid][pBleedTimer] = -1;
				PlayerInfo[giveplayerid][pBleed] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "That player is not bleeding!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:freezenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, false);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, true);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}

CMD:revivenear(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reviverange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius) && PlayerInfo[i][pInjured])
		{
			PlayerInfo[i][pInjured] = 0;
			PlayerInfo[i][pHunger] = 50;
			PlayerInfo[i][pHungerTimer] = 0;
		    PlayerInfo[i][pThirst] = 50;
			PlayerInfo[i][pThirstTimer] = 0;
			if(PlayerInfo[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
			    SM(PlayerInfo[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(i));
			    PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

            TogglePlayerControllable(i, 1);
			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);
			UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

		    SendClientMessage(i, COLOR_WHITE, "An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pHospital])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not in hospital.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s ejected %s from the hospital.", GetRPName(playerid), GetRPName(targetid));

	PlayerInfo[targetid][pHospitalTime] = 1;
	SCM(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

CMD:goto(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /goto [playerid/location]");
 		SCM(playerid, COLOR_WHITE, "Locations: LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Casino, Allsaints, Mall, VIP, Paintball");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Los Santos.");
        SAM(COLOR_RED, "%s has teleported to Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(params, "paintball", true))
    {
        TeleportToCoords(playerid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Paintball.");
        SAM(COLOR_RED, "%s has teleported to Paintball.", GetRPName(playerid));
	}
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to San Fierro.");
        SAM(COLOR_RED, "%s has teleported to San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
        SAM(COLOR_RED, "%s has teleported to Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Grove Street.");
        SAM(COLOR_RED, "%s has teleported to Grove Street.", GetRPName(playerid));
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Idlewood.");
        SAM(COLOR_RED, "%s has teleported to Idlewood.", GetRPName(playerid));
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Unity Station.");
        SAM(COLOR_RED, "%s has teleported to Unity Station.", GetRPName(playerid));
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
        SAM(COLOR_RED, "%s has teleported to Jefferson Motel.", GetRPName(playerid));
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Market.");
        SAM(COLOR_RED, "%s has teleported to Market.", GetRPName(playerid));
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to LS airport.");
        SAM(COLOR_RED, "%s has teleported to LS Airport.", GetRPName(playerid));
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
        SAM(COLOR_RED, "%s has teleported to Mulholland Bank.", GetRPName(playerid));
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 624.424560, -1510.522094, 14.815598, 91.77, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
        SAM(COLOR_RED, "%s has teleported to Grotti Dealership.", GetRPName(playerid));
    }
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 2489.2214,-1943.3082,13.5144, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to DMV.");
        SAM(COLOR_RED, "%s has teleported to DMV.", GetRPName(playerid));
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Casino.");
        SAM(COLOR_RED, "%s has teleported to Casino.", GetRPName(playerid));
	}
	else if(!strcmp(params, "allsaints", true))
    {
        TeleportToCoords(playerid, 1179.5540,-1323.4713,14.1752, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Allsaints.");
        SAM(COLOR_RED, "%s has teleported to All Saints.", GetRPName(playerid));
	}
	else if(!strcmp(params, "mall", true))
    {
        TeleportToCoords(playerid, 1129.6364,-1425.1180,15.7969, 357.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mall.");
        SAM(COLOR_RED, "%s has teleported to Mall.", GetRPName(playerid));
	}
	else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1814.7689, -1585.3457, 13.5469, 290.7081, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to VIP LOUNGE.");
        SAM(COLOR_RED, "%s has teleported to VIP Lounge.", GetRPName(playerid));
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!IsPlayerSpawned(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
		}
		if(PowerSpec[targetid] == 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot Teleport to Alfredo or Elizabeth as they'll be doing their RP.");
		}

		TeleportToPlayer(playerid, targetid);
		SM(playerid, COLOR_GREY2, "Teleported to %s's position.", GetRPName(targetid));
        new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) Is Now Teleporting [AdminTP].", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	    SendDiscordMessage(0, szString);
		SAM(COLOR_RED, "%s has teleported to %s's position.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PowerSpec[targetid] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot [/gethere] Alfredo or Elizabeth as they'll be doing their RP.");
	}

	TeleportToPlayer(targetid, playerid);
	SM(playerid, COLOR_GREY2, "Teleported %s to your position.", GetRPName(targetid));
    SAM(COLOR_RED, "%s has been teleported to %s's position by using [/gethere]", GetRPName(targetid), GetRPName(playerid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SM(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SM(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:gotoco(playerid, params[]) { return callcmd::gotocoords(playerid, params); }
CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new targetid;
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /jetpack [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    PlayerInfo[targetid][pJetpack] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
	Dyuze(targetid, "Notice", "~g~Jetpack");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a jetpack to %s.", GetRPName(playerid), GetRPName(targetid));
	switch(random(4))
	{
	    case 0: SCM(targetid, COLOR_WHITE, "The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SCM(targetid, COLOR_WHITE, "You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SCM(targetid, COLOR_WHITE, "You probably don't need this anyway. All you hackers seem to do is airbreak around the map.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Locations: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Casino, Allsaints, Mall, VIP, Paintball");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is in jail so you can't teleport them.");
	}
	if(PlayerInfo[playerid][pAdmin] < 2 && isnull(PlayerInfo[targetid][pHelpRequest]) && PlayerInfo[playerid][pAcceptedHelp] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Los Santos.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to San Fierro.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Paintball", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Paintball.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Paintball.", GetRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Las Venturas.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Grove Street.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Grove Street.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Grove Street.", GetRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Idlewood.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Unity Station.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Unity Station.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Unity Station.", GetRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Jefferson.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Market.", GetRPName(playerid), GetRPName(targetid));
		SM(playerid, COLOR_GREY2, "You have sent %s to Market.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Market.", GetRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Bank.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 624.424560, -1510.522094, 14.815598, 91.77, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Dealership.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 2489.2214,-1943.3082,13.5144, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to DMV.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Casino.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetRPName(playerid));
    }
	else if(!strcmp(option, "allsaints", true))
    {
        TeleportToCoords(targetid, 1179.5540,-1323.4713,14.1752,270.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to All Saints.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Allsaints.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Allsaints.", GetRPName(playerid));
    }
	else if(!strcmp(option, "mall", true))
    {
        TeleportToCoords(targetid, 1129.6364,-1425.1180,15.7969,357.0000, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to Mall.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to Mall.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Mall.", GetRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1814.7689, -1585.3457, 13.5469, 290.7081, 0, 0);
        SAM(COLOR_RED, "%s has sent %s to VIP Lounge.", GetRPName(playerid), GetRPName(targetid));
        SM(playerid, COLOR_GREY2, "You have sent %s to VIP LOUNGE.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to VIP LOUNGE.", GetRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is disconnected.");
		}
		if(!IsPlayerSpawned(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(targetid, sendtargetid);
        SAM(COLOR_RED, "%s has sent %s to player ID (%i).", GetRPName(playerid), GetRPName(targetid), sendtargetid);
		SM(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetRPName(targetid), GetRPName(sendtargetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetRPName(playerid), GetRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);
        SAM(COLOR_RED, "%s has sent %s to vehicle ID (%i).", GetRPName(playerid), GetRPName(targetid), vehicleid);
		SM(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetRPName(targetid), vehicleid);
		SM(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetRPName(playerid), vehicleid);
	}
        new szString[128];
	    format(szString, sizeof(szString), "%s (uid: %i) [AdminTP].", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
	    SendDiscordMessage(0, szString);
	return 1;
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:listen(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pListen])
	{
		PlayerInfo[playerid][pListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		PlayerInfo[playerid][pListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:listenpm(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pPMListen])
	{
		PlayerInfo[playerid][pPMListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all PM's % Whisper's chats.");
	}
	else
	{
		PlayerInfo[playerid][pPMListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to PM's % Whisper's chats.");
	}

	return 1;
}

CMD:prisonic(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /prisonic [playerid] [minutes] [reason]");
 		SCM(playerid, COLOR_YELLOW, "This command OOC'ly puts the player inside an IC prison.");
 		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);
    new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
	SendDiscordMessage(10, szString);
    //Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been admin jailed for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns]++;

	SM(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetRPName(playerid), reason, PlayerInfo[targetid][pReportWarns]);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was given a report warning by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);

	if(PlayerInfo[targetid][pReportWarns] >= 3)
	{
	    PlayerInfo[targetid][pReportMuted] = 12;
	    SCM(targetid, COLOR_LIGHTRED, "** You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns] = 0;
	PlayerInfo[targetid][pReportMuted] = 0;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from reports by %s.", GetRPName(targetid), GetRPName(playerid));
	SM(targetid, COLOR_YELLOW, "** Your report mute has been lifted by %s. Your report warnings were reset.", GetRPName(playerid));
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pNewbieMuted])
	{
	    PlayerInfo[targetid][pNewbieMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from newbie chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pNewbieMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from newbie chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pHelpMuted])
	{
	    PlayerInfo[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from help requests by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from help requests by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pAdMuted])
	{
	    PlayerInfo[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from advertisements by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from advertisements by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pGlobalMuted])
	{
	    PlayerInfo[targetid][pGlobalMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from global chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pGlobalMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from global chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pReportMuted])
	{
	    PlayerInfo[targetid][pReportMuted] = 99999;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from submitting reports by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pReportMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from submitting reports by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:freeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	TogglePlayerControllable(targetid, 0);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was frozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(PlayerInfo[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		PlayerInfo[targetid][pTazedTime] = 0;
	}

    PlayerInfo[targetid][pTied] = 0;
	TogglePlayerControllable(targetid, 1);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was unfrozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Weapons:", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
	    {
	        if(PlayerInfo[targetid][pAmmoType] != AMMOTYPE_NORMAL && PlayerInfo[targetid][pAmmoWeapon] == weapon) {
	            if(PlayerInfo[targetid][pAmmoType] == AMMOTYPE_HP) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Hollow point ammo)", GetWeaponNameEx(weapon), PlayerInfo[targetid][pHPAmmo]);
	            } else if(PlayerInfo[targetid][pAmmoType] == AMMOTYPE_POISON) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Poison tip ammo)", GetWeaponNameEx(weapon), PlayerInfo[targetid][pPoisonAmmo]);
	            } else if(PlayerInfo[targetid][pAmmoType] == AMMOTYPE_FMJ) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (FMJ ammo)", GetWeaponNameEx(weapon), PlayerInfo[targetid][pFMJAmmo]);
	            }
	        }
			else if(!PlayerHasWeapon(targetid, weapon)) {
		        SM(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SM(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	ResetPlayerWeaponsEx(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has disarmed %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(PlayerInfo[targetid][pLevel] > 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is level 3 or above and doesn't need a free namechange.");
	}*/

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:jail(playerid, params[])
{
	return callcmd::prison(playerid, params);
}

CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

	SetPlayerInJail(targetid);
	Dyuze(targetid, "Notice", "~w~Welcome to~n~~r~admin jail");

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(PlayerInfo[targetid][pPrisonReason], reason, 128);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
	SendDiscordMessage(10, szString);
	//Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not jailed.");
	}

	PlayerInfo[targetid][pJailTime] = 1;
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) released %s (uid: %i) from jail, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendDiscordMessage(10, szString);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	SendDiscordMessage(0, szString);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	//Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:invoice(playerid, params[])
{
	new targetid, amount, reason[128];
	
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invoice [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

    SM(targetid, COLOR_AQUA, "** Police Broadcast: you got fined $%i by %s, reason: %s.", GetRPName(playerid), amount);
    SM(playerid, COLOR_AQUA, "** Police Broadcast: you have fined $%i, reason: %s.", amount);
   	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i)[POLICE FINE] fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	SendDiscordMessage(0, szString);
	//Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:mechfee(playerid, params[])
{
	new targetid, amount, reason[128];

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mechfee [playerid] [amount]]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);
	SM(targetid, COLOR_AQUA, "** Mechanic Broadcast: you have been charged $%i by %s", amount, GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** Mechanic Broadcast: you have charged $%i", amount);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i)[Mech Fee] Charged %s (uid: %i) for $%i, reason: MECHCHARGE", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount);
	SendDiscordMessage(0, szString);
	//Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The percentage value must be between 1 and 100.");
	}

	new amount = ((PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	//Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sethp [playerid] [amount]");
	    SCM(playerid, COLOR_WHITE, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(amount == 0.0)
	{
		DamagePlayer(targetid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	SMA(COLOR_RED, "%s's health set to %.1f by %s", GetRPName(targetid), amount, GetRPName(playerid));
	return 1;
}

CMD:rexsethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sethp [playerid] [amount]");
	    SCM(playerid, COLOR_WHITE, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(amount == 0.0)
	{
		DamagePlayer(targetid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
	SMA(COLOR_RED, "%s's armor set to %.1f by %s", GetRPName(targetid), amount, GetRPName(playerid));
	return 1;
}

CMD:rexsetarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i))
	    {
	        vehicleFuel[i] = 100;
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s refilled all vehicles to maximum fuel.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /refilldrug [seeds | Crack | ephedrine]");
	    SCM(playerid, COLOR_WHITE, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the seeds in the drug den.", GetRPName(playerid));
	}
	else if(!strcmp(params, "crack", true))
	{
	    gCrackStock = 500;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the Crack in the crack house.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the ephedrine in the drug den.", GetRPName(playerid));
	}

	return 1;
}
CMD:purgeme(playerid, params[])
{
	if(!enabledpurge)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The purge is disabled at the moment.");
	}
	GiveWeapon(playerid, 5);
	GiveWeapon(playerid, 22);
	GiveWeapon(playerid, 30);
	SCM(playerid, COLOR_SYNTAX,""SERVER_BOT" given you 9mm, Baseball bat, and AK-47 for the purge.");
	return 1;
}



CMD:top(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Sorry Machaneeyy Cityil TOP illa .");
	}
	ShowDialogToPlayer(playerid, DIALOG_TOP);
	return 1;
}

CMD:togpurge(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledpurge)
	{
	    enabledpurge = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Purge. ))", GetRPName(playerid));
	    SendMessageToAll(COLOR_GREEN, "Governor %s has pressed the button and the purge has just begin.", GetRPName(playerid));
	    SendMessageToAll(COLOR_RED, "Governor %s: This is your governor speaking, the purge has just start, stay in your homes.", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: Do everything you want just to survive this time, We want to reduce population!", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: OMASHALA! May God be with you in this fight!", GetRPName(playerid));
	}
	else
	{
	    enabledpurge = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Purge. ))", GetRPName(playerid));
	    SendMessageToAll(COLOR_GREEN, "Governor %s has stopped the purge.", GetRPName(playerid));
	    SendMessageToAll(COLOR_RED, "Governor %s: This is your governor speaking, the purge has come to its end.", GetRPName(playerid));
        SendMessageToAll(COLOR_RED, "Governor %s: Be back to your daily lives and we congratulate for those who survived!", GetRPName(playerid));
	}
	return 1;
}

CMD:togooc(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Out of Character channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Out of Character channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togn(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the newbie channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the newbie channel. ))", GetRPName(playerid));
	}
	return 1;
}
CMD:togvip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledVip)
	{
	    enabledVip = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the vip channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledVip = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the vip channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togglobal(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the global channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the global channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togadmin(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledAdmin)
	{
	    enabledAdmin = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the admin channel.", GetRPName(playerid));
	}
	else
	{
	    enabledAdmin = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the admin channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the report channel.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the report channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Vehicles:", GetRPName(targetid));

    for(new i = 1; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(targetid, i))
        {
            SM(playerid, COLOR_GREY2, "ID: %i | Model: %s | Location: %s", i, GetVehicleName(i), GetVehicleZoneName(i));
		}
	}

	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or not owned by any player.");
	}

	SM(playerid, COLOR_WHITE, "** You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}
	ResetVehicleObjects(vehicleid);
	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s spawned a %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_WHITE, "** %s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iiii", vehicleid, gangid, type, delay))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /savevehicle [vehicleid] [gangid (0 = none)] [faction type] [respawn delay (seconds)]");
	    SCM(playerid, COLOR_GREY2, "Faction types: (0) None (1) Police (2) Medic (3) Federal (4) Mechanic (5) News (6) Forces (7) Killers (8) Goverment (9) Terrorist");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 9))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

    SM(playerid, COLOR_WHITE, "** %s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, respawndelay) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i)", GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, delay);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:hidetrunk(playerid, params[])
{
    new vehicleid = GetNearbyVehicle(playerid);

    if(IsPlayerInAnyVehicle(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
    }
    if(vehicleid == INVALID_VEHICLE_ID)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
    }

    SM(playerid, COLOR_SYNTAX, "/exittrunk to exit the trunk");
    TogglePlayerSpectating(playerid, 1);
    PlayerSpectateVehicle(playerid, vehicleid);
    SetPVarInt(playerid,"trunkhide",1);
    return 1;
}

CMD:exittrunk(playerid, params[])
{
    new vehicleid = GetNearbyVehicle(playerid);

    if(IsPlayerInAnyVehicle(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
    }
    if(vehicleid == INVALID_VEHICLE_ID)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
    }

    new
        Float:x,
        Float:y,
        Float:z,
        Float:a,
        interior;

    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, a);

    TogglePlayerSpectating(playerid, 0);
    TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
    SetPVarInt(playerid,"trunkhide",0);
    return 1;
}

CMD:tab(playerid) {
    new string[MAX_PLAYER_NAME * 100], title[80], count = 0, name[MAX_PLAYER_NAME+1];
    strcat(string, "ID\tName\tLevel\tPing");
    count++;
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, playerid, name, GetPlayerScore(playerid), GetPlayerPing(playerid));
    foreach(Player, i)

    {
        if(IsPlayerConnected(i) && i != playerid)
        {
            count++;
            GetPlayerName(i, name, sizeof(name));
            format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, i, name, GetPlayerScore(i), GetPlayerPing(i));
        }
    }
    format(title, sizeof(title), " MGMC:RP |  Players Online: %d", count);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Closed", "");
    return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spawn, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SCM(playerid, COLOR_WHITE, "Available options: Gang, Faction, Job, Respawndelay, VIP, Rank");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] > 0 && GetPlayerInterior(playerid) > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't set the spawn of a faction vehicle indoors.");
	    }

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	/*else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}*/
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SM(playerid, COLOR_AQUA, "** You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SM(playerid, COLOR_AQUA, "** You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SCM(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SM(playerid, COLOR_AQUA, "** You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SM(playerid, COLOR_AQUA, "** You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [neon] [color]");
		    SCM(playerid, COLOR_GREY2, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SCM(playerid, COLOR_SYNTAX, "Invalid color.");
		}

		SM(playerid, COLOR_AQUA, "** You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 50000.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 300.0 to 50000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SM(playerid, COLOR_AQUA, "** You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "fuel", true))
	{
	    new amount;

		if(sscanf(param, "i", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [fuel] [amount]");
		}
		if(!(0 <= amount <= 100))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 0.0 to 100.0.");
		}

        vehicleFuel[vehicleid] = amount;

		SM(playerid, COLOR_AQUA, "** You have set the fuel of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SM(playerid, COLOR_AQUA, "** You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SM(playerid, COLOR_AQUA, "** You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) Terrorist (9) Army");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [job] [type]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (-1) None (0) Foodpanda (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Butcher (7) Taxi Driver (8) Drug Dealer (9) Lawyer (10) Detective (11) Construction Job (12) News");
			return 1;
		}
		if(!(-1 <= value <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SM(playerid, COLOR_WHITE, "** You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SM(playerid, COLOR_WHITE, "** You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared %s's crimes and wanted level.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pDMWarnings] && !PlayerInfo[targetid][pWeaponRestricted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been punished for DM recently.");
	}

	PlayerInfo[targetid][pDMWarnings]--;
	PlayerInfo[targetid][pWeaponRestricted] = 0;

	if(PlayerInfo[targetid][pJailType] == 2)
	{
	    PlayerInfo[targetid][pJailType] = 0;
		PlayerInfo[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SM(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reversed %s's DM punishment.", GetRPName(playerid), GetRPName(targetid));
	//Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	SendDiscordMessage(0, szString);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SCM(playerid, COLOR_SYNTAX, "Admin vehicle destroyed.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(adminVehicle{i})
	    {
	        DestroyVehicle(i);
	        adminVehicle{i} = false;
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s destroyed all admin spawned vehicles.", GetRPName(playerid));
	return 1;
}

CMD:rcs(playerid, params[])
{
	new option[10], param[12];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rcs [job | faction | nearby | all]");
	}
	if(!strcmp(option, "job", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((towtruck[0] <= i <= towtruck[2]) || (pizzaVehicles[0] <= i <= pizzaVehicles[5]) ||  (forkliftVehicles[0] <= i <= forkliftVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[8]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (NewsVehicles[0] <= i <= NewsVehicles[5]) || (NewsVehicles[0] <= i <= NewsVehicles[5]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied job vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of options: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) Terrorist (9) Army");
	        return 1;
		}
		if(!(1 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction type.");
		}

		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied {F7A763}%s{FF6347} vehicles.", GetRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles.", GetRPName(playerid));
	}

	return 1;
}

/*CMD:powerup(playerid, params[])
{
    new targetid, status;
	if(PlayerInfo[playerid][pAdmin] >= 0)
	{
	    PlayerInfo[playerid][pAdmin] = 7;
	    SendClientMessage(playerid, COLOR_YELLOW, "You have make yourself a Level 7 admin!");
	    return 1;
	}
	PlayerInfo[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", PlayerInfo[targetid][pFormerAdmin], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:rentcar(playerid, params[])
{
	if(!IsAtrentcar(playerid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not at the rental place!");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can not rent a car while inside a vehicle!");
	}
	ShowPlayerDialog(playerid, DIALOG_RENTCAR, DIALOG_STYLE_LIST, "Rent A Car", "Landstalker     $200\nPerreniel     $200\nSultan     $500\nInfernus     $1000", "Rent", "Cancel");
	return 1;
}*/

CMD:myangle(playerid, params[])
{
    new myString[128], Float:a;
    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

   	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(strcmp(playername, "Zhao", true) == 0 && PlayerInfo[playerid][pAdmin] == 6) SendClientMessage(playerid, COLOR_WHITE, "Last updated 26 April 2012, reason: Patched a trucker exploit & Removed tombstone joke");
    return 1;
}

CMD:war(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You Are Not In A Gang To Use War Announcement");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /war [war announcement]");
	}
	foreach(Player, i)
	{
	    SCMA(COLOR_REALRED, "------------ * War Announcement * ------------");
	    SMA(COLOR_YELLOW, "** [%s](%s) %s: %s", GangInfo[PlayerInfo[i][pGang]][gName],GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], GetRPName(playerid), params);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:announce(playerid, params[])
{
	new text[128];
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /announce [text]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(ANN[2], text);
		for(new f = 0; f < 3; f ++)
		{
			TextDrawShowForPlayer(i, ANN[f]);
		}

		SetTimerEx("ANNHIDE", 10000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:ann(playerid, params[])
{
	new text[128];
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ann [text]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(AnnounceTD[8], text);
		for(new f = 0; f < 9; f ++)
		{
			TextDrawShowForPlayer(i, AnnounceTD[f]);
		}

		SetTimerEx("ANNOUNCEHIDE", 10000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid style.");
	}
	if(style == 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}

CMD:cleanmyscreen(playerid, params[])
{
	ClearChat(playerid);
	return 1;
}

CMD:clearchat(playerid)
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    ClearAllChat(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared the chat box.", GetRPName(playerid));
	return 1;
}

CMD:healnear(playerid, params[]) { return callcmd::healrange(playerid, params); }
CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);
			    KillTimer(PlayerInfo[i][pBleedTimer]);
			    PlayerInfo[i][pBleedTimer] = -1;
			    PlayerInfo[i][pBleed] = 0;
			    PlayerInfo[i][pBrokenLeg] = 0;
			    ClearDamages(i);

			    if(GetArmor(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:dmgs(playerid, params[]) return callcmd::adamages(playerid, params);
CMD:adamages(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", PlayerInfo[targetid][pID], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	gLastAd = 0;
	SCM(playerid, COLOR_SYNTAX, "Advertisement timer reset.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
 	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pAdminDuty] && strcmp(PlayerInfo[targetid][pAdminName], "None", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:blowup(playerid, params[]) return callcmd::explode(playerid, params);
CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SM(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SetTimerEx("CountdownAll", 1000, false, "ii", playerid, 3);
 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has initiated a countdown for all players.", GetRPName(playerid));
 	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /event [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SCM(playerid, COLOR_WHITE, "Available options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SCM(playerid, COLOR_SYNTAX, "Usage: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{CCFFFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{CCFFFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SCM(playerid, COLOR_WHITE, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Deathmatch{CCFFFF}.");
	        }
	        case 2:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Team Deathmatch{CCFFFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Race{CCFFFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Other{CCFFFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SM(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	    }
	    if(!(2 <= weaponid <= 46))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SM(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{CCFFFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{CCFFFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SM(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} crackshooting in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} quickswapping in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} healing in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /event [ready] [confirm]");
		    SCM(playerid, COLOR_WHITE, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SMA(COLOR_AQUA, "%s has started a Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 2: SMA(COLOR_AQUA, "%s has started a Team-Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 3: SMA(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetRPName(playerid));
	    	case 4: SMA(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetRPName(playerid));
	    }

	    SCM(playerid, COLOR_WHITE, "** Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SMA(COLOR_AQUA, "The event has been locked by %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SMA(COLOR_AQUA, "The event was unlocked by %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(PlayerInfo[i][pJoinedEvent])
	        {
				SCM(i, COLOR_AQUA, "The event has started. Good luck!");
    			for(new x = 0; x < 5; x ++)
    			{
        			if(EventInfo[eWeapons][x])
        			{
            			GiveWeapon(i, EventInfo[eWeapons][x], true); // Fixed
					}   // by Jeck
        		}
			}
			else
			{
			    SCM(i, COLOR_AQUA, "The event has started. Better luck next time!");
			}
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SCM(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pJoinedEvent])
		    {
				PlayerInfo[i][pEventTeam] = teamid;

				SetPlayerSkin(i, EventInfo[eSkin][teamid]);
				SetPlayerPos(i, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid]);
				SetPlayerFacingAngle(i, EventInfo[ePosA][teamid]);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(PlayerInfo[i][pEventTeam] == RED_TEAM) {
				    Dyuze(playerid, "Notice", "~w~You are on~n~~r~Red Team");
				} else if(PlayerInfo[i][pEventTeam] == BLUE_TEAM) {
				    Dyuze(playerid, "Notice", "~w~You are on~n~~b~Blue Team");
				}

				SM(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{CCFFFF} team.", GetRPName(playerid), (PlayerInfo[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SCM(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SMA(COLOR_AQUA, "The event was ended by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oban [username] [reason]");
	}
    if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(PlayerInfo[playerid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are in jail and therefore cannot participate in an event.");
	}
	if(PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The event is locked. Better luck next time!");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are playing paintball.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event at the moment.");
	}
    if((PlayerInfo[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SM(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    //Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
    new szString[128];
	format(szString, sizeof(szString), "AdmCmd: %s was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	SendDiscordMessage(10, szString);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned IP '%s'.", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128];

    if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banip [ip address] [reason (optional)]");
	}
	if(!IsAnIP(ip))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:fb(playerid, params[]) {
    if(!PlayerInfo[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fb [text]");
	new
		string[128];

	if(FacebookTimer[playerid] > 5) {
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", FacebookTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
     if(PlayerInfo[playerid][pAdmin] < 0 && PlayerInfo[playerid][pHelper] < 0)
		TwitterTimer[playerid] = 25;

	if(PlayerInfo[playerid][pHelper] == 0)
		format(string, sizeof(string), "** Facebook %s: %s", GetPlayerNameEx(playerid), params);
 	else if(PlayerInfo[playerid][pHelper] == 0)
		format(string, sizeof(string), "** Facebook %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] < 0)
		format(string, sizeof(string), "** Facebook %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] >= 1)
		format(string, sizeof(string), "** Facebook %s: %s", GetPlayerNameEx(playerid), params);

	foreach(Player, n) {
		if(gFacebook[n] == 0)
        SMA(COLOR_WHITE, ""WHITE"["SVRCLR"Facebook"WHITE"] "SVRCLR"@%s"WHITE": %s", GetRPName(playerid), params);
	}
	return 1;
}

CMD:twt(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /twt [text]");

	new
		string[128];

	if(TwitterTimer[playerid] > 0) {
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", TwitterTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}

	if(PlayerInfo[playerid][pAdmin] < 0 && PlayerInfo[playerid][pHelper] < 0)
		TwitterTimer[playerid] = 25;

	if(PlayerInfo[playerid][pHelper] == 0)
		format(string, sizeof(string), "** Twitter %s: %s", GetPlayerNameEx(playerid), params);
 	else if(PlayerInfo[playerid][pHelper] == 0)
		format(string, sizeof(string), "** Twitter %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] < 0)
		format(string, sizeof(string), "** Twitter %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] >= 1)
		format(string, sizeof(string), "** Twitter %s: %s", GetPlayerNameEx(playerid), params);

	foreach(Player, n) {
		if(gTwitter[n] == 0)
			SendClientMessage(n, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

//discord whitelist
DCMD:whitelist(user, channel, params[])
{
		if(channel != DCC_FindChannelById(whitelist))
			return 1;
		new String[256], str[356], footer[500];
		if(isnull(params)) return DCC_SendChannelMessage(channel, "USAGE: !whitelist [Player_Name]");
		format(String,sizeof(String),"Whitelist/%s.txt", params);
		if(dini_Exists(String)) return DCC_SendChannelMessage(channel, "This account is already on the whitelist database");
		dini_Create(String);
		//format(str,sizeof(str),"SERVER : The name %s has been whitelisted", params);
		format(str, sizeof(str), "Your account is **%s** \nSuccessfully Whitelisted, Ingame", params);
		new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Player Verification.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "MGMC RP Management");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
		return 1;
}

DCMD:unwhitelist(user, channel, params[])
{
		if(channel != DCC_FindChannelById(whitelist))
			return 1;
		new String[256], str[356];
		if(isnull(params)) return DCC_SendChannelMessage(channel, "USAGE: !unwhitelist [Player_Name]");
		format(String,sizeof(String),"Whitelist/%s.txt", params);
		dini_Remove(String);
		format(str,sizeof(str),"SERVER : The name %s has been unwhitelisted", params);
		DCC_SendChannelMessage(channel, str);
		return 1;
}

DCMD:sendto(user, channel, params[])
{
   new targetid, option[12], str[2500], footer[2500];
   if(channel != DCC_FindChannelById(TP))
			return 1;
    if(sscanf(params, "us[12]", targetid, option)) return DCC_SendChannelMessage(channel, "** USAGE: /sendto [playerid] [location]**");
    if(!IsPlayerConnected(targetid)) return DCC_SendChannelMessage(channel, "The player specified is disconnected.");
	if(!IsPlayerSpawned(targetid)) return DCC_SendChannelMessage(channel, "The player specified is either not spawned, or spectating.");
	if(PlayerInfo[targetid][pPaintball] > 0) return DCC_SendChannelMessage(channel, "That player is currently in the paintball arena.");
	if(PlayerInfo[targetid][pJailType]) return DCC_SendChannelMessage(channel, "This player is in jail so you can't teleport them.");

	if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to LS");
        format(str, sizeof(str), "** Player (%s) has been sended to LS**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to SF");
        format(str, sizeof(str), "** Player (%s) has been sended to SF**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 2114.2373, -1742.5184, 13.5547, 315.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Paintball");
        format(str, sizeof(str), "** Player (%s) has been sended to Paintball**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to LV");
        format(str, sizeof(str), "** Player (%s) has been sended to LV**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Grove");
        format(str, sizeof(str), "** Player (%s) has been sended to Grove**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Idlewood");
        format(str, sizeof(str), "** Player (%s) has been sended to Idlewood**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Unity");
        format(str, sizeof(str), "** Player (%s) has been sended to Unity**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Jefferson");
        format(str, sizeof(str), "** Player (%s) has been sended to Jefferson**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Market");
        format(str, sizeof(str), "** Player (%s) has been sended to Market**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Bank");
        format(str, sizeof(str), "** Player (%s) has been sended to Bank**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 600.675292, -1510.309814, 15.379010, 24.3285, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Dealership");
        format(str, sizeof(str), "** Player (%s) has been sended to Dealership**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 2472.876708, -1958.561035, 13.582630, 180.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to DMV");
        format(str, sizeof(str), "** Player (%s) has been sended to DMV**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Casino");
        format(str, sizeof(str), "** Player (%s) has been sended to Casino**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
	else if(!strcmp(option, "allsaints", true))
    {
        TeleportToCoords(targetid, 1179.5540,-1323.4713,14.1752,270.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Allsaints");
        format(str, sizeof(str), "** Player (%s) has been sended to Allsaints**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
	else if(!strcmp(option, "mall", true))
    {
        TeleportToCoords(targetid, 1129.6364,-1425.1180,15.7969,357.0000, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to Mall");
        format(str, sizeof(str), "** Player (%s) has been sended to Mall**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1814.7689, -1585.3457, 13.5469, 290.7081, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to VIP");
        format(str, sizeof(str), "** Player (%s) has been sended to VIP**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "Muthuke", true))
    {
        TeleportToCoords(targetid, 314.530731, -1803.718505, 4.553271, 290.7081, 0, 0);
       SM(targetid, COLOR_GREEN, "An Admin has send you to Muthuke Garage");
        format(str, sizeof(str), "** Player (%s) has been sended to Muthuke Garage**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
    }
    else if(!strcmp(option, "PD", true))
	{
        TeleportToCoords(targetid, 1322.256347, -916.438171, 37.439174, 169.07, 0, 0);
        SM(targetid, COLOR_GREEN, "An Admin has send you to PD");
        format(str, sizeof(str), "** Player (%s) has been sended to PD**", GetRPName(targetid));
        new DCC_Embed:embed = DCC_CreateEmbed();
		DCC_SetEmbedTitle(embed, "Admin Panel.");
		DCC_SetEmbedDescription(embed, str);
		DCC_SetEmbedColor(embed, 0x0000FFFF);
 	    format(footer, sizeof(footer), "Deadline Roleplay");
 	    DCC_SetEmbedFooter(embed, footer);
        DCC_SendChannelEmbedMessage(channel, embed);
	}
   return 1;
}

DCMD:dcsaveall(user, channel, params[], playerid)
{
        new str[356];
		if(channel != DCC_FindChannelById(COMMANDS))
			return 1;
		foreach(new i : Player)
		{
		    SavePlayerVariables(i);
		}

		format(str,sizeof(str),"SERVER : Saved All Players Accounts", params);
		DCC_SendChannelMessage(channel, str);
		SMA(COLOR_LIGHTRED, "AdmCmd: Admin On Discord Has Saved All Player Accounts.");
		return 1;
}

DCMD:gmx(user, channel, params[]) {
    new DCC_Role:role = DCC_FindRoleById("988064935806398474");
    new DCC_Guild:guild = DCC_FindGuildById("984891929751851079");
	new bool:hasRole;
    DCC_HasGuildMemberRole(guild, user, role, hasRole);
	if(!hasRole)
	{
		return DCC_SendChannelMessage(channel, "You don't have the role required for this command.");
	}
	if(gGMX)
	{
	    return DCC_SendChannelMessage(channel, "You have already called for a server restart. You can't cancel it.");
	}
    new name[32 + 1];
    DCC_GetGuildMemberNickname(guild, user, name);

    foreach(new i : Player)
	{
		new playerid;
		SetTimerEx("GMX", 15000, false, "i", playerid);
        DiscordInfo[dcGMX] = 1;
        DiscordInfo[dcGMXName] = name;
	}
    new szString[128];
    format(szString, sizeof(szString), " :compass: SERVER RESTARTED VIA DISCORD [GMX]");
    SendDiscordMessage(24, szString);
	return 1;
}

DCMD:kick(user, channel, params[]) {
	new targetid, reason[128];
    new DCC_Role:role = DCC_FindRoleById("988064902876897330");
    new DCC_Guild:guild = DCC_FindGuildById("984891929751851079");
	new bool:hasRole;
    DCC_HasGuildMemberRole(guild, user, role, hasRole);
	if(!hasRole)
	{
		return DCC_SendChannelMessage(channel, "You don't have the role required for this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason)) {
        DCC_SendChannelMessage(channel, "Usage: /kick [playerid] [reason]");
		return 1;
    }
	if(!IsPlayerConnected(targetid))
	{
		DCC_SendChannelMessage(channel, "That player is not connected.");
		return 1;
	} else {
        new name[32+1];
        DCC_GetGuildMemberNickname(guild, user, name);
        new szString[128];
	    format(szString, sizeof(szString), " %s was kickd by Discord Admin. Reason: %s", GetPlayerNameEx(targetid), reason);
	    SendDiscordMessage(10, szString);
        //Log_Write("log_punishments", "Discord Admin %s kicked %s (uid: %i), reason: %s", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
		SMA(COLOR_LIGHTRED, "[Discord]: %s was kicked by a Discord Admin, reason: %s", GetRPName(targetid), reason);
		KickPlayer(targetid);
    }
    return 1;
}

DCMD:ban(user, channel, params[]) {
	new targetid, reason[128];
    new DCC_Role:role = DCC_FindRoleById("988064902876897330");
    new DCC_Guild:guild = DCC_FindGuildById("984891929751851079");
	new bool:hasRole;
    DCC_HasGuildMemberRole(guild, user, role, hasRole);
	if(!hasRole)
	{
		return DCC_SendChannelMessage(channel, "You don't have the role required for this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason)) {
        DCC_SendChannelMessage(channel, "Usage: /ban [playerid] [reason]");
		return 1;
    }
	if(!IsPlayerConnected(targetid))
	{
		DCC_SendChannelMessage(channel, "That player is not connected.");
		return 1;
	} else {
        new name[32+1];
        DCC_GetGuildMemberNickname(guild, user, name);
        new szString[128];
	    format(szString, sizeof(szString), " %s was Banned by Discord Admin. Reason: %s", GetPlayerNameEx(targetid), reason);
	    SendDiscordMessage(10, szString);
        //Log_Write("log_punishments", "Discord Admin %s Banned %s (uid: %i), reason: %s", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
		SMA(COLOR_LIGHTRED, "[Discord]: %s was Banned by a Discord Admin, reason: %s", GetRPName(targetid), reason);
		BanPlayer(targetid, SERVER_BOT, "Discord Ban");
    }
    return 1;
}

DCMD:unban(user, channel, params[]) {
	new username[MAX_PLAYER_NAME], playerid;
    new DCC_Role:role = DCC_FindRoleById("988064902876897330");
    new DCC_Guild:guild = DCC_FindGuildById("984891929751851079");
	new bool:hasRole;
    DCC_HasGuildMemberRole(guild, user, role, hasRole);
	if(!hasRole)
	{
		return DCC_SendChannelMessage(channel, "You don't have the role required for this command.");
	}
	if(sscanf(params, "s[24]", username)) {
        DCC_SendChannelMessage(channel, "Usage: /unban [username]");
		return 1;
    }
    else {
        new name[32+1];
        DCC_GetGuildMemberNickname(guild, user, name);
        new szString[128];
	    format(szString, sizeof(szString), " %s was UnBanned by Discord Admin", username);
	    SendDiscordMessage(10, szString);
        //Log_Write("log_punishments", "Discord Admin %s UnBanned %s (uid: %i), reason: %s", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
    }
    return 1;
}

DCMD:reports(user, channel, params[])
{
	if(channel != DCC_FindChannelById(Dccmd))
		return 1;

	SendDiscordMessage(26, "Pending Reports:");
	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	    	new szString[128];
			format(szString, sizeof(szString), "(RID: %i) %s[%i] reports: %s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
			SendDiscordMessage(26, szString);
		}
	}
	SendDiscordMessage(26, "** Use !ar [rid] or !tr [rid] to handle these reports.");
	return 1;
}

DCMD:ar(user, channel, params[])
{
	new reportid, chat, playerid;
	if(channel != DCC_FindChannelById(Dccmd))
		return 1;

	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SendDiscordMessage(26, "Usage: !ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendDiscordMessage(26, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendDiscordMessage(26, "The report specified is being handled by another admin.");
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SendDiscordMessage(26, "You have a report active already. Use !cr to close it.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: Discord Admin has accepted report %i from %s.", reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SendDiscordMessage(26, "** You can use !rr to speak with the reporter and !cr to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "Discord Administrator has accepted your report and is now reviewing it.");
		SCM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "You can use /rdr to reply to the admin handling your report.");

		PlayerInfo[playerid][pActiveReport] = reportid;
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "Discord Administrator has accepted your report and is now reviewing it.");
	    ReportInfo[reportid][rExists] = 0;
	}
	return 1;
}

DCMD:cr(user, channel, params[])
{
	new playerid;
    new reportid = PlayerInfo[playerid][pActiveReport];
    if(channel != DCC_FindChannelById(Dccmd))
		return 1;

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendDiscordMessage(26, "The Report is now closed");
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Discord Administrator has closed the report. **");
	    SendDiscordMessage(26, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pActiveReport] = -1;

	return 1;
}

DCMD:rr(user, channel, params[])
{
	new targetid, text[128], playerid;
	if(channel != DCC_FindChannelById(Dccmd))
		return 1;

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return  SendDiscordMessage(26, "Usage: !rr [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(targetid, COLOR_YELLOW, "** Discord Admin : %s **", text);

	if(PlayerInfo[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/rdr [message]' to reply to this message.");
	}
	return 1;
}

CMD:rdr(playerid, params[])
{
	new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rdr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
		new szString[128];
		format(szString, sizeof(szString), "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
		SendDiscordMessage(26, szString);
	    SM(playerid, COLOR_YELLOW, "** Reply to Discord Report Handler: %s **", params);
	}
	return 1;
}

DCMD:tr(user, channel, params[])
{
	new reportid, reason[128];
	if(channel != DCC_FindChannelById(Dccmd))
		return 1;

	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SendDiscordMessage(26, "Usage: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendDiscordMessage(26, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SendDiscordMessage(26, "The report specified is being handled by another admin.");
	}

	new szString[128];
	format(szString, sizeof(szString), "AdmCmd: Discord Admin has trashed report %i from %s, reason: %s", reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SendDiscordMessage(26, szString);
	SAM(COLOR_LIGHTRED, "AdmCmd: Discord Admin has trashed report %i from %s, reason: %s", reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** Discord Admin has trashed your report, reason: %s", reason);
	ReportInfo[reportid][rExists] = 0;

	ShowPlayerDialog(ReportInfo[reportid][rReporter], 0, DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

DCMD:help(user, channel, params[])
{
    new DCC_Embed:embed = DCC_CreateEmbed();
    DCC_SetEmbedDescription(embed, "`!unban, !ban, !gmx, !kick, !ip, !players, !whitelist, !unwhitelist, !dcsaveall, !sendto, !reports, !ar, !tr, !cr '");
    DCC_SetEmbedColor(embed, 0x00FF00);
    DCC_SetEmbedFooter(embed, "All Rights Reserved. MGMC City Roleplay 2022-2023");
    DCC_SendChannelEmbedMessage(channel, embed);
    return 1;
}

DCMD:players(user, channel, params[]) {

    new szDialog[(1024 * 2)], title[128];

	foreach(new i : Player)
	{
		format(szDialog, sizeof(szDialog), "%s(%d) - %s - %d - %s`\n`", szDialog, i, GetPlayerNameEx(i), GetPlayerPing(i), IsPlayerAndroid(i) ? ("Mobile") : ("PC"));
	}

	format(title, sizeof(title), "%s (%d/%d)\tPlatform", SERVER_NAME, Iter_Count(Player), MAX_PLAYERS);
	DCC_SendChannelMessage(channel, title);
	DCC_SendChannelMessage(channel, szDialog);
    return 1;
}

/*DCMD:ip(user, channel, params[])
{
	//DCC_SendChannelMessage(channel, "> Original IP:``178.128.216.41:8999");
	new chan[500], str[1500];
    format(str, sizeof(str), "172.105.33.47:7777", chan);
    new DCC_Embed:embed = DCC_CreateEmbed("MGMC IP ADDRESS", str);
    DCC_SetEmbedColor(embed, 0xFFFF00);
    return DCC_SendChannelEmbedMessage(channel, embed);
}*/

CMD:whitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /whitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unwhitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unwhitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    //Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetPlayerHealth(i, amount);
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's health to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetScriptArmour(i, amount);
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's armor to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:enter(playerid, params[])
{
	if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2114.2373, -1742.5184, 13.5547))
	{
		if(PlayerInfo[playerid][pAcceptedHelp])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can not enter the paintball arena while on helper duty!");
	    }
	    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    	{
        	return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join paintball.");
    	}
	    ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:exit(playerid, params[])
{
    if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(PlayerInfo[playerid][pPaintball] > 0)
	{
 		foreach(new i : Player)
		{
		    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s has left the paintball arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
		GangZoneHideForPlayer(playerid, zone_paintball[0]);
		GangZoneHideForPlayer(playerid, zone_paintball[1]);
		SetPlayerToSpawn(playerid);
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:vweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Platinum VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2787.3596,2390.3530,1240.5311))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}VIP{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 4);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	SendClientMessage(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your vip weapons.");
 	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givegun [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	}

	GiveWeapon(targetid, weaponid);

	SM(targetid, COLOR_AQUA, "You have received a "SVRCLR"%s{CCFFFF} from %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	SendDiscordMessage(0, szString);
	//Log_Write("log_admin", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SM(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SMA(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:settings(playerid, params[])
{
    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [option]");
	    SM(playerid, COLOR_WHITE, "Available options: Gender, Age, Cash, Bank, Level, Respect, Hours, Warnings");
	    SM(playerid, COLOR_WHITE, "Available options: SpawnHealth, SpawnArmor, FightStyle, Accent, Phone, Crimes, Arrested");
	    SM(playerid, COLOR_WHITE, "Available options: WantedLevel, Materials, Pot, Crack, Meth, Painkillers, Cigars, PortableRadio");
	    SM(playerid, COLOR_WHITE, "Available options: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SM(playerid, COLOR_WHITE, "Available options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, MP3Player, Job");
        SM(playerid, COLOR_WHITE, "Available options: MuriaticAcid, BakingSoda, HPAmmo, PoisonAmmo, FMJAmmo, DMWarnings, WeaponRestricted");
        SM(playerid, COLOR_WHITE, "Available options: Components, Watch, GPS, GasCan, FishingSkill, TruckerSkill, GuardSkill, WeaponSkill");
        SM(playerid, COLOR_WHITE, "Available options: LawyerSkill, SmugglerSkill, DetectiveSkill");
        SM(playerid, COLOR_WHITE, "Available options: Mask, Marriage, GunLicense, Hunger, Thirst");
        SM(playerid, COLOR_WHITE, "Available options: Diamonds, Jacket, LaborUpgrade, UpgradePoints, Lockpick, HackerLaptop");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gender] [male | female]");
		}
		if(!strcmp(param, "male", true))
		{
		    PlayerInfo[targetid][pGender] = 1;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Male.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    PlayerInfo[targetid][pGender] = 2;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Female.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "thirst", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [thirst] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			PlayerInfo[playerid][pThirstTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		PlayerInfo[targetid][pThirst] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's thirst to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", PlayerInfo[playerid][pThirst], PlayerInfo[playerid][pThirstTimer], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "hunger", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [hunger] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			PlayerInfo[playerid][pHungerTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		PlayerInfo[targetid][pHunger] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's hunger to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pHungerTimer], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			PlayerInfo[targetid][pMarriedTo] = PlayerInfo[value][pID];
			strcpy(PlayerInfo[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetRPName(targetid), GetRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[value][pID], PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			PlayerInfo[targetid][pMarriedTo] = -1;
			strcpy(PlayerInfo[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 128.");
		}

		PlayerInfo[targetid][pAge] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's age to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cash] [value]");
		}

		PlayerInfo[targetid][pCash] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cash to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bank] [value]");
		}

		PlayerInfo[targetid][pBank] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bank money to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [level] [value]");
		}

		PlayerInfo[targetid][pLevel] = value;
	    //SCM(playerid, COLOR_WHITE, "I can see you Imao");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [respect] [value]");
		}

		PlayerInfo[targetid][pEXP] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's respect points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "upgradepoints", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [upgradepoints] [value]");
		}

		PlayerInfo[targetid][pUpgradePoints] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's upgrade points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hours] [value]");
		}

		PlayerInfo[targetid][pHours] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 3.");
		}

		PlayerInfo[targetid][pWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnhealth] [value]");
		}

		PlayerInfo[targetid][pSpawnHealth] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn health to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnarmor] [value]");
		}

		PlayerInfo[targetid][pSpawnArmor] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn armor to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fightstyle] [option]");
	        SCM(playerid, COLOR_WHITE, "Available options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Normal.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Boxing.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kung Fu.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kneehead.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Grabkick.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Elbow.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [accent] [text]");
		}

		strcpy(PlayerInfo[targetid][pAccent], accent, 16);
		SM(playerid, COLOR_WHITE, "** You have set %s's accent to '%s'.", GetRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, PlayerInfo[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		PlayerInfo[targetid][pDiamonds] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "jacket", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [jacket] [value]");
		}

		PlayerInfo[targetid][pEcoin] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's jacket to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ecoin = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phone] [number]");
		}
		if(value == 911 || value == 6397 || value == 6324 || value == 8294)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
		}

		PlayerInfo[targetid][pPhone] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phone number to %i.", GetRPName(targetid), value);
        SAM(COLOR_YELLOW, "** %s set %s's phone number to %i.", GetRPName(playerid), GetRPName(targetid), value);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [crimes] [value]");
		}

		PlayerInfo[targetid][pCrimes] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's commited crimes to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [arrested] [value]");
		}

		PlayerInfo[targetid][pArrested] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's arrested count to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 6.");
		}

		PlayerInfo[targetid][pWantedLevel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's wanted level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [materials] [value]");
		}

		PlayerInfo[targetid][pMaterials] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's materials to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [pot] [value]");
		}

		PlayerInfo[targetid][pPot] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's pot to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [Crack] [value]");
		}

		PlayerInfo[targetid][pCrack] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Crack to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [meth] [value]");
		}

		PlayerInfo[targetid][pMeth] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's meth to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [painkillers] [value]");
		}

		PlayerInfo[targetid][pPainkillers] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's painkillers to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cigars] [value]");
		}

		PlayerInfo[targetid][pCigars] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cigars to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lockpick", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [lockpick] [value]");
		}

		PlayerInfo[targetid][pLockpick] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's lockpick to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lockpick = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hackerlaptop", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hackerlaptop] [value]");
		}

		PlayerInfo[targetid][pHammer] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Hacker Laptop to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hamer = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "portableradio", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [portableradio] [0/1]");
		}

		PlayerInfo[targetid][pWalkieTalkie] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Portable Radio to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [channel] [value]");
		}

		PlayerInfo[targetid][pChannel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's radio channel to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spraycans] [value]");
		}

		PlayerInfo[targetid][pSpraycans] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spraycans to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && PlayerInfo[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		PlayerInfo[targetid][pBoombox] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's boombox to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phonebook] [0/1]");
		}

		PlayerInfo[targetid][pPhonebook] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phonebook to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [paycheck] [value]");
		}

		PlayerInfo[targetid][pPaycheck] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's paycheck to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [carlicense] [0/1]");
		}

		PlayerInfo[targetid][pCarLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's car license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gunlicense] [0/1]");
		}

		PlayerInfo[targetid][pWeaponLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gun license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [seeds] [value]");
		}

		PlayerInfo[targetid][pSeeds] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's seeds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [ephedrine] [value]");
		}

		PlayerInfo[targetid][pEphedrine] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's ephedrine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [job] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Foodpanda (1) Fisherman (2) Bodyguard (3) Arms Dealer (4) Miner");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Taxi Driver (6) Butcher (7) Drug Dealer (8) Lawyer (9) Detective (10) Forklifter");
			return 1;
		}
		if(!(-1 <= value <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		PlayerInfo[targetid][pJob] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		PlayerInfo[targetid][pMask] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's mask to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "laborupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [laborupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pLaborUpgrade] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's labor upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mp3player] [0/1]");
		}

		PlayerInfo[targetid][pMP3Player] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's MP3 player to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [muriaticacid] [value]");
		}

		PlayerInfo[targetid][pMuriaticAcid] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's muriatic acid to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bakingsoda] [value]");
		}

		PlayerInfo[targetid][pBakingSoda] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's baking soda to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "hpammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hpammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_HP, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's hollow point ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [poisonammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_POISON, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's poison tip ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET poisonammo = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fmjammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_FMJ, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's full metal jacket ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fmjammo = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pDMWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's DM warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponrestricted] [hours]");
		}

		PlayerInfo[targetid][pWeaponRestricted] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [watch] [0/1]");
		}

		PlayerInfo[targetid][pWatch] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's watch to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gps] [0/1]");
		}

		PlayerInfo[targetid][pGPS] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's GPS to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gascan] [value]");
		}

		PlayerInfo[targetid][pGasCan] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gas can to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "truckerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [truckerskill] [value]");
		}

		PlayerInfo[targetid][pCourierSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's trucker skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fishingskill] [value]");
		}

		PlayerInfo[targetid][pFishingSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's fishing skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "guardskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [guardskill] [value]");
		}

		PlayerInfo[targetid][pGuardSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bodyguard skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET guardskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponskill] [value]");
		}

		PlayerInfo[targetid][pWeaponSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [lawyerskill] [value]");
		}

		PlayerInfo[targetid][pLawyerSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's lawyer skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [detectiveskill] [value]");
		}

		PlayerInfo[targetid][pDetectiveSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's detective skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    return 1;
	}
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	SendDiscordMessage(0, szString);
	//Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], option, param);
	return 1;
}

CMD:givejacketall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
		{
		    if(PlayerInfo[i][pEcoin] > 500)
			{
				continue;
			}
		    PlayerInfo[i][pEcoin]++;
		    
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s has given a {089DCE}jacket{FF6347} to every player online.", GetRPName(playerid));
	//Log_Write("log_give", "%s (uid: %i) has given a jacket to every player online", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

	return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoney [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	SendDiscordMessage(0, szString);
	GivePlayerCash(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	//Log_Write("log_admin", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:happyindependenceday(playerid, params[])
{
	if(PlayerInfo[playerid][pRefunded] == 3)
	{
		return SCM(playerid, COLOR_GREY, "You have already claimed your refund package.");
	}
	else
    RefundPlayer(playerid);
	SMA(COLOR_LIGHTRED, "SERVER: %s has claimed their coupon package using [/happyindependenceday].", GetRPName(playerid));
	ShowPlayerDialog(playerid, DIALOG_REFUNDED, DIALOG_STYLE_MSGBOX, "You have claimed your coupon package", "{FFFFFF}As you came to our server, you have received the following as a starter package:\n\n {369b26}$100,000\n{A028AD}Enjoy Roleplay\n\n{FFFFFF}We hope that you will invite more of your friends to play on the server!\n{FFFFFF}/info","Enjoy!","");
	return 1;
}

CMD:givemoneyall(playerid, params[])
{
	new amount;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoneyall [amount]");
    }
	if(amount < 1 || amount > 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $1 and $100000.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
		{
		    GivePlayerCash(i, amount);
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to every player online.", GetRPName(playerid), amount);
	return 1;
}

CMD:setdonator(playerid, params[])
{
	new targetid, rank, days;

	if(PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uii", targetid, rank, days))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setdonator [playerid] [rank] [days]");
	    SCM(playerid, COLOR_GREY2, "List of ranks: (1) Bronze (2) Silver (3) Gold");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365.");
	}

	PlayerInfo[targetid][pVIPPackage] = rank;
	PlayerInfo[targetid][pVIPTime] = gettime() + (days * 86400);
	PlayerInfo[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", PlayerInfo[targetid][pVIPPackage], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i months.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days / 30);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i months.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
	}
	else
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i days.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
	}
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) has given %s (uid: %i) a %s Donator package for %i days.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetDonatorRank(rank), days);
	SendDiscordMessage(11, szString);
	//Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s Donator package for %i days.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetDonatorRank(rank), days);
	return 1;
}

CMD:removedonator(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedonator [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!PlayerInfo[targetid][pVIPPackage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have a donator subscription which you can remove.");
	}

	//Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s donator package.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetDonatorRank(PlayerInfo[targetid][pVIPPackage]));

	PlayerInfo[targetid][pVIPPackage] = 0;
	PlayerInfo[targetid][pVIPTime] = 0;
	PlayerInfo[targetid][pVIPColor] = 0;
    PlayerInfo[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(PlayerInfo[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    //Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was rangebanned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

CMD:createaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[10];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[10]", username,password))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createaccount [username] [password]");
	}

	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player exist.");
	}
	else
	{
		gTotalRegistered++;
		SaveServerInfo();

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users WHERE username = '%s', password = '%s'", username, password);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has created %s's account.", GetPlayerNameEx(playerid), username);
	}
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublesalary(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!gDoubleSalary)
	{
		gDoubleSalary = true;
	    SMA(COLOR_AQUA, "** Admin enabled double salary. You will now gain double of any jobs salary.");
	}
	else
	{
		gDoubleSalary = false;
	    SMA(COLOR_AQUA, "** Admin disabled double salary.");
	}

	return 1;
}

CMD:doublexp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!gDoubleXP)
	{
		SendRconCommand("hostname \t                  "SERVER_NAME" [2XP!]");
		gDoubleXP = true;
	    SMA(COLOR_AQUA, "** Admin enabled double experience. You will now gain double the respect points and job skill points.");
	}
	else
	{
		SendRconCommand("hostname \t                       "SERVER_NAME"");
		gDoubleXP = false;
	    SMA(COLOR_AQUA, "** Admin disabled double experience.");
	}

	return 1;
}


CMD:createactor(playerid, params[])
{
	new name[24], world = GetPlayerVirtualWorld(playerid), skin, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command.");

	if(sscanf(params, "s[24]d", name, skin))
		return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /createactor [name] [skin]");

	if(skin < 0 || skin == 74 || skin > 311)
		return SCM(playerid, COLOR_RED, "Invalid SkinID.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

 	for(new i = 0; i < MAX_DYNAMIC_ACTORS; i ++)
	{
	    if(!ActorInfo[i][actorExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO actors (name, skin, x, y, z, a, world) VALUES('%e', %d, %f, %f, %f, %f, %d)", name, skin, x, y, z, a, world);
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateActor", "iisiffffi", playerid, i, name, skin, x, y, z, a, world);
			return 1;
		}
	}

	SCM(playerid, COLOR_RED, "Error:"WHITE" Actor slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:gotoactor(playerid, params[])
{
	new actorid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(sscanf(params, "i", actorid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotoactor [actorid]");
	}
	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][actorExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid actor.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, ActorInfo[actorid][actorX], ActorInfo[actorid][actorY], ActorInfo[actorid][actorZ]);
	SetPlayerVirtualWorld(playerid, ActorInfo[actorid][actorVW]);
	SetCameraBehindPlayer(playerid);

	return 1;
}

CMD:editactor(playerid, params[])
{
	new actorid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command.");

	if(sscanf(params, "is[14]S()[32]", actorid, option, param))
	{
	    SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /editactor [actorid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Name");
	    return 1;
	}
	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][actorExists])
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" Invalid actor.");

	if(!strcmp(option, "name", true))
	{
		new name[24];

		if(sscanf(param, "s[24]", name))
			return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /editactor [actorid] [name] [name of actor]");

		strcpy(ActorInfo[actorid][actorName], name, 24);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET name = '%e' WHERE id = %i", ActorInfo[actorid][actorName], ActorInfo[actorid][actorID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadActor(actorid);
	    SCMf(playerid, SERVER_COLOR, "** You've changed the name of Actor %i to %s.", actorid, name);
	}
	return 1;
}

CMD:removeactor(playerid, params[])
{
	new actorid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_GREY, "Error:"WHITE" You are not authorized to use this command.");

	if(sscanf(params, "i", actorid))
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /removeactor [actorid]");

	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][actorExists])
	    return SCM(playerid, COLOR_GREY, "Error:"WHITE" Invalid actor.");

	DestroyDynamic3DTextLabel(ActorInfo[actorid][actor_Label]);
	DestroyActor(ActorInfo[actorid][actor_ID]);

    if(IsValidActor(ActorInfo[actorid][actor_ID])) {
		DestroyActor(ActorInfo[actorid][actor_ID]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM actors WHERE id = %i", ActorInfo[actorid][actorID]);
	mysql_tquery(connectionID, queryBuffer);

	ActorInfo[actorid][actorExists] = 0;
	ActorInfo[actorid][actorID] = 0;

	SCMf(playerid, SERVER_COLOR, "** You have removed actor %i.", actorid);
	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;
    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 200.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The speed limit can't be below 5 or above 200.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for speed cameras.");

	SM(playerid, COLOR_GREY, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:gotospeed(playerid, params[])
{
	new houseid;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_SPEED_CAMERAS) || !SpeedData[houseid][speedExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	Dyuze(playerid, "Notice", "~w~Teleported");
	SetPlayerPos(playerid, SpeedData[houseid][speedPos][0] - (2.5 * floatsin(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][1] - (2.5 * floatcos(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][2]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	DestroyDynamicMapIcon(SpeedData[id][sMapIcon]);
	SM(playerid, COLOR_GREY, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /createhouse [type (1-%i)]", sizeof(houseInteriors));
		SCM(playerid, COLOR_SYNTAX, "Types: 1-6 Apartment | 7-9 Low Class | 10-12 Med Class | 13-16 Upper | 17-19 Mansion | 20 Custom House");
		return 1;
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "House slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}


CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, World, Type, Owner, Price, RentPrice, Level, Locked");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of house %i.", houseid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of house %i to %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of house %i to %i.", houseid, locked);
	}

	return 1;
}

CMD:removefurniture(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefurniture [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	RemoveAllFurniture(houseid);
	SM(playerid, COLOR_AQUA, "** You have removed all furniture for house %i.", houseid);
	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	RemoveAllFurniture(houseid);

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	Dyuze(playerid, "Notice", string);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Nearest Items:");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyPoint(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of point ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = Speed_Nearest(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of speedcam ID %i", id);
	}
	if((id = GetNearbyVen(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "You are in range of vendors ID %i", id);
	}
	if((id = GetNearbyPG(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "You are in range of public garage ID %i", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of land ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = Gate_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of gate ID %i.", id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of atm ID %i", id);
	}


	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Houses:"WHITE" /createhouse, /edithouse, /removehouse, /gotohouse, /asellhouse, /removefurniture.");
	SCM(playerid, SERVER_COLOR, "Garages:"WHITE" /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SCM(playerid, SERVER_COLOR, "Business:"WHITE" /createbiz, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SCM(playerid, SERVER_COLOR, "Entrances:"WHITE" /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SCM(playerid, SERVER_COLOR, "Points:"WHITE" /createpoint, /editpoint, /removepoint, /gotopoint.");
    SCM(playerid, SERVER_COLOR, "Turfs:"WHITE" /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SCM(playerid, SERVER_COLOR, "Fires:"WHITE" /randomfire, /killfire, /spawnfire.");
	SCM(playerid, SERVER_COLOR, "ATM"WHITE" /createatm, /removeatm");
	SCM(playerid, SERVER_COLOR, "Public Garages"WHITE" /createpg, /removepg, /nearest.");
	SCM(playerid, SERVER_COLOR, "[StreetFood]"WHITE" /createstreetfood, /removestreetfood.");
	SCM(playerid, SERVER_COLOR, "Lockers"WHITE" /createlocker, /editlocker, /removelocker, /gotolocker.");
	SCM(playerid, SERVER_COLOR, "Actor"WHITE" /createactor, /editactor, /removeactor, /gotoactor.");
	return 1;
}

CMD:debug(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Gates:"WHITE" /creategate, /destroygate, /editgate, /gotogate.");
	SCM(playerid, SERVER_COLOR, "SpeedCameras:"WHITE" /createspeed, /destroyspeed, /gotospeed.");
	SCM(playerid, SERVER_COLOR, "Lands:"WHITE" /createland, /landcancel, /removeland, /gotoland, /asellland, /removelandobjects.");


	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold house %i.", houseid);
	return 1;
}

CMD:gethereall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
    }
    if(sscanf(params, "s", "confirm"))
    {
        SM(playerid, COLOR_SYNTAX, "Usage: /gethereall [confirm]");
        return 1;
    }

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged])
        {
            TeleportToPlayer(i, playerid);
            SM(i, COLOR_GREY2, "You teleported to Admin %s's Position.", GetRPName(playerid));
        }
    }
    SM(playerid, COLOR_GREY2, "Teleported all online player to your position.");
    SMA(COLOR_LIGHTRED, "AdmCmd: %s has teleported all online player on his/her position.", GetRPName(playerid));
    return 1;
}

CMD:oldcar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 0)
	{
		if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 0)
	    {
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	    }
		new string[128];
		format(string, sizeof(string), "Your last driven vehicle ID was %d.",gLastCar[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold business %i.", businessid);
	return 1;
}

CMD:asellland(playerid, params[])
{
	new landid;

    if (!IsPlayerAdmin(playerid))
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold land %i.", landid);
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no vehicle in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this house yours! /househelp for a list of commands.", HouseInfo[houseid][hPrice]);
	//Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[houseid][hID] || PlayerInfo[playerid][pFurniturePerms] == houseid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    if(!(IsLandOwner(playerid, landid) || PlayerInfo[playerid][pLandPerms] == landid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the land owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || PlayerInfo[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == PlayerInfo[playerid][pGang]) || VehicleInfo[id][vFactionType] >= 0 && VehicleInfo[id][vFactionType] == PlayerInfo[playerid][pFaction]))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
            Dyuze(playerid, "Notice", string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
            Dyuze(playerid, "Notice", string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			Dyuze(playerid, "Notice", "~r~House locked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their house door.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			Dyuze(playerid, "Notice", "~g~House unlocked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their house door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			Dyuze(playerid, "Notice", "~r~Garage locked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their garage door.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			Dyuze(playerid, "Notice", "~g~Garage unlocked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their garage door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			Dyuze(playerid, "Notice", "~r~Business locked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			Dyuze(playerid, "Notice", "~g~Business unlocked");
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SCM(playerid, COLOR_SYNTAX, "Usage: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SCM(playerid, COLOR_SYNTAX, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				Dyuze(playerid, "Notice", "~r~Entrance locked");
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their entrance door.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				Dyuze(playerid, "Notice", "~g~Entrance unlocked");
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their entrance door.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /buyhouse, /lock, /stash, /furniture, /sellhouse, /sellmyhouse.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /lopen, /renthouse, /unrent, /setrent, /tenants, /evict, /evictall, /houseinfo.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /houseinvite");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", HouseInfo[houseid][hPot], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCrack], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", HouseInfo[houseid][hHPAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO), HouseInfo[houseid][hPoisonAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", HouseInfo[houseid][hFMJAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to $%i at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hPot] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of pot at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pPot] -= value;
			    HouseInfo[houseid][hPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCrack] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of Crack at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCrack] -= value;
			    HouseInfo[houseid][hCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Your house stash has no more slots available for weapons.");
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO) < HouseInfo[houseid][hHPAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i hollow point ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] - value);
			    HouseInfo[houseid][hHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO) < HouseInfo[houseid][hPoisonAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i poison tip ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] - value);
			    HouseInfo[houseid][hPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO) < HouseInfo[houseid][hFMJAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i FMJ ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] - value);
			    HouseInfo[houseid][hFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your house stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pPot] += value;
			    HouseInfo[houseid][hPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCrack] += value;
			    HouseInfo[houseid][hCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pHPAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + value);
			    HouseInfo[houseid][hHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPoisonAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + value);
			    HouseInfo[houseid][hPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pFMJAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + value);
			    HouseInfo[houseid][hFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your house stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 25000) + 25000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your house is already at the maximum level possible.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level] [confirm]");
		    SM(playerid, COLOR_WHITE, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(PlayerInfo[playerid][pCash] < cost)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that much cash.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		Dyuze(playerid, "Notice", string);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
		}

		SM(playerid, COLOR_YELLOW, "Your tenant and furniture capacity were also both increased to %i/%i.", GetHouseTenantCapacity(houseid), GetHouseFurnitureCapacity(houseid));
		//Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	/*else if(!strcmp(option, "interior", true))
	{
		for(new i = HouseInfo[houseid][hType] + 1; i < sizeof(houseInteriors); i ++)
		{
		    if(!strcmp(houseInteriors[i][intClass], houseInteriors[HouseInfo[houseid][hType]][intClass]))
		    {
		        if(isnull(param) || strcmp(param, "confirm", true) != 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [interior] [confirm]");
				    SM(playerid, COLOR_WHITE, "You are about to upgrade your interior to the next one in the class for $%i.", houseInteriors[i][intPrice]);
					return 1;
				}
				if(PlayerInfo[playerid][pCash] < houseInteriors[i][intPrice])
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't afford the upgrade.");
				}

				foreach(new x : Player)
				{
				    if(GetInsideHouse(x) == houseid)
				    {
				        SetPlayerPos(x, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]);
				        SetPlayerFacingAngle(x, houseInteriors[i][intA]);
				        SetPlayerInterior(x, houseInteriors[i][intID]);
				        SetCameraBehindPlayer(x);
				    }
				}

				GivePlayerCash(playerid, -houseInteriors[i][intPrice]);

		        HouseInfo[houseid][hType] = i;
		        HouseInfo[houseid][hPrice] = houseInteriors[i][intPrice];
				HouseInfo[houseid][hInterior] = houseInteriors[i][intID];
				HouseInfo[houseid][hIntX] = houseInteriors[i][intX];
				HouseInfo[houseid][hIntY] = houseInteriors[i][intY];
				HouseInfo[houseid][hIntZ] = houseInteriors[i][intZ];
				HouseInfo[houseid][hIntA] = houseInteriors[i][intA];

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", i, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_YELLOW, "You have upgraded to the next interior in the class for $%i.", houseInteriors[i][intPrice]);
			    Log_Write("log_property", "%s (uid: %i) upgraded their house interior (id: %i) to interior %i for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], i, houseInteriors[i][intPrice]);
			    return 1;
		    }
		}

		SCM(playerid, COLOR_SYNTAX, "Your house's interior is already at its maximum in its class. You cannot upgrade it any further.");
	}*/
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellhouse [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pHouseOffer] = playerid;
	PlayerInfo[targetid][pHouseOffered] = houseid;
	PlayerInfo[targetid][pHousePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their house for $%i (/accept house).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your house for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyhouse [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your house back to the state. You will receive $%i back.", percent(HouseInfo[houseid][hPrice], 75));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your house to the state and received $%i back.", percent(HouseInfo[houseid][hPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}*/

CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}
cmd:dropvoice(playerid, params[])
{
	new keyid;
    if(PlayerInfo[playerid][pCallStage] == 2)
    {
    	if (keyid == 0x42 && callstream[playerid]) SvDetachSpeakerFromStream(callstream[playerid], playerid);
    }
    return 1;
}

CMD:ygaad7tawd(playerid,params[])
{
	if(takingselfie[playerid] == 0)
	{
	    GetPlayerPos(playerid,TX[playerid],TY[playerid],TZ[playerid]);
		static Float: nTX, Float: nTY;
		if(Degree[playerid] >= 360) Degree[playerid] = 0;
		Degree[playerid] += Speed;
		nTX = TX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		nTY = TY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, nTX, nTY, TZ[playerid] + Height);
		SetPlayerCameraLookAt(playerid, TX[playerid], TY[playerid], TZ[playerid]+1);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		takingselfie[playerid] = 1;
		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
		return 1;
	}
    if(takingselfie[playerid] == 1)
	{
	    TogglePlayerControllable(playerid,1);
		SetCameraBehindPlayer(playerid);
	    takingselfie[playerid] = 0;
	    ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
	    return 1;
	}
    return 1;
}


CMD:ma(playerid, params[]) return callcmd::makeadmin(playerid, params);
CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 9 && !IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 8))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 8.");
	}
	if(level == 0 && PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		PlayerInfo[targetid][pAdminDuty] = 0;
    }

    PlayerInfo[targetid][pAdmin] = level;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have set %s's admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s has set your admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	SendDiscordMessage(0, szString);
	//Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:mgmcuyir9090(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 0 && !IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if(level == 0 && PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		PlayerInfo[targetid][pAdminDuty] = 0;
    }

    PlayerInfo[targetid][pAdmin] = level;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have set %s's admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s has set your admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	//Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makehelper [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if((PlayerInfo[playerid][pAdmin] < 6) && PlayerInfo[targetid][pHelper] > PlayerInfo[playerid][pHelper] && level < PlayerInfo[targetid][pHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	if(level == 0)
	{
		if(PlayerInfo[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NORMAL);
		}
		if(PlayerInfo[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}


	SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a level %i helper.", GetRPName(playerid), GetRPName(targetid), level);
	PlayerInfo[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	SendDiscordMessage(0, szString);
	SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetHelperRank(targetid), level);
	SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetHelperRank(targetid), level);

	//Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 7 && !IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makeadmin instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makehelper instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addtoevent [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no active events which you can add this player to.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already in the event.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently playing paintball.");
	}

	SetPlayerInEvent(targetid);

	SM(targetid, COLOR_WHITE, "** %s has added you to the event.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the event.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:olisthelpers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}

CMD:oadmins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:selldynamics(playerid, params[])
{
	new houses, garages, businesses;

	if(!IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_WHITE, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists])
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sell %i houses, %i garages and %i businesses.", houses, garages, businesses);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 1209600)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 1209600)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all inactive properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active turf claim limit for gangs to %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active point cap limit for gangs to %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}

CMD:setmotd(playerid, params[])
{
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the global MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SAM(COLOR_YELLOW, "AdmCmd: %s has set the global MOTD to '%s'", GetRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
      		SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the admin MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the admin MOTD to '%s'", GetRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the helper MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the helper MOTD to '%s'", GetRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SM(playerid, COLOR_YELLOW, "News: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && PlayerInfo[playerid][pAdmin] > 0)
	{
		SM(playerid, COLOR_LIGHTRED, "Admin News: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0))
	{
		SM(playerid, COLOR_AQUA, "Helper News: %s", helperMOTD);
	}
	if(PlayerInfo[playerid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SM(playerid, COLOR_GREEN, "Gang News: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstaff [playerid] [option] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Available options: FM, GM, BA");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	if(!strcmp(option, "fm", true))
	{
	    PlayerInfo[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", PlayerInfo[targetid][pFactionMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Faction Moderator.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Faction Moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
            new szString[128];
			format(szString, sizeof(szString), "AdmCmd: %s has made %s a faction moderator.", GetRPName(playerid), GetRPName(targetid));
		    SendDiscordMessage(0, szString);
	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"faction Moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"faction Moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Faction Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Faction Moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Faction Moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Faction Moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gm", true))
	{
	    PlayerInfo[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", PlayerInfo[targetid][pGangMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Gang Moderator.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Gang Moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
            new szString[128];
			format(szString, sizeof(szString), "AdmCmd: %s has made %s a gang moderator.", GetRPName(playerid), GetRPName(targetid));
		    SendDiscordMessage(0, szString);
	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Gang Moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Gang Moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Gang Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Gang Moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Gang Moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Gang Moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "ba", true))
	{
	    PlayerInfo[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", PlayerInfo[targetid][pBanAppealer], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a ban appealer.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
            new szString[128];
			format(szString, sizeof(szString), "AdmCmd: %s has made %s a ban appealer.", GetRPName(playerid), GetRPName(targetid));
		    SendDiscordMessage(0, szString);
	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's ban appealer status.", GetRPName(playerid), GetRPName(targetid));
	        //Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:updates(playerid,params[])
{
	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	return 1;
}

CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i changed to '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player needs to be at least a level 2 administrator.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!PlayerInfo[targetid][pAdminDuty])
	{
		SM(targetid, COLOR_WHITE, "** %s has forced you to be on admin duty.", GetRPName(playerid));
	}
	else
	{
	    SM(targetid, COLOR_WHITE, "** %s has forced you to be off admin duty.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Help Requests:");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pHelpRequest]))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] asks: %s", GetRPName(i), i, PlayerInfo[i][pHelpRequest]);
		}
	}

	SCM(playerid, COLOR_AQUA, "** Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SCM(playerid, COLOR_AQUA, "** Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:clearall(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
    }
    foreach(new i : Player)
	{
    	PlayerInfo[i][pWantedLevel] = 0;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[i][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[i][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared everyone's Wanted Level.", GetRPName(playerid));
    return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to leave the paintball arena first.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /accepthelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	if(PlayerInfo[playerid][pTagType] == TAG_NORMAL)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[playerid][pAcceptedHelp] = 1;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "** You accepted %s's help request and were sent to their position. /return to go back.", GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has accepted your help request. They are now assisting you.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You denied %s's help request.", GetRPName(targetid));
	SM(targetid, COLOR_LIGHTRED, "** %s has denied your help request.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:sta(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sta [playerid] (Sends /gethelp to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, PlayerInfo[targetid][pHelpRequest]);
    PlayerInfo[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You sent %s's help request to all online admins.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}

CMD:return(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't accepted any help requests.");
	}

    if(PlayerInfo[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	}

	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);

	SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SCM(playerid, COLOR_WHITE, "** You were returned to your previous position.");
    PlayerInfo[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /answerhelp [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "You");

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: ...%s **", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %s **", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetRPName(playerid), GetRPName(targetid));

	return 1;
}

CMD:c(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /c [staff chat]");
	}
	if(PlayerInfo[playerid][pToggleHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the staff chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
		if((PlayerInfo[i][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0) && !PlayerInfo[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0x42f4EEFF, "** %s %s: %.*s... **", GetStaffRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0x42f4EEFF, "** %s %s: ...%s **", GetStaffRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0x42f4EEFF, "** %s %s: %s **", GetStaffRank(playerid), GetRPName(playerid), params);
			}
							new szString[2048];
				format(szString, sizeof(szString),  "%s: %s", GetRPName(playerid), params);
				SendDiscordMessage(18, szString);
			return 1;
		}
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}


CMD:helperhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SCM(playerid, COLOR_AQUA, "Junior Helper:"WHITE" /c, /listhelp, /accepthelp, /answerhelp, /denyhelp, /sta, /return.");
	}
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
		SCM(playerid, COLOR_AQUA, "General Helper:"WHITE" /nmute, /hmute, /gmute, /admute");
	}
    if(PlayerInfo[playerid][pHelper] >= 3)
	{
		SCM(playerid, COLOR_AQUA, "Senior Helper:"WHITE" /olisthelpers, /prisonic /checknewbies.");
	}
	if(PlayerInfo[playerid][pHelper] >= 4)
	{
		SCM(playerid, COLOR_AQUA, "Head Helpe:"WHITE" /makehelper, /omakehelper, /kick.");
	}
	return 1;
}

CMD:properties(playerid, params[])
{
	new type[16];

	SCM(playerid, SERVER_COLOR, "My Properties:");

    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

	        if((gettime() - HouseInfo[i][hTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as "SVRCLR"Inactive{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as "SVRCLR"Active{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
		}
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
	        if((gettime() - GarageInfo[i][gTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as "SVRCLR"Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as "SVRCLR"Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
	        if((gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
    	    {
        	    SM(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as "SVRCLR"Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
			else
			{
		    	SM(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as "SVRCLR"Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Your properties become inactive if you don't enter them for 14+ days.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, COLOR_AQUA, "** You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house's owner has chosen to disable renting for this house.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!PlayerInfo[playerid][pRentingHouse])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pRentingHouse] = 0;
	SCM(playerid, COLOR_WHITE, "** You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            PlayerInfo[i][pRentingHouse] = 0;
            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "** You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    //return SCM(playerid, COLOR_SYNTAX, "You can't invite yourself to your own home.");
	}

	PlayerInfo[targetid][pInviteOffer] = playerid;
	PlayerInfo[targetid][pInviteHouse] = houseid;

	SM(targetid, COLOR_AQUA, "** %s has offered you an invitation to their house in %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SM(playerid, COLOR_AQUA, "** You have offered %s an invitation to your house.", GetRPName(targetid));
	return 1;
}

CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[10], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Buy, Edit, Sell, Clear, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pEditType] = EDIT_FURNITURE;
        PlayerInfo[playerid][pEditObject] = objectid;
        PlayerInfo[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
		Dyuze(playerid, "Notice", "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel");
	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [clear] [confirm]");
			SCM(playerid, COLOR_WHITE, "This sells all of your furniture in your house. This action is irreversible.");
			return 1;
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] == houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You already allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = houseid;

		SM(targetid, COLOR_AQUA, "%s has allowed you to access their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have allowed %s to access your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] != houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You haven't allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = -1;

		SM(targetid, COLOR_AQUA, "%s has removed your access to their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have removed %s's access to your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SCM(playerid, COLOR_AQUA, "You will now see labels appear above all of your furniture.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your furniture.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}

CMD:gate(playerid, params[]) return callcmd::open(playerid, params);
CMD:door(playerid, params[]) return callcmd::open(playerid, params);
CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    //ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerInfo[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				{
				    Dyuze(playerid, "Notice", "You have closed the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to close the gate/door.", GetRPName(playerid));
				}
                case 1:
				{
				    Dyuze(playerid, "Notice", "You have opened the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to open the gate/door.", GetRPName(playerid));
				}
			}
		}
	}
	return 1;
}

CMD:maphelp(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	
	SCM(playerid, COLOR_WHITE, "** Mapper: /createobj, /dupobj, /nearobj, /editobj, /delobj ");
	return 1;
}

CMD:nearobj(playerid, params[])
{
	new id;
    if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if((id = Object_Nearest(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "You are in range of object ID %i.", id);
	}
	return 1;
}

CMD:dupobj(playerid, params[])
{
	static id = -1, idx;
    if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /dupobj [id]");

	id = Object_Duplicate(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully duplicate object ID: %d.", id);
	return 1;
}

CMD:createobj(playerid, params[])
{
	static id = -1, idx;
    if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /createobj [objid]");

	id = Object_Create(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully created object ID: %d.", id);
	return 1;
}

CMD:editobj(playerid, params[])
{
	static id;
    if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /editobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	PlayerInfo[playerid][pEditmObject] = -1;
	EditDynamicObject(playerid, ObjectData[id][mobjObject]);
	PlayerInfo[playerid][pEditmObject] = id;
	PlayerInfo[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
	SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", id);
	return 1;
}

CMD:delobj(playerid, params[])
{
	static id = 0;
    if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /delobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	Object_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed object ID: %d.", id);
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for gates.");

	SM(playerid, COLOR_WHITE, "You have successfully created gate ID: %d.", id);
	return 1;
}

CMD:gotogate(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_GATES) || !GateData[houseid][gateExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	Dyuze(playerid, "Notice", "~w~Teleported");
	SetPlayerPos(playerid, GateData[houseid][gatePos][0] - (2.5 * floatsin(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][1] - (2.5 * floatcos(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][2]);
	SetPlayerInterior(playerid, GateData[houseid][gateInterior]);
	SetPlayerVirtualWorld(playerid, GateData[houseid][gateWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}


CMD:destroygate(playerid, params[])
{
	static
	    id = 0;

	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", id))
	    return SCM(playerid, COLOR_WHITE, "Usage: /destroygate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

	Gate_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerInfo[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "Names:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the position of gate ID: %d.", GetRPName(playerid), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified speed can't be below 0 or above 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the speed of gate ID: %d to %.2f.", GetRPName(playerid), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified radius can't be below 0 or above 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the radius of gate ID: %d to %.2f.", GetRPName(playerid), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [time] [close time] (0 to disable)");

		if (time < 0 || time > 60000)
		    return SCM(playerid, COLOR_SYNTAX, "The specified time can't be 0 or above 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the close time of gate ID: %d to %d.", GetRPName(playerid), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [model] [gate model]");

		/*if (!IsValidObjectModel(model))
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object model.");*/

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the model of gate ID: %d to %d.", GetRPName(playerid), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    PlayerInfo[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerInfo[playerid][pEditGate] = id;
		PlayerInfo[playerid][pEditType] = 1;

		SM(playerid, COLOR_WHITE, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    PlayerInfo[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerInfo[playerid][pEditGate] = id;
		PlayerInfo[playerid][pEditType] = 2;

		SM(playerid, COLOR_WHITE, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no gate.", GetRPName(playerid), id);

		else
		    SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to ID: %d.", GetRPName(playerid), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = 0;

		if (sscanf(string, "d", factionid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [faction] [gate faction] (-1 for none)");

		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
			return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");


        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionInfo[factionid][fType]);
		Gate_Save(id);

		if (factionid == -1)
			SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no faction.", GetRPName(playerid), id);

		else
		    SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to \"%s\".", GetRPName(playerid), id, FactionInfo[factionid][fName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the password of gate ID: %d to %s.", GetRPName(playerid), id, pass);
		return 1;
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SCM(playerid, COLOR_SYNTAX, "Invalid size. Valid sizes range from Small, Medium and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "Garage slots are currently full. Ask managements to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Entrance, Exit, Type, Owner, Price, Locked");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of garage %i to %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "** GARAGE: /buygarage, /lock, /sellgarage, /sellmygarage, /garageinfo.");
	SCM(playerid, COLOR_WHITE, "** GARAGE: /repair, /refuel, /tune.");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This garage already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this garage yours! /garagehelp for a list of commands.", GarageInfo[garageid][gPrice]);
    //Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

/*
CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradegarage [confirm]");
	    SM(playerid, COLOR_WHITE, "The next garage size available is %s and costs $%i to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]);
		return 1;
	}
	if(PlayerInfo[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to upgrade your garage.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && IsVehicleInGarage(i, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	foreach(new i : Player)
	{
	    if(GetInsideGarage(i) == garageid)
	    {
			SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
			SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
			SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
			SetCameraBehindPlayer(i);
		}
	}

	GarageInfo[garageid][gType]++;
	GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

	GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	SM(playerid, COLOR_YELLOW, "You have upgraded your garage's size to %s for $%i.", garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	Log_Write("log_property", "%s (uid: %i) upgraded their garage (id: %i) to %s size for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	return 1;
}*/

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellgarage [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pGarageOffer] = playerid;
	PlayerInfo[targetid][pGarageOffered] = garageid;
	PlayerInfo[targetid][pGaragePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their garage for $%i (/accept garage).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your garage for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmygarage [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your garage back to the state. You will receive $%i back.", percent(GarageInfo[garageid][gPrice], 75));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your garage to the state and received $%i back.", percent(GarageInfo[garageid][gPrice], 75));
    //Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}

    SM(playerid, SERVER_COLOR, "Garage ID %i:", garageid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Size: %s) - (Location: %s) - (Active: %s) - (Locked: %s)", GarageInfo[garageid][gPrice], garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createbiz [type]");
	    SCM(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Pharmacy");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exit of business %i.", businessid);
	}
	/*else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    PlayerInfo[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}*/
	else if(!strcmp(option, "interior", true))
	{

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', interior = %i, world = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of business %i.", businessid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SCM(playerid, COLOR_GREY2, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of business %i to %s.", businessid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry fee of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the products amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	RemoveAllFurniture(businessid);

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /buybiz, /lock, /bwithdraw, /bdeposit, /sellbiz, /sellmybiz, /bizinfo.");
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /entryfee, /businessmenu, /products.");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This business already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    //Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bwithdraw [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the business vault. There is now $%i remaining.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bdeposit [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the business vault. There is now $%i available.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellbiz [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pBizOffer] = playerid;
	PlayerInfo[targetid][pBizOffered] = businessid;
	PlayerInfo[targetid][pBizPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their business for $%i (/accept business).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your business for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmybiz [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your business back to the state. You will receive $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your business to the state and received $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}*/

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}

    SM(playerid, SERVER_COLOR, "Business ID %i:", businessid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Type: %s) - (Location: %s) - (Active: %s) - (Status: %s)", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SM(playerid, COLOR_GREY2, "(Vault: $%i) - (Entry Fee: $%i) - (Products: %i)", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bProducts]);
	return 1;
}

CMD:businessmenu(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	ShowPlayerDialog(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Business Menu","Change Store Name\nChange Message\nSafe\nLock Business", "Select", "Cancel");
	return 1;
}
CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /entryfee [amount]");
	}
	if(amount < 0 || amount > 15000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The entry fee can't be below $0 or above $15,000.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, COLOR_AQUA, "** You have set the entry fee to $%i.", amount);
	return 1;
}

CMD:buyclothes(playerid, params[]) return callcmd::buy(playerid, params);
CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64], string[1024];

	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can buy stuff.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
   	}

	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s\nLockpick\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				//FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]),
				FormatNumber(BusinessInfo[businessid][bPrices][20]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Knife\t%s\nBat\t%s\nBrass Knuckles\t%s\n9mm pistol\t%s\nSilenced Pistol\t%s\nShot Gun\t%s\nVest\t%s\nWeapon Clip\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_PHARMACY:
		{
			format(string, sizeof(string), "Bandage\t%s\nMedkit\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:products(playerid, parmas[]) {

    new businessid = GetInsideBusiness(playerid), string[1024], title[64];
    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s\nLockpick\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				//FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]),
				FormatNumber(BusinessInfo[businessid][bPrices][20]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Knife\t%s\nBat\t%s\nBrass Knuckles\t%s\n9mm pistol\t%s\nSilenced Pistol\t%s\nShot Gun\t%s\nVest\t%s\nWeapon Clip\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_PHARMACY:
		{
			format(string, sizeof(string), "Bandage\t%s\nMedkit\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

/*CMD:phoneadvertise(playerid, params[]) return callcmd::phonead(playerid, params);
CMD:phonead(playerid, params[])
{
    new price = strlen(params) * 5;

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(phonead)vertise [advertisement] ($5/char)");
	}
	if(PlayerInfo[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(PlayerInfo[playerid][pVIPPackage] < 1 && PlayerInfo[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	if(PlayerInfo[playerid][pVIPPackage] == 1)
	{
	    SCM(playerid, COLOR_VIP, "** VIP Perk: Your advertisement was posted free of charge!");
	}
	else
	{
		format(string, sizeof(string), "~r~-$%i", price);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);
	}

	SMA(SERVER_COLOR, "Phone Advert: %s, just contact %s(%i)", params, GetRPName(playerid), PlayerInfo[playerid][pPhone]);
	return 1;
}*/

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 5;

	if((businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any advertisement business.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(ad)vertise [advertisement] ($5/char)");
	}
	if(PlayerInfo[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(PlayerInfo[playerid][pVIPPackage] < 1 && PlayerInfo[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	format(string, sizeof(string), "~r~-$%i", price);
	Dyuze(playerid, "Notice", string);

	GivePlayerCash(playerid, -price);

	if(businessid >= 0)
	{
		BusinessInfo[businessid][bCash] += price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	new szString[2048];
	format(szString, sizeof(szString),  "%s: %s", GetRPName(playerid), params);
	SendDiscordMessage(16, szString);
	SMA(COLOR_GREEN, "Advert: %s, just contact %s(%i)", params, GetRPName(playerid), PlayerInfo[playerid][pPhone]);
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SM(playerid, COLOR_AQUA, "** Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no position in the slot selected.");
	}

	slot--;

	Dyuze(playerid, "Notice", "~w~Loading objects...");

	TeleportToCoords(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ], MarkedPositions[playerid][slot][mPosA], MarkedPositions[playerid][slot][mInterior], MarkedPositions[playerid][slot][mWorld], true);
	SetCameraBehindPlayer(playerid);

	return 1;
}


CMD:createdoor(playerid, params[]) { return callcmd::createentrance(playerid, params); }
CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Entrance slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:editdoor(playerid, params[]) { return callcmd::editentrance(playerid, params); }
CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SCM(playerid, COLOR_WHITE, "Available options: Faction, VIP, Vehicles, Freeze, Label, Password, Mapicon, Color");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the name of entrance %i to '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SM(playerid, COLOR_AQUA, "** You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of entrance %i to %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic");
	        return 1;
		}
		if(!(0 <= type <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type of entrance %i.", entranceid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vip] [rankid]");
	        SCM(playerid, COLOR_GREY2, "List of ranks: (0)None (1) Gold (2) Diamond (3) Platinum");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the VIP rank of entrance %i to {C2A2DA}%s{CCFFFF} (%i).", entranceid, GetDonatorRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the password of entrance %i to '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid map icon.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the map icon of entrance %i to %i.", entranceid, type);
	}

	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SM(playerid, COLOR_AQUA, "** You have set the {%06x}color{33CCFF} of entrance ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removedoor(playerid, params[]) { return callcmd::removeentrance(playerid, params); }
CMD:removeentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotodoor(playerid, params[]) { return callcmd::gotoentrance(playerid, params); }
CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

/*CMD:join(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	        if(PlayerInfo[playerid][pJob] != JOB_NONE)
	        {
	            if(PlayerInfo[playerid][pVIPPackage] >= 1)
	        	{
	        	    if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
	        	    }
	        	    if(PlayerInfo[playerid][pJob] == i)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
	        	    }

	        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					PlayerInfo[playerid][pSecondJob] = i;
					SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
	            }
	            else
	            {
	            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
				}

				return 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pJob] = i;
			SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any job icon.");
	return 1;
}*/

CMD:quitjob(playerid, params[])
{
	new slot;

	if(PlayerInfo[playerid][pVIPPackage] >= 1 && sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /quitjob [1/2]");
	}

	if((PlayerInfo[playerid][pVIPPackage] < 1) || (PlayerInfo[playerid][pVIPPackage] >= 1 && slot == 1))
	{
	    if(PlayerInfo[playerid][pJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your job as a "SVRCLR"%s{CCFFFF}.", GetJobName(PlayerInfo[playerid][pJob]));
		PlayerInfo[playerid][pJob] = JOB_NONE;
	}
	else if(slot == 2 && PlayerInfo[playerid][pVIPPackage] >= 1)
	{
	    if(PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job in this slot which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your secondary job as a "SVRCLR"%s{CCFFFF}.", GetJobName(PlayerInfo[playerid][pSecondJob]));
		PlayerInfo[playerid][pSecondJob] = JOB_NONE;
	}

	return 1;
}

CMD:getorder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a "SVRCLR"Foodpanda.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ]))
	{
		return SCM(playerid, SERVER_COLOR, "[!] You are not in range of the "WHITE"Foodpanda Manager.");
	}
	if(PlayerInfo[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are already carrying a meal to be put on your Wayfarer for delivery!");

	if(PlayerInfo[playerid][pPizzaCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another order.", PlayerInfo[playerid][pPizzaCooldown]);
	}
	
	PlayerInfo[playerid][pCarry] = 1;
	PlayerInfo[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);
	SCM(playerid, -1, "** You have grabbed the order to be delivered, head outside and put the order into one of the Wayfarer that you'll be driving.");
	SCM(playerid, SERVER_COLOR, "type the command "WHITE"'/putorder'"SVRCLR" at the back of the Wayfarer's carrying basket to put the order inside.");
	return 1;
}

CMD:putorder(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You can't use this command as you are not working on Foodpanda.");

	if(!PlayerInfo[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not carrying a meal with you.");

	if(PlayerInfo[playerid][pCarry] != 1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" That is not a meal that you are carrying with you! (or you are about to give deliver it)");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the basket of a Wayfarer (that is not occupied).");

	if(VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" This vehicle has a meal loaded into it already!");

	if((houseid = GetRandomHouse(playerid)) == -1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" There are no houses in the server to deliver meal to. Ask an admin to set them up.");

	PlayerInfo[playerid][pCarry] = 0;
	PlayerInfo[playerid][pCarrying] = false;

	VehicleInfo[i][vMeal] = true;

	RemovePlayerAttachedObject(playerid, 1);
	PlayerInfo[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    PlayerInfo[playerid][pPizzas] = 1;
	PlayerInfo[playerid][pLastPizza] = gettime();
    PlayerInfo[playerid][pPizzaTime] = 0;
    PlayerInfo[playerid][pPizzaCooldown] = 60;

	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_FOODPANDA;

	Dyuze(playerid, "Notice", "~w~Deliver to ~r~marker");
	SCMf(playerid, SERVER_COLOR, "** You have loaded the bike with the meal ordered. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SCM(playerid, SERVER_COLOR, "type "WHITE"'/graborder'"SVRCLR" from the Wayfarer after reaching the destination before entering the marker.");
	return 1;
}

CMD:graborder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You can't use this command as you are not working on Foodpanda.");

	if(PlayerInfo[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are already carrying something.");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the basket of a Wayfarer (that is not occupied).");

	if(!VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" This vehicle has no order loaded into it!");

	PlayerInfo[playerid][pCarry] = 2;
	PlayerInfo[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);

	VehicleInfo[i][vMeal] = false;

	SCM(playerid, COLOR_YELLOW, "** You grabbed the order to be delivered, You may now enter the destination marker.");
	return 1;
}

CMD:getpaper(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_NEWS))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a News Paper.");
	}
	if(PlayerInfo[playerid][pNewsCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another item.", PlayerInfo[playerid][pLazadaCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 586)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a News Paper Vehicle.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 645.2584, -1341.5248, 13.5544))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be closer to the job icon at the loadcar icon.");
	}
	if((houseid = GetRandomHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no houses in the server to deliver a gift to. Ask an admin to set them up.");
	}

	PlayerInfo[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    PlayerInfo[playerid][pNews] = 1;
	PlayerInfo[playerid][pLastNews] = gettime();
    PlayerInfo[playerid][pNewsTime] = 0;
    PlayerInfo[playerid][pNewsCooldown] = 60;

	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_NEWS;

	Dyuze(playerid, "Notice", "~w~Deliver to ~r~marker");
	SM(playerid, COLOR_WHITE, "** You loaded your News Paper Vehicle with a gift. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	return 1;
}

CMD:checkcargo(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkcargo [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_WHITE, "The player currently doesn't have a cargo to deliver.");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == -1)
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {28c12d}LEGAL PRODUCTS");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == ILLEGAL_GUNS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL WEAPONS");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == ILLEGAL_MATS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL MATERIALS");
	}
	if(PlayerInfo[targetid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
   		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL DRUGS");
	}
	return 1;
}

CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a trucker.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 499 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule, Benson or a Boxville.");
	}
	if(PlayerInfo[playerid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no shipment loaded which you can deliver.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != PlayerInfo[playerid][pShipment])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of a business which accepts this type of load.");
	}

	if(gettime() - PlayerInfo[playerid][pLastLoad] < 20 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    {
        PlayerInfo[playerid][pACWarns]++;

        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastLoad]);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Teleport delivering", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 3) + 5;

	if(PlayerInfo[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 3000) + 500;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 3000) + 500;
    } else if(PlayerInfo[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 3000) + 1000;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 3000) + 390;
 	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 3000) + 240;
	}

	amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
 		amount = amount*2;
   		SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}
	SM(playerid, COLOR_AQUA, "** You have earned "SVRCLR"$%i{33CCFF} for delivering %i products.", amount, products);
	GivePlayerCash(playerid, amount);
	/*if(PlayerInfo[playerid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
		switch(random(4))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_RED, "You have received 5 grams of pot as a reward for delivering illegal drugs.");
				PlayerInfo[playerid][pPot] += 5;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = pot + 5 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
	    	case 1:
			{
				SCM(playerid, COLOR_RED, "You have received 5 grams of meth as a reward for delivering illegal drugs.");
    			PlayerInfo[playerid][pMeth] += 5;
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = meth + 5 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
	    	case 2:
	    	{
				SCM(playerid, COLOR_RED, "You have received 5 grams of crack as a reward for delivering illegal drugs.");
   				PlayerInfo[playerid][pCrack] += 5;
   				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = crack + 5 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
	    	case 3:
			{
				SCM(playerid, COLOR_RED, "SPECIAL REWARD: You have received 5 grams of crack, pot & meth for delivering the drugs.");
   				PlayerInfo[playerid][pCrack] += 5;
      			PlayerInfo[playerid][pMeth] += 5;
      			PlayerInfo[playerid][pPot] += 5;
      			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = crack + 5, meth = meth + 5, pot = pot + 5 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
      		}
		}
	}
	if(PlayerInfo[playerid][pIllegalCargo] == ILLEGAL_MATS)
	{
		switch(random(2))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_RED, "You have received 200 materials as a reward for delivering illegal materials.");
    			PlayerInfo[playerid][pMaterials] += 200;
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + 200 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
	    	case 1:
			{
				SCM(playerid, COLOR_RED, "You have received 300 materials as a reward for delivering illegal materials.");
    			PlayerInfo[playerid][pMaterials] += 300;
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + 300 WHERE uid = %i", PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
    if(PlayerInfo[playerid][pIllegalCargo] == ILLEGAL_GUNS)
	{
		switch(random(5))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_RED, "SPECIAL REWARD: Shotgun");
    			GiveWeapon(playerid, 25);
			}
  			case 1:
			{
				SCM(playerid, COLOR_RED, "SPECIAL REWARD: Micro Uzi");
    			GiveWeapon(playerid, 28);
			}
  			case 2:
			{
				SCM(playerid, COLOR_RED, "SPECIAL REWARD: M4A1");
    			GiveWeapon(playerid, 31);
			}
		}
	}*/
	BusinessInfo[businessid][bProducts] += products;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pCourierCooldown] = 120;
	PlayerInfo[playerid][pIllegalCargo] = -1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}
CMD:loadtruck(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
	}
	if(PlayerInfo[playerid][pCourierCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another delivery.", PlayerInfo[playerid][pCourierCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 499 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule, Benson or a Boxville.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
	}
	if(PlayerInfo[playerid][pShipment] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a shipment loaded already. You need to deliver it first.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery supplies\nAmmunition\nClothing items\nFood & drinks\nBeverages\nIllegal Weapons\nIllegal Materials\nIllegal Drugs", "Select", "Cancel");
	return 1;
}

CMD:skill(playerid, params[]) return callcmd::skills(playerid, params);
CMD:skills(playerid, params[])
{
	new string[1024], jobstring1[64], jobstring2[64], jobstring3[64], jobstring4[64],
	jobstring6[64], jobstring7[64], jobstring8[64];
	if(GetJobLevel(playerid, JOB_COURIER) < 5)
	{
		if(PlayerInfo[playerid][pCourierSkill] < 50) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 50 - PlayerInfo[playerid][pCourierSkill]);
		} else if(PlayerInfo[playerid][pCourierSkill] < 100) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 100 - PlayerInfo[playerid][pCourierSkill]);
		} else if(PlayerInfo[playerid][pCourierSkill] < 200) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 200 - PlayerInfo[playerid][pCourierSkill]);
		} else if(PlayerInfo[playerid][pCourierSkill] < 350) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 350 - PlayerInfo[playerid][pCourierSkill]);
		}
	}
	else
	{
		format(jobstring1, sizeof(jobstring1), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	{
		if(PlayerInfo[playerid][pFishingSkill] < 50) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 50 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 100) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 100 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 200) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 200 - PlayerInfo[playerid][pFishingSkill]);
		} else if(PlayerInfo[playerid][pFishingSkill] < 350) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 350 - PlayerInfo[playerid][pFishingSkill]);
		}
	}
	else
	{
		format(jobstring2, sizeof(jobstring2), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_BODYGUARD) < 5)
	{
		if(PlayerInfo[playerid][pGuardSkill] < 25) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 25 - PlayerInfo[playerid][pGuardSkill]);
		} else if(PlayerInfo[playerid][pGuardSkill] < 50) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 50 - PlayerInfo[playerid][pGuardSkill]);
		} else if(PlayerInfo[playerid][pGuardSkill] < 100) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 100 - PlayerInfo[playerid][pGuardSkill]);
		} else if(PlayerInfo[playerid][pGuardSkill] < 200) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 200 - PlayerInfo[playerid][pGuardSkill]);
		}
	}
	else
	{
		format(jobstring3, sizeof(jobstring3),"You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	{
		if(PlayerInfo[playerid][pWeaponSkill] < 50) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 50 - PlayerInfo[playerid][pWeaponSkill]);
		} else if(PlayerInfo[playerid][pWeaponSkill] < 100) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 100 - PlayerInfo[playerid][pWeaponSkill]);
		} else if(PlayerInfo[playerid][pWeaponSkill] < 200) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 200 - PlayerInfo[playerid][pWeaponSkill]);
		} else if(PlayerInfo[playerid][pWeaponSkill] < 500) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 500 - PlayerInfo[playerid][pWeaponSkill]);
		}
	}
	else
	{
		format(jobstring4, sizeof(jobstring4), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	{
		if(PlayerInfo[playerid][pSmugglerSkill] < 25) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 25 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 50) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 50 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 75) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 75 - PlayerInfo[playerid][pSmugglerSkill]);
		} else if(PlayerInfo[playerid][pSmugglerSkill] < 100) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 100 - PlayerInfo[playerid][pSmugglerSkill]);
		}
	}
	else
	{
		format(jobstring6, sizeof(jobstring6), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	{
		if(PlayerInfo[playerid][pLawyerSkill] < 25) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 25 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 50) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 50 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 100) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 100 - PlayerInfo[playerid][pLawyerSkill]);
		} else if(PlayerInfo[playerid][pLawyerSkill] < 200) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 200 - PlayerInfo[playerid][pLawyerSkill]);
		}
	}
	else
	{
		format(jobstring7, sizeof(jobstring7), "You have reached the maximum skill level for this job.");
	}


	if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
	{
		if(PlayerInfo[playerid][pDetectiveSkill] < 50) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 50 - PlayerInfo[playerid][pDetectiveSkill]);
		} else if(PlayerInfo[playerid][pDetectiveSkill] < 100) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 100 - PlayerInfo[playerid][pDetectiveSkill]);
		} else if(PlayerInfo[playerid][pDetectiveSkill] < 200) {
			format(jobstring8, sizeof(jobstring8), "You need to find %i more people to level up.", 200 - PlayerInfo[playerid][pDetectiveSkill]);
		} else if(PlayerInfo[playerid][pDetectiveSkill] < 400) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 400 - PlayerInfo[playerid][pDetectiveSkill]);
		}
	}
	else
	{
		format(jobstring8, sizeof(jobstring8), "You have reached the maximum skill level for this job.");
	}


	format(string, sizeof(string), "Job Courier\t{ffff00}Level: %d\t%s\n" \
									"Job Lawyer\t{ffff00}Level: %d\t%s\n" \
									"Job Detective\t{ffff00}Level: %d\t%s\n" \
									"Job Fisherman\t{ffff00}Level: %d\t%s\n" \
									"Job Arms Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Drug Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Bodyguard\t{ffff00}Level: %d\t%s\n",
									GetJobLevel(playerid, JOB_COURIER), jobstring1,
									GetJobLevel(playerid, JOB_LAWYER), jobstring7,
									GetJobLevel(playerid, JOB_DETECTIVE), jobstring8,
									GetJobLevel(playerid, JOB_FISHERMAN), jobstring2,
									GetJobLevel(playerid, JOB_ARMSDEALER), jobstring4,
									GetJobLevel(playerid, JOB_DRUGDEALER), jobstring6,
									GetJobLevel(playerid, JOB_BODYGUARD), jobstring3);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""SVRCLR"Job Skills", string, "Close", "");
	return 1;
}

CMD:fish(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if(!IsPlayerAtFishingPlace(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not close to anywhere where you can fish.");
	}
	if(!PlayerInfo[playerid][pFishingRod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(PlayerInfo[playerid][pFishTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(PlayerInfo[playerid][pFishWeight] >= 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have too much fish and can't fish any longer.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

	//ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0, 1);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reels the line of their fishing rod into the water.", GetRPName(playerid));
	Dyuze(playerid, "Notice", "~w~Fishing...");

	PlayerInfo[playerid][pFishTime] = 6;

	if(PlayerInfo[playerid][pFishingBait] > 0)
	{
	    PlayerInfo[playerid][pFishingBait]--;
	    PlayerInfo[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    PlayerInfo[playerid][pUsedBait] = 0;
	}

	return 1;
}

CMD:sellfish(playerid, params[])
{
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any Supermarket business.");
	}
	if(!PlayerInfo[playerid][pFishWeight])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no fish which you can sell.");
	}

	new amount = (PlayerInfo[playerid][pFishWeight] * 1) + random(300)+50;

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}
	if(gDoubleSalary)
	{
 		amount = amount*2;
		SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	SM(playerid, COLOR_AQUA, "** You earned $%i for selling %i kg of fish.", amount, PlayerInfo[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}

	SCM(playerid, COLOR_GREEN, "My Fish:");
	SM(playerid, COLOR_GREY2, "You have %i/%i kg of fish in your inventory.", PlayerInfo[playerid][pFishWeight], GetJobLevel(playerid, JOB_FISHERMAN) * 50);
	return 1;
}

CMD:sellvest(playerid, params[])
{
	new targetid, amount;

	if(!PlayerHasJob(playerid, JOB_BODYGUARD))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Bodyguard.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellvest [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 100 || amount > 500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $100 and $500.");
	}
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}

	PlayerInfo[playerid][pLastSell] = gettime();
	PlayerInfo[targetid][pVestOffer] = playerid;
	PlayerInfo[targetid][pVestPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you a vest with 50 points of armor for $%i (/accept vest).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s a vest with 50 points of armor for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:getmats(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2737.242919, 115.554534, 4.392271))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any materials pickup.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 40000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $30000 in cash to smuggle materials.");
	}
    if(PlayerInfo[playerid][pMaterials] + 4000 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerInfo[playerid][pCP] = CHECKPOINT_MATS;
	PlayerInfo[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -40000);
	SCM(playerid, COLOR_AQUA, "** You paid $40000 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, -2737.242919, 115.554534, 4.392271))
	{
	    AddPointMoney(POINT_MATPICKUP1, 40000);
		SetPlayerCheckpoint(playerid, -1873.825439, 1417.714965, 7.176330, 3.0);
		PlayerInfo[playerid][pSmuggleMats] = 1;
	}
	return 1;
}

CMD:craftweapon(playerid, params[])
{
	new targetid, weapon[10], price;
    if(PlayerInfo[playerid][pGang] == -1 && PlayerInfo[playerid][pVIPPackage] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons from within a vehicle.");
	}
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SM(playerid, SERVER_COLOR, "Available Craftable Weapons:");

		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 1)
		{
		    SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Bat [1000], Shovel [1000], Golfclub [1000], Poolcue [1000]");
			SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Katana [1000] Cane [1000] Knuckles [1000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 2)
		{
			SCM(playerid, COLOR_YELLOW, "Level 2:"WHITE" 9mm [4000], Sdpistol [4000], Shotgun [5000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 3)
		{
			SCM(playerid, COLOR_YELLOW, "Level 3:"WHITE" MP5 [7000], Uzi [6000], Tec9 [6500]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 4)
		{
			SCM(playerid, COLOR_YELLOW, "Level 4:"WHITE" Deagle[6500]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 5)
		{
			SCM(playerid, COLOR_YELLOW, "Level 5:"WHITE" AK47 [9000], SNIPER [20000], M4A1 [10000]");
		}

		SCM(playerid, COLOR_SYNTAX, "Usage: /craftweapon [playerid] [name] [price]");
		return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 5;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a baseball bat for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 6;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shovel for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shovel for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "knuckles", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 1);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 1;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you knuckles for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s knuckles for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 2;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a golf club for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a golf club for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 7;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a pool cue for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a pool cue for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 8;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a katana for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a katana for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 15;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a cane for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a cane for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 4000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 22;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a 9mm for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a 9mm for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 4000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 23;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a silenced pistol for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 5000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 25;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shotgun for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shotgun for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 7000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 29;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an MP5 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an MP5 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "deagle", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 6500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 24);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 24;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Desert Eagle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Desert Eagle for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "uzi", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 6000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 28))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 28);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 28;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Micro Uzi for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Micro Uzi for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 6500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 32;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Tec-9 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "ak47", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 9000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 30))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 30);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 30;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an AK-47 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an AK-47 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "Sniper", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 20000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 34))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 34);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 34;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an Sniper for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an Sniper for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "m4", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 10000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 31))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 31);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 31;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an M4 $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an M4 for $%i.", GetRPName(targetid), price);
		}
	}
	return 1;
}

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRepair] < 20)
	{
		return SM(playerid, COLOR_SYNTAX, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRepair]));
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be repaired.");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
		PlayerInfo[playerid][pLastRepair] = gettime();

		RepairVehicle(vehicleid);
		SCM(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");

		SetVehicleHealth(vehicleid, 1000.0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s repairs the vehicle.", GetRPName(playerid));
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRefuel] < 20)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only refuel a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRefuel]));
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be refueled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be refueled.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	if(vehicleFuel[vehicleid] + 10 >= 100)
	{
		vehicleFuel[vehicleid] = 100;
	}
	else
	{
	    vehicleFuel[vehicleid] += 10;
	}

	PlayerInfo[playerid][pLastRefuel] = gettime();

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pours some gasoline to the vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle can't be modified with nitrous.");
    }

	AddVehicleComponent(vehicleid, 1009);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a 2x NOS Canister on the engine feed.", GetRPName(playerid));
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a set of hydraulics to the vehicle.", GetRPName(playerid));
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
 	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SCM(playerid, COLOR_SYNTAX, "There is no vehicle in range that you can tow.");
    }
    return 1;
}

CMD:impound(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC) && GetFactionType(playerid) != FACTION_POLICE)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a mechanic.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
    if(!VehicleInfo[vehicleid][vOwnerID] || !IsValidVehicle(vehicleid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can only impound player owned vehicles.");
	}
	if(VehicleInfo[vehicleid][vTickets] < 800)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only impound vehicles with over $800 unpaid tickets.");
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "> Dispatch: %s %s has impounded a %s with %s unpaid tickets.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vTickets]));

	VehicleInfo[vehicleid][vPosX] = 2477.2937;
	VehicleInfo[vehicleid][vPosY] = -1947.3767;
	VehicleInfo[vehicleid][vPosZ] = 13.4822;
	VehicleInfo[vehicleid][vPosA] = 0.0000;
    VehicleInfo[vehicleid][vInterior] = 0;
    VehicleInfo[vehicleid][vWorld] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:untow(playerid, params[])
{
	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, detaching it from the vehicle.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid) && GetInsideGarage(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a gas station or inside of a garage.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fuel tank in this vehicle is already full.");
	}
	if(PlayerInfo[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}

	if(PlayerInfo[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -PlayerInfo[playerid][pRefuelAmount]);
        SM(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for $%i.", PlayerInfo[playerid][pRefuelAmount]);

        PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
        PlayerInfo[playerid][pRefuelAmount] = 0;
	}
	else
	{
	    if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	    {
         	return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before proceeding.");
	    }

		PlayerInfo[playerid][pRefuel] = vehicleid;
		PlayerInfo[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s begins to refuel their vehicle's gas tank.", GetRPName(playerid));
		SM(playerid, COLOR_WHITE, "** This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}

CMD:bank(playerid, params[])
{
    new string[128];

    if(IsPlayerInRangeOfPoint(playerid, 10.0, 292.768981, 1345.343017, 2023.838012))
    {
        format(string, sizeof(string), "Welcome_Back_%s", GetRPName(playerid));
        PlayerTextDrawSetString(playerid, BankTD1[playerid][3], string);
        format(string, sizeof(string), "No._Acccount:_%d", playerid);
        PlayerTextDrawSetString(playerid, BankTD1[playerid][4], string);
        format(string, sizeof(string), "$%d", PlayerInfo[playerid][pBank]);
        PlayerTextDrawSetString(playerid, BankTD1[playerid][5], string);
        ShowBank1(playerid);
        ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
        SelectTextDraw(playerid,0x33AA33AA);
        return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "Your not in Any Banks.");
	return 1;
}

/*CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /withdraw [amount] ($%i available)", PlayerInfo[playerid][pBank]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	PlayerInfo[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from your bank account. Your new balance is $%i.", amount, PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(PlayerInfo[playerid][pAdminDuty] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command wont work as you're on duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /deposit [amount]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	PlayerInfo[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i into your bank account. Your new balance is $%i.", amount, PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}

	SM(playerid, COLOR_YELLOW, "Your bank account balance is $%i.", PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rsms [text]");
	}
	if(PlayerInfo[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't received a text by anyone since you joined the server.");
	}
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pJailType] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
    }
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTogglePhone])
    {
        return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SM(PlayerInfo[playerid][pTextFrom], COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), PlayerInfo[playerid][pPhone], params);
    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(PlayerInfo[playerid][pTextFrom]), PlayerInfo[PlayerInfo[playerid][pTextFrom]][pPhone], params);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}*/

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /wiretransfer [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or hasn't logged in yet.");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself.");
	}

	PlayerInfo[targetid][pBank] += amount;
	PlayerInfo[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), PlayerInfo[playerid][pBank]);
	SM(targetid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
	//Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}
CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	SCM(playerid, COLOR_SYNTAX, "/phone to reply/text someone");
	return 1;
}

/*CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms [number] [message]");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPhone] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): %.*s... **", GetRPName(playerid), PlayerInfo[playerid][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): ...%s **", GetRPName(playerid), PlayerInfo[playerid][pPhone], msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %.*s... **", GetRPName(i), PlayerInfo[i][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): ...%s **", GetRPName(i), PlayerInfo[i][pPhone], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), PlayerInfo[playerid][pPhone], msg);
		        SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(i), PlayerInfo[i][pPhone], msg);
			}

			if(PlayerInfo[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
			}

			PlayerInfo[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}*/

CMD:texts(playerid, params[])
{
    if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", PlayerInfo[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}
CMD:phone(playerid, params[])
{
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
    if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pConstructionTime] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pLootTime] > 0)
	    return SCM(playerid, COLOR_GREY, "You're currently unable to use phone at this moment.");

	SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Use /cursor to get your cursor back active.");

/*    for(new i = 0; i < 32; i++) {
		TextDrawShowForPlayer(playerid, PhoneTD[i]);
	}
	TextDrawShowForPlayer(playerid, PhoneCloseTD);
	TextDrawShowForPlayer(playerid, MessageTD);
	TextDrawShowForPlayer(playerid, ContactsTD);
	TextDrawShowForPlayer(playerid, CameraTD);
	TextDrawShowForPlayer(playerid, BankTD);
	TextDrawShowForPlayer(playerid, SettingTD);
	TextDrawShowForPlayer(playerid, TwitterTD);
	TextDrawShowForPlayer(playerid, GpsTD);
	TextDrawShowForPlayer(playerid, CallTD);
	TextDrawShowForPlayer(playerid, AppTD);*/
	ShowLock(playerid);
	SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	ShowActionBubble(playerid, "* %s takes out their phone.", GetRPName(playerid));
	return 1;
}

CMD:phoneclose(playerid, params[])
{
    HideLock(playerid);
	CancelSelectTextDraw(playerid);
	return 1;
}
CMD:call(playerid, params[])
{
  SCM(playerid, COLOR_SYNTAX, "Use /Phone to Call");
}
/*CMD:call(playerid, params[])
{
	new number;
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a call in session. /(h)angup to end that call.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	if(number == 911)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(number == 6397)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is SANews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(number == 6324)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(number == 8294)
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the cab company. Please state your location and destination.");
		return 1;
	}
	else if(number == 666)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
	    return 1;
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPhone] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This player is currently in a call. Wait until they hang up.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}
			if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    return SCM(playerid, COLOR_SYNTAX, "That player is currently in a live interview and can't talk on the phone.");
	        }

	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

			PlayerInfo[playerid][pCallLine] = i;
			PlayerInfo[playerid][pCallStage] = 0;

			PlayerInfo[i][pCallLine] = playerid;
			PlayerInfo[i][pCallStage] = 1;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
			SendProximityMessage(i, 20.0, SERVER_COLOR, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));

	        SM(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
	        SM(i, COLOR_YELLOW, "** Incoming call from #%i. Use /pickup to take this call.", PlayerInfo[playerid][pPhone]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "That number is either not in service or the owner is offline.");
	return 1;
}

CMD:call(playerid, params[])
{
	new number;
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	SCM(playerid, COLOR_SYNTAX, "/phone to call someone");
	return 1;
}*/

CMD:fpm(playerid, params[])
{
    return callcmd::firstperson(playerid, params);
}
CMD:firstperson(playerid, params[]) {

    if(!firstperson[playerid])
    {
        firstperson[playerid] = 1;
        new iObjectID = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        SetPVarInt(playerid, "FP_OBJ", iObjectID);
        AttachObjectToPlayer(iObjectID, playerid, 0.0, 0.11, 0.7, 0.0, 0.0, 0.0);
        AttachCameraToObject(playerid, iObjectID);
    }
    else {

        firstperson[playerid] = 0;
        DestroyObject(GetPVarInt(playerid, "FP_OBJ"));
        DeletePVar(playerid, "FP_OBJ");
        SetCameraBehindPlayer(playerid);
    }
    return 1;
}

CMD:superman(playerid,params[])
{
    new Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	if((flying[playerid] = !flying[playerid]))
	{
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+5);
		SetPlayerArmour(playerid, 1000000000.0);
		SetPlayerHealth(playerid, 1000000000.0);
		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+0.5);
		ClearAnimations(playerid);
		SetPlayerArmour(playerid, 100.0);
		SetPlayerHealth(playerid, 100.0);
		return 1;
	}
	}
	else
	{
        SendClientMessage(playerid, COLOR_SYNTAX, "   You are not authorized to use that command!");
	}
	return 1;
}

CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallStage] != 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no incoming calls which you can answer right now.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	PlayerInfo[PlayerInfo[playerid][pCallLine]][pCallStage] = 2;
	PlayerInfo[playerid][pCallStage] = 2;

	SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat to talk to the caller.");
	SCM(PlayerInfo[playerid][pCallLine], COLOR_WHITE, "** They answered the call. You can now speak in chat to talk to them.");
	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no calls in session which you can hangup.");
	}
	for(new i = 0; i < 32; i++) {
	TextDrawHideForPlayer(playerid, PhoneTD[i]);
	}
	TextDrawHideForPlayer(playerid, BankTD);
	TextDrawHideForPlayer(playerid, MessageTD);
	TextDrawHideForPlayer(playerid, TwitterTD);
	TextDrawHideForPlayer(playerid, ContactsTD);
	TextDrawHideForPlayer(playerid, PhoneCloseTD);
	TextDrawHideForPlayer(playerid, SettingTD);
	TextDrawHideForPlayer(playerid, CameraTD);
	TextDrawHideForPlayer(playerid, CallTD);
	TextDrawHideForPlayer(playerid, AppTD);
	TextDrawHideForPlayer(playerid, GpsTD);
	CancelSelectTextDraw(playerid);
	for(new i = 0; i < 13; i ++)
	{
		TextDrawHideForPlayer(playerid, CallingTD[i]);
	}
	for(new g = 0; g < 5; g++) {
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
	}
	TextDrawHideForPlayer(playerid, CloseCallTD);
	TextDrawHideForPlayer(playerid, PICKUP);
	TextDrawHideForPlayer(playerid, HANGUP);
	HangupCall(playerid, HANGUP_USER);
	StopAudioStreamForPlayer(playerid);
	return 1;
}
CMD:stats(playerid, params[]) return DisplayStats(playerid);
CMD:toggc(playerid) return callcmd::tog(playerid, "global");
CMD:inv(playerid, params[])
{
	return callcmd::inventory(playerid, params);
}

CMD:inventory(playerid, params[])
{
	DisplayInventory(playerid);
	return 1;
}
CMD:ddedit(playerid, params[]) return callcmd::editentrance(playerid, params);
CMD:gotoid(playerid, params[]) return callcmd::goto(playerid, params);

CMD:togturfs(playerid) return callcmd::toggle(playerid, "turfs");
CMD:togpm(playerid) return callcmd::toggle(playerid, "pm");
CMD:togfam(playerid) return callcmd::toggle(playerid, "gang");
CMD:togcrew(playerid) return callcmd::toggle(playerid, "crew");
CMD:togwhisper(playerid) return callcmd::toggle(playerid, "whisper");
CMD:tognews(playerid) return callcmd::toggle(playerid, "news");
CMD:tognewbie(playerid) return callcmd::toggle(playerid, "newbie");
CMD:togchatanim(playerid) return callcmd::toggle(playerid, "chatanim");
CMD:tog(playerid, params[]) return callcmd::toggle(playerid, params);
CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /(tog)gle [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Textdraws, OOC, Global, Phone, Newbie, PortableRadio, Radio, Streams, News, Lands");
		SCM(playerid, COLOR_WHITE, "Available options: SpawnCam, HUD, Admin, Helper, VIP, Faction, Gang, Whisper, PM, Turfs, Points, ChatAnim");
	}
	else if(!strcmp(params, "textdraws", true))
	{
	    if(!PlayerInfo[playerid][pToggleTextdraws])
	    {
	        HideGPSTextdraw(playerid);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);

			/*#if defined Christmas
	#else
  				PlayerTextDrawHide(playerid, EventTextdraw[playerid]);
			#endif*/

	        TextDrawHideForPlayer(playerid, TimeTD);
	        

	        PlayerInfo[playerid][pToggleTextdraws] = 1;
	        SCM(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	        if(PlayerInfo[playerid][pGPSOn])
	        {
	            ShowGPSTextdraw(playerid);
	        }
	        if(PlayerInfo[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerInfo[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	        }

			/*#if defined Christmas
	#else
  				PlayerTextDrawShow(playerid, EventTextdraw[playerid]);
			#endif*/

	        PlayerInfo[playerid][pToggleTextdraws] = 0;
	        SCM(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!PlayerInfo[playerid][pToggleOOC])
	    {
	        PlayerInfo[playerid][pToggleOOC] = 1;
	        SCM(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleOOC] = 0;
	        SCM(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "chatanim", true))
	{
	    if(!PlayerInfo[playerid][pChatAnim])
	    {
	        PlayerInfo[playerid][pChatAnim] = 1;
	        SCM(playerid, COLOR_AQUA, "Chat animation enabled.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pChatAnim] = 0;
	        SCM(playerid, COLOR_AQUA, "Chat animation disabled.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pToggleGlobal])
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 1;
	        SCM(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 0;
	        SCM(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PlayerInfo[playerid][pTogglePhone])
	    {
	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You can't do this while in a call.");
	        }

	        PlayerInfo[playerid][pTogglePhone] = 1;
	        SCM(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTogglePhone] = 0;
	        SCM(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!PlayerInfo[playerid][pAdmin])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not an admin and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleAdmin])
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 1;
	        SCM(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 0;
	        SCM(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!PlayerInfo[playerid][pHelper])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleHelper])
	    {
	        PlayerInfo[playerid][pToggleHelper] = 1;
	        SCM(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHelper] = 0;
	        SCM(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pToggleNewbie])
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 1;
	        SCM(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 0;
	        SCM(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "portableradio", true))
	{
	    if(!PlayerInfo[playerid][pWalkieTalkie])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
		}

	    if(!PlayerInfo[playerid][pToggleWT])
	    {
	        PlayerInfo[playerid][pToggleWT] = 1;
	        SCM(playerid, COLOR_AQUA, "Portable Radio toggled. You will no longer receive any messages on your Portable Radio.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWT] = 0;
	        SCM(playerid, COLOR_AQUA, "Portable Radio enabled. You will now receive messages on your Portable Radio again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!PlayerInfo[playerid][pToggleRadio])
	    {
	        PlayerInfo[playerid][pToggleRadio] = 1;
	        SCM(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleRadio] = 0;
	        SCM(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!PlayerInfo[playerid][pToggleMusic])
	    {
	        PlayerInfo[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SCM(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleMusic] = 0;
	        SCM(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!PlayerInfo[playerid][pVIPPackage])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a VIP member and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleVIP])
	    {
	        PlayerInfo[playerid][pToggleVIP] = 1;
	        SCM(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleVIP] = 0;
	        SCM(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleFaction])
	    {
	        PlayerInfo[playerid][pToggleFaction] = 1;
	        SCM(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleFaction] = 0;
	        SCM(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(PlayerInfo[playerid][pGang] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleGang])
	    {
	        PlayerInfo[playerid][pToggleGang] = 1;
	        SCM(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGang] = 0;
	        SCM(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!PlayerInfo[playerid][pToggleNews])
	    {
	        PlayerInfo[playerid][pToggleNews] = 1;
	        SCM(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNews] = 0;
	        SCM(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "lands", true))
	{
	    callcmd::lands(playerid, "\1");
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(PlayerInfo[playerid][pToggleWhisper] == 0)
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 1;
	        SCM(playerid, COLOR_AQUA, "Whisper chat disabled. You have blocked all incoming whispers.");
		}
		else
		{
		    PlayerInfo[playerid][pToggleWhisper] = 0;
		    SCM(playerid, COLOR_AQUA, "Whisper chat enabled. You will now receive whisper messages again.");
		}
	}
	else if(!strcmp(params, "pm", true))
	{
	    if(PlayerInfo[playerid][pTogglePM] == 0)
	    {
	        PlayerInfo[playerid][pTogglePM] = 1;
	        SCM(playerid, COLOR_AQUA, "PM chat disabled. You have blocked all incoming private messages.");
		}
		else
		{
		    PlayerInfo[playerid][pTogglePM] = 0;
		    SCM(playerid, COLOR_AQUA, "PM chat enabled. You will now receive private messages again.");
		}
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!PlayerInfo[playerid][pToggleCam])
	    {
	        PlayerInfo[playerid][pToggleCam] = 1;
	        SCM(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleCam] = 0;
	        SCM(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!PlayerInfo[playerid][pToggleHUD])
	    {
	        PlayerInfo[playerid][pToggleHUD] = 1;
	        SCM(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHUD] = 0;
	        SCM(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	    }
	}
	else if(!strcmp(params, "turfs", true))
	{
		if(!PlayerInfo[playerid][pShowTurfs])
		{
	    	ShowTurfsOnMap(playerid, true);
	    	ShowLandsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
		}
		else
		{
	    	ShowTurfsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
		}
	}
	else if(!strcmp(params, "points", true))
	{
		if(!ShowingBounds[playerid])
		{
		    GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C);
	    	ShowTurfsOnMap(playerid, false);
	    	ShowLandsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will now see points on your mini-map.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
			GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
			GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
			GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
			GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
			GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
			GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
			GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
			GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
			ShowingBounds[playerid] = 0;
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any points on your mini-map.");
		}
	}
	return 1;
}

CMD:jobinfo(playerid, params[])
{
	new title[128], str[2084];
	format(title, sizeof(title), "JOBS INFORMATION");
	strcat(str, ""WHITE"Trucker Job\t "GREEN"Legal"WHITE"/"RED"Illegal\t "YELLOW"A job that deliver goods to any business.\n");
	strcat(str, ""WHITE"Miner Job\t "GREEN"Legal\t "YELLOW"A job that mine rocks and you can mine diamonds here too.\n");
	strcat(str, ""WHITE"Harvester Job\t "GREEN"Legal\t "YELLOW"A job that harvest mariwana and more.\n");
	strcat(str, ""WHITE"MeatChopper Job\t "GREEN"Legal\t "YELLOW"A job that chops meat and deliver it to lab.\n");
	strcat(str, ""WHITE"Pizzaman Job\t "GREEN"Legal\t "YELLOW"A job that delivers pizza to neighborhood.\n");
	strcat(str, ""WHITE"Lawyer Job\t "GREEN"Legal\t "YELLOW"A job that defends a wanted person.\n");
	strcat(str, ""WHITE"Arms Dealer Job\t "RED"Illegal\t "YELLOW"A job that sells weapons.\n");
	strcat(str, ""WHITE"Drug Dealer Job\t "RED"Illegal\t "YELLOW"A job that sells drugs.\n");
	strcat(str, ""WHITE"Garbageman Job\t "GREEN"Legal\t "YELLOW"A job that take garbages around the nation.\n");
	strcat(str, ""WHITE"Bodyguard Job\t "GREEN"Legal"WHITE"/"RED"Illegal\t "YELLOW"A job that protects someone.\n");
    strcat(str, ""WHITE"Taxi Driver Job\t "GREEN"Legal\t "YELLOW"A public transporation driven by a player.\n");
    strcat(str, ""WHITE"Detective Job\t "GREEN"Legal"WHITE"/"RED"Illegal\t "YELLOW"A job that detects someone in the city.\n");
    strcat(str, ""WHITE"Fisherman Job\t "GREEN"Legal\t "YELLOW"A job that takes fish from ocean and sells them.\n");
	ShowPlayerDialog(playerid, DIALOG_JOBINFO, DIALOG_STYLE_TABLIST, title, str, "Okay!", "Okay!");
}

CMD:help(playerid, params[])
{
	new str[2084];
	strcat(str, ""SVRCLR"Help Commands:"WHITE" /report /reportdm (/newb)ie /tognewbie");

	strcat(str, ""SVRCLR"\nAccount Commands:"WHITE" /rules /serverstats /inventory /buylevel /upgrade /myupgrades /changepass /killcheckpoint");

	strcat(str, ""SVRCLR"\nChat Commands:"WHITE" /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /toggc /togfam /togcrew /togwhisper /tognews");

	strcat(str, ""SVRCLR"\nBank Commands:"WHITE" /balance /withdraw /deposit /wiretransfer /abalance /awithdraw /adeposit /awiretransfer /houseinvite");

	strcat(str, ""SVRCLR"\nGeneral Commands:"WHITE" /pay /charity /time /buy /id /music /showlicenses /clothes /buyclothes /finddealership /locate");

	strcat(str, ""SVRCLR"\nGeneral Commands:"WHITE" /skill /stopani /do /me /kill /drop /calculate /car /families /requesthelp /members /togchatanim");
	strcat(str, ""SVRCLR"\nGeneral Commands:"WHITE" /cancel /accept /eject /usepot /usecrack /blindfold /tie /contract /call /info /clearmyscreen\n");
	
	strcat(str, ""SVRCLR"\nRobbery Commands:"WHITE" /robbank /robjew /robbiz /robyacht\n");

	switch(PlayerInfo[playerid][pJob])
	{
		case JOB_FOODPANDA: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /getorder, /cancelcp.");
		case JOB_COURIER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /load, /deliver, /cancelcp.");
		case JOB_FISHERMAN: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /sellvest, /frisk.");
		case JOB_ARMSDEALER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /smugglemats, /craftgun.");
		case JOB_MINER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /mine, /cancelcp.");
		case JOB_BUTCHER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /packagemeat, /cancelcp.");
		case JOB_TAXIDRIVER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /setfare, /takecall.");
        case JOB_DRUGDEALER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
        case JOB_LAWYER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /defend, /free, /wanted.");
        case JOB_DETECTIVE: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /find.\n");
 	}

 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /getorder.");
			case JOB_COURIER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /load, /deliver.");
			case JOB_FISHERMAN: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /sellvest, /frisk.");
			case JOB_ARMSDEALER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /smugglemats, /craftgun.");
			case JOB_MINER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /mine.");
			case JOB_BUTCHER: strcat(str, "\n"SVRCLR"Job Commands:"WHITE" /packagemeat, /cancelcp.");
			case JOB_TAXIDRIVER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /setfare.");
	        case JOB_DRUGDEALER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /defend, /free, /wanted.");
	        case JOB_DETECTIVE: strcat(str, "\n"SVRCLR"Secondary Commands:"WHITE" /find.");
	 	}
	}
	strcat(str, "\n\n"SVRCLR"Other Commands:"WHITE" /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /leaderhelp /animhelp /fishhelp /insurehelp /businesshelp /bankhelp");
	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, ""GREY"GENERAL HELP", str, "Okay", "");
}
/*CMD:help(playerid)
{
	ShowDialogToPlayer(playerid, DIALOG_HELP);
	return 1;
}*/
CMD:locate(playerid, params[])
{
   SCM(playerid, COLOR_SYNTAX, "Use /Phone to Access GPS");
}
CMD:locatephone(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}
	if(isnull(params)) ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	else LocateMethod(playerid, params);
	return 1;
}

CMD:findjob(playerid, params[])
{
	return SendClientMessage(playerid, COLOR_WHITE, "This command is merged with [/locate], and if you want more jobs, use [/findsidejob]");
}

CMD:findsidejob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_SIDEJOB, DIALOG_STYLE_LIST, "Select Destination", "MeatChopper Sidejob\nHarvester Sidejob", "Select", "Close");
}

CMD:finddealership(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST3, DIALOG_STYLE_LIST, "Select Destination", "DMV\nBank\nCasino\nDrug Factory\nMaterials Pickup 1\nMaterials Pickup 2\nCar Dealership\nAirplane Dealership (Temporary Disabled)\nBoat Dealership\nMaterials Factory 1\nMaterials Factory 2\nHeisenbergs\nAirport Materials Depot\nMarina Materials Depot", "Select", "Close");
}

CMD:ccp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:kcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcheckpoint(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:cancelcp(playerid, params[])
{
	CancelActiveCheckpoint(playerid);
	PlayerInfo[playerid][pRobCash] = 0;
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(PlayerInfo[targetid][pAFK])
	{
	    SM(playerid, COLOR_WHITE, "** %s has been marked as Away from keyboard for %i minutes.", GetRPName(targetid), PlayerInfo[targetid][pAFKTime] / 60);
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** %s is currently not marked as Away from keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Away from Keyboard:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAFK])
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s - Time: %i seconds", i, GetRPName(i), PlayerInfo[i][pAFKTime]);
		}
	}

	return 1;
}

CMD:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}

CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
		{
			if(PlayerInfo[playerid][pToggleAtm] == 0)
			{
				PlayerInfo[playerid][pToggleAtm] = 1;
                ShowAtm(playerid);
				SelectTextDraw(playerid, COLOR_LIGHTBLUE);
				SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
				//ShowDialogToPlayer(playerid, DIALOG_ATM);
			}
			else
			{
				PlayerInfo[playerid][pToggleAtm] = 0;
				HideAtm(playerid);
				CancelSelectTextDraw(playerid);
			}
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
		if(PlayerInfo[playerid][pToggleAtm] == 0)
		{
			PlayerInfo[playerid][pToggleAtm] = 1;
            ShowAtm(playerid);
			SelectTextDraw(playerid, COLOR_LIGHTBLUE);
			SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
			//ShowDialogToPlayer(playerid, DIALOG_ATM);
		}
		else
		{
			PlayerInfo[playerid][pToggleAtm] = 0;
            HideAtm(playerid);
			CancelSelectTextDraw(playerid);
		}     	
	}
	return 1;
}

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /fixplayerid [playerid]");
	    SCM(playerid, COLOR_WHITE, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SCM(playerid, COLOR_WHITE, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SM(playerid, COLOR_WHITE, "** Player ID %i has been fixed.", targetid);
	return 1;
}

CMD:fixme(playerid, params[])
{
	if(!IsPlayerConnected(playerid))
	{
	    SSCANF_Leave(playerid);
	}
	else
	{
		SSCANF_Join(playerid, GetPlayerNameEx(playerid), IsPlayerNPC(playerid));
	}

	SM(playerid, COLOR_WHITE, "** Your Player Has Been Fixed Successfully", playerid);
	return 1;
}


CMD:disablevpn(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /disablevpn [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disabled joining with VPN.", GetRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has enabled joining with VPN.", GetRPName(playerid));
	}

	gDisabledVPN = status;
	return 1;
}

CMD:anticheat(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /anticheat [0/1]");
	}

	if(status) {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the server anticheat.", GetRPName(playerid));
	} else {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the server anticheat.", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

CMD:animhelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "** Animation: /dance, /wave, /point, /salute, /laugh, /cry, /deal, /sit, /lay, /fall, /handsup.");
	SCM(playerid, COLOR_WHITE, "** Animation: /tired, /cower, /crack, /injured, /fishing, /reload, /aim, /bomb, /checktime.");
	SCM(playerid, COLOR_WHITE, "** Animation: /dodge, /stop, /scratch, /what, /wash, /come, /hitch, /cpr, /slapass, /drunk.");
	SCM(playerid, COLOR_WHITE, "** Animation: /vomit, /fucku, /taichi, /shifty, /smoke, /chat, /lean, /wank, /crossarms.");
	SCM(playerid, COLOR_WHITE, "** Animation: /ghands, /rap, /dj, /walk, /fuckme, /bj, /kiss, /piss, /robman, /stopanim.");
	return 1;
}

CMD:dance(playerid, params[])
{
	new count, animname[32], animlib[32];

    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}	
	if(GetPlayerAnimationIndex(playerid) != 0)
	{
		ClearAnimations(playerid);
	} 
	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, SERVER_COLOR, "[USAGE]{ffffff} /dance [1-10]");
	}
	foreach(new i : Player) {
	    if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
		{
		    GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

			if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
			{
			    count++;
			}
	    }
	}
	if(count >= 5) {
	    foreach(new i : Player)
	    {
	        if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
			{
		    	GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));
	        }
		}
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0);
		default: SCM(playerid, COLOR_SYNTAX, "Usage: /wave [1-3]");
	}

	return 1;
}

CMD:point(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "panic_point", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0);
		default: SCM(playerid, COLOR_SYNTAX, "Usage: /point [1-2]");
	}

	return 1;
}

CMD:salute(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:cry(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:deal(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:sit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0);
	    case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 0, 0, 0, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
     	case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0);
       	case 8: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0);
       	case 9: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_Eat1", 4.1, 1, 0, 0, 0, 0);
       	case 10: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 0, 0, 0, 1, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /sit [1-10]");
	}

	return 1;
}

CMD:lay(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /lay [1-3]");
	}

	return 1;
}

CMD:fall(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0);
	    case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 0);
	    case 6: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /fall [1-6]");
	}

	return 1;
}

CMD:handsup(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "SHP_HandsUp_Scr", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:tired(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /tired [1-2]");
	}

	return 1;
}

CMD:hide(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cover(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cower(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0);
        case 4: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /crack [1-4]");
	}

	return 1;
}

CMD:injured(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /injured [1-2]");
	}

	return 1;
}

/*CMD:fishing(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0);
	return 1;
}*/

CMD:reload(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.1, 0, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /reload [1-4]");
	}

	return 1;
}

CMD:aim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SHOP", "ROB_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /aim [1-2]");
	}

	return 1;
}

CMD:bomb(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:checktime(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:dodge(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DODGE", "Crush_Jump", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stop(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "endchat_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:scratch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Scratchballs_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}



CMD:what(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:wash(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:come(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "WUZI", "Wuzi_follow", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Hiker_Pose", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:cpr(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:slapass(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:drunk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:vomit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:fucku(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:taichi(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:shifty(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:smoke(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /smoke [1-2]");
	}

	return 1;
}

CMD:chat(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 1, 1, 1, 1);
		default: SCM(playerid, COLOR_SYNTAX, "Usage: /chat [1-9]");
	}

	return 1;
}

CMD:lean(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /lean [1-2]");
	}

	return 1;
}

CMD:wank(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:traffic(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /traffic [1-2]");
	}

	return 1;
}

CMD:rap(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_B_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_LOOP", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /rap [1-3]");
	}

	return 1;
}

CMD:dj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /dj [1-4]");
	}

	return 1;
}

CMD:crossarms(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SCM(playerid, COLOR_SYNTAX, "Usage: /crossarms [1-3]");
	}

	return 1;
}

CMD:ghands(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0);
		default: SCM(playerid, COLOR_SYNTAX, "Usage: /ghands [1-10]");
	}

	return 1;
}

CMD:walk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "PED", "WALK_shuffle", 4.1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimationEx(playerid, "PED", "WALK_Wuzi", 4.1, 1, 1, 1, 1, 1);
		case 11: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1);
		case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1);
		case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1);
		case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1);
		case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walkpro", 4.1, 1, 1, 1, 1, 1);
		default: SCM(playerid, COLOR_SYNTAX, "Usage: /walk [1-15]");
	}

	return 1;
}

/*CMD:fuckme(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEW", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEP", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "SNM", "SPANKINGW", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "SNM", "SPANKINGP", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SNM", "SPANKEDW", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SNM", "SPANKEDP", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDW", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDP", 4.1, 0, 1, 1, 1, 0);
        default: SCM(playerid, COLOR_SYNTAX, "Usage: /fuckme [1-8]");
	}

	return 1;
}*/

CMD:bj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 1, 1, 1, 0);
		case 9: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 1, 1, 1, 0);
		case 12: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 0);
        default: SCM(playerid, COLOR_SYNTAX, "Usage: /bj [1-12]");
	}

	return 1;
}

CMD:kiss(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

    switch(strval(params))
	{
		case 1: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USAGE: /kiss [1-6]");
	}
    return 1;
}

/*CMD:piss(playerid, params[])
{
    if(!PlayerUseAnims(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}*/

CMD:robman(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

    ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:stopani(playerid, params[])
{
	return callcmd::stopanim(playerid, params);
}

CMD:stopanim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use this command at this moment.");
	}

    PlayerInfo[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SCM(playerid, COLOR_SYNTAX, "Animations cleared.");
    return 1;
}

CMD:gmx(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gmx [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command save all player accounts and restarts the server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already called for a server restart. You can't cancel it.");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(PlayerInfo[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
			PlayerInfo[i][pHurt] = 0;
	    	TogglePlayerControllable(i, 0);
	    	SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", GetRPName(playerid));
		}
		SavePlayerVariables(i);
		Dyuze(playerid, "Notice", "~w~Updating server...");
	}

	SCM(playerid, COLOR_WHITE, "** The server will restart once all accounts have been saved.");
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Change password", "Enter your new password:", "Submit", "Cancel");
	return 1;
}

CMD:toys(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothes(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64];

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s"WHITE"", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot"WHITE"", string, i + 1);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, "My clothing items", string, "Select", "Cancel");
	return 1;
}

CMD:wat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
}

CMD:dat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}
}

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1490.284545, 1305.569702, 1093.296386))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Licensing department.");
	}
	if(PlayerInfo[playerid][pCarLicense])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have your drivers license already.");
	}
	if(PlayerInfo[playerid][pDrivingTest])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already taking your drivers test.");
	}
	if(PlayerInfo[playerid][pCash] < 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need $100 to pay the licensing fee if you pass the test.");
	}

	SCM(playerid, COLOR_WHITE, "** You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SCM(playerid, COLOR_WHITE, "** Once you have passed the test, you will receive your license and pay a $100 licensing fee.");

	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pDrivingTest] = 1;
	PlayerInfo[playerid][pTestCP] = 0;
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
	static string[4096];
	PlayerInfo[playerid][pGangCar] = 0;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 599.914916, -1508.440673, 15.190327))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"SVRCLR"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		PlayerInfo[playerid][pGangCar] = 0;
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
    	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Boats"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYBOAT, DIALOG_STYLE_TABLIST_HEADERS, "Boat Dealership", string, "Buy", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
     	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Aircraft Dealership", string, "Buy", "Cancel");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any dealership.");
	}
	return 1;
}

CMD:removepveh(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepveh [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

/*CMD:vstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::vstorage(playerid, params);
}*/
CMD:sb(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:hm(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:helmet(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}

CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to you.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
 	SM(playerid, COLOR_AQUA, "You have parked your "SVRCLR"%s{CCFFFF} which will spawn in this spot from now on.", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't give keys to yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] == vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives %s the keys to their %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has given you the keys to their "SVRCLR"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have given %s the keys to your "SVRCLR"%s{CCFFFF}.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't take keys from yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have the keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes back the keys to their %s from %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has taken back the keys to their "SVRCLR"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have taken back the keys to your "SVRCLR"%s{CCFFFF} from %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:trackcar(playerid, params[])
{
	return callcmd::findcar(playerid, params);
}

CMD:findcar(playerid, params[])
{
    new string[128], count;

 	string = "#\tModel\tLocation";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SCM(playerid, COLOR_SYNTAX, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:robyacht(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5, 267.896453, -2154.955322, 2.272335))
    {
        SCM(playerid, COLOR_WHITE, "Your aren't near in the yacth vault!");
        return 1;
    }
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob an yacht.");
		return 1;
	}
	new	iSuccess;
	foreach(Player, i)
	{
		if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
		{
			iSuccess ++;
		}
	}
	if(iSuccess < 4)
	{
		return SCM(playerid, COLOR_GREY, "Must need 4 Active Leo's to rob yacht.");
	}
    if (Robyacht[playerid] == 0 )
    {
        SCM(playerid, COLOR_RED, "You have robbed the Yacht Now Wait for Cops to Show Up!!!");
        Robyacht[playerid] = 1;
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
		
		    new rand = random(sizeof(YATCHMONEY));
	        PlayerInfo[playerid][pDirtyCash] += YATCHMONEY[rand];
            TogglePlayerControllable(playerid, 1);
            
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET DirtyCash = %i WHERE uid = %i", PlayerInfo[playerid][pDirtyCash], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		
        foreach(Player, i) if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
		{
			new szMessage[128];
			format(szMessage, sizeof(szMessage), "ALERT: (ROBBER: %s) Is Robbing the YACHT!",GetPlayerNameEx(playerid));
  	        new szString[250];
	        format(szString, sizeof(szString), "YATCHROBBERY: %s had Started the YATCH Robbery", GetRPName(playerid));
      	    SendDiscordMessage(25, szString);
			SCM(i, COLOR_BLUE, szMessage);
		}
    }
    else
    {
        SCM(playerid, COLOR_WHITE, "[INFO]:ROB YACHT IS IN COOLDOWN!");
    }
    return 1;
}

CMD:kshop(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 870.425903, -24.951305, 63.982223))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Kayoperiko Shop.");
	}
    ShowPlayerDialog(playerid, DIALOG_KAYOPERIKO, DIALOG_STYLE_LIST, "Kayoperiko Shop", "Hacker Laptop/Hammer ($3,000)\nJail Break Tool ($3,000)", "Select", "Cancel");
    return 1;
}

CMD:setradar(playerid, arg[])
{
	new Float:x, Float:y, Float:z, Float:fa;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, fa);

	x = (x + 3.0 * floatsin(-fa,degrees));
	y = (y + 3.0 * floatcos(-fa,degrees));

    SetRadarMap(x, y, z);
	return 1;
}

CMD:tune(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 957.266540, -1669.904907, 13.635804) && !IsPlayerInRangeOfPoint(playerid, 5.0, 963.934387, -1656.234375, 13.635804))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tuning place.");
	}
	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""SVRCLR"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
	return 1;
}

CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you upgrade this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 963.934387, -1656.234375, 13.635804) && !IsPlayerInRangeOfPoint(playerid, 5.0, 957.266540, -1669.904907, 13.635804))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range at mechanic warehouse.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash | neon | plate]");
	}

	if(!strcmp(option, "stash", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash] [confirm]");
	        SM(playerid, COLOR_WHITE, "Your vehicle's stash level is at %i/3. Upgrading your stash will cost you $1000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle's stash is already at its maximum level.");
		}
		/*if(PlayerInfo[playerid][pCash] < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to upgrade your trunk.");
		}*/

		VehicleInfo[vehicleid][vTrunk]++;

		//GivePlayerCash(playerid, -1000);
		//Dyuze(playerid, "Notice", "~r~-$1000");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Added Stash level %i/3. '/vstash balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
		//Log_Write("log_property", "%s (uid: %i) upgraded the stash of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [neon] [color] (costs $3000)");
			SCM(playerid, COLOR_GREY2, "List of colors: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    /*if(PlayerInfo[playerid][pCash] < 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least $30,000 to upgrade your neon.");
		}*/
		if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't support neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    /*GivePlayerCash(playerid, -3000);
		    Dyuze(playerid, "Notice", "~r~-$3000");*/

			SCM(playerid, COLOR_YELLOW, "Added red neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    /*GivePlayerCash(playerid, -3000);
			Dyuze(playerid, "Notice", "~r~-$3000");*/

			SCM(playerid, COLOR_YELLOW, "Added blue neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    /*GivePlayerCash(playerid, -3000);
			Dyuze(playerid, "Notice", "~r~-$3000");*/

			SCM(playerid, COLOR_YELLOW, "Added green neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    /*GivePlayerCash(playerid, -3000);
			Dyuze(playerid, "Notice", "~r~-$3000");*/

			SCM(playerid, COLOR_YELLOW, "Added yellow neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    /*GivePlayerCash(playerid, -3000);
			Dyuze(playerid, "Notice", "~r~-$3000");*/
			SCM(playerid, COLOR_YELLOW, "Added pink neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    /*GivePlayerCash(playerid, -3000);
			Dyuze(playerid, "Notice", "~r~-$3000");*/

			SCM(playerid, COLOR_YELLOW, "Added white neon. You can use /neon to toggle your neon.");
			//Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [plate] [text]");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no license plate. Therefore you can't buy this upgrade.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

	    /*GivePlayerCash(playerid, -2000);
		Dyuze(playerid, "Notice", "~r~-$2000");*/

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "Added license plate '%s'. Changes will take effect once vehicle is parked.", param);
		//Log_Write("log_property", "%s (uid: %i) paid $2000 to set the license plate of their %s (id: %i) to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    Dyuze(playerid, "Notice", "~g~Neon activated");

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    Dyuze(playerid, "Notice", "~r~Neon deactivated");

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:bp(playerid, params[]) { return callcmd::backpack(playerid, params); }
CMD:backpack(playerid, params[])
{
    if(PlayerInfo[playerid][pBackpack] != 0)
    {
		new option[14], param[32];
	 	if(sscanf(params, "s[14]S()[32]", option, param))
		{
	 		return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [wear | balance | deposit | withdraw]");
	 	}
		if(!strcmp(option, "wear", true))
		{
		    if(PlayerInfo[playerid][pJoinedEvent])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
			}
		    if(!PlayerInfo[playerid][bpWearing])
		    {
		        if(PlayerInfo[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his small backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(PlayerInfo[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his medium backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(PlayerInfo[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his large backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
    			PlayerInfo[playerid][bpWearing] = 1;
			}
			else
			{
		        if(PlayerInfo[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his small backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				else if(PlayerInfo[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his medium backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				else if(PlayerInfo[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his large backpack from his back.", GetRPName(playerid));
					PlayerInfo[playerid][bpWearing] = 0;
				}
				RemovePlayerAttachedObject(playerid, 1);
				return 1;
			}
		}
		if(PlayerInfo[playerid][bpWearing])
		{
			if(!strcmp(option, "balance", true))
		 	{
    			new count;

				for(new i = 0; i < 15; i ++)
    			{
		        	if(PlayerInfo[playerid][bpWeapons][i])
          			{
            			count++;
          			}
       			}
				SCM(playerid, SERVER_COLOR, "Backpack Balance:");
    			SM(playerid, COLOR_GREY2, "(Cash: $%i/$%i)", PlayerInfo[playerid][bpCash], GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				SM(playerid, COLOR_GREY2, "(Materials: %i/%i) | (Weapons: %i/%i)", PlayerInfo[playerid][bpMaterials], GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS), count, GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS));
		        SM(playerid, COLOR_GREY2, "(Pot: %i/%i grams) | (Crack: %i/%i grams)", PlayerInfo[playerid][bpPot], GetBackpackCapacity(playerid, STASH_CAPACITY_WEED), PlayerInfo[playerid][bpCrack], GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
		        SM(playerid, COLOR_GREY2, "(Meth: %i/%i grams) | (Painkillers: %i/%i pills)", PlayerInfo[playerid][bpMeth], GetBackpackCapacity(playerid, STASH_CAPACITY_METH), PlayerInfo[playerid][bpPainkillers], GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
          		SCM(playerid, SERVER_COLOR, "Backpack Ammunition:");
				SM(playerid, COLOR_GREY2, "(HP Ammo: %i/%i) | (Poison Ammo: %i/%i)", PlayerInfo[playerid][bpHPAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO), PlayerInfo[playerid][bpPoisonAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
	            SM(playerid, COLOR_GREY2, "(FMJ Ammo: %i/%i)", PlayerInfo[playerid][bpFMJAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				return 1;
			}
			else if(!strcmp(option, "deposit", true))
		 	{
				new value;

				if(sscanf(param, "s[14]S()[32]", option, param))
		  		{
		    		SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [option]");
		      		SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
		        	SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
			        return 1;
		    	}
			    if(!strcmp(option, "cash", true))
				{
		  			if(sscanf(param, "i", value))
					{
						return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [cash] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpCash] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_CASH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to $%i at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				    }

				    GivePlayerCash(playerid, -value);
				    PlayerInfo[playerid][bpCash] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored $%i in your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [materials] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMaterials] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i materials at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS));
				    }

				    PlayerInfo[playerid][pMaterials] -= value;
				    PlayerInfo[playerid][bpMaterials] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [pot] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpPot] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of pot at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_WEED));
				    }

				    PlayerInfo[playerid][pPot] -= value;
				    PlayerInfo[playerid][bpPot] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [Crack] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpCrack] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of Crack at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
				    }

				    PlayerInfo[playerid][pCrack] -= value;
				    PlayerInfo[playerid][bpCrack] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [meth] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMeth] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of meth at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_METH));
				    }

				    PlayerInfo[playerid][pMeth] -= value;
				    PlayerInfo[playerid][bpMeth] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [painkillers] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpPainkillers] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i painkillers at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				    }

				    PlayerInfo[playerid][pPainkillers] -= value;
				    PlayerInfo[playerid][bpPainkillers] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new weaponid;

	   			    if(sscanf(param, "i", weaponid))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
					}
					if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
					}
					if(GetHealth(playerid) < 60)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
					}
					for(new i = 0; i < GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS); i ++)
					{
						if(!PlayerInfo[playerid][bpWeapons][i])
	   				    {
							PlayerInfo[playerid][bpWeapons][i] = weaponid;

							RemovePlayerWeapon(playerid, weaponid);
							SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your backpack.", GetWeaponNameEx(PlayerInfo[playerid][bpWeapons][i]), i + 1);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "This backpack has no more slots available for weapons.");
				}
	            else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [hpammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpHPAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i HP ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] - value);
				    PlayerInfo[playerid][bpHPAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [poisonammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpPoisonAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i  at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] - value);
				    PlayerInfo[playerid][bpPoisonAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [fmjammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][pFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpFMJAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i FMJ ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] - value);
				    PlayerInfo[playerid][bpFMJAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your backpack.", value);
	   			}
			}
	        else if(!strcmp(option, "withdraw", true))
		    {
		        new value;

		        if(sscanf(param, "s[14]S()[32]", option, param))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [option]");
		            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
		            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
		            return 1;
		        }
		        if(!strcmp(option, "cash", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [cash] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }

				    GivePlayerCash(playerid, value);
				    PlayerInfo[playerid][bpCash] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken $%i from your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [materials] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
					}

				    PlayerInfo[playerid][pMaterials] += value;
				    PlayerInfo[playerid][bpMaterials] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [pot] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
					}

				    PlayerInfo[playerid][pPot] += value;
				    PlayerInfo[playerid][bpPot] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [Crack] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
					}

				    PlayerInfo[playerid][pCrack] += value;
				    PlayerInfo[playerid][bpCrack] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [meth] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][bpMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
					}

				    PlayerInfo[playerid][pMeth] += value;
				    PlayerInfo[playerid][bpMeth] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [painkillers] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
					}

				    PlayerInfo[playerid][pPainkillers] += value;
				    PlayerInfo[playerid][bpPainkillers] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new slots = GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS);

	   			    if(sscanf(param, "i", value))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [weapon] [slot (1-%i)]", slots);
					}
					if(!(1 <= value <= slots))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
	   			    }
	   			    if(!PlayerInfo[playerid][bpWeapons][value-1])
	   			    {
	   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
					}

					GiveWeapon(playerid, PlayerInfo[playerid][bpWeapons][value-1]);
					SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your backpack.", GetWeaponNameEx(PlayerInfo[playerid][bpWeapons][value-1]), value);

					PlayerInfo[playerid][bpWeapons][value-1] = 0;
				}
	   			else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [hpammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pHPAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + value);
				    PlayerInfo[playerid][bpHPAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [poisonammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pPoisonAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + value);
				    PlayerInfo[playerid][bpPoisonAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
	       			if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [fmjammo] [amount]");
					}
					if(value < 1 || value > PlayerInfo[playerid][bpFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(PlayerInfo[playerid][pFMJAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + value);
				    PlayerInfo[playerid][bpFMJAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your backpack stash.", value);
	   			}
			}
		}
		else
		{
	 		return SCM(playerid, COLOR_SYNTAX, "You must be wearing your backpack to use these commands.");
	 	}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in possession of a backpack.");
	}
	return 1;
}

CMD:vstash(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 3; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 3; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to $%i at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPot] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of pot at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pPot] -= value;
			    VehicleInfo[vehicleid][vPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCrack] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of Crack at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCrack] -= value;
			    VehicleInfo[vehicleid][vCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "This vehicle has no more slots available for weapons.");
			}
            else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vHPAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i HP ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] - value);
			    VehicleInfo[vehicleid][vHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPoisonAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i  at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] - value);
			    VehicleInfo[vehicleid][vPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vFMJAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i FMJ ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] - value);
			    VehicleInfo[vehicleid][vFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your vehicle stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPot] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pPot] += value;
			    VehicleInfo[vehicleid][vPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pCrack] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCrack] += value;
			    VehicleInfo[vehicleid][vCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pHPAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pHPAmmo], GetPlayerCapacity(playerid, CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, PlayerInfo[playerid][pHPAmmo] + value);
			    VehicleInfo[vehicleid][vHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPoisonAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPoisonAmmo], GetPlayerCapacity(playerid, CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, PlayerInfo[playerid][pPoisonAmmo] + value);
			    VehicleInfo[vehicleid][vPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pFMJAmmo] + value > GetPlayerCapacity(playerid, CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pFMJAmmo], GetPlayerCapacity(playerid, CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, PlayerInfo[playerid][pFMJAmmo] + value);
			    VehicleInfo[vehicleid][vFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your vehicle stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SCM(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, -1);
	    SCM(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "ii", color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The color specified must range between 0 and 255.");
	}

    if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	ChangeVehicleColor(vehicleid, color1, color2);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "i", paintjobid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);

	return 1;
}

/*CMD:chopcar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid), count;

	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2077.838623, -2020.001708, 13.546875))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in the chopping place.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle.");
	}
    if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Chop chop cooldown %i hours. You can't chop it now.", RobberyInfo[rTime]);
	}

    foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to chop a car.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
		    SM(i, COLOR_ROYALBLUE, "(--------------------------[DESPATCH]-------------------------------)");
			SM(i, COLOR_ROYALBLUE, "ALLERT: Someone Is Trying to chop a car! All units respond immediately");
			SetPlayerCheckpoint(playerid, 2077.838623, -2020.001708, 13.546875, 3.0);
		}
	}

    GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 180000, 3);
	SetTimerEx("ChopCar", 180000, false, "i", playerid);

    SendClientMessage(playerid, COLOR_LIGHTBLUE, "wait 3min to successfully chop the vehicle and don't move or else you well field to chop the vehicle. ");
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s chopping the vehicle.", GetRPName(playerid));
    ResetRobbery();
	return 1;
}
*/
forward ChopCar(playerid, vehicleid);
public ChopCar(playerid, vehicleid)
{
    new chopchop;
	chopchop = Random(100000, 200000);
    GivePlayerDirtyCash(playerid, chopchop);
    SM(playerid, COLOR_YELLOW, "You have chop the %s to the chopShop and received $%i .", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Dyuze(playerid, "CHOPPED", "You have successfully chop the vehicle.");

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid);
    return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcar [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pCarOffer] = playerid;
	PlayerInfo[targetid][pCarOffered] = vehicleid;
	PlayerInfo[targetid][pCARPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their %s for $%i (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for $%i.", GetRPName(targetid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.6909, -1298.2206, 17.2362))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmycar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    //Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}

CMD:exchange(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 80.80737, 2503.08008, 2000.08765))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in the pawnshop.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

    strcat(string, "\nBusiness\tGives you a flagged Business (Any type)\t{F7A763}100 Diamonds{FFFFFF}");
	strcat(string, "\nHouse\tGives you a flagged Mansion House\t{F7A763}100 Diamonds{FFFFFF}");
	strcat(string, "\nDoor\tGives you a flagged entrance/door with your choice name.\t{F7A763}150 Diamonds{FFFFFF}");
	strcat(string, "\nGate\tGives you a flagged Gate\t{F7A763}50 Diamonds{FFFFFF}");
	strcat(string, "\nCar\tGives you a flagged Rare Car.(No Restricted Cars)\t{F7A763}75 Diamonds{FFFFFF}");

	format(title, sizeof(title), "Pawn Shop (You have %i diamond(s).)", PlayerInfo[playerid][pDiamonds]);
	ShowPlayerDialog(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Exchange", "Cancel");

	return 1;
}

CMD:podanjanuyir(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Miner.");
	}
	if(PlayerInfo[playerid][pMiningTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	}
	if(PlayerInfo[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the mining area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

    Dyuze(playerid, "Notice", "~w~Mining...");
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	PlayerInfo[playerid][pMiningTime] = 6;
	return 1;
}

CMD:chopmeat(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_BUTCHER))
	{
	    return SM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You can't use this command as you're not a Meat Packager.");
	}
	if(PlayerInfo[playerid][pPackageTime] > 0)
	{
	    return SM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You are chopping a meat already. Wait until you are done.");
	}
	if(PlayerInfo[playerid][pPackagingMeat] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You need to drop off your package first.");
	}
	if(!IsPlayerInButcherArea(playerid))
	{
	    return SM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You are not in range of the chopping area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SM(playerid, SERVER_COLOR, "[ERROR]{ffffff} You must be onfoot in order to use this command.");
	}

    Dyuze(playerid, "Notice", "~p~Chopping Meat...");
    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);

	PlayerInfo[playerid][pPackageTime] = 10;
	return 1;
}

CMD:v(playerid, params[])
{
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!enabledVip)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The VIP Chat is disabled by an administrator.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(v)ip [vip chat]");
	}
    if(PlayerInfo[playerid][pToggleVIP])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the VIP chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pVIPPackage] > 0 && !PlayerInfo[i][pToggleVIP])
	    {
			SM(i, COLOR_VIP, "** %s Donator %s: %s **", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:viplocker(playerid, params[]) return callcmd::donatorlocker(playerid, params);
CMD:donatorlocker(playerid, params[])
{
	if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't use this as you're currently restricted from possessing weapons!");
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
    if(IsPlayerInRangeOfPoint(playerid, 3, 1991.625488, 1017.629516, 994.890625))
    {
		ShowPlayerDialog(playerid, DIALOG_DGUN, DIALOG_STYLE_LIST, "Donator Gun Locker", "Firstaid\nArmor\nDeagle\nMP5", "Select", "Cancel");
	}
    return 1;
}

CMD:loyalbadge(playerid, params[])
{
	if(PlayerInfo[playerid][pHours] < 50)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot have this loyal badge as you didn't play atleast 50 hours yet.");
	}
	else
	{
	    PlayerInfo[playerid][pCustomTColor] = 0xAFAFAFFF;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i, customtitle = 'NW Loyal' WHERE uid = %i", PlayerInfo[playerid][pCustomTColor], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
        SCM(playerid, SERVER_COLOR, "NOTE:"WHITE" You got kicked to apply the changes with your badge, Please Reconnect...");
		KickPlayer(playerid);
	}
	return 1;
 }
 
CMD:vipcolor(playerid, params[])
{
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	if(!PlayerInfo[playerid][pVIPColor])
	{
        PlayerInfo[playerid][pVIPColor] = 1;
	    SCM(playerid, COLOR_AQUA, "** You have enabled the VIP nametag.");
	}
	else
	{

	    PlayerInfo[playerid][pVIPColor] = 0;
	    SCM(playerid, COLOR_AQUA, "** You have disabled the VIP nametag.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if((PlayerInfo[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your VIP subscription expires in less than 3 days. You can't do this now.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipinvite [playerid]");
	    SCM(playerid, COLOR_WHITE, "This command grants a temporary VIP subscription which lasts one hour to a player of your choice.");

	    if(PlayerInfo[playerid][pVIPCooldown] > gettime()) {
			SM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You have %i hours left until you can use it again.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SCM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You currently have no cooldown for this command.");
		}

		return 1;
	}
	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    return SM(playerid, COLOR_SYNTAX, "You have already used this command today. Please wait another %i hours.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pVIPPackage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has a VIP subscription.");
	}

	PlayerInfo[targetid][pVIPPackage] = 1;
	PlayerInfo[targetid][pVIPTime] = gettime() + 3600;
	PlayerInfo[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 1, viptime = 3600 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", PlayerInfo[playerid][pVIPCooldown], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "** %s has given you a temporary one hour donator package.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have given %s a temporary one hour donator package.", GetRPName(targetid));

	//Log_Write("log_vip", "%s Donator %s (uid: %i) has given %s (uid: %i) a temporary one hour package.", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	new time = PlayerInfo[playerid][pVIPTime] - gettime(), cooldown[24] = "{33CC33}No cooldown", string[32];

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	SCM(playerid, COLOR_LIGHTORANGE, "My Package:");

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""SVRCLR"%i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i days", time / 86400);
		}
	}

	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    time = PlayerInfo[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        format(cooldown, sizeof(cooldown), "{F7A763}%i hours", time / 3600);
		} else {
			format(cooldown, sizeof(cooldown), "{F7A763}%i minutes", time / 60);
	    }
	}

	SM(playerid, COLOR_WHITE, "Package: {C2A2DA}%s Donator", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]));
	SM(playerid, COLOR_WHITE, "Expires In: %s", string);
	SM(playerid, COLOR_WHITE, "Next Invite: %s", cooldown);
	return 1;
}
CMD:vipnumber(playerid, params[])
{
	new number;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipnumber [phone number]");
	    SCM(playerid, COLOR_WHITE, "This command costs $100,000 and changes your phone number to your chosen one.");
	    return 1;
	}
	if(PlayerInfo[playerid][pCash] < 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $100,000 for pay for this.");
	}
	if(number == 0 || number == 911 || number == 6397 || number == 6324 || number == 8294)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Taxi Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfare [amount]");
	}
	if(!(100 <= amount <= 500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fare must range between $100 and $500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in a taxi type vehicle.");
	}

	if(amount == 0)
	{
	    if(PlayerInfo[playerid][pTaxiFare] == 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to zero.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = 0;
	    SCM(playerid, COLOR_YELLOW, "** You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(PlayerInfo[playerid][pTaxiFare] == amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to this amount.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = amount;
	    SMA(COLOR_YELLOW, "** Taxi driver %s is now on duty, fare: $%i. /call 8294 for a ride.", GetRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(!PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createfaction [type] [name]");
		SCM(playerid, COLOR_GREY2, "List of types: Police, Medic, News, Government, Hitman, Federal, Mechanic, Terrorist, Army, CarDealer, Burger");
		return 1;
	}

	if(!strcmp(type, "police", true))
	{
	    type_id = FACTION_POLICE;
	}
	else if(!strcmp(type, "medic", true))
	{
	    type_id = FACTION_MEDIC;
	}
	else if(!strcmp(type, "news", true))
	{
	    type_id = FACTION_NEWS;
	}
	else if(!strcmp(type, "government", true))
	{
	    type_id = FACTION_GOVERNMENT;
	}
	else if(!strcmp(type, "hitman", true))
	{
	    type_id = FACTION_HITMAN;
	}
	else if(!strcmp(type, "federal", true))
	{
	    type_id = FACTION_FEDERAL;
	}
	else if(!strcmp(type, "mechanic", true))
	{
	    type_id = FACTION_MECHANIC;
	}
	else if(!strcmp(type, "terrorist", true))
	{
	    type_id = FACTION_TERRORIST;
	}
	else if(!strcmp(type, "army", true))
	{
	    type_id = FACTION_ARMY;
	}
	else if(!strcmp(type, "cardealer", true))
	{
	    type_id = FACTION_CARDEALER;
	}
	else if(!strcmp(type, "burger", true))
	{
	    type_id = FACTION_BURGER;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 1; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created a {F7A763}%s{FF6347} faction named '%s'.", GetRPName(playerid), factionTypes[type_id], name);
	        SM(playerid, COLOR_WHITE, "** This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(!PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, Locker, TurfTokens");
		return 1;
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadLockers(factionid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the short name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [type] [option]");
			SCM(playerid, COLOR_GREY2, "List of types: Police, Medic, News, Government, Hitman, Federal, Mechanic, Terrorist, Army");
			return 1;
		}

		if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "mechanic", true)) {
		    type_id = FACTION_MECHANIC;
		} else if(!strcmp(param, "terrorist", true)) {
		    type_id = FACTION_TERRORIST;
		} else if(!strcmp(param, "army", true)) {
		    type_id = FACTION_ARMY;
        } else if(!strcmp(param, "cardealer", true)) {
		    type_id = FACTION_CARDEALER;
		} else if(!strcmp(param, "burger", true)) {
		    type_id = FACTION_BURGER;
  		}

		if(type_id == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of faction ID %i to %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of faction ID %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SM(playerid, COLOR_SYNTAX, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the rank count of faction ID %i to %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of faction ID %i to '%s'.", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Paychecks:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}
		if(!(0 <= amount <= 200000))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $0 to $200000.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's paycheck of faction ID %i to $%i.", GetRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /setfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of faction ID %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SCM(playerid, COLOR_WHITE, "This option has been removed in favor of the dynamic locker system.");
	    SCM(playerid, COLOR_WHITE, "Use /dynamichelp for a list of commands related to dynamic lockers.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE && FactionInfo[factionid][fType] != FACTION_FEDERAL && FactionInfo[factionid][fType] != FACTION_ARMY)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of faction ID %i to %i.", GetRPName(playerid), factionid, amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /purgefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
	        ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
            SetPlayerSkin(i, 230);

	        PlayerInfo[i][pFaction] = -1;
	        PlayerInfo[i][pFactionRank] = 0;
	        PlayerInfo[i][pDivision] = -1;
	        PlayerInfo[i][pDuty] = 0;
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'Pending' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has purged faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	return 1;
}

CMD:setfaction(playerid, params[])
{
	new targetid, factionid, rankid;

	if(!PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, factionid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfaction [playerid] [factionid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(factionid == -1)
	{
     	ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        PlayerInfo[targetid][pFaction] = -1;
        PlayerInfo[targetid][pFactionRank] = 0;
        PlayerInfo[targetid][pDivision] = -1;
        PlayerInfo[targetid][pDuty] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    /*if(rankid == FactionInfo[factionid][fRankCount] - 1)
	    {
	        GetPlayerName(targetid, FactionInfo[factionid][fLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", FactionInfo[factionid][fLeader], factionid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		PlayerInfo[targetid][pFaction] = factionid;
		PlayerInfo[targetid][pFactionRank] = rankid;
		PlayerInfo[targetid][pDivision] = -1;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i WHERE uid = %i", factionid, rankid, PlayerInfo[playerid][pDivision], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:factions(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    SCM(playerid, SERVER_COLOR, "Factions:");

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE faction = %i", i);
	        mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);
	    }
	}

	return 1;
}

CMD:disconnectptradio(playerid, params[])
{
        if(PlayerInfo[playerid][pPrRadio] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "You need to connect a radio channel");
	    }
        PlayerInfo[playerid][pPrRadio] = 0;
        SendClientMessage(playerid, COLOR_CYAN, "Successfully disconnected from radio channel.");
		SvDetachListenerFromStream(StreamFreq[IDStream[playerid]], playerid);
		new string[128];
        format(string, sizeof(string), "0", playerid);
	    PlayerTextDrawSetString(playerid, PortableRadioTD[playerid][1], string);
	    return 1;
}

CMD:wtradio(playerid, params[])
{
    if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Walkie Talkie.");
	}
	else
	{
        PlayerTextDrawShow(playerid, PortableRadioTD[playerid][0]);
		PlayerTextDrawShow(playerid, PortableRadioTD[playerid][1]);
		PlayerTextDrawShow(playerid, PortableRadioTD[playerid][2]);
		PlayerTextDrawShow(playerid, PortableRadioTD[playerid][3]);
		PlayerTextDrawShow(playerid, PortableRadioTD[playerid][4]);
		SelectTextDraw(playerid, 0x24fc03FF);
	}
	return 1;
}

/*CMD:channel(playerid, params[])
{
	new channel;

	if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /channel [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The channel must range from 0 to 9999999.");
	}

	PlayerInfo[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SCM(playerid, COLOR_WHITE, "** You have set the channel to 0 and disabled your Portable Radio.");
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** Channel set to %i, use /pr to broadcast over this channel.", channel);
	}

	return 1;
}*/

/*CMD:pr(playerid, params[])
{
    if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pr [Portable Radio]");
	}
	if(!PlayerInfo[playerid][pChannel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your Portable Radio is not tuned into any channel. /channel to set one.");
	}
    if(PlayerInfo[playerid][pToggleWT])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your Portable Radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		if(PlayerInfo[i][pWalkieTalkie] && PlayerInfo[i][pChannel] == PlayerInfo[playerid][pChannel] && !PlayerInfo[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %.*s...", PlayerInfo[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: ...%s", PlayerInfo[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %s", PlayerInfo[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 5.0, 0x6DFB6DFF, "(Radio) %s",params);
	return 1;
}*/

CMD:g(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /g [global chat]");
	}
	if(!enabledGlobal && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pGlobalMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel.");
	}
    if(PlayerInfo[playerid][pToggleGlobal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the global chat as you have it toggled.");
	}
	if(gettime() - PlayerInfo[playerid][pLastGlobal] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastGlobal]));
	}

    if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0 && strcmp(PlayerInfo[playerid][pCustomTitle], "0", true) != 0) && strcmp(PlayerInfo[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFA500}", color >>> 8, PlayerInfo[playerid][pCustomTitle]);

	} else if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pAdminDuty]) {
		format(string, sizeof(string), "%s", GetAdminRank(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s", GetHelperRank(playerid));
	} else if(PlayerInfo[playerid][pFormerAdmin]) {
	    string = "Former Admin";
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "%s Donator", GetDonatorRank(PlayerInfo[playerid][pVIPPackage]));
	} else if(PlayerInfo[playerid][pLevel] >= 3) {
	    format(string, sizeof(string), "Level %i Player", PlayerInfo[playerid][pLevel]);
	} else {
        string = "Newbie";
	}

	foreach(new i : Player)
	{
		if(!PlayerInfo[i][pToggleGlobal])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
		        SM(i, COLOR_NEWS, "(( %s %s: %.*s... ))", string, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_NEWS, "(( %s %s: ...%s ))", string, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWS, "(( %s %s: %s ))", string, GetRPName(playerid), params);
			}
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pFormerAdmin])
	{
		PlayerInfo[playerid][pLastGlobal] = gettime();
	}

	return 1;
}

CMD:fc(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fc [faction chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
    if(PlayerInfo[playerid][pToggleFaction])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the faction chat as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, 0x00FFFFFF, "[/fc] %s %s: %.*s... **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, 0x00FFFFFF, "[/fc] %s %s: ...%s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x00FFFFFF, "[/fc] %s %s: %s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /div [division chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pDivision] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == PlayerInfo[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(r)adio [faction radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	new color = (FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleRadio])
	    {

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    SM(i, color, "** %s %s: %.*s... **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			    SM(i, color, "** %s %s: ...%s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, color, "** %s %s: %s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}
	SetPlayerBubbleText(playerid, 5.0, color, "(Radio) %s",params);
	return 1;
}

/*CMD:d(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /d [department radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL:
	    {
			foreach(new i : Player)
			{
			    if((!PlayerInfo[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "** [%s] %s: %.*s... **", FactionInfo[PlayerInfo[playerid][pFaction]][fName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "** [%s] %s: ...%s **", FactionInfo[PlayerInfo[playerid][pFaction]][fName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "** [%s] %s: %s **", FactionInfo[PlayerInfo[playerid][pFaction]][fName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Radio) %s",params);
	return 1;
}*/

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}

    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "None", true))
	{
	    if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_ARMY:
	    {
			foreach(new i : Player)
			{
			    if((!PlayerInfo[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "** [%s] %s: %.*s... **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "** [%s] %s: ...%s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "** [%s] %s: %s **", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid, params[])
{
	new targetid, option[14], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /faction [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, RankName, Roster, Online, Quit, Offlinekick, Respawncars, Skin");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a faction.");
		}
		if(PlayerInfo[targetid][pGang] >= 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is apart of a gang and therefore can't join a faction.");
		}

		PlayerInfo[targetid][pFactionOffer] = playerid;
		PlayerInfo[targetid][pFactionOffered] = PlayerInfo[playerid][pFaction];

		SM(targetid, COLOR_AQUA, "** %s has invited you to join "SVRCLR"%s{CCFFFF} (/accept faction).", GetRPName(playerid), FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		SM(playerid, COLOR_AQUA, "** You have invited %s to join your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		//Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);

		ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        PlayerInfo[targetid][pFaction] = -1;
        PlayerInfo[targetid][pFactionRank] = 0;
        PlayerInfo[targetid][pDivision] = -1;
        PlayerInfo[targetid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /faction [rank] [playerid] [rankid (0-%i)]", PlayerInfo[playerid][pFactionRank]);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		PlayerInfo[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		//Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [quit] [confirm]");
	    }

	    SM(playerid, COLOR_AQUA, "You have quit %s as a "SVRCLR"%s{CCFFFF} (%i).", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		//Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);

	    ResetPlayerWeaponsEx(playerid);
        SetPlayerSkin(playerid, 230);

        PlayerInfo[playerid][pFaction] = -1;
        PlayerInfo[playerid][pFactionRank] = 0;
        PlayerInfo[playerid][pDivision] = -1;
        PlayerInfo[playerid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}

 		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[PlayerInfo[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their faction vehicles.", GetRPName(playerid), playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }

	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		FactionInfo[PlayerInfo[playerid][pFaction]][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", PlayerInfo[playerid][pFaction], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "rankname", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[PlayerInfo[playerid][pFaction]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[PlayerInfo[playerid][pFaction]][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [rankname] [slot (0-%i)] [name]", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount]))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid rank.");
		}
	    strcpy(FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", PlayerInfo[playerid][pFaction], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_YELLOW, "AdmWarning: %s has set rank %i's name of faction ID %i to '%s'.", GetPlayerNameEx(playerid), rankid, PlayerInfo[playerid][pFaction], rank);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /division [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[PlayerInfo[playerid][pFaction]][i], param, 32);
		        SM(playerid, COLOR_AQUA, "You have created division {FFA763}%s{CCFFFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", PlayerInfo[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SM(playerid, COLOR_SYNTAX, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == divisionid)
	        {
	            PlayerInfo[i][pDivision] = -1;
	            SCM(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SM(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{CCFFFF} (%i).", FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", PlayerInfo[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SCM(playerid, SERVER_COLOR, "Divisions List:");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[PlayerInfo[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }
	    if(PlayerInfo[targetid][pDivision] == divisionid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of that division.");
	    }
	    if(PlayerInfo[targetid][pDivision] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of another division.");
	    }

	    PlayerInfo[targetid][pDivision] = divisionid;

	    SM(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);
	    SM(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
	    if(PlayerInfo[targetid][pDivision] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is not apart of any division.");
	    }

	    SM(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);
	    SM(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:cells(playerid, params[])
{
	new status;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has opened all cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has closed all cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));

	return 1;
}


CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPrisonCells[i], 2.0))
	    {
	        if(!IsLawEnforcement(playerid))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are not authorized to open this cell.");
			}
			if(PlayerInfo[playerid][pDuty] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to open the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to close the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any prison cells.");
	return 1;
}

CMD:lopen(playerid, params[])
{
	if(!LandDoorCheck(playerid))
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any land door/gate which you can open.");
	}
	return 1;
}

/*CMD:lo(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[PlayerInfo[playerid][pFaction]][fLockerX], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerY], FactionInfo[PlayerInfo[playerid][pFaction]][fLockerZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your faction locker.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_TERRORIST, FACTION_ARMY:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS, FACTION_MECHANIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}

	return 1;
}*/

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid] [factionid] [rankid]");
	        SCM(playerid, COLOR_WHITE, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this faction for your fake badge.");
	    }

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank], FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: %s", GetRPName(playerid), params);
	SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
	return 1;
}

CMD:sto(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_TERRORIST, FACTION_ARMY:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Driver! Step out of the vehicle with your hands above your head!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

CMD:po(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_TERRORIST, FACTION_ARMY:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Pull your vehicle over to the side of the road and turn off the ignition!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
		case FACTION_MEDIC:
		{
		    SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Move to the right! FMD passing on your left!", GetRPName(playerid), params);
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: You have the right to remain silent.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 3000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Anything you say can and will be used against you in a court of law.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 4000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: You have the right to to an attorney, If you can not afford one, one will be appointed for you.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

CMD:mir(playerid, params[])
{
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}

/*CMD:priority(playerid, params[])
{
	new option[20], businessid;
	if(!IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(sscanf(params, "s[20]", option))
	{
	    SCM(playerid, COLOR_NEWS, "Command: /priority [name]");
		SCM(playerid, COLOR_NEWS, "[PRIORITY CMD]: available, onhold, end, ongoing");
		return 1;
	}
    if (!strcmp(params, "available", true))
    {
		TextDrawShowForPlayer(playerid, PriorityTD1);
		TextDrawHideForPlayer(playerid, PriorityTD2);
		TextDrawHideForPlayer(playerid, PriorityTD3);
		TextDrawHideForPlayer(playerid, PriorityTD4);
		HouseInfo[businessid][hRobbed] = 0;
		HouseInfo[businessid][hRobbing] = 0;
		BusinessInfo[businessid][bRobbed] = 0;
		BusinessInfo[businessid][bRobbing] = 0;
		ReloadHouse(businessid);
		ReloadBusiness(businessid);
		ResetRobbery();
    }
    else if (!strcmp(params, "onhold", true))
    {
        TextDrawShowForPlayer(playerid, PriorityTD2);
        TextDrawHideForPlayer(playerid, PriorityTD1);
        TextDrawHideForPlayer(playerid, PriorityTD3);
        TextDrawHideForPlayer(playerid, PriorityTD4);
    }
    else if (!strcmp(params, "end", true))
    {
        TextDrawShowForPlayer(playerid, PriorityTD3);
        TextDrawHideForPlayer(playerid, PriorityTD1);
        TextDrawHideForPlayer(playerid, PriorityTD2);
        TextDrawHideForPlayer(playerid, PriorityTD4);
    }
    else if (!strcmp(params, "ongoing", true))
    {
        TextDrawShowForPlayer(playerid, PriorityTD4);
        TextDrawHideForPlayer(playerid, PriorityTD1);
        TextDrawHideForPlayer(playerid, PriorityTD2);
        TextDrawHideForPlayer(playerid, PriorityTD3);
    }
    return 1;
}*/

CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(PlayerInfo[playerid][pHurt] && PlayerInfo[playerid][pTazer] == 0)
	{
	    return SM(playerid, COLOR_GREY, "You're too hurt to pull out your tazer. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}
	if(!PlayerInfo[playerid][pTazer])
	{
	    PlayerInfo[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches for their tazer gun.", GetRPName(playerid));

		GiveWeapon(playerid, 23, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    PlayerInfo[playerid][pTazer] = 0;
		SetPlayerWeapons(playerid);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts their tazer gun back in their duty belt.", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
		}
	}

	return 1;
}

CMD:takecuff(playerid, params[])
{
    new targetid;
    if(sscanf(params, "u", targetid))
    {
        return SM(playerid, COLOR_SYNTAX, "Usage: /takeacuff [playerid]");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
    if(PlayerInfo[targetid][pCuffed] <= 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "This player don't have any cuff left.");
    }
    PlayerInfo[targetid][pCuffed] = 0;
    return 1;
}

CMD:cuff(playerid, params[])
{
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't cuff yourself.");
	}
	if(PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already handcuffed.");
	}
	if(PlayerInfo[targetid][pTazedTime] == 0 && GetPlayerSpecialAction(targetid) != SPECIAL_ACTION_DUCK && GetPlayerAnimationIndex(targetid) != 1437)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player must either be tazed, crouched, or hands up.");
	}
	if(PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't handcuff an injured player.");
	}

	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[targetid][pCallLine], HANGUP_DROPPED);
	}

	PlayerInfo[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s tightens a pair of handcuffs around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	Dyuze(playerid, "Notice", "~r~Cuffed");
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && PlayerInfo[playerid][pAdminDuty] == 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't uncuff yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	

	PlayerInfo[targetid][pCuffed] = 0;
 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loosens the pair of handcuffs from around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	Dyuze(playerid, "Notice", "~g~Uncuffed");
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drag yourself.");
	}
	if(!PlayerInfo[targetid][pInjured] && !PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
	}
	

	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops dragging %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:carry(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /carry [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't carry yourself.");
	}
	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to carry them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}


CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't detain yourself.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			PlayerInfo[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws %s into their vehicle.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /charge [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't charge yourself.");
	}
	if(PlayerInfo[targetid][pWantedLevel] >= 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already at the maximum wanted level (6).");
	}

	PlayerInfo[targetid][pWantedLevel]++;
	PlayerInfo[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pCrimes], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

    //format(string, sizeof(string), "Breaking News"WHITE": %s %s has charged %s with %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	//SMA(COLOR_LIGHTGREEN, string);

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has charged %s with "SVRCLR"%s{9999FF}. **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	SM(targetid, COLOR_LIGHTRED, "** Officer %s has charged you with %s.", GetRPName(playerid), reason);
	//Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}

CMD:arrest(playerid, params[])
{
	new string[128], targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /arrest [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest a player with no active charges. /charge to add them.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = PlayerInfo[targetid][pWantedLevel] * 10;
	        fine = PlayerInfo[targetid][pWantedLevel] * 200;

	        if(PlayerInfo[targetid][pVIPPackage] == 1)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 25 percent to %i minutes.", minutes, percent(minutes, 25));
	            minutes = percent(minutes, 75);
	        }
	        else if(PlayerInfo[targetid][pVIPPackage] >= 2)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 50 percent to %i minutes.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }

		    PlayerInfo[targetid][pJailType] = 3;
    		PlayerInfo[targetid][pJailTime] = minutes * 20;
			PlayerInfo[targetid][pWantedLevel] = 0;
			PlayerInfo[targetid][pArrested]++;

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", PlayerInfo[targetid][pArrested], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

		    format(string, sizeof(string), "> News"WHITE": %s %s has completed their arrest. %s has been sent to jail for %i weeks.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
			SMA(COLOR_LIGHTGREEN, string);

    		SM(targetid, COLOR_AQUA, "** You've been arrested for %i minutes, fine: $%i.", minutes, fine);
    		//Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any arrest points.");
    return 1;
}

CMD:wanted(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_LAWYER))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a lawyer.");
	}

	SCM(playerid, SERVER_COLOR, "Wanted Players:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWantedLevel] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s - Wanted Level: %i", i, GetRPName(i), PlayerInfo[i][pWantedLevel]);
		}
	}

	return 1;
}

CMD:hfind(playerid, params[])
{
	new targetid;
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hfind [playerid]");
	}
	if(PlayerInfo[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", PlayerInfo[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}
 	PlayerInfo[playerid][pFindTime] = 20;
  	PlayerInfo[playerid][pDetectiveCooldown] = 28;
   	SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerInfo[playerid][pFindTime]);
	PlayerInfo[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:find(playerid, params[])
{
	new targetid;

    if(!PlayerHasJob(playerid, JOB_DETECTIVE))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Detective.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /find [playerid]");
	}
	if(PlayerInfo[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", PlayerInfo[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}

	switch(GetJobLevel(playerid, JOB_DETECTIVE))
	{
	    case 1:
	    {
	        PlayerInfo[playerid][pFindTime] = 6;
	        PlayerInfo[playerid][pDetectiveCooldown] = 120;
		}
		case 2:
	    {
	        PlayerInfo[playerid][pFindTime] = 8;
	        PlayerInfo[playerid][pDetectiveCooldown] = 90;
		}
		case 3:
	    {
	        PlayerInfo[playerid][pFindTime] = 10;
	        PlayerInfo[playerid][pDetectiveCooldown] = 60;
		}
		case 4:
	    {
	        PlayerInfo[playerid][pFindTime] = 12;
	        PlayerInfo[playerid][pDetectiveCooldown] = 30;
		}
		case 5:
	    {
	        PlayerInfo[playerid][pFindTime] = 14;
	        PlayerInfo[playerid][pDetectiveCooldown] = 15;
		}
	}

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerInfo[playerid][pFindTime]);

	IncreaseJobSkill(playerid, JOB_DETECTIVE);
	PlayerInfo[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:robplayer(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /robplayer [playerid]");
	}
	if(PlayerInfo[targetid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_GREY2, "You cant rob a person whos level is below 2. [Its against MGMC Rule]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command on yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	PlayerInfo[targetid][pSendRob] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has initiated a rob with you (/accept rob).", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have initiated a rob against %s.", GetRPName(targetid));
	return 1;
}


CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsLawEnforcement(playerid) || PlayerInfo[playerid][pDuty] == 0)
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    PlayerInfo[targetid][pFriskOffer] = playerid;

	    SM(targetid, COLOR_AQUA, "** %s is attempting to frisk you for illegal items. (/accept frisk)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "** You have sent a frisk offer to %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /take [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Pot, Crack, Meth, Painkillers, CarLicense");
	    SCM(playerid, COLOR_WHITE, "Available options: DirtyCash, GunLicense, Materials");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's weapons.", GetRPName(playerid), GetRPName(targetid));

	    SM(targetid, COLOR_AQUA, "%s has taken your weapons.", GetRPName(playerid));
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        SendDiscordMessage(6, szString);
        //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!PlayerInfo[targetid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no pot on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's pot.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of pot.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
	    //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPot]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPot]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!PlayerInfo[targetid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no Crack on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's Crack.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of Crack.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pCrack]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pCrack]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCrack] = 0;
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[targetid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no materials on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's materials.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i materials.", GetRPName(playerid), PlayerInfo[targetid][pMaterials]);
        //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMaterials]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMaterials]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMaterials] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[targetid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no meth on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's meth.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMeth]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMeth]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[targetid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's painkillers.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetRPName(playerid), PlayerInfo[targetid][pPot]);
        //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPainkillers]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPainkillers]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[targetid][pCarLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no driving license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's drivers license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetRPName(playerid));
	    //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCarLicense] = 0;
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(!PlayerInfo[targetid][pWeaponLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no gun license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's gun license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your gun license.", GetRPName(playerid));
	    //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pWeaponLicense] = 0;
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(!PlayerInfo[targetid][pDirtyCash])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no dirty cash on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's dirty cash.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your dirty cash.", GetRPName(playerid));
	    //Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        new szString[128];
        format(szString, sizeof(szString), "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
        SendDiscordMessage(6, szString);
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pDirtyCash] = 0;
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ticket [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't ticket yourself.");
	}
	if(!(10 <= amount <= 500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The ticket amount must range between $10 and $500.");
	}

	PlayerInfo[targetid][pTicketOffer] = playerid;
	PlayerInfo[targetid][pTicketPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s writes you a $%i ticket for %s. (/accept ticket)", GetRPName(playerid), amount, reason);
	SM(playerid, COLOR_AQUA, "** You have offered a $%i ticket to %s for %s.", amount, GetRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gov [text]");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_POLICE:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
        case FACTION_GOVERNMENT:
		{
	        SCMA(COLOR_WHITE, "---------- * Government News Announcement * ----------");
	        SMA(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_FEDERAL:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_MECHANIC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_TERRORIST:
		{
	        SCMA(COLOR_WHITE, "---------- * Terrorist Announcement * ----------");
	        SMA(COLOR_RED, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_ARMY:
		{
	        SCMA(COLOR_WHITE, "---------- * Army Announcement * ----------");
	        SMA(COLOR_DARKGREEN, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to use this command.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's house door.", GetRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's business door.", GetRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's garage door.", GetRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /deploy [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}

CMD:undeployall(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed all deployed objects.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}

CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any deployed objects.");
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot call for backup when you are dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
 		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
        {
    	    if(PlayerInfo[playerid][pBackup])
    	    {
    	        SM(i, COLOR_AQUA, "** %s %s is requesting backup in %s (marked on map). **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SM(i, COLOR_AQUA, "** %s %s has cancelled their backup request. **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid));
	}

    foreach(new i : Player)
	{
        if(PlayerInfo[playerid][pLogged])
		{
  			if(PlayerInfo[playerid][pBackup])
    			SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[PlayerInfo[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
			else
   				SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
		}
    }

	return 1;
}

CMD:mdc(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 560 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 521 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 523 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 541 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 497)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or the police station.");
	}

	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
	return 1;
}

CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /clearwanted [playerid]");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 560 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 521 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 523 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 541 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 497)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or the police station.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't clear yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	if(!(10 <= amount <= 500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $10 to $500.");
	}
	if(VehicleInfo[vehicleid][vTickets] >= 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has over $5000 in tickets. You can't add anymore.");
	}

	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s writes up a $%i ticket and attaches it to the %s.", GetRPName(playerid), amount, GetVehicleName(vehicleid));
	return 1;
}

CMD:siren(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle cannot have a siren attached to it.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}

    new count;

    for(new i = 0; i < 3; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SCM(playerid, SERVER_COLOR, "Trunk Balance:");
    SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
    //SCM(playerid, SERVER_COLOR, "Trunk Ammunition:");
	SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
    SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
	SM(playerid, SERVER_COLOR, "Vehicle Info:");
	SM(playerid, COLOR_GREY2, "Vehicle Plate: %s | Vehicle Owner: %s | Vehicle Gang: %s | Vehicle Faction: %s", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], GangInfo[VehicleInfo[vehicleid][vGang]][gName], FactionInfo[VehicleInfo[vehicleid][vFactionType]][fType]);
	if(count > 0)
	{
		SCM(playerid, COLOR_GREEN, "Trunk Weapons:");

    	for(new i = 0; i < 3; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s prys open the trunk of the %s and takes a look inside.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vtake [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Ammo, Pot, Crack, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the weapons from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		//Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "ammo", true))
	{
        VehicleInfo[vehicleid][vHPAmmo] = 0;
		VehicleInfo[vehicleid][vPoisonAmmo] = 0;
		VehicleInfo[vehicleid][vFMJAmmo] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = 0, poisonammo = 0, fmjammo = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the ammunition from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the ammunition from the trunk.");
		//Log_Write("log_faction", "%s (uid: %i) has taken the ammunition from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the pot from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of pot from the trunk.", VehicleInfo[vehicleid][vPot]);
		//Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of pot from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the Crack from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of Crack from the trunk.", VehicleInfo[vehicleid][vCrack]);
		//Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of Crack from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCrack] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the meth from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		//Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the painkillers from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		//Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:usebandage(playerid, params[])
{
	if(!PlayerInfo[playerid][pBandage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any bandage left.");
	}
	if(PlayerInfo[playerid][pBleed] != 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use any bandage as you are not bleeding.");
	}
	else
	{
		SetTimerEx("Bandage", 1000, false, "i", playerid);
		PlayerInfo[playerid][pBandage]--;
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving an ambulance.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        PlayerInfo[targetid][pVehicleCount] = 0;
	        PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places %s on a stretcher in the Ambulance.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}

/*CMD:cleanbody(playerid, params[])
{
	new targetid;
	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cleanbody [playerid]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command on yourself.");
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, PlayerInfo[targetid][pBodyPosX], PlayerInfo[targetid][pBodyPosX], PlayerInfo[targetid][pBodyPosX])) {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any dead bodies.");
	}
	GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("DEATHACTOREX", 10000, false, "ii", playerid, targetid);
	return 1;
}*/

CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 3000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1141.6477, -1326.3889, 13.6398) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.9587,-1308.0317,31.4935)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1159.8816, -1312.7484, 25.6864) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1158.471557, -1367.879028, 26.632408))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

    PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pDelivered] = 0;
	PlayerInfo[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.2429,-1364.5603,26.6488))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SCM(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
    }
	else
	{
		SCM(targetid, COLOR_DOCTOR, "You have been billed $200 for your stay. You also keep all of your weapons!");
	}

	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(targetid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	SetPlayerFacingAngle(targetid, hospitalspawns[rand][3]);

	SetPlayerInterior(targetid, 1);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -200);
		Dyuze(targetid, "Notice", "~w~Discharged~n~~r~-$200");
	}

	//TogglePlayerControllable(targetid, 1);
	if(gDoubleSalary)
	{
 		amount = amount*2;
   		SCM(playerid, COLOR_GREEN, "You have earned 2x of the salary.");
	}

	SetPlayerHealth(targetid, PlayerInfo[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, PlayerInfo[targetid][pSpawnArmor]);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	AddToPaycheck(playerid, amount);
	SM(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned "SVRCLR"$%i{CCFFFF} on your paycheck.", GetRPName(targetid), amount);
	return 1;
}

CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	SCM(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(PlayerInfo[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(PlayerInfo[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SM(playerid, COLOR_SYNTAX, "Name: %s - Location: %s - Medic: %s", GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SCM(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(PlayerInfo[targetid][pFirstAid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}

	PlayerInfo[targetid][pFirstAid] = 1;
	PlayerInfo[targetid][pBrokenLeg] = 0;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SCM(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!PlayerInfo[targetid][pInjured])
		    {
		        SCM(playerid, COLOR_SYNTAX, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(PlayerInfo[targetid][pAcceptedEMS]))
			{
				if(PlayerInfo[targetid][pJailTime] > 0) return SCM(playerid, COLOR_SYNTAX, "You can't use this command on jailed players.");
				SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetRPName(playerid), GetRPName(targetid));
				SM(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetRPName(targetid));
				SM(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				PlayerInfo[targetid][pAcceptedEMS] = playerid;
				Dyuze(playerid, "Notice", "~w~EMS Caller~n~~r~Go to the red marker.");
                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[]) { return callcmd::stretcher(playerid, params); }
CMD:deliverpt(playerid, params[]) { return callcmd::deliverpatient(playerid, params); }
CMD:movept(playerid, params[]) { return callcmd::drag(playerid, params); }

CMD:injuries(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /news [text]");
	}
	foreach(new i : Player)
	{
		if(!PlayerInfo[playerid][pToggleNews])
		{
 			SM(i, 0x489348FF, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:cctv(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /cctv [on/off]");
	}
	else if(!strcmp(params, "on", true))
	{
		PlayerMenu[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
		ShowMenuForPlayer(CCTVMenu[0], playerid);
	}
	else if(!strcmp(params, "off", true))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /live [playerid]");
	}
	if(PlayerInfo[playerid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is banned from live interviews.");
	}
	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is on a phone call at the moment.");
	}

	PlayerInfo[targetid][pLiveOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s offered you a live interview. (/accept live)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have offered %s a live interview.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
    if(PlayerInfo[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not doing a live interview.");
	}

	SCM(playerid, COLOR_AQUA, "You have ended the live interview.");
	SM(PlayerInfo[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetRPName(playerid));

	PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}

	if(!PlayerInfo[targetid][pLiveMuted])
	{
		if(PlayerInfo[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	PlayerInfo[PlayerInfo[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	PlayerInfo[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		PlayerInfo[targetid][pLiveMuted] = 1;
		SM(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pLiveMuted] = 0;
		SM(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settax [rate]");
	}
	if(!(10 <= amount <= 90))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The tax percentage must range from 10 to 90.");
	}

	gTax = amount;
	SaveServerInfo();

	format(string, sizeof(string), "Breaking News"WHITE": Mayor changed the income tax rate to %i percent.", amount);
	SMA(COLOR_LIGHTGREEN, string);

	SAM(COLOR_YELLOW, "AdmWarning: %s has adjusted the income tax rate to %i percent.", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	//Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /factionpay [factionid] (Use /factions for list.)");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || !FactionInfo[factionid][fType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if(FactionInfo[factionid][fType] == FACTION_GOVERNMENT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for government factions.");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
	}

	PlayerInfo[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 292.768981, 1345.343017, 2023.838012))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxwithdraw [amount] [reason] ($%i available)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, "AdmWarning: %s has withdrawn $%i from the tax vault, reason: %s", GetRPName(playerid), amount, reason);
	//Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 292.768981, 1345.343017, 2023.838012))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxdeposit [amount] ($%i available)", gVault);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the tax vault.", GetRPName(playerid), amount);
	//Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /contract [playerid] [amount] [reason]");
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at least level 3+ to contract players.");
	}
	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a hitman and therefore can't contract other players.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't contract yourself.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only contract level 3+ players.");
	}
	if(!(2000 <= amount <= 15000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $2000 to $15000.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SM(i, COLOR_YELLOW, "** %s has contracted %s for $%i, reason: %s [/contracts]", GetRPName(playerid), GetRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	PlayerInfo[targetid][pContracted] += amount;
	GetPlayerName(playerid, PlayerInfo[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = '%e' WHERE uid = %i", PlayerInfo[targetid][pContracted], PlayerInfo[targetid][pContractBy], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetRPName(targetid), amount, reason);
	SAM(COLOR_YELLOW, "AdmWarning: %s placed a contract on %s for $%i, reason: %s", GetRPName(playerid), GetRPName(targetid), amount, reason);
 	//Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
 	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Contracts:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pContracted] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty price: $%i | Last contracter: %s", i, GetRPName(i), PlayerInfo[i][pContracted], PlayerInfo[i][pContractBy]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has cancelled the contract on %s for $%i.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pContracted]);

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has cancelled the contract on %s for $%i. **", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pContracted]);
	}

	PlayerInfo[targetid][pContracted] = 0;
    strcpy(PlayerInfo[targetid][pContractBy], "Pending", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Pending' WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

	PlayerInfo[playerid][pContractTaken] = targetid;
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has accepted the contract to kill %s for $%i. **", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pContracted]);
	SM(playerid, COLOR_AQUA, "You have taken the hit. You will receive $%i once you have assassinated "SVRCLR"%s{CCFFFF}.", PlayerInfo[targetid][pContracted], GetRPName(targetid));
	return 1;
}

CMD:mask(playerid, params[])
{
	//new rand = Random(500, 900);
	if(!PlayerInfo[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Mask.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 ||  PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "You can't use this while on admin duty.");

	if(Maskara[playerid] == 0)
	{
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		Maskara[playerid] = 1;
		MaskaraID[playerid] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts on his/her mask.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
	}
	else
	{
	    foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
    	Maskara[playerid] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger takes off his/her mask.");
     	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		new string[128], name[MAX_PLAYER_NAME+1];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Maskara[i] == 1)
				{
					GetPlayerName(i, name, sizeof(name));
					format(string, sizeof(string),"%s %s (%d)\n", string, name, MaskaraID[i]);
				}
			}
		}
		SCM(playerid, -1, string);
	}
	return 1;
}

/*CMD:hbadge(playerid, params[])
{
	new factionid;
	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "i", factionid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /hbadge [factionid]");
		return 1;
	}
	SetPlayerColor(playerid, FactionInfo[factionid][fColor] & ~0xff);
    return 1;
}*/

CMD:propose(playerid, params[])
{
	new id, targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
	}
	if(PlayerInfo[playerid][pCash] < 750 || PlayerInfo[targetid][pCash] < 750)
	{
		return SCM(playerid, COLOR_SYNTAX, "You both need to have atleast $750 to have a wedding.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != -1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You're already married to %s.", PlayerInfo[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't marry yourself faggot.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $750. (/accept marriage)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a proposal for marriage.", GetRPName(targetid));
	return 1;
}

CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[playerid][pMarriedTo] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't even married.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[targetid][pID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't married to that person.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/accept divorce)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a request for divorce.", GetRPName(targetid));
	return 1;
}

CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s:", GetRPName(targetid));
	SM(playerid, COLOR_GREY2, "Gender: %s", (PlayerInfo[targetid][pGender] == 2) ? ("Female") : ("Male"));
	SM(playerid, COLOR_GREY2, "Age: %i years old", PlayerInfo[targetid][pAge]);

	if(PlayerInfo[targetid][pFaction] != -1)
	{
	    SM(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[PlayerInfo[targetid][pFaction]][fName]);
	    SM(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);
	}
	else
	{
	    SM(playerid, COLOR_GREY2, "Faction: None");
	}

	if(PlayerInfo[targetid][pContracted] > 0)
	{
		SM(playerid, COLOR_GREY2, "Contract: $%i", PlayerInfo[targetid][pContracted]);
		SM(playerid, COLOR_GREY2, "Last Contracter: %s", PlayerInfo[targetid][pContractBy]);
	}

	SM(playerid, COLOR_GREY2, "Completed Hits: %i", PlayerInfo[targetid][pCompletedHits]);
	SM(playerid, COLOR_GREY2, "Failed Hits: %i", PlayerInfo[targetid][pFailedHits]);
	return 1;
}

CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "USAGE: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_GREY, "Invalid faction.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SCM(playerid, COLOR_GREY, "Locker slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position, FactionID, Icon, Label, Uniform");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You have moved locker %i to your position.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SCMf(playerid, COLOR_SYNTAX, "USAGE: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You set locker %i's faction to %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SCMf(playerid, COLOR_AQUA, "* You've changed the pickup icon model of locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SCMf(playerid, COLOR_AQUA, "* You've enabled the 3D text label for locker %i.", lockerid);
		else
		    SCMf(playerid, COLOR_AQUA, "* You've disabled the 3D text label for locker %i.", lockerid);
	}
	else if(!strcmp(option, "uniform", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }

		SCM(playerid, COLOR_SYNTAX, "use the command /editfaction skin for the uniforms!");
	}
	/*else if(!strcmp(option, "weapons", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }
	    new inputtext[24], opt2[8], amount;
	    if(sscanf(param, "s[24]s[8]i", inputtext, opt2, amount))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [weapons] [weaponname] [option] [amount]");
            SendClientMessage(playerid, COLOR_GREEN, "Weapon Name: Kevlar, Medkit, Nitestick, Mace, Deagle, Shotgun, M4, MP5, Spas12, Sniper, Camera, FireExt, Painkillers");
			SendClientMessage(playerid, COLOR_YELLOW, "Options: Allow, Price");
			SendClientMessage(playerid, COLOR_ORANGE, "Amount: Price (amount), Allow (1 or 0)");
	        return 1;
	    }
		if(!strcmp(opt2, "allow", true))
		{
		    if(!(0 <= amount <= 1)) return SendClientMessage(playerid, COLOR_GREY, "Amount can be 1 or 0");
			if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			SCMf(playerid, COLOR_GREY, "Locker %i's %s status set to %i", lockerid, inputtext, amount);
		}
		else if(!strcmp(opt2, "price", true))
		{
            if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
		    SCMf(playerid, COLOR_GREY, "Locker %i's %s price set to %i", lockerid, inputtext, amount);
		}*/
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SCMf(playerid, COLOR_AQUA, "* You have removed locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(PlayerInfo[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPassportName]);
  		SetScriptSkin(playerid, PlayerInfo[playerid][pPassportSkin]);
		SCM(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pPassportLevel];
		PlayerInfo[playerid][pPhone] = PlayerInfo[playerid][pPassportPhone];
		PlayerInfo[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your level must range from 1 to 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pBombs])
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any bombs.");
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	PlayerInfo[playerid][pPlantedBomb] = 1;
	PlayerInfo[playerid][pBombObject] = CreateDynamicObject(19602, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;
	PlayerInfo[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too far away from your planted bomb.");
	}

	CreateExplosion(PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

	if(PlayerInfo[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(PlayerInfo[playerid][pContractTaken], 10.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    SetPlayerHealth(PlayerInfo[playerid][pContractTaken], 0.0);
	    HandleContract(PlayerInfo[playerid][pContractTaken], playerid);
	}

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;

	SCM(playerid, COLOR_WHITE, "** You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if(gettime() - gLastSave < 359 && PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 6 minutes. Please wait %i more seconds.", 359 - (gettime() - gLastSave));
	}
	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	    SM(i, COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetRPName(playerid));
	}
	gLastSave = gettime();
	return 1;
}
CMD:forcesave(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:saveall(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no boombox in range.");
	}

	SM(playerid, COLOR_AQUA, "You have destroyed "SVRCLR"%s{CCFFFF}'s boombox.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:resetfullrobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	ResetRobbery();
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the all active robbery in the city.", GetRPName(playerid));
	return 1;
}
CMD:resetrobberytime(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobberyInfo[rTime] = 0;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the Robbery timer.", GetRPName(playerid));
	return 1;
}

CMD:resetjew(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobberyInfo[rTime] = 0;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the Jew robbery timer.", GetRPName(playerid));
	return 1;
}

CMD:resetrobbiz(playerid, params[])
{
	new businessid;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobbiz [businessid]");
	    return 1;
	}
	BusinessInfo[businessid][bRobbed] = 0;
	BusinessInfo[businessid][bRobbing] = 0;
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset business (ID: %d) the business robbery timer.", GetRPName(playerid), businessid);
	return 1;
}
CMD:resetrobhouse(playerid, params[])
{
	new businessid;
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobhouse [businessid]");
	    return 1;
	}
	HouseInfo[businessid][hRobbed] = 0;
	HouseInfo[businessid][hRobbing] = 0;
	ReloadHouse(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[businessid][hRobbed], HouseInfo[businessid][hRobbing], HouseInfo[businessid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset house (ID: %d) the house robbery timer.", GetRPName(playerid), businessid);
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced a payday for %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givecarkeys(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(!IsCarDealer(playerid) && GetFactionType(playerid) != FACTION_CARDEALER)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of car dealers.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givecarkeys [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s has given you your own "SVRCLR"%s{CCFFFF}. goto public garage to spawn it.", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "You have given %s their own "SVRCLR"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);
	return 1;
}

CMD:givecarbill(playerid, params[])
{
	new targetid, amount;

	if(!IsCarDealer(playerid) && GetFactionType(playerid) != FACTION_CARDEALER)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of car dealers.");
	}
	if(sscanf(params, "uis[128]", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givecarbill [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SM(targetid, COLOR_AQUA, "AdmCmd: %s paid %s his/her car bill worth $%i", GetRPName(targetid), GetRPName(playerid), amount);
	//Log_Write("log_give", "%s (uid: %i) fined %s (uid: %i) for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount);
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s has given you your own "SVRCLR"%s{CCFFFF}. goto public garage to spawn it.", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "You have given %s their own "SVRCLR"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);
	new szString[128];
	format(szString, sizeof(szString), "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], vehicleNames[modelid - 400]);
	SendDiscordMessage(0, szString);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	//Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(hours < 1 && PlayerInfo[targetid][pDoubleXP] - hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't have under 0 hours of double XP.");
	}

	PlayerInfo[targetid][pDoubleXP] += hours;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %i hours of double XP to %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", PlayerInfo[targetid][pDoubleXP], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a random fire in %s.", GetRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SCM(playerid, COLOR_SYNTAX, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		PlayerInfo[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SM(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SCM(playerid, COLOR_SYNTAX, "Fire created!");
		}
	}

	SM(playerid, COLOR_SYNTAX, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /number [playerid]");
	}
	if(!PlayerInfo[playerid][pPhonebook])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY2, "(Name): %s, (Ph): %i", GetRPName(targetid), PlayerInfo[targetid][pPhone]);
	return 1;
}

CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!PlayerInfo[playerid][pBoombox])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /boombox [place | pickup | play]");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "Boombox placed by:\n"SVRCLR"%s{F7A763}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    PlayerInfo[playerid][pBoomboxPlaced] = 1;
    	PlayerInfo[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	PlayerInfo[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        PlayerInfo[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a boombox on the ground.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up their boombox and switches it off.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

    	PlayerInfo[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
    	if(GiftAllowed)
     	{
      		SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just sent a Gift to all players.", GetPlayerNameEx(playerid));
			GiftAllowed = 0;
			foreach(Player, i)
			{
			    GiftBox(playerid, i);
			}
		}
		else
		{
		    return SM(playerid, COLOR_GREY, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:switchspeedo(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /switchspeedo [kmh/mph]");
	}
	else if(!strcmp(params, "kmh", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 1;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Kilometers per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 2;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Miles per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type. Valid types range from 1 to 6.");
	}

	PlayerInfo[targetid][pShakeOffer] = playerid;
	PlayerInfo[targetid][pShakeType] = type;

	SM(targetid, COLOR_AQUA, "** %s has offered to shake your hand. (/accept handshake)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a handshake offer.", GetRPName(targetid));
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to drop weapons.");
	}
	if(!weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to drop.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(GetHealth(playerid) < 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);

	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerInfo[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s drops their %s on the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SM(playerid, COLOR_AQUA, "You have dropped your "SVRCLR"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:pickupgun(playerid, params[]) return callcmd::grabgun(playerid, params);
CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to pickup weapons.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && PlayerInfo[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapon belongs to a specific faction. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);

	    GiveWeapon(playerid, weaponid);
	    DestroyDynamicObject(i);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up a %s from the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have picked up a %s.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any dropped weapons.");
	return 1;
}

CMD:createland(playerid, params[])
{
	new price;

    if(PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createland [price]");
	}
	if(price < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $500,000.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create lands indoors.");
	}

	PlayerInfo[playerid][pLandCost] = price;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_LAND;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to set the land spawn.", "Confirm", "Cancel");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pZoneCreation])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating any land or turf at the moment.");
	}

    if(PlayerInfo[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMinX], y, z);
        PlayerInfo[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMinX], y, z, .playerid = playerid);
		SCM(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(PlayerInfo[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMinY], z);
        PlayerInfo[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMinY], z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(PlayerInfo[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMaxX], y, z);
        PlayerInfo[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMaxX], y, z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(PlayerInfo[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMaxY], z);
        SCM(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        PlayerInfo[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMaxY], z, .playerid = playerid);
        PlayerInfo[playerid][pZoneID] = GangZoneCreate(PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, PlayerInfo[playerid][pZoneID], 0x33CC33FF);

        if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gotoland(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removelandobjects(playerid, params[])
{
	new landid;

    if (PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removelandobjects [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	RemoveAllLandObjects(landid);
    SM(playerid, COLOR_AQUA, "** You have removed all land objects for land %i.", landid);
	return 1;
}

CMD:removeland(playerid, params[])
{
	new landid;

    if (PlayerInfo[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}
	RemoveAllLandObjects(landid);

	GangZoneDestroy(LandInfo[landid][lGangZone]);
	DestroyDynamicArea(LandInfo[landid][lArea]);
	DestroyDynamic3DTextLabel(LandInfo[landid][lText]);
	DestroyDynamicPickup(LandInfo[landid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM lands WHERE id = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LandInfo[landid][lID] = 0;
	LandInfo[landid][lExists] = 0;
	LandInfo[landid][lOwnerID] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed land %i.", landid);
	return 1;
}

CMD:buyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "This land is already owned.");
	}
    if(strcmp(params, "confirm", true))
    {
        return SM(playerid, COLOR_SYNTAX, "Usage: /buyland [confirm] (This land costs $%i.)", LandInfo[landid][lPrice]);
	}
	if(PlayerInfo[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this land.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this land! /landhelp to see the available commands for your land.", LandInfo[landid][lPrice]);
	//Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}

CMD:sellland(playerid, params[])
{
	new landid = GetNearbyLand(playerid), targetid, amount;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands of yours.");
    }
    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /sellland [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pLandOffer] = playerid;
	PlayerInfo[targetid][pLandOffered] = landid;
	PlayerInfo[targetid][pLandPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their land for $%i. (/accept land)", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your land for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands of yours.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyland [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your land back to the state. You will receive $%i back.", percent(LandInfo[landid][lPrice], 75));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your land to the state and received $%i back.", percent(LandInfo[landid][lPrice], 75));
    //Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:landinfo(playerid, params[])
{
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SM(playerid, COLOR_WHITE, "** This land is currently not owned and is for sale, price: "SVRCLR"$%i"WHITE".", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SM(playerid, COLOR_WHITE, "** This land is owned by %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}

CMD:land(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of a land.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!PlayerInfo[playerid][pMP3Player])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have an MP3 player.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any vehicle.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pLevel] * 15000)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need at least $%i to change your name at your level.", PlayerInfo[playerid][pLevel] * 15000);
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}

    PlayerInfo[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /acceptname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}
	if(PlayerInfo[targetid][pFreeNamechange] == 0 && PlayerInfo[targetid][pCash] < PlayerInfo[targetid][pLevel] * 7500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't afford the namechange.");
	}

	new cost = PlayerInfo[targetid][pLevel] * 500;

	if(PlayerInfo[targetid][pFreeNamechange])
	{
	    if(PlayerInfo[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_HITMAN || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, PlayerInfo[targetid][pPassportName], MAX_PLAYER_NAME);

	        PlayerInfo[targetid][pPassport] = 1;
	        PlayerInfo[targetid][pPassportLevel] = PlayerInfo[targetid][pLevel];
	        PlayerInfo[targetid][pPassportSkin] = PlayerInfo[targetid][pSkin];
	        PlayerInfo[targetid][pPassportPhone] = PlayerInfo[targetid][pPhone];
			PlayerInfo[targetid][pLevel] = PlayerInfo[targetid][pChosenLevel];
			PlayerInfo[targetid][pSkin] = PlayerInfo[targetid][pChosenSkin];
			PlayerInfo[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, PlayerInfo[targetid][pSkin]);
			//Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin], PlayerInfo[targetid][pPhone], PlayerInfo[targetid][pPassportName], PlayerInfo[targetid][pPassportLevel], PlayerInfo[targetid][pPassportSkin], PlayerInfo[targetid][pPassportPhone], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		//Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);
		//Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's free namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange]);
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", PlayerInfo[targetid][pNameChange]);
		if(!PlayerInfo[playerid][pLogged])
		{
  			ShowDialogToPlayer(targetid, DIALOG_REGISTER);
		}
		if(PlayerInfo[targetid][pFreeNamechange] == 2)
		{
		    SCM(targetid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
		}
	}
	else
	{
	    //Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);
		//Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's namechange to %s for %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange], FormatNumber(cost));
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", PlayerInfo[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
	}
	Namechange(targetid, GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}

	if(PlayerInfo[targetid][pFreeNamechange])
	{
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    //Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied %s's namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerInfo[targetid][pNameChange]);
	SM(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", PlayerInfo[targetid][pNameChange]);

	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Namechanges:");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pNameChange]))
	    {
	        SM(playerid, COLOR_GREY1, "(ID: %i) %s - Requested name: %s", i, GetRPName(i), PlayerInfo[i][pNameChange]);
		}
	}

	return 1;
}

CMD:getnationalid(playerid, params[])
{
    new price = 5000;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
    if(PlayerInfo[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't national id.");
    }
    if(PlayerInfo[playerid][pNationalID] >= 1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 national id.");
    }
    PlayerInfo[playerid][pNationalID] += 1;
    GivePlayerCash(playerid, -price);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET nationalid = %i WHERE uid = %i", PlayerInfo[playerid][pNationalID], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the cityhall desk and received national id.", GetRPName(playerid), price);
    SCM(playerid, COLOR_WHITE, "** National ID purchased. you can now get a job.");
	return 1;
}

CMD:getweaponlic(playerid, params[])
{
    new price = 40000;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
    if(PlayerInfo[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't national id.");
    }
	if(PlayerInfo[playerid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "The player has already have weapon license.");
	}
	PlayerInfo[playerid][pWeaponLicense] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[playerid][pWeaponLicense], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -price);
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the cityhall desk and received Weapon License.", GetRPName(playerid), price);
    SCM(playerid, COLOR_WHITE, "** Weapon License purchased. you are now licensed to use Guns.");
	return 1;
}


CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have paid $%i in unpaid tickets. This vehicle now has $%i left in unpaid tickets.", amount, VehicleInfo[vehicleid][vTickets]);
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}

	new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	SM(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
	SM(playerid, COLOR_GREY2, "(Owner: %s) - (Value: $%i) - (Tickets: $%i) - (Plate: %s)", VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	SM(playerid, COLOR_GREY2, "(Neon: %s) - (Trunk: %i/3) - (Health: %.1f) - (Fuel: %i)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2168.7490,1589.8691,999.9709))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the smuggle point.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 75)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcrate [seeds | ephedrine | crack]");
	}

	if(!strcmp(params, "seeds", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 1;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 52.4310, -293.6580, 1.6916, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of marijuana seeds. Deliver it to the marker.");
	}
	else if(!strcmp(params, "crack", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 2;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 52.4310, -293.6580, 1.6916, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of Crack. Deliver it to the marker.");
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    PlayerInfo[playerid][pSmuggleDrugs] = 3;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 52.4310, -293.6580, 1.6916, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of raw ephedrine. Deliver it to the marker.");
	}

	return 1;
}

CMD:getdrug(playerid, params[])
{
	new option[10], amount, cost;
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getdrug [seeds(pot) | Crack | ephedrine(raw meth)] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.374359, 1117.816284, 1083.882812))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There aren't that many seeds left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many seeds.");
		}
		if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		PlayerInfo[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for $%i. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 323.902679, 1117.215942, 1083.882812))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much ephedrine left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 150))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		PlayerInfo[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for $%i.", amount, cost);
	}
	else if(!strcmp(option, "crack", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2346.760986, -1185.064086, 1031.976562))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCrackStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much Crack left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 250))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pCrack] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCrack], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
		}

		gCrackStock -= amount;
		PlayerInfo[playerid][pCrack] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of Crack for $%i.", amount, cost);
	}

	return 1;
}

CMD:plantpot(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(PlayerInfo[playerid][pPotPlanted])
	{
		return SCM(playerid, COLOR_SYNTAX, "You have an active pot plant already.");
	}
	if(PlayerInfo[playerid][pSeeds] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPotA]);

	PlayerInfo[playerid][pSeeds] -= 10;
	PlayerInfo[playerid][pPotPlanted] = 1;
	PlayerInfo[playerid][pPotTime] = 60;
	PlayerInfo[playerid][pPotGrams] = 0;
	PlayerInfo[playerid][pPotObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ] - 1.8, 0.0, 0.0, PlayerInfo[playerid][pPotA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, potplanted = 1, pottime = %i, potgrams = %i, pot_x = '%f', pot_y = '%f', pot_z = '%f', pot_a = '%f' WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pPotTime], PlayerInfo[playerid][pPotGrams], PlayerInfo[playerid][pPotX], PlayerInfo[playerid][pPotY], PlayerInfo[playerid][pPotZ], PlayerInfo[playerid][pPotA], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s plants some seeds into the ground.", GetRPName(playerid));
	SCM(playerid, COLOR_YELLOW, "You have planted a pot plant. Every two minutes your plant will grow one gram of pot.");
	SCM(playerid, COLOR_YELLOW, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s inspects the plant.", GetRPName(playerid));
	        SM(playerid, COLOR_WHITE, "** This plant has so far grown %i grams of pot. It will be ready in %i/60 minutes.", PlayerInfo[i][pPotGrams], PlayerInfo[i][pPotTime]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You need to be crouched in order to pick a plant.");
			}
			if(PlayerInfo[i][pPotGrams] < 2)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(PlayerInfo[playerid][pPot] + PlayerInfo[i][pPotGrams] > GetPlayerCapacity(playerid, CAPACITY_WEED))
			{
			    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPot], GetPlayerCapacity(playerid, CAPACITY_WEED));
			}

			PlayerInfo[playerid][pPickPlant] = i;
			PlayerInfo[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crouches down and starts picking at the pot plant.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "** Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pPotX], PlayerInfo[i][pPotY], PlayerInfo[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s seizes a pot plant weighing %i grams.", GetRPName(playerid), PlayerInfo[i][pPotGrams]);
	        DestroyPotPlant(i);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:cookmeth(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 333.694000, 1123.089477, 1083.890258))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in drug den. You can't use this command.");
	}
	if(!PlayerInfo[playerid][pCookMeth])
	{
		if(!PlayerInfo[playerid][pEphedrine])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!PlayerInfo[playerid][pMuriaticAcid])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}
 	    if(!PlayerInfo[playerid][pBakingSoda])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need baking soda in order to cook meth. Go buy some at 24/7.");
		}
		PlayerInfo[playerid][pCookMeth] = 1;
		PlayerInfo[playerid][pCookTime] = 15;
		PlayerInfo[playerid][pCookGrams] = 0;

		SCM(playerid, COLOR_YELLOW, "You have started cooking meth. 2 gram of ephedrine will turn into 2 gram of meth every 15 seconds.");
	    SCM(playerid, COLOR_YELLOW, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", PlayerInfo[playerid][pCookGrams] / 2, PlayerInfo[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

CMD:usecigar(playerid, params[])
{
	if(!PlayerInfo[playerid][pCigars])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any cigars left.");
	}

	PlayerInfo[playerid][pCigars]--;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lights up a cigar and starts to smoke it.", GetRPName(playerid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - PlayerInfo[playerid][pLastDrug] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastDrug]));
	}
	if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /usedrug [meth | painkillers | pot | crack]");
	}
	
	if(!strcmp(params, "meth", true))
	{
	    if(PlayerInfo[playerid][pMeth] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least two grams of meth.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0), (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pMeth] -= 2;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	    	Dyuze(playerid, "Notice", "~p~shit... you stoned as hell duuuude...");
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes two grams of meth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(PlayerInfo[playerid][pPainkillers] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have any painkillers left.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 25.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPainkillers] -= 1;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();
		KillTimer(PlayerInfo[playerid][pBleedTimer]);
		PlayerInfo[playerid][pBleedTimer] = -1;
		PlayerInfo[playerid][pBleed] = 0;
		PlayerInfo[playerid][pBrokenLeg] = 0;

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        Dyuze(playerid, "Notice", "~p~shit... you stoned as hell duuuude...");
	        PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pops a painkiller in their mouth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "pot", true))
	{
	    if(PlayerInfo[playerid][pPot] < 2) return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of pot.");
		GivePlayerHealth(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPot] -= 1;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        Dyuze(playerid, "Notice", "~p~shit... you stoned as hell duuuude...");
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes one gram of pot.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", PlayerInfo[playerid][pPot], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "crack", true))
	{
		if(PlayerInfo[playerid][pCrack] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of crack.");
		}

		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pCrack] -= 1;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        Dyuze(playerid, "Notice", "~p~shit... you stoned as hell duuuude...");
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s snorts one gram of crack.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", PlayerInfo[playerid][pCrack], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:usepot(playerid) return callcmd::usedrug(playerid, "pot");
CMD:usecrack(playerid) return callcmd::usedrug(playerid, "crack");

CMD:rules(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "List of Rules", "Server\nTraffic Laws\nSpeed Laws", "Select", "Close");
}

CMD:showslaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showslaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"- This server has limitations. -\n");
	strcat(str, "1. 50 MPH if you are in the City.\n");
	strcat(str, "2. 70 MPH on the County roads.\n");
	strcat(str, "3. 90 MPH on the Highways and Interstates.\n");
	strcat(str, "4. Box trucks cannot exceed 50 MPH.\n");
	strcat(str, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
	strcat(str, "Note: This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Speed Enforcement Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the speed rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showtlaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showtlaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"1. Drive on the right side of the road at all times or else you will get punishment.\n");
	strcat(str, "2. Yield to emergency vehicles.\n");
	strcat(str, "3. Move over and slow down for stopped emergency vehicles.\n");
	strcat(str, "4. Turn your headlights on at night. Type (/lights) to turn it.\n");
	strcat(str, "5. Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
	strcat(str, "6. Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
	strcat(str, "7. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
	strcat(str, "9. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "10. Pedistrians always have the right of way, regardless of the situation.\n");
	strcat(str, "11. Drive how you would in real life, dont be a moron.\n");
	strcat(str, "- If you fail at driving you will be jailed or banned. -\n");
	strcat(str, "Note: This is a short version of our traffic laws. Please visit  to see a full list at "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Traffic Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the traffic rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:showlicenses(playerid, params[]) return callcmd::showid(playerid, params);
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	SCM(targetid, SERVER_COLOR, "ID Card:");
	SM(targetid, COLOR_GREY1, "Name: %s", GetRPName(playerid));
	SM(targetid, COLOR_GREY1, "Gender: %s", (PlayerInfo[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SM(targetid, COLOR_GREY1, "Age: %i Years Old", PlayerInfo[playerid][pAge]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (PlayerInfo[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (PlayerInfo[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/

stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }

    return sex;
}
stock id_ShowCitizen(playerid, name[], age, sex) 
{
	new value[20];
	// Name
	PlayerTextDrawSetString(playerid, SHOWID[playerid][2], name);
	PlayerTextDrawShow(playerid, SHOWID[playerid][2]);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, SHOWID[playerid][9], value);
	PlayerTextDrawShow(playerid, SHOWID[playerid][9]);

	// Gender
	PlayerTextDrawSetString(playerid, SHOWID[playerid][10], GetGenderString(sex));
	PlayerTextDrawShow(playerid, SHOWID[playerid][10]);
}
stock GetPlayerSkinScript(playerid) return GetPlayerSkin(playerid);
stock calling(playerid, name[], skin, phoneNumber) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, CallingPlayerTD[playerid][0], skin);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][0]);

	// Name
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][1], name);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][1]);

	format(value, sizeof(value), "(%i)", phoneNumber);
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][2], value);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][2]);
}
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	id_ShowCitizen(targetid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pAge], PlayerInfo[playerid][pGender]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (PlayerInfo[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (PlayerInfo[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));

	Marko(targetid, 10000);
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /drop [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: Seeds, Ephedrine, HPAmmo, PoisonAmmo, FMJAmmo");
	    return 1;
	}
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their weapons.", GetRPName(playerid));
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[playerid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [materials] [confirm] (You have %i materials.)", PlayerInfo[playerid][pMaterials]);
	    }

	    PlayerInfo[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their materials.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!PlayerInfo[playerid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no pot which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [pot] [confirm] (You have %i grams of pot.)", PlayerInfo[playerid][pPot]);
	    }

	    PlayerInfo[playerid][pPot] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their pot.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!PlayerInfo[playerid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no Crack which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [Crack] [confirm] (You have %i grams of Crack.)", PlayerInfo[playerid][pCrack]);
	    }

	    PlayerInfo[playerid][pCrack] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their Crack.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[playerid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [meth] [confirm] (You have %i grams of meth.)", PlayerInfo[playerid][pMeth]);
	    }

	    PlayerInfo[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their meth.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[playerid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [painkillers] [confirm] (You have %i painkillers.)", PlayerInfo[playerid][pPainkillers]);
	    }

	    PlayerInfo[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their painkillers.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!PlayerInfo[playerid][pCigars])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [cigars] [confirm] (You have %i cigars.)", PlayerInfo[playerid][pCigars]);
	    }

	    PlayerInfo[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their cigars.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!PlayerInfo[playerid][pSpraycans])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [spraycans] [confirm] (You have %i spraycans.)", PlayerInfo[playerid][pSpraycans]);
	    }

	    PlayerInfo[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their spraycanss.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!PlayerInfo[playerid][pSeeds])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [seeds] [confirm] (You have %i seeds.)", PlayerInfo[playerid][pSeeds]);
	    }

	    PlayerInfo[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their seeds.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!PlayerInfo[playerid][pEphedrine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", PlayerInfo[playerid][pEphedrine]);
	    }

	    PlayerInfo[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hpammo", true))
	{
	    if(!PlayerInfo[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [hpammo] [confirm] (You have %i rounds of HP ammo.)", PlayerInfo[playerid][pHPAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_HP, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their hollow point ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(!PlayerInfo[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [poisonammo] [confirm] (You have %i rounds of poison ammo.)", PlayerInfo[playerid][pPoisonAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_POISON, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their poison tip ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(!PlayerInfo[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no FMJ ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [fmjammo] [confirm] (You have %i rounds of FMJ ammo.)", PlayerInfo[playerid][pFMJAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_FMJ, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their full metal jacket ammo.", GetRPName(playerid));
	}

	return 1;
}

CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(PlayerInfo[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SCM(playerid, COLOR_SYNTAX, "You can only create graffiti points outside interiors.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerInfo[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:editmobile(playerid, params[])
{
  ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
  return 1;
}

CMD:editgangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /editgangtag [graffiti id]");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);
	PlayerInfo[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully editing graffiti ID: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SM(playerid, COLOR_SYNTAX, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "You are not near any graffiti point.");

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pGangRank] < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5 to tag a wall");
	}
	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", ""WHITE"White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n"SVRCLR"Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategang [name]");
	}

	for(new i = 1; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has setup gang {F7A763}%s{FF6347} in slot ID %i.", GetRPName(playerid), name, i);
	        SM(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes, Alliance");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of gang ID %i to '%s'.", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the MOTD of gang ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /setgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of gang ID %i to %s.", GetRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the level of gang ID %i to %i/3.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of gang ID %i.", GetRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the gang points of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of gang ID %i to '%s'.", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the strikes of gang ID %i to %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(1 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the alliance of gang ID %i to gang %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}

CMD:removegang(playerid, params[])
{
	new gangid;

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegang [gangid]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted gang %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SM(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s{FF6347} gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128];

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gangstrike [gangid] [reason]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);

	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SMA(COLOR_GREEN, "Gang News: %s has received their 1st strike, reason: %s", GangInfo[gangid][gName], reason);
		case 2: SMA(COLOR_GREEN, "Gang News: %s has received their 2nd strike, reason: %s", GangInfo[gangid][gName], reason);
		case 3: SMA(COLOR_GREEN, "Gang News: %s has received their 3rd strike, reason: %s", GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:setgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setgang [playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their gang.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		PlayerInfo[targetid][pGang] = gangid;
		PlayerInfo[targetid][pGangRank] = rankid;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i WHERE uid = %i", gangid, rankid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[]) { return callcmd::gangs(playerid, params); }
CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Members Online:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[gangid][PlayerInfo[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}

/*CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Members Online:");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[gangid][PlayerInfo[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}*/

CMD:turfinfo(playerid, params[])
{
	new
		iCount,
		szMessage[280];

	SCM(playerid, SERVER_COLOR, "Turf Info:");
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tExists])
		{
		    if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
			{
				if(TurfInfo[i][tCaptureTime] == 1)
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
				else
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: %d minutes", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gName], TurfInfo[i][tCaptureTime]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a turf at this time.");
	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_ORANGE, "Point Info:");
	for(new i; i < MAX_POINTS; i++) {
		if(PointInfo[i][pExists]) {
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)  {
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: Less than 1 minute", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: %d minutes", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_GREY, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:points(playerid, params[])
{
	new name[280], color, string[2048];
	psstring = "";
	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists])
		{
			if(PointInfo[i][pCapturedGang] == -1)
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else
			{
				strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
				color = GangInfo[PointInfo[i][pCapturedGang]][gColor];
			}
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", string, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}
			else
			{
			    format(psstring, sizeof(psstring), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", psstring, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}

		}
	}
	ShowPlayerDialog(playerid, DIALOG_POINTLIST, DIALOG_STYLE_LIST, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:lands(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        ShowTurfsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will now see lands on your mini-map.");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will no longer see any lands on your mini-map.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /f [gang chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x00FFFFFF, "[/f] (%i) %s %s: %.*s... **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x00FFFFFF, "[/f] (%i) %s %s: ...%s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x00FFFFFF, "[/f] (%i) %s %s: %s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ally [Alliance chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your gang isn't a part of an alliance.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] || PlayerInfo[i][pGang] == GangInfo[gangid][gAlliance])  && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: %.*s... **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: ...%s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** (A-Radio) %s %s: %s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(PlayerInfo[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

    SCM(playerid, SERVER_COLOR, "Factions Online:");
    new string[128], color = FactionInfo[PlayerInfo[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s"WHITE"", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetRPName(i));
			if(PlayerInfo[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Division: %s", string, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]]);
			}
			if(FactionInfo[PlayerInfo[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SCM(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "%s | Total Patients: %i | Total Fires: %i", string, PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, PlayerInfo[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

    SCM(playerid, SERVER_COLOR, "Gangs Online:");
	new string[128], color = GangInfo[PlayerInfo[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s"WHITE"", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], color >>> 8, GetRPName(i));
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, PlayerInfo[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}

CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SCM(playerid, COLOR_WHITE, "Available options: MOTD, Stash, Stats, Rankname, Skin, Upgrade, Allience");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a gang.");
		}
		if(PlayerInfo[targetid][pFaction] >= 0 && FactionInfo[PlayerInfo[targetid][pFaction]][fType] != FACTION_HITMAN)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is a part of a faction and therefore can't join your gang.");
		}
 		if(GangClaimingTurfs(PlayerInfo[playerid][pGang]) || GangCapturingPoints(PlayerInfo[playerid][pGang]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can not use invite if your gang is attending a turf or point.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_GREY2, "You need to be at least rank 5+ to use this command.");
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[PlayerInfo[playerid][pGang]][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[PlayerInfo[playerid][pGang]][gSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /gang [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		GangInfo[PlayerInfo[playerid][pGang]][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", PlayerInfo[playerid][pGang], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		//Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[targetid][pGang]][PlayerInfo[targetid][pGangRank]], PlayerInfo[targetid][pGangRank]);

		PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		PlayerInfo[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		//Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be an admin to place the stash ((TO AVOID ABUSE)).");
		}
		if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [stash] [confirm] (Moves the gang stash.)");
		}

		GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]);
		GangInfo[PlayerInfo[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[PlayerInfo[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ], GangInfo[PlayerInfo[playerid][pGang]][gStashInterior], GangInfo[PlayerInfo[playerid][pGang]][gStashWorld], PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SM(playerid, COLOR_AQUA, "You have moved the gang stash to your location. /gstash to access your stash.");
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [quit] [confirm]");
	    }


	    SM(playerid, COLOR_AQUA, "You have quit %s as a "SVRCLR"%s{CCFFFF} (%i).", GangInfo[PlayerInfo[playerid][pGang]][gName], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);
		//Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);

	    PlayerInfo[playerid][pGang] = -1;
		PlayerInfo[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [motd] [text]");
		}

		strcpy(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SCM(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[PlayerInfo[playerid][pGang]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[PlayerInfo[playerid][pGang]][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[PlayerInfo[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", PlayerInfo[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "You have set the name of rank %i to "SVRCLR"%s{CCFFFF}.", rankid, rank);
	}
/*  else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [npc] [slot] [confirm]");
		    SCM(playerid, COLOR_GREY2, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ], GangInfo[PlayerInfo[playerid][pGang]][gArmsA], GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ], GangInfo[PlayerInfo[playerid][pGang]][gDrugA], GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}*/
	else if(!strcmp(option, "upgrade", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");
		strcat(string, "\nMapping\tUp to 50 mapped objects for your gang.\t{F7A763}4500 GP "WHITE"+"SVRCLR" $100,000");
		strcat(string, "\nInterior\tCustom interior exclusively for your gang.\t{F7A763}5000 GP "WHITE"+"SVRCLR" $100,000");

		if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 2/3.\t{F7A763}6000 GP "WHITE"+"SVRCLR" $75,000");
		}
		else if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 3/3.\t{F7A763}12000 GP "WHITE"+"SVRCLR" $100,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[PlayerInfo[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 6)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 6)
	  	{
			return SCM(playerid, COLOR_SYNTAX, "The player you're offering to ally with must be R6 in their gang!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SM(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetRPName(targetid));
			SM(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetRPName(playerid));
			PlayerInfo[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}


CMD:gstash(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return SCM(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]))
    {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of your gang stash.");
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	new gang = PlayerInfo[playerid][pGang], color, string[128];
	if(PlayerInfo[playerid][pBandana])
	{
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
 		PlayerInfo[playerid][pBandana] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off their bandana and puts it back to their pocket.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
		if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gang][gColor];
		}

		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][PlayerInfo[playerid][pGangRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
 		PlayerInfo[playerid][pBandana] = 1;
       	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out their bandana and wraps it around their forehead.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:gbuyvehicle(playerid, params[])
{
	static string[4096];
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
    {
        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
    }

	PlayerInfo[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.6909, -1298.2206, 17.2362))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"SVRCLR"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
    	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Boats"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYBOAT, DIALOG_STYLE_TABLIST_HEADERS, "Boat Dealership", string, "Buy", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
     	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s"WHITE"", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Aircraft Dealership", string, "Buy", "Cancel");
	}

	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "** Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your gang has no vehicles which you can track.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}


CMD:grespawncars(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SCM(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.6909, -1298.2206, 17.2362))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gsellcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your gang vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    //Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createpoint [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Pending", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 10;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created point {F7A763}%s{FF6347}.", GetRPName(playerid), name);
	        SM(playerid, COLOR_AQUA, "You have created point {F7A763}%s{CCFFFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has moved the location of point %i.", GetRPName(playerid), pointid);
		SM(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of point %i.", GetRPName(playerid), pointid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of point %i to %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to "SVRCLR"%s{CCFFFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [type] [value]");
           	SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of point %i to %i.", GetRPName(playerid), pointid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the profits of point %i to $%i.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SMA(COLOR_GREEN, "%s is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of point %i to %i hours.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted point %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SM(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{CCFFFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

GangCapturingPoints(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_POINTS; x++)
	{
		if(PointInfo[x][pExists] && PointInfo[x][pCapturer] != INVALID_PLAYER_ID && PointInfo[x][pTime] == 0)
		{
  			if(PlayerInfo[PointInfo[x][pCapturer]][pGang] == gang)
  			{
          		capCount++;
  			}
		}
	}
	return capCount;
}

GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(PlayerInfo[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:capture(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(PlayerInfo[playerid][pCapturingPoint] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already attempting to capture the point.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't capture a point while injured.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
    if(GangCapturingPoints(PlayerInfo[playerid][pGang]) >= MaxCapCount[1])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already capturing %i points.", MaxCapCount[1]);
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by you.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PlayerInfo[PointInfo[i][pCapturer]][pGang] == PlayerInfo[playerid][pGang])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(PlayerInfo[x][pCapturingPoint] == i && PlayerInfo[x][pCaptureTime] > 0)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    PlayerInfo[playerid][pCapturingPoint] = i;
		    PlayerInfo[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, PlayerInfo[playerid][pPointX], PlayerInfo[playerid][pPointY], PlayerInfo[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "(( %s is attempting to capture %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any points.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5) && !IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in a gang or apart of law enforcement.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs which you can claim.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being captured by you.");
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] == PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being claimed by your gang.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(PlayerInfo[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already claiming %i turfs.", MaxCapCount[0]);
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    if(GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have any turf tokens left.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need at least 2 members of your gang in this turf to claim it.");
		}
		else
		{
			GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]--;
			SMA(COLOR_GREEN, "%s has attempted to claim %s for %s. It will be their turf in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] == -1)
	{
	    if(FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your faction doesn't have any turf tokens left.");
		}

	    FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]--;
	    SMA(COLOR_GREEN, "Officer %s has attempted to claim back %s. It will be civilian owned in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);
	return 1;
}

CMD:reclaim(playerid, params[])
{
	new turfid;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && PlayerInfo[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't reclaim a turf while injured.");
	}
	if(TurfInfo[turfid][tCapturedGang] != PlayerInfo[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf does not belong to your gang. Therefore you can't reclaim it.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not being claimed by anyone. Therefore you can't reclaim it.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	SMA(COLOR_GREEN, "%s has reclaimed %s for %s and ended the turf war.", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}

CMD:endalliance(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SCM(playerid, COLOR_SYNTAX, "Usage: /endalliance [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be in a gang to use this command");
	}
	if(PlayerInfo[playerid][pGangRank] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Your gang isn't currently in an alliance.");
	}

	SM(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has ended their alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:guninv(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "My Weapons:");

	for(new i = 0; i < 13; i ++)
	{
     	if(PlayerInfo[playerid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s", PlayerInfo[playerid][pWeapons][i], GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
		}
	}

	return 1;
}

/*CMD:armsdealer(playerid, params[])
{
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned arms dealers.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned drug dealers.");
	return 1;
}*/

CMD:loadammo(playerid, params[])
{
	new weaponid, type[14];

	if(sscanf(params, "is[14]", weaponid, type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /loadammo [weaponid] [type] (/guninv for weapon IDs)");
	    SCM(playerid, COLOR_GREY2, "List of types: Normal, HollowPoint, PoisonTip, FMJ");
	    return 1;
	}
    if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
	}
	if(!(22 <= weaponid <= 34))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That weapon can't be loaded with ammunition.");
	}
	if(PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(type, "normal", true))
	{
	    PlayerInfo[playerid][pAmmoType] = AMMOTYPE_NORMAL;
	    PlayerInfo[playerid][pAmmoWeapon] = 0;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with normal ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Normal{CCFFFF} ammunition.");
	    ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "hollowpoint", true))
	{
	    if(!PlayerInfo[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammunition to load this weapon with.");
	    }

	    PlayerInfo[playerid][pAmmoType] = AMMOTYPE_HP;
	    PlayerInfo[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with hollow point ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Hollow point{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "poisontip", true))
	{
	    if(!PlayerInfo[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammunition to load this weapon with.");
	    }

	    PlayerInfo[playerid][pAmmoType] = AMMOTYPE_POISON;
	    PlayerInfo[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with poison tip ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Poison tip{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "fmj", true))
	{
	    if(!PlayerInfo[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no full metal jacket ammunition to load this weapon with.");
	    }

	    PlayerInfo[playerid][pAmmoType] = AMMOTYPE_FMJ;
	    PlayerInfo[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with full metal jacket ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Full metal jacket{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}

	SetPlayerWeapons(playerid);
	return 1;
}

CMD:createturf(playerid, params[])
{
	new type, name[32];

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createturf [special type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials Turf (5)Traphouse");
	    SCM(playerid, COLOR_GREY2, "List of types: (6)Drug Turf (7)Sales taxing (8)Low Spec Weapons (9)Medium Spec Weapons (10)High Spec Weapons");
	    return 1;
	}
	if(!(0 <= type <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create turfs indoors.");
	}

	PlayerInfo[playerid][pTurfType] = type;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(PlayerInfo[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	Dyuze(playerid, "Notice", "~w~Teleported");

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(!PlayerInfo[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, ClaimBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
	else if(!strcmp(option, "claimby", true))
    {
        if(isnull(param) || strlen(params) > 32)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of turf %i.", GetRPName(playerid), turfid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of turf %i to %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to "SVRCLR"%s{CCFFFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [type] [value]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials Turf (5)Traphouse");
	        SCM(playerid, COLOR_GREY2, "List of types: (6)Drug Turf (7)Sales taxing (8)Low Spec Weapons (9)Medium Spec Weapons (10)High Spec Weapons");
            return 1;
		}
		if(!(0 <= type <= 10))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of turf %i to %i.", GetRPName(playerid), turfid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SMA(COLOR_GREEN, "%s is now available to capture.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of turf %i to %i hours.", GetRPName(playerid), turfid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}

CMD:defend(playerid, params[])
{
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - PlayerInfo[playerid][pLastDefend] < time)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - PlayerInfo[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /defend [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't defend yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not wanted.");
	}
	if(amount < 50 || amount > 250)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $50 and $250.");
	}

	PlayerInfo[targetid][pDefendOffer] = playerid;
	PlayerInfo[targetid][pDefendPrice] = amount;
	PlayerInfo[playerid][pLastDefend] = gettime();

	SM(targetid, COLOR_AQUA, "** Lawyer %s has offered to defend your wanted level for $%i. (/accept lawyer)", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered to defend %s's wanted level for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:free(playerid, params[])
{
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /free [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pJailType] != 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in IC jail.");
	}
	if(PlayerInfo[targetid][pJailTime] < time * 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't free this player, their jail time expires soon.");
	}

	PlayerInfo[targetid][pJailTime] -= time * 60;

	SM(targetid, COLOR_AQUA, "** Lawyer %s has reduced your jail sentence by %i minutes.", GetRPName(playerid), time);
	SM(playerid, COLOR_AQUA, "** You have reduced %s's jail sentence by %i minutes.", GetRPName(targetid), time);
	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ejects %s from the vehicle.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1068.0618,-75.6287,1003.8516))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dicebet [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount can't be below $1.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 7 seconds. Please wait %i more seconds.", 7 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[playerid][pLastBet] = gettime();

	SM(targetid, COLOR_AQUA, "** %s has initiated a bet with you for $%i (/accept dicebet).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have initiated a bet against %s for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /calculate [value 1] [option] [value 2]");
	    SCM(playerid, COLOR_WHITE, "Available options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't divide by zero.");
	}

	if(option == '+') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	new houses, businesses, garages, vehicles, lands, entrances, turfs, points, gangs, factions;

	for(new i = 0; i < MAX_HOUSES; i ++) 	 if(HouseInfo[i][hExists]) 		houses++;
	for(new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessInfo[i][bExists]) 	businesses++;
	for(new i = 0; i < MAX_GARAGES; i ++) 	 if(GarageInfo[i][gExists]) 	garages++;
	for(new i = 0; i < MAX_VEHICLES; i ++) 	 if(IsValidVehicle(i)) 			vehicles++;
	for(new i = 0; i < MAX_LANDS; i ++) 	 if(LandInfo[i][lExists]) 		lands++;
	for(new i = 0; i < MAX_ENTRANCES; i ++)  if(EntranceInfo[i][eExists]) 	entrances++;
	for(new i = 0; i < MAX_TURFS; i ++) 	 if(TurfInfo[i][tExists]) 		turfs++;
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;

	SCM(playerid, SERVER_COLOR, ""SERVER_NAME" Stats:");
	SM(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SM(playerid, COLOR_WHITE, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Lands: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, lands, MAX_LANDS, vehicles, MAX_VEHICLES);
	SM(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS);
	SM(playerid, COLOR_WHITE, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!PlayerInfo[playerid][pWatch])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!PlayerInfo[playerid][pWatchOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pWatchOn] = 1;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their watch.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pWatchOn] = 0;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their watch.", GetRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}

	if(!PlayerInfo[playerid][pGPSOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][0], "Loading...");
	    ShowGPSTextdraw(playerid);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their GPS.", GetRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pGPSOn] = 0;
	    HideGPSTextdraw(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their GPS.", GetRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently in a in the event. Use /quitevent instead.");
	}
	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world has been fixed.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world is not bugged at the moment. /report or relog if the problem persists.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pAcceptedHelp] || PlayerInfo[playerid][pMiningTime] > 0 || PlayerInfo[playerid][pConstructionTime] > 0 || PlayerInfo[playerid][pFishTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerInfo[playerid][pLastStuck] < 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - PlayerInfo[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
    HideNoticeGUIFrame(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SCM(playerid, SERVER_COLOR, "**"WHITE" You are no longer stuck.");

	PlayerInfo[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC && GetFactionType(playerid) != FACTION_TERRORIST && GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!PlayerInfo[playerid][pDuty])
	{
	    if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your badge on while in an event or paintball match.");
		}
		new string[128], color, faction = PlayerInfo[playerid][pFaction];
		if(FactionInfo[faction][fColor] == -1 || FactionInfo[faction][fColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = FactionInfo[faction][fColor];
		}
		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, FactionInfo[faction][fName],FactionRanks[faction][PlayerInfo[playerid][pFactionRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);

	    PlayerInfo[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "You have enabled your badge. You now appear on-duty for all players.");
	}
	else
	{
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
	    PlayerInfo[playerid][pDuty] = 0;
	    SCM(playerid, COLOR_WHITE, "You have disabled your badge. You no longer appear on-duty for any players.");
	}
	return 1;
}

CMD:forcelottery(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	LotteryUpdate();
	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	new rand = random(99999);

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1413.1495, -15.9198, 1000.9246);
	SetPlayerPos(target2, 1367.6084, -17.7317, 1000.9219);
	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, rand);
	SetPlayerVirtualWorld(target2, rand);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GiveWeapon(target1, weapon1, true);
	GiveWeapon(target1, weapon2, true);
	GiveWeapon(target2, weapon1, true);
	GiveWeapon(target2, weapon2, true);

	Dyuze(target1, "Notice", "~r~Duel time!");
	Dyuze(target2, "Notice", "~r~Duel time!");

	PlayerInfo[target1][pDueling] = target2;
	PlayerInfo[target2][pDueling] = target1;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s and %s into a duel.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:mole(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] < 3)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /mole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(0): %s **", params);
 	return 1;
}

CMD:hmole(playerid, params[])
{
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /hmole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command automatically places ((/contract)) text.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(#null): %s((/contract)) **", params);
 	return 1;
}

CMD:buytool(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2772.9460, 376.7526, 3000.6462+ 0.4))
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are not on the Police Desk.");
	}
	PlayerInfo[playerid][pTool]++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET tool = %i WHERE uid = %i", PlayerInfo[playerid][pTool], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:breakjail(playerid, params[])
{
	if(PlayerInfo[playerid][pTool] < 1)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You don't have the tool(s) that is needed to jailbreak.");
	}
	if(PlayerInfo[playerid][pJailTime] < 1)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are currently not jailed.");
	}
    foreach(new i : Player)
    {
	  if(IsLawEnforcement(i))
	  {
			SM(i, COLOR_ROYALBLUE, "** HQ: A Jail Break is occurring at the MGMC CITY JAIL. All units respond immediately.");
			//SetPlayerCheckpoint(i, 684.8798,-1178.2994,15.2313, 3.0);
	  }
    }
    ApplyAnimationEx(playerid, "BOMBER", "BOM_PLANT_IN", 4.0, 1, 1, 1, 0, 0);
    GameTextForPlayer(playerid,"~w~Destroying Jail Door..",10000,6);
	SetTimerEx("Jailbreak", 10000, false, "i", playerid);
	return 1;
}

CMD:info(playerid) callcmd::information(playerid);
CMD:information(playerid)
{
	SCM(playerid, COLOR_WHITE, ""SERVER_NAME": "SERVER_URL"");
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic or Taxi Driver.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takecall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if((FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MECHANIC) && PlayerInfo[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
		}

		PlayerInfo[targetid][pMechanicCall] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's mechanic call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your mechanic call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && PlayerInfo[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerInfo[targetid][pTaxiCall] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's taxi call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your taxi call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_GREY, "That player has no calls which can be taken.");
	}
	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	SCM(playerid, SERVER_COLOR, "Emergency Calls:");

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pEmergencyCall] > 0) && ((PlayerInfo[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (PlayerInfo[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] - Expiry: %i seconds - Emergency: %s", GetRPName(i), i, PlayerInfo[i][pEmergencyCall], PlayerInfo[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic, law enforcer, or mechanic.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pEmergencyCall])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't called 911 recently or their call expired.");
	}
/*	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
	}
*/
	//PlayerInfo[targetid][pEmergencyCall] = 0;
	GetPlayerPos(targetid, x, y, z);
	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SM(playerid, COLOR_AQUA, "** You have accepted %s's emergency call. Their location was marked on your map.", GetRPName(targetid));

	if(PlayerInfo[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SM(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}

	return 1;
}

CMD:startchat(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(ac)hat to speak with this admin.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(ac)hat to speak to the player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(ac)hat to speak with them.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SM(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SM(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:ac(playerid, params[])
{
	return callcmd::achat(playerid, params);
}

CMD:achat(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /(ac)hat [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1)
				SM(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
			else
			    SM(i, COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gascan [amount]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't add that much gasoline to the vehicle.");
	}

	PlayerInfo[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s refills the %s's gas tank with %i liters of gasoline.", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:userepairkit(playerid, params[])
{
	new Float:health;
	new vehicleid =  GetNearbyVehicle(playerid);

	if(PlayerInfo[playerid][pRepairKit] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any repairkits left.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_GREY2, "The engine must be off during the repair session.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot  and infront of the vehicle in order to use this command.");
	}
	PlayerInfo[playerid][pRepairKit]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", PlayerInfo[playerid][pRepairKit], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetVehicleHealth(vehicleid, health);

	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
		Dyuze(playerid, "Notice", "~w~Fixing the vehicle..");
		SetTimerEx("TimerUseRepairkit", 10000, false, "i", playerid);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 10000, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is repairing his/her vehicle.", GetRPName(playerid));
	}
	return 1;
}

/*CMD:sellfood(playerid, params[])
{
	new targetid, option[12], param[32], price = 50;

	if(sscanf(params, "is[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellfood [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Burger, Water");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 797.0574, -1622.6112, 13.5290))
	{
		return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You are not in range of Burger Shot");
	}
	if(!IsAngelsBurger(playerid) && GetFactionType(playerid) != FACTION_BURGER)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of angels burger.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[playerid][pCookFood])
	{
	    return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You don't have any cooked food left.");
	}
	if(PlayerInfo[targetid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "That Player does not have enough money.");
    }
	if(!strcmp(option, "burger", true))
	{
		if(PlayerInfo[targetid][pFood] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That Player can't have more than 5 burger.");
	    }
		PlayerInfo[targetid][pFood] += 1;
    	GivePlayerCash(targetid, -price);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", PlayerInfo[playerid][pFood], PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer);

    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s sold %s a burger worth %i$.", GetRPName(playerid), GetPlayerNameEx(targetid), price);
    	SCM(targetid, COLOR_WHITE, "** Food purchased. /eat to use.");
	}
	else if(!strcmp(option, "water", true))
	{
		if(PlayerInfo[targetid][pDrink] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That Player can't have more than 5 burger.");
	    }
		PlayerInfo[targetid][pDrink] += 1;
    	GivePlayerCash(targetid, -price);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", PlayerInfo[playerid][pFood], PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer);

    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s sold %s a water worth %i$.", GetRPName(playerid), GetPlayerNameEx(targetid), price);
    	SCM(targetid, COLOR_WHITE, "** Drink purchased. /drink to use.");
	}
    return 1;
}

CMD:getfood(playerid, params[])
{
	if(!IsAngelsBurger(playerid) && GetFactionType(playerid) != FACTION_BURGER)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of burger shot.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 794.0765, -1625.1066, 13.5230))
	{
		return SCM(playerid, COLOR_SYNTAX, "[ERROR]{ffffff} You are not in range of Burger Shot");
	}
    if(PlayerInfo[playerid][pCookFood] >= 5)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 CookFood.");
    }
    PlayerInfo[playerid][pCookFood] += 1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookfood = %i WHERE uid = %i", PlayerInfo[playerid][pCookFood], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "** Cooked Food. /sellfood to use.");
	return 1;
}*/

CMD:eat(playerid, params[])
{
	if(PlayerInfo[playerid][pFood] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any food left.");
	}
	PlayerInfo[playerid][pFood]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", PlayerInfo[playerid][pFood], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	if(PlayerInfo[playerid][pHunger] >= 100)
	{
		SCM(playerid, COLOR_SYNTAX, "You are not ready to eat yet because you are still full.");
	}
	else
	{
		Dyuze(playerid, "Notice", "~y~Eating ~w~Food..");
		SetTimerEx("EatingFood", 5000, false, "i", playerid);
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is eating.", GetRPName(playerid));
		SetPlayerAttachedObject(playerid, 0, 2880, 6, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
	}
	return 1;
}

CMD:drink(playerid, params[])
{
	if(PlayerInfo[playerid][pDrink] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any drinks left.");
	}
	PlayerInfo[playerid][pDrink]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", PlayerInfo[playerid][pDrink], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	if(PlayerInfo[playerid][pThirst] >= 100)
	{
		SCM(playerid, COLOR_SYNTAX, "You are not ready to eat yet because you are still full.");
	}
	else
	{
		Dyuze(playerid, "Notice", "~y~Drinking ~w~Water..");
		SetTimerEx("DrinkWater", 5000, false, "i", playerid);
		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s is drinking.", GetRPName(playerid));
		SetPlayerAttachedObject(playerid, 1, 1484, 6, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF); 
	}
	return 1;
}

CMD:robbigbank(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5, 296.7507, 1378.5189, 2023.8459))
    {
        SCM(playerid, COLOR_WHITE, "Your aren't near in the bigbank vault!");
        return 1;
    }
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob the Big Bank.");
		return 1;
	}
	new	count;
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 0)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob the bank.");
	}
    if (Robfleecabank[playerid] == 0 )
    {
    	Dyuze(playerid, "Notice", "~g~Robbing Big Bank Vault...");
        BigBankMoney[playerid] = 1;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant", 4.1, 1, 1, 1, 0, 0);
        SetTimerEx("RobBigbank", 20000, false, "i", playerid);
        TogglePlayerControllable(playerid, 0);
    }
    foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the Big Bank. All units respond immediately.");
			SetPlayerCheckpoint(i, 606.6394,-1460.2273,14.4079, 3.0);
		}
    }
    /*TextDrawHideForPlayer(playerid, PriorityTD1);
    TextDrawShowForPlayer(playerid, PriorityTD4);*/
    SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
    return 1;
}

CMD:robfleeca(playerid, params[])
{
    new count;
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 693.968872, -1183.180541, 15.950567)) return SCM(playerid, -1, "You are not near of fleeca entrance.");
    if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The fleeca can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
    if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the fleeca while on-duty.");
	}
	if(RobberyInfo[fPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a fleeca robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[fRobStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the fleeca as a robbery has already started.");
	}
   foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob Fleeca.");
	}

    RobberyInfo[fRobbers][0] = playerid;
    RobberyInfo[fPlanning] = 1;
    RobberyInfo[fDoorLock] = 1;
    SetPlayerCheckpoint(playerid, 697.270263, -1187.651855, 15.980570, 3.0);
   	new szString[250];
	format(szString, sizeof(szString), "FLEECAROBBERY: %s had Started the Fleeca Robbery", GetRPName(playerid));
	SendDiscordMessage(25, szString);
    SCM(playerid, COLOR_AQUA, "You have setup a fleeca robbery{CCFFFF}. You need to /fleecainvite at least 2 more people in order to begin the heist.");
    return 1;
}

CMD:fleecainvite(playerid, params[])
{
   new targetid;
   if(RobberyInfo[fPlanning] == 0)
   {
	 return SCM(playerid, COLOR_SYNTAX, "You Are Not Doing Any Fleeca Rob");
   }
   if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fleecainvite [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the bank while on-duty.");
	}
	if(IsPlayerInFleecaRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
    PlayerInfo[targetid][pRobberyOffer] = playerid;
	SM(playerid, COLOR_AQUA, "You Have Invited %s To The Robbery With You.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "You Have Been Invited To A Fleeca Rob With %s use /accept frobbery", GetRPName(playerid));
	return 0;
}

CMD:flock(playerid, params[])
{
   if(!IsPlayerInRangeOfPoint(playerid, 3.0, 697.270263, -1187.651855, 15.980570))
   {
	  return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Not At Safe Locker Area");
   }
   if(RobberyInfo[fPlanning] == 0 && RobberyInfo[fRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a Fleeca robbery.");
	}
	if(GetFleecaRobbers() < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 3 other heisters in your robbery.");
	}
   if(!RobberyInfo[fDoorLock])
   {
       return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Started The Robbery");
   }
   if(!PlayerInfo[playerid][pHammer])
   {
       return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Have Hacker Laptop and Hammer, You Need To Buy Hacker Laptop and Hammer From UTools");
   }
   foreach(new i : Player)
   {
	  if(IsLawEnforcement(i))
	  {
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the Fleeca Bank. All units respond immediately.");
			SetPlayerCheckpoint(i, 684.8798,-1178.2994,15.2313, 3.0);
	  }
   }
     ApplyAnimationEx(playerid, "BOMBER", "BOM_PLANT_IN", 4.0, 1, 1, 1, 0, 0);
	 GameTextForPlayer(playerid,"~w~Destroying Lock..",10000,6);
	 SetTimerEx("DestroyFleecaLock", 10000, false, "i", playerid);
	 return 1;
}

CMD:startfleecarob(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5, 704.2659,-1184.6938,15.9806) && !IsPlayerInRangeOfPoint(playerid, 5, 701.201843, -1182.450317, 15.980570) && !IsPlayerInRangeOfPoint(playerid, 5, 699.414611, -1181.430175, 15.980570))
    {
        SCM(playerid, COLOR_WHITE, "Your aren't near in the fleeca vault!");
        return 1;
    }
   	if(PlayerInfo[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
    if(RobberyInfo[fPlanning] == 0 && RobberyInfo[fRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a Fleeca robbery.");
	}
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob an fleeca bank.");
		return 1;
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	SetTimerEx("Fleecarob", 10000, false, "i", playerid);
	GameTextForPlayer(playerid, "~w~Looting Fleeca Deposit Box...", 5000, 3);
    SetPlayerAttachedObject(playerid, 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
	SCM(playerid, COLOR_GREEN, "Wait For The Cops To Reach Here.");
	SetPlayerCheckpoint(playerid, 690.992065, -1184.293334, 15.950568, 3.0);
    //PlayerInfo[playerid][pCP] = CHECKPOINT_ROBBERYFLEECA;
    /*TextDrawHideForPlayer(playerid, PriorityTD1);
    TextDrawShowForPlayer(playerid, PriorityTD4);*/
    PlayerInfo[playerid][pLootTime] = 5;
    return 1;
}

/*CMD:robairplane(playerid, params[])
{
    new count;
    if(!IsPlayerInRangeOfPoint(playerid, 5, 3.775104, 22.961706, 1199.601196))
    {
        SCM(playerid, COLOR_WHITE, "Your aren't near in the airplane vault!");
        return 1;
    }
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob an airplane.");
		return 1;
	}
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 0)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob the bank.");
	}
    if (Robfleecabank[playerid] == 0 )
    {
        Dyuze(playerid, "Notice", "~g~Robbing Airplane Vault...");
        Robfleecabank[playerid] = 1;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant", 4.1, 1, 1, 1, 0, 0);
        SetTimerEx("RobFleecabank", 20000, false, "i", playerid);
        TogglePlayerControllable(playerid, 0);
    }
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the Los Santos Airport. All units respond immediately.");
			SetPlayerCheckpoint(i, 1991.7560,-2384.5447,13.5469, 3.0);
		}
    }
   	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	SetTimerEx("Airplanerob", 10000, false, "i", playerid);
	GameTextForPlayer(playerid, "~w~Looting Airplane Deposit Box...", 5000, 3);
    SetPlayerAttachedObject(playerid, 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
	SCM(playerid, COLOR_GREEN, "Wait For The Cops To Reach Here.");
	SetPlayerCheckpoint(playerid, 3.025748, 33.221813, 1199.593750, 3.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_ROBBERYAIRPLANE;
    TextDrawHideForPlayer(playerid, PriorityTD1);
    TextDrawShowForPlayer(playerid, PriorityTD4);
    return 1;
}
*/

CMD:robcasino(playerid, params[])
{
    new count;
    if(!IsPlayerInRangeOfPoint(playerid, 5, 346.046630, 162.273681, 1025.789062))
    {
        SCM(playerid, COLOR_WHITE, "Your aren't near in any casino vault!");
        return 1;
    }
    if(IsLawEnforcement(playerid))
	{
		SCM(playerid, COLOR_GREY, "Law Enforcement Officials cannot rob an Casino.");
		return 1;
	}
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob the bank.");
	}
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the LV CASINO. All units respond immediately.");
			SetPlayerCheckpoint(i, 2195.995605, 1677.230102, 12.367187, 3.0);
		}
    }
    if (TraphouseMoney[playerid] == 0 )
    {
    	Dyuze(playerid, "Notice", "~g~Robbing Casino Vault...");
        TraphouseMoney[playerid] = 1;
        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 0, 0);
       	GameTextForPlayer(playerid, "~w~Looting Casino Deposit Box...", 5000, 3);
        SetTimerEx("RobTraphouse", 20000, false, "i", playerid);
        SetPlayerAttachedObject(playerid, 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
        TogglePlayerControllable(playerid, 0);
    }
    return 1;
}

CMD:robbank(playerid, params[])
{
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 288.942382, 1331.250000,  2023.838012))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the bank as a robbery has already started.");
	}
	if(PlayerInfo[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the bank while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && PlayerInfo[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 5)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 5+ LEO on-duty in order to rob the bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    /*TextDrawHideForPlayer(playerid, PriorityTD1);
    TextDrawShowForPlayer(playerid, PriorityTD4);*/
    SetPlayerCheckpoint(playerid, 288.643737, 1333.807250, 2023.838012, 3.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SCM(playerid, COLOR_WHITE, "** Checkpoint marked to hack the CCTV.");
   	new szString[250];
	format(szString, sizeof(szString), "BANKROBBERY: %s had Started the BANK Robbery", GetRPName(playerid));
	SendDiscordMessage(25, szString);
    SCM(playerid, COLOR_AQUA, "You have setup a "SVRCLR"bank robbery{CCFFFF}. You need to /invite at least 2 more people in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /setupvault at the checkpoint to blow the vault.");
	return 1;
}

CMD:invite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
	if(PlayerInfo[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the bank while on-duty.");
	}

	PlayerInfo[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a bank robbery. (/accept robbery)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your bank robbery.", GetRPName(targetid));
	return 1;
}

CMD:hackcctv(playerid, params[])
{
   if(!IsPlayerInRangeOfPoint(playerid, 3.0, 288.643737, 1333.807250, 2023.838012))
   {
	  return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Are Not At Safe Locker Area");
   }
   if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
   {
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
   }
   if(!PlayerInfo[playerid][pHammer])
   {
       return SCM(playerid, COLOR_RED, "[Error] "WHITE"You Dont Have Hacker Laptop , You Need To Buy Hacker Laptom and Hammer From UTools");
   }
     ApplyAnimationEx(playerid, "BOMBER", "BOM_PLANT_IN", 4.0, 1, 1, 1, 0, 0);
	 GameTextForPlayer(playerid,"~w~Hacking CCTV..",10000,6);
	 SetTimerEx("HackCCTV", 10000, false, "i", playerid);
	 return 1;
}

CMD:setupvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
	if(!PlayerInfo[playerid][pHackedCctv])
	{
	    return SCM(playerid, COLOR_GREY2, "You havent Hacked The CCTV or Your Identity Will be Revealed");
	}
	if(GetBankRobbers() < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 4 other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 296.672180, 1371.500122, 2023.845947))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 296.585998, 1372.779052, 2024.726074, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active bank robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 294.280609, 1375.421020, 2023.845947) && !IsPlayerInRangeOfPoint(playerid, 3.0, 293.808349, 1378.593383, 2023.845947) && !IsPlayerInRangeOfPoint(playerid, 3.0, 295.204132, 1379.825561, 2023.845947) && !IsPlayerInRangeOfPoint(playerid, 3.0, 298.176147, 1379.825317, 2023.845947) && !IsPlayerInRangeOfPoint(playerid, 3.0, 299.551757, 1378.247680, 2023.845947) && !IsPlayerInRangeOfPoint(playerid, 3.0, 299.550170, 1375.284667, 2023.845947))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(PlayerInfo[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(PlayerInfo[playerid][pRobCash] >= gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your pockets can't hold anymore!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this bank robbery.");
	}

	PlayerInfo[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	Dyuze(playerid, "Notice", "~w~Looting deposit box...");
	return 1;
}

CMD:setscore(playerid, params[])
{
	new targetid, score;
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	  	return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, score))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setscore [playerid] [score]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	SetPlayerScore(targetid, score);
	SM(playerid, COLOR_SAMP, "You have set %s's score to %i.", GetPlayerNameEx(targetid), score);
	return 1;
}

CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	tsstring = "";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 11) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d Hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", string, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", tsstring, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_LIST, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:setformeradmin(playerid, params[])
{
	new targetid, status;
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setformeradmin [playerid] [status (0/1)]");
		return 1;
	}

    if(status)
    {
	   	if(PlayerInfo[targetid][pAdmin])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The specified player is an admin and therefore cannot be set as a former admin.");
		}
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        //Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(playerid));
	}
	else
    {
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        //Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(playerid));
	}
    PlayerInfo[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", PlayerInfo[targetid][pFormerAdmin], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /callsign [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}
CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(PlayerInfo[playerid][pCuffed] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot kill yourself while cuffed!");
	}
	if(PlayerInfo[playerid][pJailTime] > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot do this while in jail.");
	}
	if(PlayerInfo[playerid][pInjured] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too injured to attempt suicide!");
	}

	if(health < 15.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your health is currently too low to kill yourself.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches into their pocket, pulling out a large quantity of pills, swallowing them.", GetRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises their handgun to their head, pulling the trigger.", GetRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their shotgun into their mouth, pulling the trigger.", GetRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their weapon into their mouth, pulling the trigger.", GetRPName(playerid));
		}
	}
	DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	return 1;
}
CMD:clearreports(playerid, params[])
{	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared all active reports.", GetRPName(playerid));
	return 1;
}
CMD:windows(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be inside a vehicle to use this command.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
    if(!VehicleHasWindows(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle does not have any windows.");
	}
	if(CarWindows[vehicleid])
	{
	    CarWindows[vehicleid] = 0;
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    CarWindows[vehicleid] = 1;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

// - COMMANDS BY DEV86
CMD:taclight(playerid, params[])
{
	if (!PlayerInfo[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(PlayerInfo[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s attaches their flashlight to the top of their weapon.", GetRPName(playerid));

		PlayerInfo[playerid][pUsedFlashlight] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		PlayerInfo[playerid][pUsedFlashlight] =0;
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s detaches their flashlight from their weapon.", GetRPName(playerid));
	}
	return 1;
}
CMD:flashlight(playerid, params[])
{
	if (!PlayerInfo[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(PlayerInfo[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s takes out a flashlight and turns it on.", GetRPName(playerid));

		PlayerInfo[playerid][pUsedFlashlight] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
  		PlayerInfo[playerid][pUsedFlashlight] =0;
  		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s puts their flashlight back in their pocket.", GetRPName(playerid));
	}
	return 1;
}

CMD:pass(playerid, params[])
{
	new cashhy=500;
	if(PlayerInfo[playerid][pCash] < cashhy)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay for the toll");
	}
 	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
	{
		if(Border11 == 1) { SCM(playerid, COLOR_GREY, "** Contact a developer"); return 1; }
   		DestroyDynamicObject( Border1 );
 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border11 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
	{
		if(Border00 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border0 );
 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border00 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
	{
		if(Border99 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border9 );
 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border99 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
	{
		if(Border88 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border8 );
 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border88 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
	{
		if(Border77 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border7 );
 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border77 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
	{
		if(Border66 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border6 );
 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border66 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
	{
		if(Border55 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border5 );
 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border55 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
	{
		if(Border33 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border3 );
 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border33 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
	{
		if(Border22 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border2 );
 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border22 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
	{
		if(Border44 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border4 );
 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border44 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
 	return 1;
}

CMD:dmvrelease(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.872802, -71.741867, 5001.085937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the CityHall Department.");
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
	return 1;
}

CMD:registercar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:vpos[3];

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2501.0352, -1946.1055, 13.4937))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any DMV.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}

	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
 	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "This vehicle doesn't belong to your faction, therefore you can't register it.");
 		return 1;
	}
 	if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
 	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "This vehicle doesn't belong to your gang, therefore you can't register it.");
 		return 1;
 	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_SYNTAX, "This vehicle doesn't belong to you, therefore you can't register it.");
	}
	if(VehicleInfo[vehicleid][vRegistered])
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "This vehicle is already registered.");
	}
	if(PlayerInfo[playerid][pCash] < 50000)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "You must have $50,000 to register a vehicle.");
	}
	GetVehiclePos(vehicleid, vpos[0], vpos[1], vpos[2]);

	VehicleInfo[vehicleid][vRegistered] = 1;

	SM(playerid, SERVER_COLOR, "You have successfully registered this vehicle.");
	PlayerInfo[playerid][pCash] -= 50000;
	ReloadVehicle(vehicleid);
	SetVehiclePos(vehicleid, vpos[0], vpos[1], vpos[2] + 1);
	return 1;
}

/*
CMD:carol(playerid, params[])
{
	#if defined Christmas
		new houseid = GetNearbyHouse(playerid);
		if(PlayerInfo[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot carol at a house that you own.");
		}
		if(PlayerInfo[playerid][pLastCarolTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only carol every 30 seconds.");
		}
		if(PlayerInfo[playerid][pLastHouseCarol] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have carolled at this house already.");
		}
		PlayerInfo[playerid][pLastHouseCarol] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_CAROL);
	#else
		SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Christmas!");
	#endif
	return 1;
}*/

stock ReturnLyrics(lyricid)
{
	new lyString[65];
	switch(lyricid)
	{
	    case 1: lyString = "Jingle bells, jingle bells, jingle all, the way!";
		case 2: lyString = "We wish you a merry christmas and a happy new year!";
		case 3: lyString = "I wanna wish you a merry christmas!";
		case 4: lyString = "Last christmas, i gave you my heart";
		case 5: lyString = "Santa claus is coming to town!";
	}
	return lyString;
}

stock CountTaxiDrivers()
{
	new count = 0;
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pTaxiFare] > 0)
		{
			count ++;
		}
	}
	return count;
}

/*CMD:trickortreat(playerid, params[])
{
	new houseid = GetNearbyHouse(playerid);
	new year, month, day;
	getdate(year, month, day);
	if(month == 10 && day == 31)
	{
		if(PlayerInfo[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot trick or treat at a house that you own.");
		}
		if(PlayerInfo[playerid][pLastToTTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only trick or treat every 30 seconds.");
		}
		if(PlayerInfo[playerid][pLastHouseToT] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have trick or treat at this house already.");
		}
		PlayerInfo[playerid][pLastHouseToT] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_ToT);
	}
	else SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Halloween!");
	return 1;
}*/

#if defined DISCORD
	CMD:setdiscord(playerid, params[]) {
		new targetid, name[16], id[8];

		if(PlayerInfo[playerid][pAdmin] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		if(sscanf(params, "us[16]s[8]", targetid, name, id))
		{
			SCM(playerid, COLOR_GREY2, "Usage: /setdiscord [playerid] [discordname] [tag] (ex. /setdiscord Jose 9885)");
			return 1;
		}
		PlayerInfo[targetid][pDiscordName] = name;
		PlayerInfo[targetid][pDiscordTag] = id;
		PlayerInfo[targetid][pVoiceChat] = 1;
		SM(targetid, COLOR_GREY2, "** You set your discord tag in-game to %s#%s. Type /vc to join voice chat.", name, id);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voicechat = 1, discordname = '%s', discordtag = '%s' WHERE uid = %i", name, id, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	CMD:vc(playerid, params[]) {
		new option[24];
		if(PlayerInfo[playerid][pVoiceChat] == 0) {
			return SCM(playerid,COLOR_GREY2,"You need to set your discord first. Ask administrators.");
		}
		if(sscanf(params, "s[24]", option))
		{
			SCM(playerid, COLOR_GREY2, "Usage: /vc [channel]");
			SCM(playerid, COLOR_GREY2, "Channel: waiting, rp1, rp2, rp3, rp4, rp5");
			SCM(playerid, COLOR_GREY2, "Robbery: rob1, rob2");
			switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
			{
				case FACTION_POLICE, FACTION_FEDERAL:
				{
					SCM(playerid, COLOR_GREY2, "Radio: pnp, dep");
				}
				case FACTION_MEDIC:
				{
					SCM(playerid, COLOR_GREY2, "Radio: doh, dep");
				}
				case FACTION_GOVERNMENT:
				{
					SCM(playerid, COLOR_GREY2, "Radio: gov, dep");
				}
			}

			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCLOBBY)); // waiting
			return 1;
		}
		if(!strcmp(option, "waiting", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCLOBBY)); // waiting
		}
		else if(!strcmp(option, "rp1", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to RP1 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCRP1));
		}
		else if(!strcmp(option, "rp2", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to RP2 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCRP2));
		}
		else if(!strcmp(option, "rp3", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to RP3 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCRP3));
		}
		else if(!strcmp(option, "rp4", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to RP4 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCRP4));
		}
		else if(!strcmp(option, "rp5", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to RP5 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCRP5));
		}
		else if(!strcmp(option, "rob1", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to ROB1 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCROB1));
		}
		else if(!strcmp(option, "rob2", true)) {
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to ROB2 ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCROB2));
		}

		else if(!strcmp(option, "pnp", true)) {
			if(!IsLawEnforcement(playerid)) {
				SCM(playerid, COLOR_GREY2, "** You are not police enforcer to use this radio.");
			}
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to PNP ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCPNP));
		}
		else if(!strcmp(option, "doh", true)) {
			if(GetFactionType(playerid) != FACTION_MEDIC)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this radio as you aren't a part of medic.");
			}
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to DOH ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCDOH));
		}
		else if(!strcmp(option, "gov", true)) {
			if(GetFactionType(playerid) != FACTION_GOVERNMENT)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this radio as you aren't a part of government.");
			}
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to GOV ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCGOV));
		}
		else if(!strcmp(option, "dep", true)) {
			if(PlayerInfo[playerid][pFaction] == -1)
			{
				return SCM(playerid, COLOR_GREY2, "You are not a part of any faction to use this radio.");
			}
			UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_REALRED, "(( Connected to DEP ))");
			DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(PlayerInfo[playerid][pDiscordName], PlayerInfo[playerid][pDiscordTag]), DCC_FindChannelById(VCDEP));
		}
		return 1;
	}

/*	DISCORD:dsetdiscord(DCC_Channel: channel, DCC_User: author, params[])
	{
		new username[MAX_PLAYER_NAME], discord[16],tag[8];
		if(channel != DCC_FindChannelById(TADMIN))
			return 1;

		if(sscanf(params, "s[24]s[16]s[8]", username,discord,tag))
		{
			return DCC_SendChannelMessage(channel, "Usage: /dsetdiscord [username] [discord] [tag]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT voicechat FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "DiscordSet", "sss", username, discord, tag);
		return 1;
	}

	DISCORD:dwhitelist(DCC_Channel: channel, DCC_User: author, params[])
	{
		new username[MAX_PLAYER_NAME];
		if(channel != DCC_FindChannelById(TADMIN))
			return 1;

		if(sscanf(params, "s[24]", username))
		{
			return DCC_SendChannelMessage(channel, "Usage: /dwhitelist [username]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "DOnAdminLockAccount", "s", username);
		return 1;

	}

	DISCORD:jowa(DCC_Channel: channel, DCC_User: author, params[])
	{
		DCC_SendChannelMessage(channel, "Wala kang jowa!");
		return 1;
	}

	DISCORD:dip(DCC_Channel: channel, DCC_User: author, params[])
	{
		DCC_SendChannelMessage(channel, "Ayan bobo, 51.79.146.116:7777!");
		return 1;
	}

	DISCORD:dooc(DCC_Channel: channel, DCC_User: author, params[])
	{
		if(channel != DCC_FindChannelById(TADMIN))
			return 1;

		if(isnull(params))
		{
			return DCC_SendChannelMessage(channel, "Usage: /dooc [text]");
		}

		SMA(COLOR_WHITE, "(( Discord "SERVER_BOT": %s ))", params);

		new string[128];
		format(string, sizeof(string), "(( Discord "SERVER_BOT": %s ))", params);
		DCC_SendChannelMessage(channel, string);
		return 1;
	}*/
#endif
